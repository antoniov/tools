#! /bin/bash
# -*- coding: utf-8 -*-
#
# Run coverall after successful test
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. $HOME/tools/travis_emulator $HOME/dev ${PYPATH//:/ } . .." "travis_emulator")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.2.24


run_coverage_test() {
# run_coverage_test pkglist
    if [ -n "$1" ]; then
      coverage_combine_n_report $1
    else
      run_coverage_1_test
    fi
    return $?
}

coverage_combine_n_report() {
# coverage_combine_n_report pkglist
    cd $PRJPATH
    local COVRF=.coverage
    if [ -f ./$COVRF ]; then
      rm -f ./$COVRF
    fi
    local pkglist=${1//,/ }
    for p in $pkglist; do
      if [ -f $p/$COVRF ]; then
        if [ -f ./$COVRF ]; then
          run_traced "coverage combine ./$COVRF $p/$COVRF"
        else
          run_traced "cp $p/$COVRF ./$COVRF"
        fi
      fi
    done
    coverage report
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -n "$COVERALLS_REPO_TOKEN" ]; then
        COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN coveralls
        sts=$STS_SUCCESS
      fi
    fi
    return $sts
}

run_coverage_1_test() {
    cd $PRJPATH
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ "$PRJNAME" != "Odoo" ]; then
        if [ ${opt_verbose:-0} -gt 0 ]; then
          echo "export COVERAGE_FILE=$(readlink -f ./.coverage)"
        fi
        export COVERAGE_FILE=$(readlink -f ./.coverage)
        if [ -f ./__main__.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run --source $PRJNAME __main__.py"
          fi
          DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run --source $PRJNAME __main__.py
          if [ ${opt_mis:-0} -gt 0 ]; then
            coverage report -m
          else
            coverage report
          fi
          sts=$?
        elif [ -f ./tests/test_$PRJNAME.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)"
          fi
          export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)
          if [ ${opt_dprj:-0} -gt 0 ]; then
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a ./tests/test_$PRJNAME.py"
            fi
            DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a ./tests/test_$PRJNAME.py
          else
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a --rcfile=$COVERAGE_PROCESS_START test_$PRJNAME.py"
            fi
            cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a --rcfile=$COVERAGE_PROCESS_START test_$PRJNAME.py
          fi
          if [ ${opt_mis:-0} -gt 0 ]; then
            coverage report -m
          else
            coverage report
          fi
          sts=$?
        else
          sts=$STS_FAILED
        fi
        if [ $sts -eq $STS_SUCCESS ]; then
          if [ -n "$COVERALLS_REPO_TOKEN" ]; then
            COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN coveralls
            sts=$STS_SUCCESS
          fi
        fi
      else
        if [ ${opt_mis:-0} -gt 0 ]; then
          coverage report -m
        else
          coverage report
        fi
        sts=$?
      fi
    else
      sts=$STS_SUCCESS
    fi
    return $sts
}


OPTOPTS=(h        j        n            q           r     t         V           v)
OPTDEST=(opt_help opt_dprj opt_dry_run  opt_verbose opt_r test_mode opt_version opt_verbose)
OPTACTI=(1        1        1            0           1     1         "*>"        "+")
OPTDEFL=(0        0        0            -1          01    0         ""          -1)
OPTMETA=("help"   "dprj"   "do nothing" "quiet"     ""    "test"    "version"   "verbose")
OPTHELP=("this help"\
 "execute tests in project dir rather in test dir"\
 "do nothing (dry-run)"\
 "silent mode"\
 "run rescricted mode (w/o parsing travis.yml file)"\
 "test mode (implies dry-run)"\
 "show version"\
 "verbose mode")
OPTARGS=(pkglist)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Run coverall after successfull test"\
  "(C) 2015-2019 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

[ "${MQT_DRY_RUN:-0}" == "1" ] && opt_dry_run=1
[ "${MQT_VERBOSE_MODE:-0}" == "1" ] && opt_verbose=1
[ "${MQT_VERBOSE_MODE:-1}" == "0" ] && opt_verbose=0
[ ${TRAVIS_DEBUG_MODE:-0} -ne 0 ] && opt_verbose=1

opts_travis
CFG_init
conf_default
link_cfg $DIST_CONF $TCONF
if [ $opt_verbose -gt 1 ]; then set -x; fi
init_travis
prepare_env_travis "coverage"

if [ -d $HOME/dev ]; then
  [ $opt_verbose -gt 0 ] && echo -e "\e[${PS_RUN_COLOR}m$pfx$xcmd\$ . $HOME/dev/activate_tools\e[${PS_TXT_COLOR}m"
  . $HOME/dev/activate_tools
else
  echo "!! Directory $HOME/dev not found!"
fi
if [ $opt_verbose -gt 0 ]; then
  echo -e "\e[${PS_HDR3_COLOR}mPYTHONPATH=$PYTHONPATH\e[${PS_TXT_COLOR}m"
  echo -e "\e[${PS_HDR3_COLOR}mBASH_CHECK_ENABLED=$BASH_CHECK_ENABLED LINT_CHECK_ENABLED=$LINT_CHECK_ENABLED $0 $__version__\e[${PS_TXT_COLOR}m"
fi

sts=$STS_SUCCESS
if [ $test_mode -gt 0 ]; then
  do_chkconfig
  exit $STS_SUCCESS
fi
check_4_travis
# run_coverage_test $pkglist
run_traced "coverage report"
exit $?
