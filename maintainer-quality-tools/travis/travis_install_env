#! /bin/bash
# -*- coding: utf-8 -*-
#
# Install packages to run travis tests
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2016-2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.2.41


conf_default() {
    if [ -z "$PS_TXT_COLOR" ]; then
      export PS_TXT_COLOR="0;97;40"
      export PS_RUN_COLOR="1;34;46"
      export PS_NOP_COLOR="35;40"
      export PS_HDR1_COLOR="30;42"
      export PS_HDR2_COLOR="30;43"
      export PS_HDR3_COLOR="30;47"
    fi
}


run_traced() {
    local xcmd="$1"
    local sts=$STS_SUCCESS
    local pfx=
    if [ "${1:0:1}" == "#" ]; then
      pfx=
    elif [ ${opt_dry_run:-0} -eq 0 ]; then
      pfx="\$ "
    else
      pfx="> "
    fi
    [ $opt_verbose -gt 0 -a ${opt_humdrum:-0} -eq 0 -a -n "$PS_RUN_COLOR" ] && echo -en "\e[${PS_RUN_COLOR}m$pfx$xcmd"
    [ $opt_verbose -gt 0 -a ${opt_humdrum:-0} -ne 0 -o -z "$PS_RUN_COLOR" ] && echo -en "$pfx$xcmd"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [[ "${1:0:1}" != "#" && ( "$2" != "nolocal" || $TRAVIS =~ (true|emulate) ) ]]; then
        eval "$xcmd"
        sts=$?
      fi
    fi
    [ ${opt_humdrum:-0} -eq 0 -a -n "$PS_TXT_COLOR" ] && echo -en "\e[${PS_TXT_COLOR}m\n"
    return $sts
}


cp_n_upd_odoo_conf() {
    local odoo_ver=$(echo $VERSION|grep -Eo '[0-9]*'|head -n1)
    if [ $odoo_ver -ge 10 ]; then
      local tgt=~/.odoorc
      local atgt=~/.openerp_serverrc
    else
      local tgt=~/.openerp_serverrc
      local atgt=
    fi
    [ -f $atgt ] && rm -f $atgt
    [ -f $tgt ] && rm -f $tgt
    if [ "$TRAVIS" == "true" ]; then
       return
    fi
    local t="$TRAVIS_SAVED_HOME/$(basename $tgt)"
    [ -n "$atgt" ] && local at="$TRAVIS_SAVED_HOME/$(basename $atgt)" || local at=
    [ -f $at ] && rm -f $at
    [ -f $t ] && rm -f $t
    return
    local pfx="odoo$odoo_ver"
    local pfx2=odoo
    local sfx=
    local ODOO_LOGFILE="False"
    local confn=/etc/odoo/${pfx}-server.conf
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx}.conf
    fi
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx2}-server.conf
    fi
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx2}.conf
    fi
    if [ ! -f $confn ]; then
      echo "File $confn not found!"
      exit 1
    fi
    touch $tgt
    while IFS=\| read -r line || [ -n "$line" ]; do
      if [[ $line =~ ^data_dir[[:space:]]*=[[:space:]]*.*Odoo$odoo_ver ]]; then
        line=$(echo "$line"|sed -e "s:Odoo$odoo_ver:Odoo-test:")
      elif [[ $line =~ ^logfile[[:space:]]*=[[:space:]]*[0-9A-Za-z]+  ]]; then
        line=$(echo "logfile = $ODOO_LOGFILE")
      elif [[ $line =~ ^pidfile[[:space:]]*=[[:space:]]*.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^xmlrpc_port[[:space:]]*=[[:space:]]*[0-9A-Za-z]+ ]]; then
        line="xmlrpc_port = $((18060+$odoo_ver))"
      elif [[ $line =~ ^NAME=.*odoo$odoo_ver.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.conf.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*$confn.* ]]; then
        line=$(echo "$line"|sed -e "s:$confn:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.pid.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.log.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^server_wide_modules[[:space:]]*=[[:space:]] ]]; then
        line="server_wide_modules = web"
      fi
      echo "$line">>$tgt
    done < "$confn"
}

git_clone_ocb() {
    ODOO_URL="https://github.com/$REMOTE/$REPO_NAME.git"
    echo -e "\e[${PS_HDR3_COLOR}m### Installing Odoo from $ODOO_URL\e[${PS_TXT_COLOR}m"
    if [[ "$TRAVIS" == "true" ]]; then
      run_traced "git clone --depth=50 https://github.com/$REMOTE/$REPO_NAME.git -b $BRANCH ${ODOO_PATH}"
      run_traced "git --work-tree=${ODOO_PATH} --git-dir=${ODOO_PATH}/.git remote rename origin $REMOTE"
    elif [ ! -L ${ODOO_PATH} ]; then
      if [[ "$REMOTE" == "oca" ]]; then
        majver=$(echo $BRANCH|grep -Eo [0-9]+|head -n1)
        if [[ ! -d $TRAVIS_SAVED_HOME/oca$majver ]]; then
          run_traced "git clone --depth=50 https://github.com/$REMOTE/$REPO_NAME.git -b $BRANCH ${ODOO_PATH}"
          run_traced "git --work-tree=${ODOO_PATH} --git-dir=${ODOO_PATH}/.git remote rename origin $REMOTE"
          run_traced "mv ${ODOO_PATH} $TRAVIS_SAVED_HOME/oca$majver"
        fi
        if [[ -d $TRAVIS_SAVED_HOME/oca$majver ]]; then
          SRCREPOPATH="$TRAVIS_SAVED_HOME/${REMOTE}${majver}"
        fi
      else
        SRCREPOPATH="$TRAVIS_SAVED_HOME/$BRANCH"
      fi
      run_traced "ln -s $SRCREPOPATH ${ODOO_PATH}"
    fi
    if [ ${TRAVIS_DEBUG_MODE:-0} -gt 2 ]; then
      run_traced "psql -l -U postgres"
    fi
}

set_pythonpath() {
# set_pythonpath(path file PIP)
    local PYPATH="${1//,/ }"
    PYPATH="${PYPATH//:/ }"
    local FSITE=$2
    local PIP=${3:-pip}
    local pth PYLIB x
    if [[ -n "$PYPATH" || -n "$FSITE" ]]; then
      PYLIB=$(dirname $($PIP --version|grep -Eo "from [^ ]+"|awk '{print $2}'))
      if [ -z "$PYLIB" ]; then
        PYLIB=$(findpkg "" "$HOME/virtualenv $HOME/python${TRAVIS_PYTHON_VERSION}_with_system_site_packages $HOME/local  $HOME/.local $HOME/lib64 $HOME/lib" "python${TRAVIS_PYTHON_VERSION} site-packages local lib64 lib" "python${TRAVIS_PYTHON_VERSION} site-packages local lib64 lib" "python${TRAVIS_PYTHON_VERSION} site-packages" "site-packages")
      fi
    fi
    if [ -n "$PYLIB" ]; then
      if [[ -n "$PYPATH" ]]; then
        if [ -f $PYLIB/sitecustomize.py ]; then
          if grep -q "import sys" $PYLIB/sitecustomize.py; then
            :
          else
            echo 'import sys' >> $PYLIB/sitecustomize.py
          fi
        else
          echo 'import sys' > $PYLIB/sitecustomize.py
        fi
        for pth in $PYPATH; do
          echo "if '$pth' not in sys.path:    sys.path.insert(0, '$pth')" >> $PYLIB/sitecustomize.py
          if echo ":$PYTHONPATH":|grep -q ":$pth:"; then
            x=${PYTHONPATH//$pth/}
            export $PYTHONPATH=${x//::/:}
          fi
        done
        [ "${PYTHONPATH:0:1}" == ":" ] && export $PYTHONPATH=${PYTHONPATH:1}
      fi
      if [[ -n "$FSITE" && -f $FSITE ]]; then
        if [ -f $PYLIB/sitecustomize.py ]; then
          if grep -q "import sys" $PYLIB/sitecustomize.py; then
            run_traced "tail $FSITE -n -1 >> $PYLIB/sitecustomize.py"
          else
            run_traced "cat $FSITE >> $PYLIB/sitecustomize.py"
          fi
        else
          run_traced "cp $FSITE $PYLIB"
        fi
        export PYTHONPATH=
      fi
    fi
}

check_pythonpath() {
# check_pythonpath(path python)
    local PYPATH="${1//,/ }"
    PYPATH="${PYPATH//:/ }"
    local PYTHON=${2:-python}
    local PYVER=$(python --version 2>&1|grep -Eo "[0-9]+"|head -n1)
    local pth PYLIB
    for pth in $PYPATH; do
      if [ "$PYVER" == "2" ]; then
        echo -e "import sys\nfor x in sys.path:\n  print x,"|$PYTHON|grep -q " $pth "
      else
        echo -e "import sys\nfor x in sys.path:\n  print (x,end=' ')"|$PYTHON|grep -q " $pth "
      fi
      if [ $? -ne 0 ]; then
        echo "Warning: sitecustomize.py without effect! Use PYTHONPATH method"
        [ -n "$PYTHONPATH" ] && export PYTHONPATH=$PYTHONPATH:$pth
        [ -z "$PYTHONPATH" ] && export PYTHONPATH=$pth
      fi
    done
}

install_n_activate_tools() {
    if [ -d $HOME/tools ]; then
      [ $opt_verbose -gt 0 ] && echo -e "\e[${PS_RUN_COLOR}m$pfx$xcmd\$ cd $HOME/tools\e[${PS_TXT_COLOR}m"
      pushd $HOME/tools > /dev/null
      [ ${TRAVIS_DEBUG_MODE:-0} -gt 2 ] && x=-p
      [ ${TRAVIS_DEBUG_MODE:-0} -le 2 ] && x=-qp
      run_traced "./install_tools.sh $x"
      [ $opt_verbose -gt 0 ] && echo -e "\e[${PS_RUN_COLOR}m$pfx$xcmd\$ . $HOME/dev/activate_tools\e[${PS_TXT_COLOR}m"
      . $HOME/dev/activate_tools
      popd > /dev/null
      [ ${TRAVIS_DEBUG_MODE:-0} -ge 2 ] && echo "PATH=$PATH"
      [ ${TRAVIS_DEBUG_MODE:-0} -ge 2 ] && echo "PYTHONPATH=$PYTHONPATH"
    fi
}


OPTOPTS=(h        b          j        K        H           n            q           T        t         V           v)
OPTDEST=(opt_help opt_branch opt_dprj opt_lint opt_humdrum opt_dry_run  opt_verbose opt_regr test_mode opt_version opt_verbose)
OPTACTI=(1        1          1        1        1           1            0           1        1         "*>"        "+")
OPTDEFL=(0        0          0        0        0           0            -1          0        0         ""          -1)
OPTMETA=("help"   "dprj"   "check"   ""        ""          "do nothing" "qiet"      "test"   "test"    "version"   "verbose")
OPTHELP=("this help"\
 "Odoo version"\
 "execute tests in project dir rather in test dir"\
 "do bash, flake8 and pylint checks"\
 "humdrum, display w/o colors"\
 "do nothing (dry-run)"\
 "silent mode"\
 "do regression tests"\
 "test mode (implies dry-run)"\
 "show version"\
 "verbose mode")
OPTARGS=(mode)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Install packages to run travis tests\n if supplied 'oca' executes travis_install_nightly"\
  "(C) 2016-2019 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

if [ -z "$TRAVIS_BUILD_DIR" ]; then
  echo "Invalid environment!"
  exit 1
fi
export PYTHONWARNINGS="ignore"
sts=$STS_SUCCESS
[ "${MQT_DRY_RUN:-0}" == "1" ] && opt_dry_run=1
[ "${MQT_VERBOSE_MODE:-0}" == "1" ] && opt_verbose=1
[ "${MQT_VERBOSE_MODE:-1}" == "0" ] && opt_verbose=0
[ ${TRAVIS_DEBUG_MODE:-0} -ne 0 ] && opt_verbose=1
if [ ${opt_regr:-0} -gt 0 ]; then
  LINT_CHECK="0"
  TESTS="1"
fi
if [ ${opt_lint:-0} -gt 0 ]; then
  BASH_CHECK="1"
  LINT_CHECK="1"
fi
LINT_OR_TEST_CHECK="0"
[ "${LINT_CHECK:-0}" == "1" ] && LINT_OR_TEST_CHECK="1"
[ "${LINT_CHECK:-0}" == "0" -a "${TESTS:-0}" == "1" ] && LINT_OR_TEST_CHECK="1"
conf_default
[ -z "MQT_TEST_MODE" ] && IFS="/" read MQT_TEST_MODE PKGNAME <<< "${TRAVIS_REPO_SLUG}"
MQT_TEST_MODE=${MQT_TEST_MODE,,}
[[ ! $MQT_TEST_MODE =~ (oca|zero) ]] && MQT_TEST_MODE=zero
[ -z "$mode" ] && mode=$MQT_TEST_MODE
if [[ "$TRAVIS" == "true" && "$MQT_TEST_MODE" == "oca" ]]; then
  run_traced "$TDIR/travis_install_nightly"
  exit $?
fi

export MQT_TEST_MODE=$mode
[ -z "$PKGNAME" ] && PKGNAME=$(basename $TRAVIS_BUILD_DIR)
[[ ! "${TRAVIS_PYTHON_VERSION:0:1}" == "3" ]] && PIP=pip || PIP=pip3
[[ ! "${TRAVIS_PYTHON_VERSION:0:1}" == "3" ]] && PYTHON=python || PYTHON=python3

if [[ ! $TRAVIS =~ (true|emulate) && -d $HOME/.local && ! "$SYSTEM_SITE_PACKAGES" == "true" ]]; then
  PIP_OPTS="--user"
else
  PIP_OPTS=
fi
install_n_activate_tools
if [ -d $HOME/dev ]; then
  set_pythonpath "$HOME/tools" "$HOME/dev/sitecustomize.py" $PIP
  [ ${TRAVIS_DEBUG_MODE:-0} -ge 2 ] && echo "PATH=$PATH"
  [ ${TRAVIS_DEBUG_MODE:-0} -ge 2 ] && echo "PYTHONPATH=$PYTHONPATH"
else
  echo "!! Error! Directory $HOME/dev not found!"
fi
check_pythonpath "$HOME/tools" $PYTHON
if [ "${TRAVIS_PYTHON_VERSION:0:1}" == "3" ]; then
  echo -e "import sys\nprint('sys.path=%s' % sys.path)\n"|python3
else
  echo -e "import sys\nprint 'sys.path=%s' % sys.path\n"|python
fi
run_traced "$PIP install -q pip --upgrade" "nolocal"
run_traced "$PIP install -q future --upgrade" "nolocal"
MGRODOO=$(which manage_odoo 2>/dev/null)
if [[ -z "$MGRODOO" ]]; then
  if [ "$MQT_TEST_MODE" == "tools" ]; then
    [ -f $TRAVIS_BUILD_DIR/clodoo/manage_odoo ] && MGRODOO=$(readlink -e $TRAVIS_BUILD_DIR/clodoo/manage_odoo) || MGRODOO=manage_odoo
  elif [ -n "$YML_mgrodoo" ]; then
    MGRODOO=$YML_mgrodoo
  else
    [ -f $HOME/tools/clodoo/manage_odoo ] && MGRODOO=$(readlink -e $HOME/tools/clodoo/manage_odoo) || MGRODOO=manage_odoo
  fi
fi
LISTREQ=$(which list_requirements.py 2>/dev/null)
if [[ -z "$LISTREQ" ]]; then
  if [ -n "$YML_mgrodoo" ]; then
    LISTREQ=$(dirname $YML_mgrodoo)/list_requirements.py
  else
    [ -f $HOME/tools/clodoo/list_requirements.py ] && LISTREQ=$HOME/tools/clodoo/list_requirements.py || LISTREQ=list_requirements.py
  fi
fi
LISA=$(which lisa 2>/dev/null)
if [[ -z "$LISA" ]]; then
  if [ -n "$YML_lisa" ]; then
    LISA=$YML_lisa
  else
    LISA=$HOME/tools/lisa/lisa
    [ -f $TDIR/../../lisa/lisa ] && LISA=$(readlink -e $TDIR/../../lisa/lisa)
    [ -f $TDIR/../lisa/lisa ] && LISA=$(readlink -e $TDIR/../lisa/lisa)
  fi
fi
if [ $opt_verbose -gt 0 ]; then
  echo -e "\e[${PS_HDR3_COLOR}m$0 $__version__\e[${PS_TXT_COLOR}m"
  echo -e "\e[${PS_TXT_COLOR}m\$ alias pip=$(which $PIP).$($PIP --version)\e[${PS_HDR3_COLOR}m"
  echo -e "\e[${PS_TXT_COLOR}m\$ alias lisa=$LISA.$($LISA -V)\e[${PS_HDR3_COLOR}m"
  echo -e "\e[${PS_TXT_COLOR}m\$ alias manage_odoo=$MGRODOO.$($MGRODOO -V)\e[${PS_HDR3_COLOR}m"
  echo -e "\e[${PS_TXT_COLOR}m\$ alias list_requirements.py=$LISTREQ.$($LISTREQ -V 2>&1)\e[${PS_HDR3_COLOR}m"
  echo -e "\e[${PS_TXT_COLOR}m\$ TRAVIS_DEBUG_MODE=$TRAVIS_DEBUG_MODE\e[${PS_HDR3_COLOR}m"
  echo -e "\e[${PS_TXT_COLOR}m\$ MQT_TEST_MODE=$MQT_TEST_MODE\e[${PS_HDR3_COLOR}m"
  [ "$MQT_TEST_MODE" == "tools" ] && echo -e "\e[${PS_TXT_COLOR}m# PATH=$PATH\e[${PS_HDR3_COLOR}m"
  [ "$MQT_TEST_MODE" == "tools" ] && echo -e "\e[${PS_TXT_COLOR}m# OPTS=$OPTS\e[${PS_HDR3_COLOR}m"
  [ -n "$PYPI_CACHED" ] && echo -e "\e[${PS_TXT_COLOR}m# PYPI_CACHED=$PYPI_CACHED\e[${PS_HDR3_COLOR}m"
  echo -e "\e[${PS_TXT_COLOR}m# PYTHONPATH=$PYTHONPATH\e[${PS_HDR3_COLOR}m"
  if [ "${TRAVIS_PYTHON_VERSION:0:1}" == "3" ]; then
    echo -e "import sys\nprint('sys.path=%s' % sys.path)\n"|python3
  else
    echo -e "import sys\nprint 'sys.path=%s' % sys.path\n"|python
  fi
fi
# Build secure environment (python2)
echo -e "\e[${PS_HDR3_COLOR}m### Build Secure Environment\e[${PS_TXT_COLOR}m"
# for p in build-essential libssl-dev libffi-dev python-dev; do
for p in build-essential libssl-dev libffi-dev; do
  [[ "$TRAVIS" == "false" ]] || eval $LISA status -q $p
  [ $? -ne 0 ] && run_traced "$LISA install $p" "nolocal"
done
if [[ ! "$TRAVIS" == "false" ]]; then
  for p in urllib3[secure] cryptography pyOpenSSL idna certifi; do
    run_traced "$PIP install $p --upgrade --ignore-installed" "nolocal"
  done
fi
# Secure environment OK
echo -e "\e[${PS_HDR3_COLOR}m### Build Base Environment\e[${PS_TXT_COLOR}m"
for p in os0 configparser z0lib; do
  [[ "$TRAVIS" == "false" ]] || eval $LISA status -q $p
  [ $? -ne 0 ] && run_traced "$PIP install $p $PIP_OPTS" "nolocal"
done
[ -z "${VERSION}" ] && VERSION="$opt_branch"
[ -z "${ODOO_BRANCH}"  ] && export ODOO_BRANCH=${VERSION}
: ${MQT_TEMPLATE_DB:="openerp_template"}
: ${MQT_TEST_DB:="openerp_test"}
: ${ODOO_REPO:="odoo/odoo"}
IFS="/" read -a REPO <<< "${ODOO_REPO}"
export REMOTE="${REPO[0],,}"
export REPO_NAME="${REPO[1]}"
export BRANCH="${ODOO_BRANCH}"
[[ $BRANCH == *"/"*  ]] && export BRANCH=${BRANCH/\//-}
export ODOO_PATH=${HOME}/$REPO_NAME-$ODOO_BRANCH

if [ "$MQT_TEST_MODE" == "tools" ]; then
  echo -e "\e[${PS_HDR3_COLOR}m### Build Tools Environment\e[${PS_TXT_COLOR}m"
  if [ -z "$PYPI_CACHED" ]; then
    if [[ ! "$TRAVIS" == "false" ]]; then
      echo "- reqs=\$($LISTREQ -t python -s ' ' -qBTR)"
      reqs="$($LISTREQ -t python -s ' ' -qBTR)"
      for p in $reqs; do  
        eval $LISA status -q $f &>/dev/null
        if [ $? -ne 0 ]; then
          run_traced "$PIP install $p $PIP_OPTS" "nolocal"
        else
          run_traced "$PIP install $p --upgrade" "nolocal"
        fi
      done
    fi
  fi
  if [ "${ODOO_REPO}" != "odoo/odoo" ]; then
    git_clone_ocb
  fi
  if [ $opt_verbose -gt 0 ]; then
    echo "Content of ${HOME}:"
    ls -l ${HOME}
    echo "Content of ${TRAVIS_BUILD_DIR}:"
    ls -l ${TRAVIS_BUILD_DIR}
    echo "Content of ${HOME}/dev:"
    ls -l ${HOME}/dev
  fi
  exit $sts
else
  if [ "${LINT_CHECK:-1}" != "0" ]; then
    NODE_VER=$(node --version|grep -Eo "[0-9]+"|head -n1)
    if [ $NODE_VER -lt 6 -a -f "${HOME}/.nvm/nvm.sh" ]; then
      [ ${TRAVIS_DEBUG_MODE:-0} -gt 2 ] && echo "1> node version: $NODE_VER"
      CURRENT_NODE=$(which node)
      source ${HOME}/.nvm/nvm.sh
      nvm install 6
      run_traced "ln -sf $(nvm which 6) $CURRENT_NODE"
      [ ${TRAVIS_DEBUG_MODE:-0} -gt 2 ] && echo "2> node version: $(node --version)"
    fi
    echo -e "\e[${PS_HDR3_COLOR}m### Build Test Environment\e[${PS_TXT_COLOR}m"
    run_traced "$PIP install --upgrade --pre --no-deps git+https://github.com/OCA/pylint-odoo.git $PIP_OPTS" "nolocal"   # To use last version ever
    if [[ $TRAVIS =~ (true|emulate) ]]; then
      run_traced "npm install -g eslint"
    else
      run_traced "npm install eslint"
    fi
  fi
  if [ "${TESTS}" == "1" ]; then
    echo -e "\e[${PS_HDR3_COLOR}m### Install Packages for Base Environment\e[${PS_TXT_COLOR}m"
    NODE_VER=$(node --version|grep -Eo "[0-9]+"|head -n1)
    if [ $NODE_VER -lt 6 ]; then
      x=$(which nodejs 2>/dev/null)
      [[ -z "$x" ]] && x=$(which node 2>/dev/null)
      run_traced "ln -s $x $HOME/maintainer-quality-tools/travis/node"
      [ $opt_verbose -gt 0 ] && echo "3> node version: $(node --version)"
    fi
    if [[ $TRAVIS =~ (true|emulate) ]]; then
      run_traced "npm install -g less@3.0.4 less-plugin-clean-css"
      x=$(find $(npm bin -g 2>/dev/null) -name lessc 2>/dev/null)
      [ -n "$x" ] && run_traced "ln -s $x $HOME/maintainer-quality-tools/travis/lessc"
    else
      run_traced "npm install less@3.0.4 less-plugin-clean-css"
      x=$(find $(npm bin) -name lessc 2>/dev/null)
      [ -n "$x" ] && run_traced "ln -s $x $HOME/maintainer-quality-tools/travis/lessc"
    fi
    lessc --version
    [ -f $VIRTUAL_ENV/lib/python${TRAVIS_PYTHON_VERSION}/no-global-site-packages.txt ] && run_traced "rm -f $VIRTUAL_ENV/lib/python${TRAVIS_PYTHON_VERSION}/no-global-site-packages.txt"
    [ -z "${WKHTMLTOPDF_VERSION}" ] && export WKHTMLTOPDF_VERSION="0.12.4"
    [ -n "$(which example.com 2>/dev/null)" ] && CUR_WKHTMLTOPDF_VERSION=$(wkhtmltopdf --version|grep -Eo [0-9.]+|head -n1) || CUR_WKHTMLTOPDF_VERSION=
    if [[ "$CUR_WKHTMLTOPDF_VERSION" == "$WKHTMLTOPDF_VERSION" ]]; then
      [ $opt_verbose -gt 0 ] && echo "Installed version of wkhtmltopdf is $WKHTMLTOPDF_VERSION"
    else
      [ $opt_verbose -gt 0 ] && echo "Installing wkhtmltopdf version $WKHTMLTOPDF_VERSION (current is $CUR_WKHTMLTOPDF_VERSION)"
      FH="Debian"
      MACHARCH="x86_64"
      [ -x $HOME/tools/z0lib/xuname ] && FH=$($HOME/tools/z0lib/xuname -f)
      [ -x $HOME/tools/z0lib/xuname ] && MACHARCH=$($HOME/tools/z0lib/xuname -m) 
      mkdir wkhtmltox.rpm_files
      pushd wkhtmltox.rpm_files > /dev/null
      if [[ "$FH" == "RHEL" ]]; then
        dist=$($HOME/tools/z0lib/xuname -d)
        dist=${dist,,}$($HOME/tools/z0lib/xuname -v|grep -Eo [0-9]|head -n1)
        pkgext=".rpm"
        if [[ ${WKHTMLTOPDF_VERSION} == "0.12.5" ]]; then
          wkhtmltopdf_wget="wkhtmltox-${WKHTMLTOPDF_VERSION}_1-${dist}-amd64.rpm"
        elif [[ ${WKHTMLTOPDF_VERSION} == "0.12.4" ]]; then
          wkhtmltopdf_wget="wkhtmltox-${WKHTMLTOPDF_VERSION}_linux-generic-amd64.tar.xz"
          pkgext=".xz"
        else
          if [[ "$MACHARCH" == "x86_64" ]]; then
            wkhtmltopdf_wget="wkhtmltox-${WKHTMLTOPDF_VERSION}_linux-${dist}-amd64.rpm"
          else
            wkhtmltopdf_wget="wkhtmltox-${WKHTMLTOPDF_VERSION}_linux-${dist}-i386.rpm"
          fi
        fi
      elif [[ "$FH" == "Debian" ]]; then
        pkgext=".deb"
        if [[ ${WKHTMLTOPDF_VERSION} == "0.12.5" ]]; then
          wkhtmltopdf_wget="wkhtmltox_${WKHTMLTOPDF_VERSION}-1.$(lsb_release -sc)_amd64.deb"
        elif [[ ${WKHTMLTOPDF_VERSION} == "0.12.4" ]]; then
          wkhtmltopdf_wget="wkhtmltox-${WKHTMLTOPDF_VERSION}_linux-generic-amd64.tar.xz"
          pkgext=".xz"
        else
          if [[ "$MACHARCH" == "x86_64" ]]; then
            wkhtmltopdf_wget="wkhtmltox-${WKHTMLTOPDF_VERSION}_linux-$(lsb_release -sc)-amd64.deb"
          else
            wkhtmltopdf_wget="wkhtmltox-${WKHTMLTOPDF_VERSION}_linux-$(lsb_release -sc)-i386.deb"
          fi
        fi
        run_traced "wget -q --timeout=240 https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/${WKHTMLTOPDF_VERSION}/${wkhtmltopdf_wget} -O wkhtmltox.deb"
      fi
      run_traced "wget -q --timeout=240 https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/${WKHTMLTOPDF_VERSION}/${wkhtmltopdf_wget} -O wkhtmltox${pkgext}"
      if [ "$pkgext" == ".rpm" ]; then
        run_traced "rpm2cpio wkhtmltox${pkgext} | cpio -idm"
        run_traced "cp ./usr/local/bin/wkhtmltopdf ${HOME}/maintainer-quality-tools/travis/wkhtmltopdf"
      elif [ "$pkgext" == ".deb" ]; then
        run_traced "dpkg --extract wkhtmltox${pkgext} wkhtmltox.deb_files"
        run_traced "cp wkhtmltox.deb_files/usr/local/bin/wkhtmltopdf ${HOME}/maintainer-quality-tools/travis/wkhtmltopdf"
        rm -r wkhtmltox.deb*
      else
        run_traced "tar -xf wkhtmltox${pkgext}"
        run_traced "cp ./wkhtmltox/bin/wkhtmltopdf ${HOME}/maintainer-quality-tools/travis/wkhtmltopdf"
        rm -fr ./wkhtmltox
      fi
      popd > /dev/null
      rm -fR wkhtmltox.rpm_files
      CUR_WKHTMLTOPDF_VERSION=$(wkhtmltopdf --version|grep -Eo [0-9.]+|head -n1)
      [ $opt_verbose -gt 0 ] && echo "Current version of wkhtmltopdf is $CUR_WKHTMLTOPDF_VERSION"
    fi
    if [ "${WEBSITE_REPO}" == "1" ]; then
      if [ -f $HOME/.rvm/scripts/rvm ]; then
        source $HOME/.rvm/scripts/rvm
      elif [ -f /usr/local/rvm/scripts/rvm ]; then
        source /usr/local/rvm/scripts/rvm
      else
        echo "File rvm not found! rvm should be not work!"
      fi
      run_traced "rvm install ruby --latest"
      run_traced "rvm use ruby --latest"
      # Uninstall current versions to be sure that
      # the correct version will be installed
      run_traced "gem uninstall -aIx bootstrap-sass compass sass"
      run_traced "gem install compass bootstrap-sass"
    fi
    # Update PhantomJS (v10 compat)
    if [ "${PHANTOMJS_VERSION}" != "OS" ]; then
      run_traced "npm install --prefix ${TRAVIS_BUILD_DIR} \"phantomjs-prebuilt@${PHANTOMJS_VERSION:=latest}\""
      run_traced "ln -s \"${TRAVIS_BUILD_DIR}/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs\" \"${HOME}/maintainer-quality-tools/travis/phantomjs\""
    fi
    if [ "${CHROME_TEST}" == "1" ]; then
      run_traced "google-chrome --version"
    fi
  fi
  if [[ "$PKGNAME" == "OCB" ]]; then
    echo -e "\e[${PS_HDR3_COLOR}m### Tested repository is OCB\e[${PS_TXT_COLOR}m"
    if [[ $TRAVIS =~ (true|emulate) ]]; then
      run_traced "ln -s ${TRAVIS_BUILD_DIR} ${ODOO_PATH}"
    elif [ ! -L ${ODOO_PATH} ]; then
      run_traced "ln -s ${TRAVIS_BUILD_DIR} ${ODOO_PATH}"
    fi
  else
    git_clone_ocb
  fi
  if [ "${TESTS}" != "1" ]; then
    dopts=
    if [ -z "$PYPI_CACHED" ]; then
      if [[ "$TRAVIS" == "false" ]]; then
        run_traced "$MGRODOO requirements -nLBb '.' -vsy -O$MQT_TEST_MODE -o${ODOO_PATH} -p${TRAVIS_PYTHON_VERSION:0:1}"
      else
        run_traced "$MGRODOO requirements -LBb '.' -vsy -O$MQT_TEST_MODE -o${ODOO_PATH} -p${TRAVIS_PYTHON_VERSION:0:1}"
      fi
    fi
    run_traced "cp ${HOME}/maintainer-quality-tools/cfg/.coveragerc ."
    if [[ $TRAVIS =~ (true|emulate) ]]; then
      if [ $opt_verbose -gt 0 ]; then
        echo "- reqs=\$($LISTREQ -b$VERSION -p'.' $dopts -t python -s ' ' -qBTR)"
        reqs="$($LISTREQ -b$VERSION -p'.' $dopts -t python -s ' ' -qBTR)"
        reqs=$(echo "$reqs"|tr " " "\n"|sort|tr "\n" " ")
        for pkg in $reqs; do
          v=$($PIP show $pkg|grep "^[Vv]ersion"|awk '{print $2}')
          echo "-- $pkg $v"
        done
      fi
    fi
  else
    dopts=
    mkdir -p ${HOME}/dependencies
    cp_n_upd_odoo_conf
    run_traced "$TDIR/clone_oca_dependencies"
    sts=$?
    if [ $sts -ne 0 ]; then
      echo "- Error cloning dependencies"
      exit $sts
    fi
    if [[ "$PKGNAME" == "OCB" ]]; then
      ocb_dir='.'
      dependencies_dir=${HOME}/dependencies
    else
      ocb_dir=${ODOO_PATH}
      dependencies_dir="$TRAVIS_BUILD_DIR,${HOME}/dependencies"
    fi
    dopts="-d$dependencies_dir"
    if [ -z "$PYPI_CACHED" ]; then
      if [[ "$TRAVIS" == "false" ]]; then
        run_traced "$MGRODOO requirements -nLBb $ocb_dir $dopts -vsy -O$MQT_TEST_MODE -o${ODOO_PATH} -p${TRAVIS_PYTHON_VERSION:0:1}"
      else
        run_traced "$MGRODOO requirements -LBb $ocb_dir $dopts -vsy -O$MQT_TEST_MODE -o${ODOO_PATH} -p${TRAVIS_PYTHON_VERSION:0:1}"
      fi
    fi
    run_traced "cp ${HOME}/maintainer-quality-tools/cfg/.coveragerc ."
    if [[ $ODOO_TEST_SELECT == "APPLICATIONS" ]]; then
      if [[ -f "${TRAVIS_BUILD_DIR}/addons/website/tests/test_crawl.py" ]]; then
        run_traced "sed -i \"s/self.url_open(url)/self.url_open(url, timeout=100)/g\" ${TRAVIS_BUILD_DIR}/addons/website/tests/test_crawl.py"
      elif [[ -f "${ODOO_PATH}/addons/website/tests/test_crawl.py" ]]; then
        run_traced "sed -i \"s/self.url_open(url)/self.url_open(url, timeout=100)/g\" ${ODOO_PATH}/addons/website/tests/test_crawl.py"
      fi
    elif [[ $ODOO_TEST_SELECT == "LOCALIZATION" ]]; then
      if [[ -f "${TRAVIS_BUILD_DIR}/addons/account/__manifest__.py" ]]; then
        run_traced "sed -i \"/'_auto_install_l10n'/d\" ${TRAVIS_BUILD_DIR}/addons/account/__manifest__.py"
      elif [[ -f "${ODOO_PATH}/addons/account/__manifest__.py" ]]; then
        run_traced "sed -i \"/'_auto_install_l10n'/d\" ${ODOO_PATH}/addons/account/__manifest__.py"
      elif [[ -f "${TRAVIS_BUILD_DIR}/addons/account/__openerp__.py" ]]; then
        run_traced "sed -i \"/'_auto_install_l10n'/d\" ${TRAVIS_BUILD_DIR}/addons/account/__openerp__.py"
      elif [[ -f "${ODOO_PATH}/addons/account/__openerp__.py" ]]; then
        run_traced "sed -i \"/'_auto_install_l10n'/d\" ${ODOO_PATH}/addons/account/__openerp__.py"
      fi
    fi
    if [[ -f "${TRAVIS_BUILD_DIR}/odoo/tests/common.py" ]]; then
      run_traced "sed -i \"s/'phantomjs'/'disable_phantomjs'/g\" ${TRAVIS_BUILD_DIR}/odoo/tests/common.py"
    elif [[ -f "${ODOO_PATH}/odoo/tests/common.py" ]]; then
      run_traced "sed -i \"s/'phantomjs'/'disable_phantomjs'/g\" ${ODOO_PATH}/odoo/tests/common.py"
    fi
    # FIX BUG:  pillow require docutils 0.12 but doc packages install docutils >= 0.13
    run_traced "pip install pillow==3.4.2 -U -I"
    if [ $opt_verbose -gt 0 ]; then
      echo "Content of ${HOME}:"
      ls -l ${HOME}
      echo "Content of ${TRAVIS_BUILD_DIR}:"
      ls -l ${TRAVIS_BUILD_DIR}
      echo "Content of ${HOME}/dependencies:"
      ls -l ${HOME}/dependencies
    fi
  fi
fi
echo -e "\e[${PS_TXT_COLOR}m"
exit $sts
