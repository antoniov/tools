#! /bin/bash
# -*- coding: utf-8 -*-
#
# Install packages to run travis tests
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2016-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.1.25


cp_n_upd_odoo_conf() {
    local odoo_ver=$(echo $VERSION|grep -Eo '[0-9]*'|head -n1)
    if [ $odoo_ver -ge 10 ]; then
      local tgt=~/.odoorc
      local atgt=~/.openerp_serverrc
    else
      local tgt=~/.openerp_serverrc
      local atgt=
    fi
    [ -f $atgt ] && rm -f $atgt
    [ -f $tgt ] && rm -f $tgt
    if [ "$TRAVIS" == "true" ]; then
       return
    fi
    local t="$TRAVIS_SAVED_HOME/$(basename $tgt)"
    [ -n "$atgt" ] && local at="$TRAVIS_SAVED_HOME/$(basename $atgt)" || local at=
    [ -f $at ] && rm -f $at
    [ -f $t ] && rm -f $t
    return
    local pfx="odoo$odoo_ver"
    local pfx2=odoo
    local sfx=
    local ODOO_LOGFILE="False"
    local confn=/etc/odoo/${pfx}-server.conf
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx}.conf
    fi
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx2}-server.conf
    fi
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx2}.conf
    fi
    if [ ! -f $confn ]; then
      echo "File $confn not found!"
      exit 1
    fi
    touch $tgt
    while IFS=\| read -r line || [ -n "$line" ]; do
      if [[ $line =~ ^data_dir[[:space:]]*=[[:space:]]*.*Odoo$odoo_ver ]]; then
        line=$(echo "$line"|sed -e "s:Odoo$odoo_ver:Odoo-test:")
      elif [[ $line =~ ^logfile[[:space:]]*=[[:space:]]*[0-9A-Za-z]+  ]]; then
        line=$(echo "logfile = $ODOO_LOGFILE")
      elif [[ $line =~ ^pidfile[[:space:]]*=[[:space:]]*.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^xmlrpc_port[[:space:]]*=[[:space:]]*[0-9A-Za-z]+ ]]; then
        line="xmlrpc_port = $((18060+$odoo_ver))"
      elif [[ $line =~ ^NAME=.*odoo$odoo_ver.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.conf.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*$confn.* ]]; then
        line=$(echo "$line"|sed -e "s:$confn:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.pid.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.log.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^server_wide_modules[[:space:]]*=[[:space:]] ]]; then
        line="server_wide_modules = web"
      fi
      echo "$line">>$tgt
    done < "$confn"
}


OPTOPTS=(h        b          j        K         n            q           T        t         V           v)
OPTDEST=(opt_help opt_branch opt_dprj opt_check opt_dry_run  opt_verbose opt_regr test_mode opt_version opt_verbose)
OPTACTI=(1        1          1        1         1            0           1        1         "*>"        "+")
OPTDEFL=(0        0          0        0         0            -1          0        0         ""          -1)
OPTMETA=("help"   "dprj"   "check"   "do nothing" "qiet"      "test"   "test"    "version"   "verbose")
OPTHELP=("this help"\
 "Odoo version"\
 "execute tests in project dir rather in test dir"\
 "do bash, flake8 and pylint checks"\
 "do nothing (dry-run)"\
 "silent mode"\
 "do regression tests"\
 "test mode (implies dry-run)"\
 "show version"\
 "verbose mode")
OPTARGS=(mode)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Install packages to run travis tests\n if supplied 'oca' executes travis_install_nightly"\
  "(C) 2016-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

sts=$STS_SUCCESS
if [ "${MQT_DRY_RUN:-0}" == "1" ]; then opt_dry_run=1; fi
if [ "${MQT_VERBOSE_MODE:-0}" == "1" ]; then opt_verbose=1; fi
if [ "${MQT_VERBOSE_MODE:-1}" == "0" ]; then opt_verbose=0; fi
if [ ${opt_regr:-0} -gt 0 ]; then
  LINT_CHECK="0"
  TESTS="1"
fi
if [ ${opt_check:-0} -gt 0 ]; then
  BASH_CHECK="1"
  LINT_CHECK="1"
fi
if [ "${BASH_CHECK:-0}" == "1" ]; then BASH_CHECK_ENABLED=1; else BASH_CHECK_ENABLED=0; fi
if [ "${LINT_CHECK:-0}" == "1" ]; then LINT_CHECK_ENABLED=1; else LINT_CHECK_ENABLED=0; fi
if [ "${LINT_CHECK:-1}" == "0" ]; then LINT_CHECK_DISABLED=1; else LINT_CHECK_DISABLED=0; fi
if [ "${TESTS:-0}" == "1" ]; then TEST_CHECK_ENABLED=1; else TEST_CHECK_ENABLED=0; fi
if [ -z "${TESTS}" ]; then TESTS_UNSPECIFIED=1; else TESTS_UNSPECIFIED=0; fi
if [ "${TRANSIFEX_CHECK:-0}" == "1" ]; then TRANSIFEX_CHECK_ENABLED=1; else TRANSIFEX_CHECK_ENABLED=0; fi
[ -z "MQT_TEST_MODE" ] && IFS="/" read MQT_TEST_MODE dummy <<< "${TRAVIS_REPO_SLUG}"
MQT_TEST_MODE=${MQT_TEST_MODE,,}
[[ ! " oca oia zero " =~ " $MQT_TEST_MODE " ]] && MQT_TEST_MODE=zero
[ -z "$mode" ] && mode=$MQT_TEST_MODE
if [ "${LINT_CHECK}" != "0" ]; then
  :
fi
PIP=pip
if [ "${TRAVIS_PYTHON_VERSION:0:1}" == "3" ]; then
  [ -f /usr/bin/pip3.6 ] && PIP=/usr/bin/pip3.6
  [ -f /usr/bin/pip3.5 ] && PIP=/usr/bin/pip3.5
  [ -f /usr/bin/pip3.4 ] && PIP=/usr/bin/pip3.4
fi
[ $opt_verbose -gt 0 -o "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ alias pip=$PIP"
if [ "$mode" == "tools" ]; then
  if [ "${TRAVIS}" == "true" ]; then
    [ -f $TDIR/../../lisa/lisa ] && LISA=$(readlink -e $TDIR/../../lisa/lisa) || LISA=lisa
  elif [ -n "$YML_lisa" ]; then
    LISA=$YML_lisa
  else
    LISA=$HOME/tools/lisa/lisa
  fi
  [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ LISA=$LISA"
  for p in oerplib odoorpc os0 zerobug clodoo; do
    eval $LISA status -q $opts $f
    if [ $? -eq 0 ]; then
      $LISA install -qy $f
    fi
  done
  exit $sts
elif [ "${TESTS}" != "1" ]; then
  # pip install -q os0 z0lib --user
  if [ -z "${VERSION}" ] ; then
    VERSION="$opt_branch"
  fi
  if [ -z "${ODOO_BRANCH}"  ] ; then
    export ODOO_BRANCH=${VERSION}
  fi
  [ -f $TDIR/../lisa/lisa ] && LISA=$(readlink -e $TDIR/../lisa/lisa) || LISA=lisa
  [ $opt_verbose -gt 0 -o "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ alias lisa=$LISA"
  breqs=$(list_requirements.py -b$VERSION -p'.' $dopts -t bin -s ' ' -qT)
  [ $opt_verbose -gt 0 -o "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ breqs=$breqs"
  for f in $breqs; do
    pkg=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|head -n1)
    if [[ $HOSTNAME =~ shs[a-z0-9]+ && "$USER" == "odoo" && "$opt_pyver" != "3"  ]]; then
      echo "Check for $f"
    elif [ "$f" == "$pkg" ]; then
      eval $LISA status -q $opts $f
      [ $? -ne 0 ] && run_traced "$LISA install -q $opts $f"
    fi
  done
  preqs="$(list_requirements.py -b$VERSION -p'.' $dopts -t python -s ' ' -qPT)"
  [ $opt_verbose -gt 0 -o "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ preqs=$preqs"
  for f in $preqs; do
    if [ $EUID -eq 0 ]; then
      run_traced "$PIP install -q $f --upgrade"
    else
      run_traced "$PIP install -q $f --upgrade --user"
    fi
  done
  for f in $preqs; do
    op=$(echo "$f"|grep -Eo '[<=>]*'|head -n1)
    pkg=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|head -n1)
    reqver=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|tr "\n" " "|awk '{print $2}')
    if [ -n "$reqver" ]; then
      curver=$($PIP show $pkg|grep ^[Vv]ersion|awk -F: '{print $2}'|tr -d ', \r\n\(\)')
      if [[ ($op == "==" && ! $curver == $reqver) || ($op == "<" && ! $curver < $reqver) || ($op == ">" && ! $curver > $reqver) || ($op == ">=" && $curver < $reqver) || ($op == "<=" && $curver > $reqver) ]]; then
        echo "Update '$pkg' version '$curver' with version '$reqver'"
        if [ $EUID -eq 0 ]; then
          run_traced "$PIP install -q $f --upgrade --no-deps"
        else
          run_traced "$PIP install -q $f --upgrade --no-deps --user"
        fi
      fi
    fi
  done
  exit $sts
fi
if [ "$TRAVIS" == "true" -a "$mode" == "oca" ]; then
  [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ $TDIR/travis_install_nightly"
  eval $TDIR/travis_install_nightly
else
  if [ -z "${VERSION}" ] ; then
    VERSION="$opt_branch"
  fi
  if [ -z "${ODOO_BRANCH}"  ] ; then
    export ODOO_BRANCH=${VERSION}
  fi
  : ${MQT_TEMPLATE_DB:="openerp_template"}
  : ${MQT_TEST_DB:="openerp_test"}
  : ${ODOO_REPO:="odoo/odoo"}
  if [[ ! "$TRAVIS" == "true" ]]; then
    pg_db_active -a $MQT_TEMPLATE_DB -w; dropdb $MQT_TEMPLATE_DB
    pg_db_active -a $MQT_TEST_DB -w; dropdb $MQT_TEST_DB
  fi
  x=$(which nodejs 2>/dev/null)
  [[ -z "$x" ]] && x=$(which node 2>/dev/null)
  ln -s $x $HOME/maintainer-quality-tools/travis/node
  IFS="/" read -a REPO <<< "${ODOO_REPO}"
  export REMOTE="${REPO[0],,}"
  export REPO_NAME="${REPO[1]}"
  export BRANCH="${ODOO_BRANCH}"
  [[ $BRANCH == *"/"*  ]] && export BRANCH=${BRANCH/\//-}
  PGKNAME=$(basename $TRAVIS_BUILD_DIR)
  export ODOO_PATH=${HOME}/$REPO_NAME-$ODOO_BRANCH
  if [[ "$TRAVIS" == "true" ]]; then
    if [[ "$PGKNAME" == "OCB" ]]; then
      echo "Testes repository is OCB: ln -s ${TRAVIS_BUILD_DIR} ${ODOO_PATH}"
      ln -s ${TRAVIS_BUILD_DIR} ${ODOO_PATH}
    else
      export ODOO_URL="https://github.com/$REMOTE/$REPO_NAME/archive/$BRANCH.tar.gz"
      echo "Installing Odoo $ODOO_URL"
      wget -nv -O odoo.tar.gz $ODOO_URL
      tar -xf odoo.tar.gz -C ${HOME}
    fi
    eval $PIP install --upgrade pip
  else
    if [[ "$PGKNAME" == "OCB" ]]; then
      [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "Tested repository is OCB: ln -s ${TRAVIS_BUILD_DIR} ${ODOO_PATH}"
      ln -s ${TRAVIS_BUILD_DIR} ${ODOO_PATH}
    else
      [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "> ln -s $TRAVIS_SAVED_HOME/$BRANCH ${ODOO_PATH}"
      ln -s $TRAVIS_SAVED_HOME/$BRANCH ${ODOO_PATH}
    fi
  fi
  eval $PIP install -q os0 z0lib --user
  mkdir -p ${HOME}/dependencies
  cp_n_upd_odoo_conf
  [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ $TDIR/clone_oca_dependencies"
  eval $TDIR/clone_oca_dependencies
  sts=$?
  if [ $sts -ne 0 ]; then
    echo "Error cloning dependencies"
    exit $sts
  fi
  if [ "${TRAVIS}" == "true" ]; then
    [ -f $TDIR/../../clodoo/manage_odoo ] && MGRODOO=$(readlink -e $TDIR/../../clodoo/manage_odoo) || MGRODOO=manage_odoo
  elif [ -n "$YML_mgrodoo" ]; then
    MGRODOO=$YML_mgrodoo
  else
    MGRODOO=$HOME/tools/clodoo/manage_odoo
  fi
  if [[ "$PGKNAME" == "OCB" ]]; then
    dependecies_dir=${HOME}/dependencies
  else
    dependecies_dir=${ODOO_PATH},${HOME}/dependencies
  fi
  [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ $MGRODOO requirements -b'.' -vsy -O$MQT_TEST_MODE -p${TRAVIS_PYTHON_VERSION:0:1}"
  eval $MGRODOO requirements -b'.' -vsy -O$MQT_TEST_MODE -p${TRAVIS_PYTHON_VERSION:0:1}
  if [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ]; then
    preqs="$(list_requirements.py -b$VERSION -p'.' $dopts -t python -s ' ' -qPBTR)"
    for f in $preqs; do
      preqs=$(echo "$preqs"|tr " " "\n"|sort|tr "\n" " ")
      for pkg in $L; do
        v=$($PIP show $pkg|grep "^[Vv]ersion")
        echo "$pkg $v"
      done
    done
    echo "Content of ${HOME}:"
    ls -l ${HOME}
    echo "Content of ${TRAVIS_BUILD_DIR}:"
    ls -l ${TRAVIS_BUILD_DIR}
    echo "Content of ${HOME}/dependencies:"
    ls -l ${HOME}/dependencies
  fi
fi
exit $sts
