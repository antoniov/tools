#! /bin/bash
# -*- coding: utf-8 -*-
#
# Install packages to run travis tests
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2016-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.2


run_n_echo() {
    local xcmd="$1"
    local sts=$STS_SUCCESS
    local pfx=
    if [ "${1:0:1}" == "#" ]; then
      pfx=
    elif [ ${opt_dry_run:-0} -eq 0 ]; then
      pfx="\$ "
    else
      pfx="> "
    fi
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_TEXT_COLOR}$pfx$xcmd${TRAVIS_HDR3_COLOR}"
      if [[ "${1:0:1}" != "#" && ( "$2" != "nolocal" ||  "$TRAVIS" == "true" ) ]]; then
        eval "$xcmd"
        sts=$?
      fi
    else
      [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_TEXT_COLOR}$pfx$xcmd${TRAVIS_HDR3_COLOR}"
    fi
    return $sts
}


cp_n_upd_odoo_conf() {
    local odoo_ver=$(echo $VERSION|grep -Eo '[0-9]*'|head -n1)
    if [ $odoo_ver -ge 10 ]; then
      local tgt=~/.odoorc
      local atgt=~/.openerp_serverrc
    else
      local tgt=~/.openerp_serverrc
      local atgt=
    fi
    [ -f $atgt ] && rm -f $atgt
    [ -f $tgt ] && rm -f $tgt
    if [ "$TRAVIS" == "true" ]; then
       return
    fi
    local t="$TRAVIS_SAVED_HOME/$(basename $tgt)"
    [ -n "$atgt" ] && local at="$TRAVIS_SAVED_HOME/$(basename $atgt)" || local at=
    [ -f $at ] && rm -f $at
    [ -f $t ] && rm -f $t
    return
    local pfx="odoo$odoo_ver"
    local pfx2=odoo
    local sfx=
    local ODOO_LOGFILE="False"
    local confn=/etc/odoo/${pfx}-server.conf
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx}.conf
    fi
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx2}-server.conf
    fi
    if [ ! -f $confn ]; then
      confn=/etc/odoo/${pfx2}.conf
    fi
    if [ ! -f $confn ]; then
      echo "File $confn not found!"
      exit 1
    fi
    touch $tgt
    while IFS=\| read -r line || [ -n "$line" ]; do
      if [[ $line =~ ^data_dir[[:space:]]*=[[:space:]]*.*Odoo$odoo_ver ]]; then
        line=$(echo "$line"|sed -e "s:Odoo$odoo_ver:Odoo-test:")
      elif [[ $line =~ ^logfile[[:space:]]*=[[:space:]]*[0-9A-Za-z]+  ]]; then
        line=$(echo "logfile = $ODOO_LOGFILE")
      elif [[ $line =~ ^pidfile[[:space:]]*=[[:space:]]*.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^xmlrpc_port[[:space:]]*=[[:space:]]*[0-9A-Za-z]+ ]]; then
        line="xmlrpc_port = $((18060+$odoo_ver))"
      elif [[ $line =~ ^NAME=.*odoo$odoo_ver.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.conf.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*$confn.* ]]; then
        line=$(echo "$line"|sed -e "s:$confn:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.pid.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo${odoo_ver}-server.log.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^server_wide_modules[[:space:]]*=[[:space:]] ]]; then
        line="server_wide_modules = web"
      fi
      echo "$line">>$tgt
    done < "$confn"
}


OPTOPTS=(h        b          j        K        H           n            q           T        t         V           v)
OPTDEST=(opt_help opt_branch opt_dprj opt_lint opt_humdrum opt_dry_run  opt_verbose opt_regr test_mode opt_version opt_verbose)
OPTACTI=(1        1          1        1        1           1            0           1        1         "*>"        "+")
OPTDEFL=(0        0          0        0        0           0            -1          0        0         ""          -1)
OPTMETA=("help"   "dprj"   "check"   ""        ""          "do nothing" "qiet"      "test"   "test"    "version"   "verbose")
OPTHELP=("this help"\
 "Odoo version"\
 "execute tests in project dir rather in test dir"\
 "do bash, flake8 and pylint checks"\
 "humdrum, display w/o colors"\
 "do nothing (dry-run)"\
 "silent mode"\
 "do regression tests"\
 "test mode (implies dry-run)"\
 "show version"\
 "verbose mode")
OPTARGS=(mode)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Install packages to run travis tests\n if supplied 'oca' executes travis_install_nightly"\
  "(C) 2016-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

if [ -z "$TRAVIS_BUILD_DIR" ]; then
  echo "Invalid environment!"
  exit 1
fi
sts=$STS_SUCCESS
[ "${MQT_DRY_RUN:-0}" == "1" ] && opt_dry_run=1
[ "${MQT_VERBOSE_MODE:-0}" == "1" ] && opt_verbose=1
[ "${MQT_VERBOSE_MODE:-1}" == "0" ] && opt_verbose=0
[ ${TRAVIS_DEBUG_MODE:-0} -ne 0 ] && opt_verbose=1
# [ ${TRAVIS_DEBUG_MODE:-0} -gt 1 ] && PYPI_CACHED=$HOME/.local
if [ ${opt_regr:-0} -gt 0 ]; then
  LINT_CHECK="0"
  TESTS="1"
fi
if [ ${opt_lint:-0} -gt 0 ]; then
  BASH_CHECK="1"
  LINT_CHECK="1"
fi
LINT_OR_TEST_CHECK="0"
[ "${LINT_CHECK:-0}" == "1" ] && LINT_OR_TEST_CHECK="1"
[ "${LINT_CHECK:-0}" == "0" -a "${TESTS:-0}" == "1" ] && LINT_OR_TEST_CHECK="1"
[ -z "MQT_TEST_MODE" ] && IFS="/" read MQT_TEST_MODE PKGNAME <<< "${TRAVIS_REPO_SLUG}"
MQT_TEST_MODE=${MQT_TEST_MODE,,}
[[ ! " oca oia zero " =~ " $MQT_TEST_MODE " ]] && MQT_TEST_MODE=zero
[ -z "$mode" ] && mode=$MQT_TEST_MODE
export MQT_TEST_MODE=$mode
[ -z "$PKGNAME" ] && PKGNAME=$(basename $TRAVIS_BUILD_DIR)
PIP=pip
if [ "$TRAVIS" != "true" ]; then
  PIP_OPTS="--user"
else
  PIP_OPTS=
fi
if [ "${TRAVIS_PYTHON_VERSION:0:1}" == "3" ]; then
  PIP=
  [ -f /usr/bin/pip$TRAVIS_PYTHON_VERSION ] && PIP=/usr/bin/pip$TRAVIS_PYTHON_VERSION
  [ -z "$PIP" -a -f /usr/bin/pip3 ] && PIP=/usr/bin/pip3
  [ -z "$PIP" -a -f /usr/bin/pip3.5 ] && PIP=/usr/bin/pip3.5
  [ -z "$PIP" -a -f /usr/bin/pip3.6 ] && PIP=/usr/bin/pip3.6
  [ -z "$PIP" -a -f /usr/bin/pip3.4 ] && PIP=/usr/bin/pip3.4
  [ -z "$PIP" ] && PIP=pip
fi
if [ "$MQT_TEST_MODE" == "tools" ]; then
  [ -f $TRAVIS_BUILD_DIR/clodoo/manage_odoo ] && MGRODOO=$(readlink -e $TRAVIS_BUILD_DIR/clodoo/manage_odoo) || MGRODOO=manage_odoo
  [ -f $TRAVIS_BUILD_DIR/clodoo/list_requirements.py ] && LISTREQ=$TRAVIS_BUILD_DIR/clodoo/list_requirements.py || LISTREQ=list_requirements.py
elif [ -n "$YML_mgrodoo" ]; then
  MGRODOO=$YML_mgrodoo
  LISTREQ=$(dirname $YML_mgrodoo)/list_requirements.py
else
  [ -f $HOME/tools/clodoo/manage_odoo ] && MGRODOO=$(readlink -e $HOME/tools/clodoo/manage_odoo) || MGRODOO=manage_odoo
  [ -f $HOME/tools/clodoo/list_requirements.py ] && LISTREQ=$HOME/tools/clodoo/list_requirements.py || LISTREQ=list_requirements.py
fi
if [ "$MQT_TEST_MODE" == "tools" ]; then
  LISA=$TRAVIS_BUILD_DIR/lisa/lisa
elif [ -n "$YML_lisa" ]; then
  LISA=$YML_lisa
else
  LISA=$HOME/tools/lisa/lisa
  [ -f $TDIR/../../lisa/lisa ] && LISA=$(readlink -e $TDIR/../../lisa/lisa)
  [ -f $TDIR/../lisa/lisa ] && LISA=$(readlink -e $TDIR/../lisa/lisa)
fi
if [ ${opt_humdrum:-0} -eq 0 ]; then
  TRAVIS_TEXT_COLOR="\e[0;97;40m"
  TRAVIS_HDR1_COLOR="\e[30;42m"
  TRAVIS_HDR2_COLOR="\e[30;46m"
  TRAVIS_HDR3_COLOR="\e[30;106m"
  TRAVIS_NOP_COLOR="\e[35;40m"
else
  TRAVIS_TEXT_COLOR=
  TRAVIS_HDR1_COLOR=
  TRAVIS_HDR2_COLOR=
  TRAVIS_HDR3_COLOR=
  TRAVIS_NOP_COLOR=
fi
if [ $opt_verbose -gt 0 ]; then
  echo -e "${TRAVIS_HDR3_COLOR}$0 $__version__${TRAVIS_TEXT_COLOR}"
  echo -e "${TRAVIS_TEXT_COLOR}\$ alias pip=$PIP.$($PIP --version)${TRAVIS_HDR3_COLOR}"
  echo -e "${TRAVIS_TEXT_COLOR}\$ alias lisa=$LISA.$($LISA -V)${TRAVIS_HDR3_COLOR}"
  echo -e "${TRAVIS_TEXT_COLOR}\$ alias manage_odoo=$MGRODOO.$($MGRODOO -V)${TRAVIS_HDR3_COLOR}"
  echo -e "${TRAVIS_TEXT_COLOR}\$ TRAVIS_DEBUG_MODE=$TRAVIS_DEBUG_MODE${TRAVIS_HDR3_COLOR}"
  echo -e "${TRAVIS_TEXT_COLOR}\$ MQT_TEST_MODE=$MQT_TEST_MODE${TRAVIS_HDR3_COLOR}"
  [ "$MQT_TEST_MODE" == "tools" ] && echo -e "${TRAVIS_TEXT_COLOR}\$ PATH=$PATH${TRAVIS_HDR3_COLOR}"
  [ "$MQT_TEST_MODE" == "tools" ] && echo -e "${TRAVIS_TEXT_COLOR}\$ OPTS=$OPTS${TRAVIS_HDR3_COLOR}"
  [ -n "$PYPI_CACHED" ] && echo -e "${TRAVIS_TEXT_COLOR}\$ PYPI_CACHED=$PYPI_CACHED${TRAVIS_HDR3_COLOR}"
fi
run_n_echo "$PIP install -q pip --upgrade" "nolocal"
# Build secure environment (python2)
echo -e "${TRAVIS_HDR3_COLOR}### Build Secure Environment${TRAVIS_TEXT_COLOR}"
for p in build-essential libssl-dev libffi-dev python-dev; do
  eval $LISA status -q $p
  if [ $? -ne 0 ]; then
    run_n_echo "$LISA install $p" "nolocal"
  fi
done
for p in urllib3[secure] cryptography pyOpenSSL cryptography idna certifi; do
  eval $LISA status -q $p &>/dev/null
  if [ $? -ne 0 ]; then
    run_n_echo "$PIP install $p" "nolocal"
  else
    run_n_echo "$PIP install $p --upgrade" "nolocal"
  fi
done
# Secure environment OK
echo -e "${TRAVIS_HDR3_COLOR}### Build Base Environment${TRAVIS_TEXT_COLOR}"
for p in os0 configparser z0lib; do
  eval $LISA status -q $p
  if [ $? -ne 0 ]; then
    run_n_echo "$PIP install $p $PIP_OPTS" "nolocal"
  fi
done
if [ "$MQT_TEST_MODE" == "tools" ]; then
  echo -e "${TRAVIS_HDR3_COLOR}### Build Tools Environment${TRAVIS_TEXT_COLOR}"
  run_n_echo "$HOME/tools/install_tools.sh -qp"
  if [ -d $HOME/dev ]; then
    run_n_echo "export PATH=$HOME/dev:$PATH"
    [ $opt_verbose -gt 0 ] && echo "\$ export PYTHONPATH=$HOME/dev"
    export PYTHONPATH=$HOME/dev
  else
    echo "!! Directory $HOME/dev not found!"
  fi
  # run_n_echo "cp ${TRAVIS_BUILD_DIR}/z0lib/z0lib.py $HOME/maintainer-quality-tools/travis/"
  if [ -z "$PYPI_CACHED" ]; then
    for p in clodoo configparser codecov coveralls install flake8==3.5.0 oerplib odoorpc pylint==1.6.4 unittest2 zerobug; do
      eval $LISA status -q $f &>/dev/null
      if [ $? -ne 0 ]; then
        run_n_echo "$PIP install $p $PIP_OPTS" "nolocal"
      else
        run_n_echo "$PIP install $p --upgrade" "nolocal"
      fi
    done
  fi
  if [ $opt_verbose -gt 0 ]; then
    echo "Content of ${HOME}:"
    ls -l ${HOME}
    echo "Content of ${TRAVIS_BUILD_DIR}:"
    ls -l ${TRAVIS_BUILD_DIR}
    echo "Content of ${HOME}/dev:"
    ls -l ${HOME}/dev
  fi
  exit $sts
elif [[ "$TRAVIS" == "true" && "$MQT_TEST_MODE" == "oca" ]]; then
  run_n_echo "$TDIR/travis_install_nightly"
else
  [ $opt_verbose -gt 0 ] && echo "\$ export PYTHONPATH=$HOME/dev"
  export PYTHONPATH=$HOME/dev
  [ -z "${VERSION}" ] && VERSION="$opt_branch"
  [ -z "${ODOO_BRANCH}"  ] && export ODOO_BRANCH=${VERSION}
  : ${MQT_TEMPLATE_DB:="openerp_template"}
  : ${MQT_TEST_DB:="openerp_test"}
  : ${ODOO_REPO:="odoo/odoo"}
  IFS="/" read -a REPO <<< "${ODOO_REPO}"
  export REMOTE="${REPO[0],,}"
  export REPO_NAME="${REPO[1]}"
  export BRANCH="${ODOO_BRANCH}"
  [[ $BRANCH == *"/"*  ]] && export BRANCH=${BRANCH/\//-}
  export ODOO_PATH=${HOME}/$REPO_NAME-$ODOO_BRANCH
  if [ -f "${HOME}/.nvm/nvm.sh" ]; then
      CURRENT_NODE=$(which node)
      source ${HOME}/.nvm/nvm.sh
      nvm install 6
      run_n_echo "ln -sf $(nvm which 6) $CURRENT_NODE"
  fi
  if [ "${LINT_CHECK:-1}" != "0" ]; then
    echo -e "${TRAVIS_HDR3_COLOR}### Build Test Environment${TRAVIS_TEXT_COLOR}"
    # run_n_echo "wget -q https://raw.githubusercontent.com/OCA/pylint-odoo/master/requirements.txt -O ${HOME}/maintainer-quality-tools/travis/pylint_odoo_requirements.txt"
    # run_n_echo "$PIP install --upgrade -r ${HOME}/maintainer-quality-tools/travis/pylint_odoo_requirements.txt $PIP_OPTS"
    run_n_echo "$PIP install --upgrade --pre --no-deps git+https://github.com/OCA/pylint-odoo.git $PIP_OPTS" "nolocal"   # To use last version ever
    run_n_echo "npm install eslint"
  fi
  if [ "${TESTS}" == "1" ]; then
    echo -e "${TRAVIS_HDR3_COLOR}### Install Packages for Base Environment${TRAVIS_TEXT_COLOR}"
    x=$(which nodejs 2>/dev/null)
    [[ -z "$x" ]] && x=$(which node 2>/dev/null)
    run_n_echo "ln -s $x $HOME/maintainer-quality-tools/travis/node"
    [ $opt_verbose -gt 0 ] && node --version
    if [[ "$TRAVIS" == "true" ]]; then
      run_n_echo "npm install -g less@3.0.4 less-plugin-clean-css"
      x=$(find $(npm bin -g 2>/dev/null) -name lessc 2>/dev/null)
      [ -n "$x" ] && run_n_echo "ln -s $x $HOME/maintainer-quality-tools/travis/lessc"
    else
      run_n_echo "npm install less@3.0.4 less-plugin-clean-css"
      x=$(find $(npm bin) -name lessc 2>/dev/null)
      [ -n "$x" ] && run_n_echo "ln -s $x $HOME/maintainer-quality-tools/travis/lessc"
    fi
    lessc --version
    run_n_echo "rm -f $VIRTUAL_ENV/lib/python2.7/no-global-site-packages.txt"
    if [ "${WEBSITE_REPO}" == "1" ]; then
        if [ -f ~/.rvm/scripts/rvm ]; then
            source ~/.rvm/scripts/rvm
        else
            source /usr/local/rvm/scripts/rvm
        fi
        run_n_echo "rvm install ruby --latest"
        run_n_echo "rvm use ruby --latest"
        # Uninstall current versions to be sure that
        # the correct version will be installed
        run_n_echo "gem uninstall -aIx bootstrap-sass compass sass"
        run_n_echo "gem install compass bootstrap-sass"
    fi
    # Update PhantomJS (v10 compat)
    if [ "${PHANTOMJS_VERSION}" != "OS" ]; then
      run_n_echo "npm install --prefix ${TRAVIS_BUILD_DIR} \"phantomjs-prebuilt@${PHANTOMJS_VERSION:=latest}\""
      run_n_echo "ln -s \"${TRAVIS_BUILD_DIR}/node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs\" \"${HOME}/maintainer-quality-tools/travis/phantomjs\""
    fi
  fi
  if [[ "$PKGNAME" == "OCB" ]]; then
    echo -e "${TRAVIS_HDR3_COLOR}### Tested repository is OCB${TRAVIS_TEXT_COLOR}"
    if [[ "$TRAVIS" == "true" ]]; then
      run_n_echo "ln -s ${TRAVIS_BUILD_DIR} ${ODOO_PATH}"
    elif [ ! -L ${ODOO_PATH} ]; then
      run_n_echo "ln -s ${TRAVIS_BUILD_DIR} ${ODOO_PATH}"
    fi
  else
    ODOO_URL="https://github.com/$REMOTE/$REPO_NAME.git"
    echo -e "${TRAVIS_HDR3_COLOR}### Installing Odoo from $ODOO_URL${TRAVIS_TEXT_COLOR}"
    if [[ "$TRAVIS" == "true" ]]; then
      run_n_echo "git clone --depth=50 https://github.com/$REMOTE/$REPO_NAME.git -b $BRANCH ${ODOO_PATH}"
      run_n_echo "git --work-tree=${ODOO_PATH} --git-dir=${ODOO_PATH}/.git remote rename origin $REMOTE"
    elif [ ! -L ${ODOO_PATH} ]; then
      if [[ "$REMOTE" == "oca" ]]; then
        majver=$(echo $BRANCH|grep -Eo [0-9]+|head -n1)
        if [[ ! -d $TRAVIS_SAVED_HOME/oca$majver ]]; then
          run_n_echo "git clone --depth=50 https://github.com/$REMOTE/$REPO_NAME.git -b $BRANCH ${ODOO_PATH}"
          run_n_echo "git --work-tree=${ODOO_PATH} --git-dir=${ODOO_PATH}/.git remote rename origin $REMOTE"
          run_n_echo "mv ${ODOO_PATH} $TRAVIS_SAVED_HOME/oca$majver"
        fi
        if [[ -d $TRAVIS_SAVED_HOME/oca$majver ]]; then
          SRCREPOPATH="$TRAVIS_SAVED_HOME/${REMOTE}${majver}"
        fi
      else
        SRCREPOPATH="$TRAVIS_SAVED_HOME/$BRANCH"
      fi
      run_n_echo "ln -s $SRCREPOPATH ${ODOO_PATH}"
    fi
  fi
  if [ "${TESTS}" != "1" ]; then
    dopts=
    if [ -z "$PYPI_CACHED" ]; then
      run_n_echo "$MGRODOO requirements -b '.' -vsy -O$MQT_TEST_MODE -o${ODOO_PATH} -p${TRAVIS_PYTHON_VERSION:0:1}"
    fi
    run_n_echo "cp ${HOME}/maintainer-quality-tools/cfg/.coveragerc ."
    if [[ "$TRAVIS" == "true" ]]; then
      if [ $opt_verbose -gt 0 ]; then
        echo "- reqs=\$($LISTREQ -b$VERSION -p'.' $dopts -t python -s ' ' -qBTR)"
        reqs="$($LISTREQ -b$VERSION -p'.' $dopts -t python -s ' ' -qBTR)"
        reqs=$(echo "$reqs"|tr " " "\n"|sort|tr "\n" " ")
        for pkg in $reqs; do
          v=$($PIP show $pkg|grep "^[Vv]ersion"|awk '{print $2}')
          echo "-- $pkg $v"
        done
      fi
    fi
  else
    dopts=
    mkdir -p ${HOME}/dependencies
    cp_n_upd_odoo_conf
    run_n_echo "$TDIR/clone_oca_dependencies"
    sts=$?
    if [ $sts -ne 0 ]; then
      echo "- Error cloning dependencies"
      exit $sts
    fi
    if [[ "$PKGNAME" == "OCB" ]]; then
      ocb_dir='.'
      dependencies_dir=${HOME}/dependencies
    else
      ocb_dir=${ODOO_PATH}
      dependencies_dir="$TRAVIS_BUILD_DIR,${HOME}/dependencies"
    fi
    dopts="-d$dependencies_dir"
    if [ -z "$PYPI_CACHED" ]; then
      run_n_echo "$MGRODOO requirements -b $ocb_dir $dopts -vsy -O$MQT_TEST_MODE -o${ODOO_PATH} -p${TRAVIS_PYTHON_VERSION:0:1}"
    fi
    run_n_echo "cp ${HOME}/maintainer-quality-tools/cfg/.coveragerc ."
    if [[ $ODOO_TEST_SELECT == "APPLICATIONS" ]]; then
      if [[ -f "${TRAVIS_BUILD_DIR}/addons/website/tests/test_crawl.py" ]]; then
        run_n_echo "sed -i \"s/self.url_open(url)/self.url_open(url, timeout=100)/g\" ${TRAVIS_BUILD_DIR}/addons/website/tests/test_crawl.py"
      elif [[ -f "${ODOO_PATH}/addons/website/tests/test_crawl.py" ]]; then
        run_n_echo "sed -i \"s/self.url_open(url)/self.url_open(url, timeout=100)/g\" ${ODOO_PATH}/addons/website/tests/test_crawl.py"
      fi
    elif [[ $ODOO_TEST_SELECT == "LOCALIZATION" ]]; then
      if [[ -f "${TRAVIS_BUILD_DIR}/addons/account/__manifest__.py" ]]; then
        run_n_echo "sed -i \"/'_auto_install_l10n'/d\" ${TRAVIS_BUILD_DIR}/addons/account/__manifest__.py"
      elif [[ -f "${ODOO_PATH}/addons/account/__manifest__.py" ]]; then
        run_n_echo "sed -i \"/'_auto_install_l10n'/d\" ${ODOO_PATH}/addons/account/__manifest__.py"
      elif [[ -f "${TRAVIS_BUILD_DIR}/addons/account/__openerp__.py" ]]; then
        run_n_echo "sed -i \"/'_auto_install_l10n'/d\" ${TRAVIS_BUILD_DIR}/addons/account/__openerp__.py"
      elif [[ -f "${ODOO_PATH}/addons/account/__openerp__.py" ]]; then
        run_n_echo "sed -i \"/'_auto_install_l10n'/d\" ${ODOO_PATH}/addons/account/__openerp__.py"
      fi
    fi
    if [[ -f "${TRAVIS_BUILD_DIR}/odoo/tests/common.py" ]]; then
      run_n_echo "sed -i \"s/'phantomjs'/'disable_phantomjs'/g\" ${TRAVIS_BUILD_DIR}/odoo/tests/common.py"
    elif [[ -f "${ODOO_PATH}/odoo/tests/common.py" ]]; then
      run_n_echo "sed -i \"s/'phantomjs'/'disable_phantomjs'/g\" ${ODOO_PATH}/odoo/tests/common.py"
    fi
    if [ $opt_verbose -gt 0 ]; then
      echo "Content of ${HOME}:"
      ls -l ${HOME}
      echo "Content of ${TRAVIS_BUILD_DIR}:"
      ls -l ${TRAVIS_BUILD_DIR}
      echo "Content of ${HOME}/dependencies:"
      ls -l ${HOME}/dependencies
    fi
  fi
fi
echo -e "${TRAVIS_TEXT_COLOR}"
exit $sts
