#! /bin/bash
# -*- coding: utf-8 -*-
#
# Install packages to run travis tests
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2016-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.1.3



OPTOPTS=(h        b          j        K         n            q           T        t         V           v)
OPTDEST=(opt_help opt_branch opt_dprj opt_check opt_dry_run  opt_verbose opt_regr test_mode opt_version opt_verbose)
OPTACTI=(1        1          1        1         1            0           1        1         "*>"        "+")
OPTDEFL=(0        0          0        0         0            -1          0        0         ""          -1)
OPTMETA=("help"   "dprj"   "check"   "do nothing" "qiet"      "test"   "test"    "version"   "verbose")
OPTHELP=("this help"\
 "Odoo version"\
 "execute tests in project dir rather in test dir"\
 "do bash, flake8 and pylint checks"\
 "do nothing (dry-run)"\
 "silent mode"\
 "do regression tests"\
 "test mode (implies dry-run)"\
 "show version"\
 "verbose mode")
OPTARGS=(mode)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Install packages to run travis tests\n if supplied 'oca' executes travis_install_nightly"\
  "(C) 2016-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

sts=$STS_SUCCESS
if [ "${MQT_DRY_RUN:-0}" == "1" ]; then opt_dry_run=1; fi
if [ "${MQT_VERBOSE_MODE:-0}" == "1" ]; then opt_verbose=1; fi
if [ "${MQT_VERBOSE_MODE:-1}" == "0" ]; then opt_verbose=0; fi
if [ ${opt_regr:-0} -gt 0 ]; then
  LINT_CHECK="0"
  TESTS="1"
fi
if [ ${opt_check:-0} -gt 0 ]; then
  BASH_CHECK="1"
  LINT_CHECK="1"
fi
if [ "${BASH_CHECK:-0}" == "1" ]; then BASH_CHECK_ENABLED=1; else BASH_CHECK_ENABLED=0; fi
if [ "${LINT_CHECK:-0}" == "1" ]; then LINT_CHECK_ENABLED=1; else LINT_CHECK_ENABLED=0; fi
if [ "${LINT_CHECK:-1}" == "0" ]; then LINT_CHECK_DISABLED=1; else LINT_CHECK_DISABLED=0; fi
if [ "${TESTS:-0}" == "1" ]; then TEST_CHECK_ENABLED=1; else TEST_CHECK_ENABLED=0; fi
if [ -z "${TESTS}" ]; then TESTS_UNSPECIFIED=1; else TESTS_UNSPECIFIED=0; fi
if [ "${TRANSIFEX_CHECK:-0}" == "1" ]; then TRANSIFEX_CHECK_ENABLED=1; else TRANSIFEX_CHECK_ENABLED=0; fi
if [ "${LINT_CHECK}" != "0" ]; then
  :
fi
if [ "${TESTS}" != "1" ]; then
  exit $sts
fi
if [ "$mode" == "tools" ]; then
  if [ "${TRAVIS}" == "true" ]; then
    [ -f $TDIR/../../lisa/lisa ] && LISA=$(readlink -e $TDIR/../../lisa/lisa) || LISA=lisa
  else
    LISA=$HOME/tools/lisa/lisa
  fi
  [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ LISA=$LISA"
  for p in oerplib odoorpc os0 zerobug clodoo; do
    eval $LISA status -q $opts $f
    if [ $? -eq 0 ]; then
      $LISA install -qy $f
    fi
  done
elif [ "$TRAVIS" == "true" -a "$mode" == "oca" ]; then
  [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ $TDIR/travis_install_nightly"
  eval $TDIR/travis_install_nightly
else
  if [ -z "${VERSION}" ] ; then
    VERSION="$opt_branch"
  fi
  if [ -z "${ODOO_BRANCH}"  ] ; then
    ODOO_BRANCH=${VERSION}
  fi
  : ${MQT_TEMPLATE_DB:="openerp_template"}
  : ${MQT_TEST_DB:="openerp_test"}
  : ${ODOO_REPO:="odoo/odoo"}
  if [[ ! "$TRAVIS" == "true" ]]; then
    pg_db_active -a $MQT_TEMPLATE_DB -w; dropdb $MQT_TEMPLATE_DB
    pg_db_active -a $MQT_TEST_DB -w; dropdb $MQT_TEST_DB
  fi
  x=$(which nodejs 2>/dev/null)
  [[ -z "$x" ]] && x=$(which node 2>/dev/null)
  ln -s $x $HOME/maintainer-quality-tools/travis/node
  npm install -g less less-plugin-clean-css
  IFS="/" read -a REPO <<< "${ODOO_REPO}"
  export REMOTE="${REPO[0],,}"
  export REPO_NAME="${REPO[1]}"
  export BRANCH="${ODOO_BRANCH}"
  [[ $BRANCH == *"/"*  ]] && export BRANCH=${BRANCH/\//-}
  export ODOO_PATH=${HOME}/$REPO_NAME-$ODOO_BRANCH
  if [[ "$TRAVIS" == "true" ]]; then
    export ODOO_URL="https://github.com/$REMOTE/$REPO_NAME/archive/$BRANCH.tar.gz"
    echo "Installing Odoo $ODOO_URL"
    wget -nv -O odoo.tar.gz $ODOO_URL
    tar -xf odoo.tar.gz -C ${HOME}
    pip install --upgrade pip
    # pip install -q --no-binary pycparser -r ${HOME}/maintainer-quality-tools/requirements.txt
  else
    [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "> ln -s $TRAVIS_SAVED_HOME/$BRANCH ${ODOO_PATH}"
    ln -s $TRAVIS_SAVED_HOME/$BRANCH ${ODOO_PATH}
  fi
  pip install -q os0 z0lib
  mkdir -p ${HOME}/dependencies && ls -l ${HOME}/dependencies
  [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ $TDIR/clone_oca_dependencies"
  eval $TDIR/clone_oca_dependencies
  sts=$?
  if [ $sts -ne 0 ]; then
    echo "Error cloning dependencies"
    exit $sts
  fi
  [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ ${HOME}/tools/clodoo/manage_odoo requirements -b'.' -vsy -Ozero"
  eval ${HOME}/tools/clodoo/manage_odoo requirements -b'.' -vsy -Ozero

  if [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ]; then
    echo "Content of ${HOME}:"
    ls -l ${HOME}
    echo "Content of ${HOME}/dependencies:"
    mkdir -p ${HOME}/dependencies && ls -l ${HOME}/dependencies
  fi
fi
exit $sts
