#!/bin/bash
# Detect and print OS informations
# Based on Novell article http://www.novell.com/coolsolutions/feature/11251.html
# Function xuname may be used in some Unix/Linux script
# Print a string describing Linux OS or single parameter like uname command
#
# Main is a software example of function use
# It works like uname command with some enhanced options (as distribution)
# 
# This program is free software
# Credits:
# - Arun Singh (Novell Senior Software Engineer)
# - antoniomaria.vigliotti@gmail.com (zeroincombenzeÂ® Senior Software Engineer)
# - giuliano69 (https://github.com/Giuliano69/odoo_install/blob/master/odoo8_install.sh)
#
# Check history
#    Date        Author      Result of xname -a
#    2015-08-27  antoniov    Linux CentOS 6.7(Final 2.6.32-504.16.2.el6.x86_64 x86_64)
#    2015-08-27  antoniov    Linux CentOS 7.1.1503(Core 3.10.0-229.1.2.el7.x86_64 x86_64)
#    2015-08-27  antoniov    Linux Ubuntu 12.04( 3.13.0-32-generic i686)

function xuname {
# Detects which OS informations as version, distribution, etc.

  OS=`uname -s`
  REV=`uname -r`
  MACH=`uname -m`
  KERNEL="$REV"
  VER=""
  DIST=""
  ARCH=`uname -p`

  if [ "${OS}" = "SunOS" ]; then
    OS=Solaris
    ARCH=`uname -p`
    VER=`uname -v`
    OSSTR="${OS} ${REV}(${ARCH} `uname -v`)"
  elif [ "${OS}" = "AIX" ]; then
    OSSTR="${OS} `oslevel` (`oslevel -r`)"
  elif [ "${OS}" = "Linux" ]; then
    KERNEL=`uname -r`
    PSUEDONAME=""
    if [ -f /etc/centos-release ]; then
        DIST='CentOS'
        PSUEDONAME=`cat /etc/centos-release | sed s/.*\(// | sed s/\)//`
        VER=`cat /etc/centos-release | sed s/.*release\ // | sed s/\ .*//`
    elif [ -f /etc/redhat-release ]; then
        DIST='RedHat'
        PSUEDONAME=`cat /etc/redhat-release | sed s/.*\(// | sed s/\)//`
        VER=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
    elif [ -f /etc/SUSE-release ]; then
        DIST=`cat /etc/SUSE-release | tr "\n" ' '| sed s/VERSION.*//`
        VER=`cat /etc/SUSE-release | tr "\n" ' ' | sed s/.*=\ //`
    elif [ -f /etc/mandrake-release ]; then
        DIST='Mandrake'
        PSUEDONAME=`cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//`
        VER=`cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//`
    elif [ -f /etc/lsb-release ]; then
        DIST="Ubuntu"
        VER=$(lsb_release --release --short)
    elif [ -f /etc/debian_version ]; then
        DIST="Debian"
        VER=$(lsb_release --release --short)
    fi
    if [ -f /etc/UnitedLinux-release ]; then
        DIST="${DIST}[`cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//`]"
    fi
    OSSTR="${OS} ${DIST} ${VER}(${PSUEDONAME} ${KERNEL} ${MACH})"
  fi
  if [ "$1" == "-d" ]; then
    echo ${DIST}
  elif [ "$1" == "-k" ]; then
    echo ${KERNEL}
  elif [ "$1" == "-m" -o  "$1" == "-i" ]; then
    echo ${MACH}
  elif [ "$1" == "-p" ]; then
    echo ${ARCH}
  elif [ "$1" == "-s" ]; then
    echo ${OS}
  elif [ "$1" == "-r" ]; then
    echo ${REV}
  elif [ "$1" == "-v" ]; then
    echo ${VER}
  else
    echo ${OSSTR}
  fi 
}

# Main program
# You do not need extract this part of software to include in your script
# However, you can use this part to build a skeleton of script
# like nay Linux Command

__version__="0.1.3"
opt_help=1
opt_version=""
opt_verbose=0
opt_prm=""
xx=0
for i in {1..9}
do
  o="${!i}"
  if [ "${o:0:1}" == "-" ]
  then
    for k in {1..9}
    do
      if [ "${o:k:1}" == "h" ]      # -h (help)
      then
        opt_help=1
      elif [ "${o:k:1}" == "a" ]    # -a all
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "d" ]    # -d Linux distribution
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "i" ]    # -i machine
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "k" ]    # -k Linux kernel release
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "m" ]    # -m machine
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "p" ]    # -p architecture
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "r" ]    # -r kernel release (Unix/Linux)
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "s" ]    # -s kernel name
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "v" ]    # -v kernel version
      then
        opt_prm="-${o:k:1}"
        opt_help=0
      elif [ "${o:k:1}" == "V" ]    # -V version
      then
        opt_version=${o:k:1}
      fi
    done
  fi
  xx=0
done
if [ ! -z "$opt_version" ]
then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]
then
  echo "Linux/Unix print system information V$__version__"
  echo "$(basename $0) [-h] [-adkmprsvV]"
  echo "  action maybe: install"
  echo "  -h        show this help"
  echo "  -a        print all"
  echo "  -d        print Linux distribution name (empty on Unix)"
  echo "  -k        print Linux kernel release (on Unix same as -r)"
  echo "  -m        print machine hardware name"
  echo "  -p        print processor architecture"
  echo "  -r        print kernel release"
  echo "  -v        print distribution version (only on Linux)"
  echo "  -V        show version of this utility"
  echo ""
  exit 0
fi
xuname $opt_prm
exit 0

