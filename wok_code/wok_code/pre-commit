#! /bin/bash
#
#__version__=2.0.0
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 2.0.0
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
if [[ -z $HOME_DEVEL || ! -d $HOME_DEVEL ]]; then
  [[ -d $HOME/odoo/devel ]] && HOME_DEVEL="$HOME/odoo/devel" || HOME_DEVEL="$HOME/devel"
fi
[[ -x $TDIR/../bin/python3 ]] && PYTHON=$(readlink -f $TDIR/../bin/python3) || [[ -x $TDIR/python3 ]] && PYTHON="$TDIR/python3" || PYTHON="python3"
[[ -z $PYPATH ]] && PYPATH=$(echo -e "import os,sys\no=os.path\na=o.abspath\nj=o.join\nd=o.dirname\nb=o.basename\nf=o.isfile\np=o.isdir\nC=a('"$TDIR"')\nD='"$HOME_DEVEL"'\nN= 'venv_tools'\nU='setup.py'\nO='tools'\nH=o.expanduser('~')\nT=j(d(D),O)\nR=j(d(D),'pypi') if b(D) == N else j(D, 'pypi')\nW=D if b(D) == N else j(D, 'venv')\nS='site-packages'\nX='scripts'\ndef isk(P):\n return P.startswith((H,D,C,W)) and p(P) and p(j(P,X)) and f(j(P,'__init__.py')) and f(j(P,'__main__.py'))\ndef adk(L,P):\n if P not in L:\n  L.append(P)\nL=[C]\nfor B in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n for P in [C]+sys.path+os.environ['PATH'].split(':')+[W,R,T]:\n  P=a(P)\n  if b(P) in (X,'tests','travis','_travis'):\n   P=d(P)\n  if b(P)==b(d(P)) and f(j(P,'..',U)):\n   P=d(d(P))\n  elif b(d(C))==O and f(j(P,U)):\n   P=d(P)\n  if B==b(P) and isk(P):\n   adk(L,P)\n   break\n  elif isk(j(P,B,B)):\n   adk(L,j(P,B,B))\n   break\n  elif isk(j(P,B)):\n   adk(L,j(P,B))\n   break\n  elif isk(j(P,S,B)):\n   adk(L,j(P,S,B))\n   break\nadk(L,os.getcwd())\nprint(' '.join(L))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
[[ -z "$Z0LIBDIR" ]] && echo "Library file z0librc not found in <$PYPATH>!" && exit 72
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"

DIRS=$(eval $CMD|xargs dirname|xargs $READLINK -f|sort|uniq|tr "\n" " ")
RDME=""
[[ -f README.md ]] && RDME=README.md
[[ -f README.rst ]] && RDME=README.rst
sts=0
for d in $DIRS; do
    [[ $d =~ $GIT_NO_CHECK ]] && continue
    [[ ! -f $d/README.rst && ! -f $d/README.md ]] && echo -e "Module \e[1m$(basename $d)\e[0m without documentation; missed \e[33m$d/README.rst\e[0m" && sts=1 && continue
    FILES=""
    [[ -n $RDME ]] && FILES=$(find $d -type f -not -path "*/.git/*" -not -path "*/docs/*" -not -path "*/__build*" -not -path "*/__pycache__*" -not -path "*/.idea*" -not -path "*/i18n/*" -not -path "*/static/*" -not -name "*.pyc" -cnewer ./$RDME)
    [[ -n $FILES ]] && echo -e "Detected undocumented files of module \e[1m$(basename $d)\e[0m; type:\n\e[32mcd $d; please docs;\e[0m" && sts=1
done
#if [[ -f .travis.yml && ! $PWD =~ $GIT_NO_CHECK ]]; then
#    echo -e "\ntravis result:"
#    travis summary
#    [[ $? -ne 0 ]] && sts=1 && echo -e "\n\e[31mRepository not validated by travis\e[0m\nPlease type:\n\e[32mtravis\e[0m\nor try to validate with follow command:\n\e[32mtravis -Lminimal\e[0m"
#fi
if [[ $sts -ne 0 ]]; then
    echo ""
    echo ""
    echo -e "\e[35mTo exclude this control from this repository,\e[0m"
    echo -e "\e[35madd current path to \e[1mGIT_NO_CHECK\e[0m\e[35m global variable.\e[0m"
    echo -e "\e[35mi.e. \e[36mexport GIT_NO_CHECK=\"^($PWD)\\\$\"\e[0m"
    echo ""
    echo -e "\e[35mTo supersede this lock use \e[36m--no-verify\e[35m switch\e[0m"
fi
exit $sts
