#! /bin/bash
#
#__version__=1.0.11
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 1.0.9
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
if [[ -z $HOME_DEVEL ]]; then
  [[ -d $HOME/odoo/devel ]] && HOME_DEVEL="$HOME/odoo/devel" || HOME_DEVEL="$HOME/devel"
fi
[[ -x $TDIR/../bin/python ]] && PYTHON=$(readlink -f $TDIR/../bin/python) || [[ -x $TDIR/python ]] && PYTHON="$TDIR/python" || PYTHON="python"
[[ -z $PYPATH ]] && PYPATH=$(echo -e "C='"$TDIR"'\nD='"$HOME_DEVEL"'\nimport os,sys\no=os.path\na=o.abspath\nj=o.join\nd=o.dirname\nb=o.basename\nf=o.isfile\np=o.isdir\nH=o.expanduser('~')\nT=j(d(D), 'tools')\nR=j(d(D),'pypi') if o.basename(D)=='venv_tools' else j(D,'pypi')\nW=D if o.basename(D)=='venv_tools' else j(D,'venv')\ndef apl(L,P,B):\n if P:\n  if p(j(P,B,B)) and p(j(P,B,B,'script')) and f(j(P,B,B,'__init__')):\n   L.append(j(P,B,B))\n   return 1\n  elif j(P,B):\n   L.append(j(P,B))\n   return 1\n return 0\nL=[C]\nif b(C) in ('scripts','tests','travis','_travis'):\n C=a(j(C,'..'))\n L.append(C)\nif b(C)==b(d(C)) and f(j(C,'..','setup.py')):\n C=a(j(C,'..','..'))\nelif b(d(C))=='tools' and f(j(C,'setup.py')):\n C=a(j(C,'..'))\nP=os.environ['PATH'].split(':')\nV= ''\nfor X in sys.path:\n if not p(T) and p(j(X,'tools')):\n  T=j(X,'tools')\n if not V and b(X)=='site-packages':\n  V=X\nfor B in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if p(j(C,B)) or p(j(C,b(C),B)):\n  F=apl(L,C,B)\n else:\n  F=0\n  for X in P:\n   if p(j(X,B)):\n    F=apl(L,X,B)\n    break\n  if not F:\n   F=apl(L,V,B)\n  if not F:\n   apl(L,T,B)\nL=L+[os.getcwd()]+P\np=set()\npa=p.add\np=[x for x in L if x and x.startswith((H,D,C)) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found in <$PYPATH>!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"

DIRS=$(eval $CMD|xargs dirname|xargs $READLINK -f|sort|uniq|tr "\n" " ")
RDME=""
[[ -f README.md ]] && RDME=README.md
[[ -f README.rst ]] && RDME=README.rst
sts=0
for d in $DIRS; do
    [[ $d =~ $GIT_NO_CHECK ]] && continue
    [[ ! -f $d/README.rst && ! -f $d/README.md ]] && echo -e "Module \e[1m$(basename $d)\e[0m without documentation; missed \e[33m$d/README.rst\e[0m" && sts=1 && continue
    FILES=""
    [[ -n $RDME ]] && FILES=$(find $d -type f -not -path "*/.git/*" -not -path "*/docs/*" -not -path "*/__build*" -not -path "*/__pycache__*" -not -path "*/.idea*" -not -path "*/i18n/*" -not -path "*/static/*" -not -name "*.pyc" -cnewer ./$RDME)
    [[ -n $FILES ]] && echo -e "Detected undocumented files of module \e[1m$(basename $d)\e[0m; type:\n\e[32mcd $d; please docs;\e[0m" && sts=1
done
#if [[ -f .travis.yml && ! $PWD =~ $GIT_NO_CHECK ]]; then
#    echo -e "\ntravis result:"
#    travis summary
#    [[ $? -ne 0 ]] && sts=1 && echo -e "\n\e[31mRepository not validated by travis\e[0m\nPlease type:\n\e[32mtravis\e[0m\nor try to validate with follow command:\n\e[32mtravis -Lminimal\e[0m"
#fi
if [[ $sts -ne 0 ]]; then
    echo ""
    echo ""
    echo -e "\e[35mTo exclude this control from this repository,\e[0m"
    echo -e "\e[35madd current path to \e[1mGIT_NO_CHECK\e[0m\e[35m global variable.\e[0m"
    echo -e "\e[35mi.e. \e[36mexport GIT_NO_CHECK=\"^($PWD)\\\$\"\e[0m"
    echo ""
    echo -e "\e[35mTo supersede this lock use \e[36m--no-verify\e[35m switch\e[0m"
fi
exit $sts
