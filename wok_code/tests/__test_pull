#! /bin/bash
# -*- coding: utf-8 -*-
# Regression tests on devel-tools
#
<<<<<<< HEAD
# READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
# export READLINK
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=""
for p in $TDIR $TDIR/.. $TDIR/../.. $HOME/venv_tools/bin $HOME/venv_tools/lib $HOME/tools; do
  [[ -d $p ]] && PYPATH=$(find $(readlink -f $p) -maxdepth 3 -name z0librc)
  [[ -n $PYPATH ]] && PYPATH=$(dirname $PYPATH) && break
done
PYPATH=$(echo -e "import os,sys;p=[os.path.dirname(x) for x in '$PYPATH'.split()];p.extend([x for x in os.environ['PATH'].split(':') if x not in p and x.startswith('$HOME')]);p.extend([x for x in sys.path if x not in p]);print(' '.join(p))"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0lib/z0librc ]]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [[ -e $d/z0librc ]]; then
=======
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script cvt_script requires bash 4.0+!" && exit 4
[[ -d "$HOME/dev" ]] && HOME_DEV="$HOME/dev" || HOME_DEV="$HOME/devel"
PYPATH=$(echo -e "import os,sys;\nTDIR='"$TDIR"';HOME_DEV='"$HOME_DEV"'\nHOME=os.environ.get('HOME');y=os.path.join(HOME_DEV,'pypi');t=os.path.join(HOME,'tools')\ndef apl(l,p,x):\n  d2=os.path.join(p,x,x)\n  d1=os.path.join(p,x)\n  if os.path.isdir(d2):\n   l.append(d2)\n  elif os.path.isdir(d1):\n   l.append(d1)\nl=[TDIR]\nfor x in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if TDIR.startswith(y):\n  apl(l,y,x)\n elif TDIR.startswith(t):\n  apl(l,t,x)\nl=l+os.environ['PATH'].split(':')\np=set()\npa=p.add\np=[x for x in l if x and x.startswith(HOME) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
>>>>>>> stash
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
<<<<<<< HEAD
RUNDIR=$($READLINK -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
=======
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"
>>>>>>> stash
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

<<<<<<< HEAD
__version__=1.0.2.2
=======
__version__=1.0.2.5
>>>>>>> stash


test_01() {
    local cmd RES TRES
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      $RUNDIR/pull_from_oca -y -b10.0 $Z0BUG_Z0_ROOT >$TESTDIR/res/test.log
    fi
<<<<<<< HEAD
    if grep -q "10.0.1.0.2.2" $Z0BUG_BASE_Z0/__manifest__.py; then RES=1; else RES=0; fi
=======
    if grep -q "10.0.1.0.2.5" $Z0BUG_BASE_Z0/__manifest__.py; then RES=1; else RES=0; fi
>>>>>>> stash
    test_result "pull_from_oca -qy -b10.0 $Z0BUG_Z0_ROOT" "1" "$RES"
}

setup_file_base_oca() {
    cat <<EOF >$Z0BUG_BASE_OCA/__manifest__.py
<<<<<<< HEAD
{'version': '10.0.1.0.2.2'}
EOF
    cat <<EOF >$Z0BUG_BASE_OCA/__init__.py
# 10.0.1.0.2.2
=======
{'version': '10.0.1.0.2.5'}
EOF
    cat <<EOF >$Z0BUG_BASE_OCA/__init__.py
# 10.0.1.0.2.5
>>>>>>> stash
EOF
}

setup_file_base_z0() {
    cat <<EOF >$Z0BUG_BASE_Z0/__manifest__.py
<<<<<<< HEAD
{'version': '10.0.1.0.2.2'}
EOF
    cat <<EOF >$Z0BUG_BASE_Z0/__init__.py
# 10.0.1.0.2.2
=======
{'version': '10.0.1.0.2.5'}
EOF
    cat <<EOF >$Z0BUG_BASE_Z0/__init__.py
# 10.0.1.0.2.5
>>>>>>> stash
EOF
}

setup_file_midea_oca() {
    cat <<EOF >$Z0BUG_MIDEA_OCA/__manifest__.py
{'version': '10.0.1.2.3'}
EOF
    cat <<EOF >$Z0BUG_MIDEA_OCA/__init__.py
# 10.0.1.2.3
EOF
}

setup_file_midea_z0() {
    cat <<EOF >$Z0BUG_MIDEA_Z0/__manifest__.py
{'version': '10.0.1.2.4'}
EOF
    cat <<EOF >$Z0BUG_MIDEA_Z0/__init__.py
# 10.0.1.2.4
EOF
}

Z0BUG_setup() {
    local f os_tree
    for f in 10.0 oca10; do
      os_tree="$os_tree $f/odoo/addons/base"
      os_tree="$os_tree $f/addons"
      os_tree="$os_tree $f/my_repo/midea"
    done
    Z0BUG_build_os_tree "$os_tree"
    Z0BUG_OCA_ROOT=$Z0BUG_root/oca10
    Z0BUG_Z0_ROOT=$Z0BUG_root/10.0
    Z0BUG_BASE_OCA=$Z0BUG_OCA_ROOT/odoo/addons/base
    Z0BUG_BASE_Z0=$Z0BUG_Z0_ROOT/odoo/addons/base
    Z0BUG_MIDEA_OCA=$Z0BUG_OCA_ROOT/my_repo/midea
    Z0BUG_MIDEA_Z0=$Z0BUG_Z0_ROOT/my_repo/midea
    setup_file_base_oca
    setup_file_base_z0
    setup_file_midea_oca
    setup_file_midea_z0
}


Z0BUG_init
<<<<<<< HEAD
parseoptest -l$TESTDIR/test_UNKNOWN.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts


=======
parseoptest -l$TESTDIR/test_wok_code.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts

>>>>>>> stash




UT1_LIST=""
UT_LIST=""
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
<<<<<<< HEAD
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
=======
>>>>>>> stash
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
