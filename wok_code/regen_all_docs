#! /bin/bash
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2018-2020 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
<<<<<<< HEAD
# READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
# export READLINK
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=""
for p in $TDIR $TDIR/.. $TDIR/../.. $HOME/venv_tools/bin $HOME/venv_tools/lib $HOME/tools; do
  [[ -d $p ]] && PYPATH=$(find $(readlink -f $p) -maxdepth 3 -name z0librc)
  [[ -n $PYPATH ]] && PYPATH=$(dirname $PYPATH) && break
done
PYPATH=$(echo -e "import os,sys;p=[os.path.dirname(x) for x in '$PYPATH'.split()];p.extend([x for x in os.environ['PATH'].split(':') if x not in p and x.startswith('$HOME')]);p.extend([x for x in sys.path if x not in p]);print(' '.join(p))"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0lib/z0librc ]]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [[ -e $d/z0librc ]]; then
=======
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script cvt_script requires bash 4.0+!" && exit 4
[[ -d "$HOME/dev" ]] && HOME_DEV="$HOME/dev" || HOME_DEV="$HOME/devel"
PYPATH=$(echo -e "import os,sys;\nTDIR='"$TDIR"';HOME_DEV='"$HOME_DEV"'\nHOME=os.environ.get('HOME');y=os.path.join(HOME_DEV,'pypi');t=os.path.join(HOME,'tools')\ndef apl(l,p,x):\n  d2=os.path.join(p,x,x)\n  d1=os.path.join(p,x)\n  if os.path.isdir(d2):\n   l.append(d2)\n  elif os.path.isdir(d1):\n   l.append(d1)\nl=[TDIR]\nfor x in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if TDIR.startswith(y):\n  apl(l,y,x)\n elif TDIR.startswith(t):\n  apl(l,t,x)\nl=l+os.environ['PATH'].split(':')\np=set()\npa=p.add\np=[x for x in l if x and x.startswith(HOME) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
>>>>>>> stash
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 72
fi
<<<<<<< HEAD
=======
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
>>>>>>> stash
ODOOLIBDIR=$(findpkg odoorc "$PYPATH" "clodoo")
if [[ -z "$ODOOLIBDIR" ]]; then
  echo "Library file odoorc not found!"
  exit 72
fi
. $ODOOLIBDIR
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "ODOOLIBDIR=$ODOOLIBDIR"

<<<<<<< HEAD
__version__=1.0.2.2
=======
__version__=1.0.2.5
>>>>>>> stash



OPTOPTS=(h        b          n           p        R           V           v)
OPTDEST=(opt_help opt_branch opt_dry_run opt_path opt_recurse opt_version opt_verbose)
OPTACTI=(1        "="        1           "="      1           "*>"        "+")
OPTDEFL=(0        ""         0           ""       0           ""          -1)
OPTMETA=("help"   "branch"   ""          "dir"    ""          ""          "")
OPTHELP=("this help"\
 "branches: may be one or more of 6.1 7.0 8.0 9.0 10.0 11.0 or 12.0"\
 "do nothing (dry-run)"\
 "odoo directory"\
 "if OCB recurse all repositories"\
 "show version"\
 "verbose mode")
OPTARGS=(odoo_vid git_org)

parseoptargs "$@"
if [[ "$opt_version" ]]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
[ -z $odoo_vid ] && opt_help=1
if [ $opt_verbose -eq -1 ]; then
  opt_verbose=1
fi
if [[ $opt_help -gt 0 ]]; then
  print_help "Regenerate all documentation of specific odoo version of module"\
  "(C) 2018-2020 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi
odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
odoo_ver=$(build_odoo_param MAJVER $odoo_vid)
if [ -n "$opt_path" ]; then
  odoo_dir=$(readlink -f $opt_path)
else
  odoo_dir=$(build_odoo_param HOME $odoo_vid)
fi
[ -z "$git_org" ] && git_org=$(build_odoo_param GIT_ORGNM $odoo_vid)
repo=$(build_odoo_param REPOS "$odoo_vid")
[ "$repo" == "OCB" ] && OCB_SUBDIRS_RE=$(build_odoo_param OCB_SUBDIRS_RE)
#   tgtdir=$odoo_dir
#   [ -d $odoo_dir/odoo/addons ] && tgtdir="$odoo_dir/odoo/addons"
#   [ -d $odoo_dir/openerp/addons ] && tgtdir="$odoo_dir/openerp/addons"
#   tgtdir="$tgtdir $odoo_dir/addons"
# else
  tgtdir=$odoo_dir
# fi
# echo "git_org=$git_org"
# echo "odoo_fver=$odoo_fver"
# echo "repo=$repo"
# echo "tgtdir=$tgtdir"
for f in $(find $tgtdir -maxdepth 2 -type d -name 'egg-info'); do
  d=$(dirname $f)
  b=$(basename $d)
  [ "$b" == "__to_remove" ] && continue
  if [[ "$d" == "$tgtdir" ]]; then
    OPTS=-lrepository
  else
    [ $opt_recurse -eq 0 ] && [[ "$repo" == "OCB" && ! $b =~ $OCB_SUBDIRS_RE ]] && continue
    OPTS=-lmodule
  fi
  echo "\$ cd $d"
  cd $d
  [ -f README.md ] && rm -fR README.md
  run_traced "gen_readme.py -qG$git_org -b$odoo_fver $OPTS"
  if [ $odoo_ver -ge 8 ]; then
    if [ -f __openerp__.py -o -f __manifest__.py ]; then
      [ ! -d ./static ] && mkdir -p ./static
      [ ! -d ./static/description ] && mkdir -p ./static/description
      run_traced "gen_readme.py -b$odoo_fver -qH -G$git_org $OPTS"
    fi
  fi
done
