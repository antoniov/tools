#! /bin/bash
#
# Manage virtual environment
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2018-2021 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
export READLINK=readlink
OS=$(uname -s)
if [[ $OS == "Darwin" ]]; then
  READLINK=$(which greadlink 2>/dev/null)
  [[ -n "$READLINK" ]] && READLINK=$(basename $READLINK) || READLINK="echo 'greadlink not found\!'; exit 125;"
fi
THIS=$(basename "$0")
TDIR=$($READLINK -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR ${PATH//:/ } ${PYPATH//:/ } /etc $TDIR/../z0lib $TDIR/../../z0lib $TDIR/../../z0lib/z0lib; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$($READLINK -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 2
fi

__version__=1.0.0.7
NEEDING_PKGS="future os0 z0lib"
DEV_PKGS="coveralls codecov flake8 pycodestyle pylint"
SUP_PKGS="future python_plus"
SECURE_PKGS="urllib3[secure] cryptography pyOpenSSL idna certifi asn1crypto pyasn1"
EI_PKGS="(distribute)"
BZR_PKGS="(aeroolib)"
WGET_PKGS="(pychart|python-chart)"
PYBIN_PKGS="(dateutil|ldap|openid)"
BIN_PKGS="(wkhtmltopdf|lessc)"
FLT_PKGS="(jwt|FOO)"
ERROR_PKGS=""
LOCAL_PKGS="(clodoo|odoo_score|os0|python_plus|z0bug_odoo|z0lib|zerobug)"
XPKGS_RE=""

cd_venv() {
  # cd_venv(VENV -q)
  [ $opt_verbose -gt 2 ] && echo ">>> cd_venv($@)"
  if [[ ! "$1" == "$PWD" || $2 =~ f ]]; then
    [[ ! -d $1 && $opt_dry_run -ne 0 ]] && mkdir $1 && FINAL_CMD="rm -fR $1"
    [[ $2 =~ q ]] || [ $opt_verbose -eq 0 ] || echo "$FLAG pushd $1 >/dev/null"
    if [[ -d $1 ]]; then
      pushd $1 >/dev/null
      ((DO_POP++))
    fi
    [ $opt_verbose -gt 2 ] && echo "$PWD>"
  fi
}

pop_cd() {
  [ $opt_verbose -gt 2 ] && echo ">>> pop_cd($@)"
  if [ $DO_POP -ne 0 ]; then
    [[ "$1" == "-q" ]] || [ $opt_verbose -eq 0 ] || echo "$FLAG popd >/dev/null"
    if [ $DO_POP -gt 0 ]; then
      popd >/dev/null
      ((DO_POP--))
      [[ -n "$FINAL_CMD" ]] && eval $FINAL_CMD && unset FINAL_CMD
    fi
    [ $opt_verbose -gt 2 ] && echo "$PWD>DO_POP=$DO_POP"
  fi
}

do_activate() {
  local i f
  [ $opt_verbose -gt 2 ] && echo ">>> do_activate($@)"
  [[ -z $VENV_STACK ]] && declare -A VENV_STACK && export VENV_STACK
  if [[ -z "$VIRTUAL_ENV" ]]; then
    [[ "$1" == "-q" ]] || [ $opt_verbose -eq 0 ] || echo "$FLAG source bin/activate"
    [[ ! -f bin/activate && -n "$FINAL_CMD" ]] && DO_DEACT=1 && return
    [[ ! -f bin/activate ]] && echo "Fatal error! bin/activate not found in $PWD" && exit 1
    [ $opt_verbose -gt 3 ] && set +x
    [ $opt_verbose -gt 3 ] && echo "$FLAG source bin/activate"
    . bin/activate
    [ $opt_verbose -gt 3 ] && set -x
    ((i = ${#VENV_STACK[@]}))
    VENV_STACK[$i]=$VIRTUAL_ENV
    DO_DEACT=1
  else
    f=0
    for i in "${!VENV_STACK[@]}"; do
      if [[ ${VENV_STACK[i]} == $VIRTUAL_ENV ]]; then
        f=1
        break
      fi
    done
    ((i = ${#VENV_STACK[@]}))
    [[ $f -eq 0 ]] && VENV_STACK[$i]=$VIRTUAL_ENV
  fi
}

do_deactivate() {
  local i VENV OLD_VENV
  [ $opt_verbose -gt 2 ] && echo ">>> do_deactivate($@)"
  if [ $DO_DEACT -ne 0 ]; then
    [[ "$1" == "-q" ]] || [ $opt_verbose -eq 0 ] || echo "$FLAG deactivate"
    [[ ! -f bin/activate && -n "$FINAL_CMD" ]] && DO_DEACT=0 && return
    VENV="$VIRTUAL_ENV"
    if [[ -n $VENV_STACK ]]; then
      for i in "${!VENV_STACK[@]}"; do
        if [[ ${VENV_STACK[i]} == $VENV ]]; then
          OLD_VENV=${VENV_STACK[$i]}
          unset VENV_STACK[$i]
        fi
      done
    fi
    deactivate
    DO_DEACT=0
    [[ -n "$OLD_VENV" ]] && VIRTUAL_ENV=$OLD_VENV
  fi
}

get_wkhtmltopdf_dwname() {
  #get_wkhtmltopdf_dwname(pkg FH dist MACHARCH)
  local pkg=$1 FH=$2 dist=$3 MACHARCH=$4 pkgext wkhtmltopdf_wget x y z
  dist=${dist,,}
  [[ $dist =~ debian ]] && y="_" || y="-"
  [[ "$FH" == "RHEL" ]] && x="." || x="_"
  [[ $dist =~ (redhat|fedora) ]] && dist="centos7"
  [[ "$dist" == "ubuntu20" ]] && dist="focal"
  [[ "$dist" == "ubuntu18" ]] && dist="bionic"
  [[ "$dist" == "ubuntu16" ]] && dist="xenial"
  [[ "$dist" == "ubuntu14" ]] && dist="trusty"
  [[ "$dist" == "debian10" ]] && dist="buster"
  [[ "$dist" == "debian9" ]] && dist="stretch"
  [[ "$dist" == "debian8" ]] && dist="jessie"
  [[ "$FH" == "RHEL" ]] && pkgext=".rpm" || pkgext=".deb"
  [[ "$FH" == "Debian" && "$MACHARCH" == "x86_64" ]] && MACHARCH="amd64"
  reqver=$(echo "$pkg" | grep -Eo '[^!<=>]*' | tr -d "'" | sed -n '2 p')
  [[ -z "$reqver" ]] && reqver="0.12.5"
  [[ "$FH" == "RHEL" && "$MACHARCH" == "x86_64" && $reqver =~ 0.12.[14] ]] && MACHARCH="amd64"
  z="wkhtmltopdf"
  if [[ ${reqver} =~ 0.12.6 ]]; then
    reqver="0.12.6-1"
    z="packaging"
    wkhtmltopdf_wget="wkhtmltox${y}${reqver}.${dist}${x}${MACHARCH}${pkgext}"
  elif [[ ${reqver} == "0.12.5" ]]; then
    wkhtmltopdf_wget="wkhtmltox${y}${reqver}-1.${dist}${x}${MACHARCH}${pkgext}"
  elif [[ ${reqver} == "0.12.4" ]]; then
    wkhtmltopdf_wget="wkhtmltox-${reqver}_linux-generic-${MACHARCH}.tar.xz"
  else
    wkhtmltopdf_wget="wkhtmltox-${reqver}_linux-${dist}-${MACHARCH}${pkgext}"
  fi
  echo "https://github.com/wkhtmltopdf/${z}/releases/download/${reqver}/${wkhtmltopdf_wget}"
}

bin_install() {
  #bin_install(pkg VENV)
  [ $opt_verbose -gt 2 ] && echo ">>> bin_install($@)"
  local x
  local reqver size
  local FH=$(xuname -f)
  local MACHARCH=$(xuname -m)
  local dist=$(xuname -d)
  dist=${dist,,}$(xuname -v | grep -Eo [0-9]* | head -n1)
  local pkg=$1 VENV=$2
  [[ -z "$VENV" ]] && VENV="$HOME"
  if [[ -z "$XPKGS_RE" || ! $pkg =~ ($XPKGS_RE) ]]; then
    if [[ $pkg =~ lessc ]]; then
      [[ $pkg == "lessc" ]] && pkg="less@3.0.4"
      pkg=${pkg/==/@}
      pkg=$(echo $pkg | tr -d "'")
      run_traced "npm install $pkg"
      run_traced "npm install less-plugin-clean-css"
      x=$(find $(npm bin) -name lessc 2>/dev/null)
      [ -n "$x" ] && run_traced "ln -s $x $VENV/bin"
    elif [[ $pkg =~ wkhtmltopdf ]]; then
      mkdir wkhtmltox.rpm_files
      pushd wkhtmltox.rpm_files >/dev/null
      wkhtmltopdf_wget=$(get_wkhtmltopdf_dwname $pkg $FH $dist $MACHARCH)
      pkgext=$(echo wkhtmltopdf_wget | grep -Eo ".xz$")
      [[ -z "$pkgext" ]] && pkgext=${wkhtmltopdf_wget: -4}
      [ $opt_verbose -gt 0 ] && echo "Download ${wkhtmltopdf_wget}"
      wget -q --timeout=240 ${wkhtmltopdf_wget} -O wkhtmltox${pkgext}
      size=$(stat -c %s wkhtmltox${pkgext})
      if [ $size -eq 0 ]; then
        echo "File wkhtmltox${pkgext} not found!"
      elif [ "$pkgext" == ".rpm" ]; then
        run_traced "rpm2cpio wkhtmltox${pkgext} | cpio -idm"
        run_traced "cp ./usr/local/bin/wkhtmltopdf ${VENV}/bin/wkhtmltopdf"
      elif [ "$pkgext" == ".deb" ]; then
        run_traced "dpkg --extract wkhtmltox${pkgext} wkhtmltox.deb_files"
        run_traced "cp wkhtmltox.deb_files/usr/local/bin/wkhtmltopdf ${VENV}/bin/wkhtmltopdf"
        run_traced "rm -r wkhtmltox.deb*"
      else
        run_traced "tar -xf wkhtmltox${pkgext}"
        run_traced "cp ./wkhtmltox/bin/wkhtmltopdf ${VENV}/bin/wkhtmltopdf"
        run_traced "rm -fr ./wkhtmltox"
      fi
      popd >/dev/null
      rm -fR wkhtmltox.rpm_files
    fi
    x="${pkgs//+/.}"
    [[ -z $XPKGS_RE ]] && XPKGS_RE="$x" || XPKGS_RE="$XPKGS_RE|$x"
  fi
}

bin_install_1() {
  # bin_install_1(VENV)
  [ $opt_verbose -gt 2 ] && echo ">>> bin_install_1($@)"
  local pkg VENV=$1
  local binreq bin_re
  [[ -n "$opt_bins" ]] && binreq="${opt_bins//,/ }"
  if [[ -n "$opt_bins" ]]; then
    [ $opt_verbose -gt 0 ] && echo -e "\e[1m.Analyzing $opt_bins\e[0m"
    for pkg in $binreq; do
      bin_install $pkg $VENV
    done
  fi
}

pip_install() {
  #pip_install(pkg opts)
  local pkg d x srcdir popts
  local pypath=$VIRTUAL_ENV/lib/python$opt_pyver/site-packages
  pkg="${1//ยง/ }"
  [[ $pkg == "pychart" ]] && pkg="python-chart"
  [[ $pkg =~ ^(psycopg2).* ]] && pkg="psycopg2-binary>=2.0.0"
  [[ $pkg =~ ^$PYBIN_PKGS([<=>!][0-9.]+)?$ ]] && pkg="python-$pkg"
  [[ $pkg =~ "-e " ]] && pkg=${pkg//-e /--editable=}
  [[ $opt_alone -ne 0 && ! $pkg =~ ^.?- ]] && popts="--isolated --disable-pip-version-check --no-cache-dir" || popts="--disable-pip-version-check"
  [[ $PIPVER -gt 18 && ! no-warn-conflicts =~ $popts ]] && popts="$popts --no-warn-conflicts"
  [[ $PIPVER -eq 19 && ! use-feature =~ $popts ]] && popts="$popts --use-feature=2020-resolver"
  [ $opt_verbose -eq 0 ] && popts="$popts -q"
  # [[ $pkg =~ ^(psycopg2).* ]] && pkg="psycopg2-binary>=2.0.0"
  if [[ -z "$XPKGS_RE" || ! $pkg =~ ($XPKGS_RE) ]]; then
    srcdir=""
    [[ $opt_debug -eq 2 && -d $SAVED_HOME/tools/$pkg ]] && srcdir=$($READLINK -f $SAVED_HOME/tools/$pkg)
    [[ $opt_debug -eq 3 && -d $SAVED_HOME/dev/pypi/$pkg/$pkg ]] && srcdir=$($READLINK -f $SAVED_HOME/dev/pypi/$pkg/$pkg)
    [[ $opt_debug -eq 3 && -d $SAVED_HOME/devel/pypi/$pkg/$pkg ]] && srcdir=$($READLINK -f $SAVED_HOME/devel/pypi/$pkg/$pkg)
    if [[ -n "$srcdir" ]]; then
      [[ -d $pypath/$pkg && ! -L $pypath/$pkg ]] && rm -fR $pypath/$pkg
      for d in $pypath/${pkg}-*dist-info; do rm -fR $d; done
      if [[ $opt_debug -ge 2 ]]; then
        [[ -L $pypath/$pkg ]] && rm -f $pypath/$pkg
        run_traced "ln -s $srcdir $pypath"
      fi
      [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
    elif [[ $pkg =~ $EI_PKGS ]]; then
      run_traced "easy_install install $pkg"
      run_traced "$PIP install $popts --upgrade $pkg"
    elif [[ $pkg =~ $WGET_PKGS ]]; then
      d=""
      [[ $pkg == "python-chart" ]] && d="https://files.pythonhosted.org/packages/22/bf/f37ecd52d9f6ce81d4372956dc52c792de527abfadbf8393dd25deb5c90b/Python-Chart-1.39.tar.gz"
      [[ -z "$d" ]] && echo "Unknown URL for $pkg" && return
      x=$(basename $d)
      run_traced "mkdir -p $VIRTUAL_ENV/tmp"
      run_traced "cd $VIRTUAL_ENV/tmp"
      [[ -f $x ]] && run_traced "rm -f $x"
      run_traced "wget $d"
      run_traced "$PIP install $popts $x"
    elif [[ $pkg =~ $BZR_PKGS ]]; then
      x=$(which bzr 2>/dev/null)
      if [[ -z "$x" ]]; then
        echo "Package $pkg require bazar software but this software is not installed on your system"
        echo "You should install bazar ..."
        DISTO=$(xuname -d)
        FH=$(xuname -f)
        [[ $DISTO == "Fedora" ]] && echo "dnf install bzr"
        [[ ! $DISTO == "Fedora" && $FH = "RHEL" ]] && echo "yum install bzr"
        [[ $DISTO == "Debian" ]] && echo "apt-get -t lenny-backports install bzr"
        [[ $DISTO == "Ubuntu" ]] && echo "add-apt-repository ppa:bzr/ppa"
        [[ $FH == "Debian" ]] && echo "apt-get update"
      else
        run_traced "mkdir -p $HOME/bazar"
        run_traced "cd $HOME/bazar"
        run_traced "bzr branch lp:$pkg"
        d=$(find $pkg -name setup.py | head -n1)
        [[ -n "$d" ]] && d=$(dirname $d) || d=""
        if [[ -n "$d" && -d "$d" ]]; then
          run_traced "cd $d"
          run_traced "python ./setup.py install"
        else
          echo "Invalid bazar package: file setup.py not found!"
        fi
      fi
    elif [[ $opt_debug -eq 1 ]]; then
      [[ -L $pypath/$pkg ]] && rm -f $pypath/$pkg
      run_traced "$PIP install $popts --extra-index-url https://testpypi.python.org/pypi $pkg $2"
      [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
    else
      [[ -L $pypath/$pkg ]] && rm -f $pypath/$pkg
      run_traced "$PIP install $popts $pkg $2"
      [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
    fi
    x="${pkgs//+/.}"
    [[ -z $XPKGS_RE ]] && XPKGS_RE="$x" || XPKGS_RE="$XPKGS_RE|$x"
    # if [[ "$pkg" =~ $FLT_PKGS ]]; then
    #   run_traced "$PIP uninstall cryptography -y"
    #   run_traced "$PIP install $popts cryptography"
    # fi
  fi
}

pip_install_1() {
  # pip_install_1(popts)
  local pkg
  [ $opt_verbose -gt 0 ] && echo -e "\e[1m2 - Analyzing $SUP_PKGS $SECURE_PKGS $DEV_PKGS\e[0m"
  for pkg in $SUP_PKGS $SECURE_PKGS $DEV_PKGS; do
    pip_install "$pkg" "$1"
  done
}

pip_install_2() {
  # pip_install_2(popts)
  local pkg
  [ $opt_verbose -gt 0 ] && echo -e "\e[1m3 - Analyzing $OEPKGS\e[0m"
  for pkg in $OEPKGS; do
    pip_install "$pkg" "$1"
  done
}

pip_install_req() {
  # pip_install_req(popts)
  local f fn pkg flist cmd
  for f in ${opt_rfile//,/ }; do
    fn=$($READLINK -f $f)
    [ -z "$fn" ] && echo "File $f not found!"
    [ -z "$fn" ] && continue
    [ $opt_verbose -gt 0 ] && echo -e "\e[1m-- Analyzing file $fn\e[0m"
    cmd="list_requirements.py -qt python -BP"
    [[ $opt_dev -ne 0 ]] && cmd="${cmd}TR"
    [[ -n "$opt_pyver" ]] && cmd="$cmd -y$opt_pyver"
    [[ -n "$opt_oever" ]] && cmd="$cmd -b$opt_oever"
    [[ $opt_verbose -gt 1 ]] && echo "$cmd -m $fn -qs\" \""
    flist=$($cmd -m $fn -qs" ")
    [[ $opt_verbose -gt 1 ]] && echo "--> $flist"
    for pkg in $flist; do
      pip_install "$pkg" "$1"
    done
  done
}

check_bin_package() {
  # check_bin_package(pkg)
  local op reqver xreqver sts curver vpkg x
  local vpkg=$1

  op=$(echo "$vpkg" | grep -Eo '[!<=>]*' | head -n1)
  pkg=$(echo "$vpkg" | grep -Eo '[^!<=>\\[]*' | tr -d "'" | head -n1)
  reqver=$(echo "$vpkg" | grep -Eo '[^!<=>]*' | tr -d "'" | sed -n '2 p')
  [ -n "$reqver" ] && xreqver=$(echo $reqver | grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)' | awk -F. '{print $1*10000 + $2*100 + $3}') || xreqver=0
  sts=0
  curver=$($pkg --version 2>/dev/null | grep -Eo [0-9]+\.[0-9]+\.?[0-9]* | head -n1)
  if [[ -n "$reqver" ]]; then
    if [[ -z "$curver" ]]; then
      echo "Package $pkg not installed!!!"
      if [[ "$cmd" == "amend" ]]; then
        bin_install "$vpkg"
        [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
      else
        ERROR_PKGS="$ERROR_PKGS   '$pkg'"
      fi
    else
      [ -n "$curver" ] && xcurver=$(echo $curver | grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)' | awk -F. '{print $1*10000 + $2*100 + $3}') || xcurver=0
      if [[ -z "$op" ]] || [ $xcurver -ne $xreqver -a "$op" == '==' ] || [ $xcurver -ge $xreqver -a "$op" == '<' ] || [ $xcurver -le $xreqver -a "$op" == '>' ] || [ $xcurver -lt $xreqver -a "$op" == '>=' ] || [ $xcurver -gt $xreqver -a "$op" == '<=' ]; then
        echo "Package $pkg version $curver but expected $pkg$op$reqver!!!"
        if [[ "$cmd" == "amend" ]]; then
          bin_install "$vpkg"
          [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
        else
          ERROR_PKGS="$ERROR_PKGS   '$pkg'"
        fi
      else
        printf "Package %-40.40s OK\n" "${pkg}${op}${curver}........................................"
      fi
    fi
  else
    if [[ -n "$curver" ]]; then
      printf "Package %-40.40s OK\n" "${pkg}........................................"
    else
      echo "Package $pkg not installed!!!"
      ERROR_PKGS="$ERROR_PKGS   '$pkg'"
    fi
  fi
  if [[ -n "$curver" ]]; then
    x=$($READLINK -e $(which $pkg 2>/dev/null) 2>/dev/null)
    [[ -z "$x" ]] && echo "Corrupted VME: file $pkg not found!!"
    if [[ -n "$x" && ! $x =~ ^$VENV && ! -L $VENV/bin/$pkg ]]; then
      echo "Warning: file $x is outside of virtual env"
      run_traced "ln -s $x $VENV/bin"
    fi
  fi
}

bin_check_1() {
  # bin_check(cmd VENV)
  local pkg
  local binreq bin_re
  [[ -n "$opt_bins" ]] && binreq="${opt_bins//,/ }"
  [[ -z "$opt_bins" ]] && binreq="${BIN_PKGS//|/ }" && binreq="${binreq:1:-1}"
  [ $opt_verbose -gt 0 ] && echo -e "\e[1m-- Analyzing bin $binreq\e[0m"
  for pkg in $binreq; do
    check_bin_package $pkg
  done
}

check_package() {
  # check_package(pkg cmd)
  local op reqver xreqver sts curver vpkg x
  local vpkg=$1

  op=$(echo "$vpkg" | grep -Eo '[!<=>]*' | head -n1)
  pkg=$(echo "$vpkg" | grep -Eo '[^!<=>\\[]*' | tr -d "'" | head -n1)
  reqver=$(echo "$vpkg" | grep -Eo '[^!<=>]*' | tr -d "'" | sed -n '2 p')
  [[ -n "$reqver" ]] && xreqver=$(echo $reqver | grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)' | awk -F. '{print $1*10000 + $2*100 + $3}') || xreqver=0
  sts=0
  if [[ -n "$reqver" ]]; then
    curver=$($PIP show $pkg | grep ^[Vv]ersion | awk -F: '{print $2}' | tr -d ', \r\n\(\)') || curver=
    if [[ -z "$curver" ]]; then
      echo "Package $pkg not installed!!!"
      if [[ "$cmd" == "amend" ]]; then
        pip_install "$vpkg"
        [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
      else
        ERROR_PKGS="$ERROR_PKGS   '$pkg'"
      fi
    else
      [[ -n "$curver" ]] && xcurver=$(echo $curver | grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)' | awk -F. '{print $1*10000 + $2*100 + $3}') || xcurver=0
      if [[ -z "$op" ]] || [ $xcurver -ne $xreqver -a "$op" == '==' ] || [ $xcurver -ge $xreqver -a "$op" == '<' ] || [ $xcurver -le $xreqver -a "$op" == '>' ] || [ $xcurver -lt $xreqver -a "$op" == '>=' ] || [ $xcurver -gt $xreqver -a "$op" == '<=' ]; then
        echo "Package $pkg version $curver but expected $pkg$op$reqver!!!"
        if [[ "$cmd" == "amend" ]]; then
          pip_install "$vpkg" "--upgrade"
          [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
        else
          ERROR_PKGS="$ERROR_PKGS   '$pkg'"
        fi
      else
        printf "Package %-40.40s OK\n" "${pkg}${op}${reqver}........................................"
      fi
    fi
  else
    eval $PIP show $pkg &>/dev/null
    if [ $? -eq 0 ]; then
      printf "Package %-40.40s OK\n" "${pkg}........................................"
    else
      echo "Package $pkg not installed!!!"
      if [[ "$cmd" == "amend" ]]; then
        pip_install "$vpkg"
        [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
      else
        ERROR_PKGS="$ERROR_PKGS   '$pkg'"
      fi
    fi
  fi
  x=$($PIP show $pkg | grep ^[Ll]ocation | awk -F: '{print $2}' | tr -d ', \r\n\(\)')
  [[ -n "$x" && ! $x =~ ^$VENV ]] && echo "Warning: file $x is outside of virtual env"
}

pip_check_1() {
  # pip_check_1(cmd)
  local pkg cmd=$1
  local op reqver xreqver sts curver vpkg
  [ $opt_verbose -gt 0 ] && echo -e "\e[1m1 - Analyzing\e[0m"
  for vpkg in $SUP_PKGS $SECURE_PKGS $DEV_PKGS; do
    check_package $vpkg $cmd
  done
}

pip_check_2() {
  # pip_check_2(cmd)
  local pkg cmd=$1
  [ $opt_verbose -gt 0 ] && echo -e "\e[1m2 - Analyzing\e[0m"
  for vpkg in $OEPKGS; do
    check_package $vpkg $cmd
  done
}

pip_check_req() {
  # pip_check_req(cmd)
  local f fn pkg cmd=$1 flist cmd
  for f in ${opt_rfile//,/ }; do
    fn=$($READLINK -f $f)
    [ -z "$fn" ] && echo "File $f not found!"
    [ -z "$fn" ] && continue
    [ $opt_verbose -gt 0 ] && echo -e "\e[1m-- Analyzing file $fn\e[0m"
    cmd="list_requirements.py -qt python -BP"
    [[ $opt_dev -ne 0 ]] && cmd="${cmd}TR"
    [[ -n "$opt_pyver" ]] && cmd="$cmd -y$opt_pyver"
    [[ -n "$opt_oever" ]] && cmd="$cmd -b$opt_oever"
    [[ $opt_verbose -gt 1 ]] && echo "$cmd -m $fn -qs\" \""
    flist=$($cmd -m $fn -qs" ")
    [[ $opt_verbose -gt 1 ]] && echo "--> $flist"
    for pkg in $flist; do
      check_package $pkg $cmd
    done
  done
}

package_debug() {
  # package_debug(VENV)
  local VENV=$1
  local pkg pkgdir
  local pkgs="${LOCAL_PKGS//|/ }"
  pkgs="${pkgs:1:-1}"
  [[ -d $HOME/dev/pypi ]] && pkgdir=$HOME/dev/pypi
  [[ -d $HOME/devel/pypi ]] && pkgdir=$HOME/devel/pypi
  if [[ -n "$pkgdir" ]]; then
    for pkg in $pkgs; do
      [[ -d $pkgdir/$pkg/$pkg && :$PATH: =~ :$pkgdir/$pkg/$pkg: && -n "$PYTHONPATH" ]] || export PYTHONPATH=$pkgdir/$pkg:$PYTHONPATH
      [[ -d $pkgdir/$pkg/$pkg && :$PATH: =~ :$pkgdir/$pkg/$pkg: && -z "$PYTHONPATH" ]] || export PYTHONPATH=$pkgdir/$pkg
    done
  fi
}

custom_env() {
  # custom_env(VENV pyver)
  [ $opt_verbose -gt 2 ] && echo ">>> custom_env($@)"
  local VIRTUAL_ENV=$1 pyver=$(echo $2|grep -Eo [0-9]|head -n1)
  sed -i -e 's:VIRTUAL_ENV=.*:VIRTUAL_ENV="\$(readlink -f \$(dirname \$(readlink -f \$BASH_SOURCE))/..)":g' $PWD/bin/activate
  if $(grep -q "^export HOME=" $PWD/bin/activate); then
    sed -i -e 's|^export HOME=.*|export HOME="\$VIRTUAL_ENV"|g' $PWD/bin/activate
  elif $(grep -q "^# export HOME=" $PWD/bin/activate); then
    sed -i -e 's|^# export HOME=.*|# export HOME="\$VIRTUAL_ENV"|g' $PWD/bin/activate
  else
    [[ $opt_alone -ne 0 ]] && sed -ri "/deactivate *\(\) *\{/a\    export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate
    [[ $opt_alone -eq 0 ]] && sed -ri "/deactivate *\(\) *\{/a\    # export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate
    [ $pyver -gt 2 -a $opt_keep -eq 0 ] && sed -ri "/deactivate *\(\) *\{/a\    unalias pip &>/dev/null" $PWD/bin/activate
    [ $pyver -gt 2 -a $opt_keep -eq 0 ] && sed -ri "/deactivate *\(\) *\{/a\    unalias python &>/dev/null" $PWD/bin/activate
    [ $opt_spkg -ne 0 -a -n "$2" ] && echo "[ -f /usr/bin/pip$2 -a ! -f \$VIRTUAL_ENV/bin/pip ] && ln -s /usr/bin/pip$2 \$VIRTUAL_ENV/bin/pip" >>$PWD/bin/activate
    echo "for f in \$VIRTUAL_ENV/bin/*;do" >>$PWD/bin/activate
    echo "    [[ -x \$f && ! -d \$f ]] && grep -q \"^#\!.*/bin/python\" \$f &>/dev/null && sed -i -e \"s|^#\!.*/bin/python|#\!\$VIRTUAL_ENV/bin/python|\" \$f" >>$PWD/bin/activate
    echo "done" >>$PWD/bin/activate
    [ $opt_alone -ne 0 ] && echo "export HOME=\"\$VIRTUAL_ENV\"" >>$PWD/bin/activate
    [ $opt_alone -eq 0 ] && echo "# export HOME=\"\$VIRTUAL_ENV\"" >>$PWD/bin/activate
    [ $pyver -gt 2 -a $opt_keep -eq 0 ] && echo "alias pip=$PIP" >>$PWD/bin/activate
    [ $pyver -gt 2 -a $opt_keep -eq 0 ] && echo "alias python=$PYTHON" >>$PWD/bin/activate
  fi
  sed -i -e 's|PATH="\$VIRTUAL_ENV/bin:\$PATH"|PATH="\$VIRTUAL_ENV/.local/bin:\$VIRTUAL_ENV/bin:\$PATH"|g' $PWD/bin/activate
  if [ $opt_spkg -ne 0 ]; then
    if [[ -d $PWD/.local/lib/python$2/site-packages ]]; then
      echo -e "import site\nsite.addsitedir('$PWD/.local/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib64/python$2/site-packages')\n" >$PWD/lib/python$2/site-packages/sitecustomize.py
    else
      echo -e "import site\nsite.addsitedir('/usr/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib64/python$2/site-packages')\n" >$PWD/lib/python$2/site-packages/sitecustomize.py
    fi
  elif [[ -d $PWD/.local/lib/python$2/site-packages ]]; then
    echo -e "import site\nsite.addsitedir('$PWD/.local/lib/python$2/site-packages')\n" >$PWD/lib/python$2/site-packages/sitecustomize.py
  fi
  # pop_cd
}

set_pyver_files() {
  local pyexe pyver
  if [ -n "$opt_pyver" ]; then
    pyver=$(echo $opt_pyver | grep -o [0-9] | head -n1)
    pyexe=$(which python$opt_pyver 2>/dev/null)
    if [[ -n "$pyexec" ]]; then
      PYTHON=$pyexec
    else
      [[ $pyver -gt 2 ]] && PYTHON=python3
      [[ $pyver -le 2 ]] && PYTHON=python
    fi
    pyexe=$(which pip$opt_pyver 2>/dev/null)
    if [[ -n "$pyexec" ]]; then
      PIP=$pyexec
    else
      [[ $pyver -gt 2 ]] && PIP=pip3
      [[ $pyver -le 2 ]] && PIP=pip
    fi
  elif [[ -z "$PIP" ]]; then
    PIP=pip3
    PYTHON=python3
  fi
  PIPVER=$($PIP --version | grep -Eo [0-9]+ | head -n1)
}

venv_mgr_check_src_path() {
  # venv_mgr_check_src_path(VENV create)
  [ $opt_verbose -gt 2 ] && echo ">>> venv_mgr_check_src_path($@)"
  local f VENV
  VENV="$1"
  if [[ -z "$VENV" ]]; then
    [[ -z "$2" ]] && echo "Missed virtual environment path!!"
    [[ -n "$2" ]] && echo "Missed python version!!"
    exit 1
  fi
  if [[ -z "$2" ]] && [[ ! -d $VENV || ! -d $VENV/lib || ! -d $VENV/bin || ! -f $VENV/bin/activate ]]; then
    echo "Invalid virtual env $VENV!!"
    exit 1
  fi
  cd_venv "$VENV" "-fq"
  # do_activate "-q"
  for f in ./bin/python[23].*; do
    PYTHON=$(echo $f | grep -Eo "python[2-3]\.[0-9]")
    break
  done
  [[ -z "$PYTHON" && -x ./bin/python ]] && PYTHON=$($READLINK -e ./bin/python)
  [[ -z "$PYTHON" && -n "$2" ]] && PYTHON=$(which python 2>/dev/null)
  if [[ -z "$PYTHON" ]]; then
    echo "Virtual env $VENV without python!!"
    exit 1
  fi
  opt_pyver=$($PYTHON --version 2>&1 | grep -Eo "[0-9]\.[0-9]")
  check_4_needing_pkgs $VENV
  pop_cd "-q"
  [ $opt_verbose -gt 0 ] && echo "### Python version $opt_pyver ... ###"
}

check_4_needing_pkgs() {
  local p x
  NEEDING_PKGS="future configparser os0 z0lib"
  for p in $NEEDING_PKGS; do
    x=${p^^}
    eval $x=$($PIP show $p 2>/dev/null | grep "Version" | grep -Eo "[0-9.]+")
  done
}

check_installed_pkgs() {
  local p x
  check_4_needing_pkgs
  for p in $NEEDING_PKGS; do
    x=${p^^}
    [[ -z "${!x}" ]] && $PIP install -q $p
  done
  check_4_needing_pkgs
}

venv_mgr_check_oever() {
  #venv_mgr_check_oever action
  local p x
  if [[ -z "$opt_oever" && ! $1 =~ (help|create) ]]; then
    p=""
    for x in odoo openerp server; do
      [[ -d $p2/odoo/$x ]] && p="$p $p2/odoo/$x"
      [[ ! $x == "odoo" && -d $p2/$x ]] && p="$p $p2/$x"
    done
    [ $opt_verbose -gt 2 ] && echo ">>> find -L $p -not -path \"*/__to_remove/*\" -not -path \"*/lib/*\" -not -path \"*/lib64/*\"  -not -path \"*/tests/res/*\" -name release.py"
    x=$(find -L $p -not -path "*/__to_remove/*" -not -path "*/lib/*" -not -path "*/lib64/*" -not -path "*/tests/res/*" -name release.py)
    if [[ -n "$x" ]]; then
      p=$(dirname $x)
      cd_venv $p -fq
      x=$(echo -e "import release\nprint(release.version)\n" | python)
      opt_oever="$x"
      pop_cd -q
    fi
  fi
  set_pyver_files
  if [[ ! $1 =~ (help|create) ]]; then
    [ -n "$opt_oever" -a $opt_verbose -gt 0 ] && echo "### Odoo version $opt_oever ...  ###"
    check_installed_pkgs
  else
    check_4_needing_pkgs
  fi
}

do_venv_mgr_test() {
  #do_venv_mgr_test(VENV)
  [ $opt_verbose -gt 2 ] && echo ">>> do_venv_mgr_test($@)"
  local f x VENV
  VENV="$1"
  [ $opt_verbose -gt 0 ] && echo "Validation test ..."
  [ $opt_dry_run -ne 0 ] && return
  cd_venv $VENV "-fq"
  if [[ -z "$VIRTUAL_ENV" ]]; then
    do_activate "-q"
    if [ $opt_verbose -gt 0 ]; then
      [[ -n "$HOME" && ! "$HOME" == "$SAVED_HOME" ]] && echo "Isolated environment (created with -I switch)."
      [[ "$HOME" == "$SAVED_HOME" ]] && echo "Environment not isolated (created w/o -I switch)."
    fi
    [[ -z "$HOME" ]] && echo "Wrong environment (No HOME directory declared)."
    [[ $opt_dev -eq 0 ]] && echo "Environment w/o devel packages." || echo "Environment with devel packages (created with -D switch)."
  fi
  [ $opt_verbose -gt 1 ] && echo "VPATH=$PATH"
  [ $opt_verbose -gt 1 ] && echo "VPYTHONPATH=$PYTHONPATH"
  for f in $PYTHON $PIP; do
    f=$(echo $f | awk -F= '{print $1}')
    x=$($READLINK -e $(which $f 2>/dev/null) 2>/dev/null)
    [[ -z "$x" ]] && echo "Corrupted VME: file $f not found!!"
    [[ -z "$x" ]] && continue
    [[ -n "$x" && ! $x =~ ^$VENV ]] && echo "Warning: file $x is outside of virtual env"
  done
  do_deactivate "-q"
  pop_cd "-q"
}

do_venv_mgr() {
  # do_venv_mgr {amend|check|cp|mv|merge|reset|test} VENV NEW_VENV
  [ $opt_verbose -gt 2 ] && echo ">>> do_venv_mgr($@)"
  local d f mime VENV V sitecustom x lropts
  local cmd=$1
  VENV="$2"
  [ -n "$3" ] && VENV_TGT=$($READLINK -m $3)
  [[ $cmd =~ (amend|check|reset|test) ]] && VENV_TGT=$VENV
  if [[ -z "$VENV" || -z "$VENV_TGT" ]]; then
    echo "Missed parameters!"
    echo "use: venv_mgr ${CMDS// /|} VENV NEW_VENV"
    exit 1
  fi
  if [[ "$VENV" == "$VENV_TGT" && ! $cmd =~ (amend|check|reset|test) ]]; then
    echo "Source and destination directories are the same!"
    echo "use: venv_mgr ${CMDS// /|} VENV NEW_VENV"
    exit 1
  fi
  if [[ $cmd =~ (amend|reset) ]]; then
    grep -q "^ *\[ -x \$f -a ! -d \$f ] " $VENV/bin/activate &>/dev/null
    if [[ $? -eq 0 ]]; then
      echo "Wrong activation script $VENV/bin/activate"
      sed -Ee "s|^ *\[ -x \\\$f -a ! -d \\\$f ] |    [[ -x \$f \&\& ! -d \$f ]] \&\& grep -q \"^#\!.*/bin/python\" \$f \&>/dev/null |" -i $VENV/bin/activate
    fi
  fi
  cd_venv "$VENV" "-fq"
  do_activate "-q"
  [[ -n "$opt_oepath" ]] && lropts="-y $opt_pyver -BPRT -p $opt_oepath" || lropts="-y $opt_pyver -BPRT"
  [[ -n "$opt_oever" ]] && lropts="$lropts -b $opt_oever"
  [ $opt_verbose -gt 1 ] && echo "list_requirements.py -qs' ' $lropts -t bin"
  BINPKGS=$(list_requirements.py -qs' ' $lropts -t bin)
  [ $opt_verbose -gt 1 ] && echo "list_requirements.py -qs' ' $lropts -t python"
  OEPKGS=$(list_requirements.py -qs' ' $lropts -t python)
  do_deactivate "-q"
  pop_cd "-q"
  if [[ $cmd =~ (amend|check|reset|test) ]]; then
    V=$VENV
  elif [[ "$cmd" == "cp" ]]; then
    if [[ -d $VENV_TGT ]]; then
      if [ $opt_force -eq 0 ]; then
        echo "Destination v.environment $VENV_TGT already exists!!"
        echo "use: venv_mgr cp -f VENV NEW_VENV"
        exit 1
      fi
      run_traced "rm -fR $VENV_TGT"
    fi
    [[ -d $(dirname $VENV_TGT) ]] || run_traced "mkdir -p $(dirname $VENV_TGT)"
    run_traced "cp -r $VENV $VENV_TGT"
    V=$VENV_TGT
  elif [[ "$cmd" == "merge" ]]; then
    if [[ ! -d $VENV_TGT || ! -d $VENV_TGT/bin || ! -f $VENV_TGT/bin/activate ]]; then
      echo "Invalid destination virtual env $VENV_TGT!"
      exit 1
    fi
    for d in bin include lib lib64 .local; do
      if [ -d "$VENV/$d" ]; then
        [ $opt_verbose -gt 1 ] && run_traced "rsync -a $VENV/$d/ $VENV_TGT/$d/"
        [ $opt_verbose -eq 0 ] && run_traced "rsync -aq $VENV/$d/ $VENV_TGT/$d/"
      fi
    done
    V=$VENV_TGT
  else
    if [[ -d $VENV_TGT ]]; then
      echo "Destination virtual env $VENV_TGT already exists!"
      exit 1
    fi
    V=$VENV
  fi
  if [[ ! $cmd =~ (amend|check|test) ]]; then
    for f in $V/bin/*; do
      mime=$(file --mime-type -b $f)
      if [ "$mime" == "text/x-python" -o "${f: -3}" == ".py" ]; then
        [ $opt_verbose -gt 1 ] && echo "$FLAG sed -i -e \"s|^#\!.*/bin/python|#\!$VENV_TGT/bin/python|\" $f"
        [ $opt_dry_run -eq 0 ] && sed -i -e "s|^#\!.*/bin/python|#\!$VENV_TGT/bin/python|" $f
        [ $opt_dry_run -eq 0 -a "$cmd" == "reset" ] && chmod +x $f
      fi
    done
  fi
  if [[ ! "$cmd" == "test" ]]; then
    cd_venv $V -f
    do_activate
    if [ $opt_dry_run -eq 0 -a -L ./lib64 ]; then
      rm -f ./lib64
      ln -s ./lib ./lib64
    fi
    [[ ! $cmd =~ (amend|check|cp) ]] && bin_install_1 $VENV
    [[ $cmd =~ (amend|check) ]] && bin_check_1 $VENV
    run_traced "pip install pip -U"
    PIPVER=$($PIP --version | grep -Eo [0-9]+ | head -n1)
    [[ ! $cmd =~ (amend|check|cp) ]] && pip_install_1 "--upgrade"
    [[ $cmd =~ (amend|check) ]] && pip_check_1 $cmd
    [[ -n "$opt_oever" && "$cmd" == "reset" ]] && pip_install_2 "--upgrade"
    [[ -n "$opt_oever" && $cmd =~ (amend|check) ]] && pip_check_2 $cmd
    [[ "$cmd" == "reset" && -n "$opt_rfile" ]] && pip_install_req "--upgrade"
    [[ $cmd =~ (amend|check) && -n "$opt_rfile" ]] && pip_check_req $cmd
    if [[ ! $cmd == "check" && -z "$VENV_STS" ]]; then
      run_traced "sed -i -e 's:VIRTUAL_ENV=.*:VIRTUAL_ENV=\"'$VENV_TGT'\":g' $PWD/bin/activate"
      if $(grep -q "^# export HOME=" $PWD/bin/activate); then
        [ $opt_alone -eq 0 ] && run_traced "sed -i -e 's|^# export HOME=.*|# export HOME=\"\$VIRTUAL_ENV\"|g' $PWD/bin/activate"
        [ $opt_alone -ne 0 ] && run_traced "sed -i -e 's|^# export HOME=.*|export HOME=\"\$VIRTUAL_ENV\"|g' $PWD/bin/activate"
      elif $(grep -q "^export HOME=" $PWD/bin/activate); then
        [ $opt_alone -ne 0 ] && run_traced "sed -i -e 's|^export HOME=.*|export HOME=\"\$VIRTUAL_ENV\"|g' $PWD/bin/activate"
        [ $opt_alone -eq 0 ] && run_traced "sed -i -e 's|^export HOME=.*|# export HOME=\"\$VIRTUAL_ENV\"|g' $PWD/bin/activate"
      fi
      if $(grep -q "^ *# export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate); then
        [ $opt_alone -ne 0 ] && run_traced "sed -i -e 's|# export HOME=\$(grep|export HOME=\$(grep|' $PWD/bin/activate"
      elif $(grep -q "^ *export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate); then
        [ $opt_alone -eq 0 ] && run_traced "sed -i -e 's|export HOME=\$(grep|# export HOME=\$(grep|' $PWD/bin/activate"
      fi
      if [ $opt_dry_run -eq 0 ]; then
        if [ $opt_spkg -ne 0 ]; then
          if [[ -d $PWD/.local/lib/python$opt_pyver/site-packages ]]; then
            sitecustom=$PWD/.local/lib/python$opt_pyver/site-packages/sitecustomize.py
            echo "import sys" >$sitecustom
            echo -e "import site\nif '$VENV_TGT/.local/lib/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('$VENV_TGT/.local/lib/python$opt_pyver/site-packages')\nif '/usr/lib/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('/usr/lib/python$opt_pyver/site-packages')\nif '/usr/lib64/python$opt_pyver/site-packages' not in sys.path:     site.addsitedir('/usr/lib64/python$opt_pyver/site-packages')\n" >>$sitecustom
          else
            sitecustom=$PWD/lib/python$opt_pyver/site-packages/sitecustomize.py
            echo "import sys" >$sitecustom
            echo -e "import site\nif '/usr/lib/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('/usr/lib/python$opt_pyver/site-packages')\nif '/usr/lib64/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('/usr/lib64/python$opt_pyver/site-packages')\n" >>$sitecustom
          fi
        elif [[ -d $PWD/.local/lib/python$opt_pyver/site-packages ]]; then
          sitecustom=$PWD/.local/lib/python$opt_pyver/site-packages/sitecustomize.py
          echo "import sys" >$sitecustom
          echo -e "import site\nif '$VENV_TGT/.local/lib/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('$VENV_TGT/.local/lib/python$opt_pyver/site-packages')\n" >>$sitecustom
        fi
        if [[ -n "$sitecustom" ]]; then
          x=$sitecustom
          while [[ ! "$x" == "/" && ! "$(basename $x)" == "lib" ]]; do x=$(dirname $x); done
          x=$(dirname $x)
          x=$x/bin
          [[ ! :$PATH: =~ :$x: ]] && export PATH=$x:$PATH
        fi
      fi
    fi
    do_deactivate
    [[ -n "$opt_oever" && ("$cmd" == "reset" && ! -L ./odoo) ]] && run_traced "ln -s $opt_oepath $($READLINK -f ./odoo)"
    pop_cd
    if [[ "$cmd" == "mv" ]]; then
      run_traced "mv $VENV $VENV_TGT"
    fi
  fi
  do_venv_mgr_test $V
}

do_venv_create() {
  # do_venv_create VENV
  [ $opt_verbose -gt 2 ] && echo ">>> do_venv_create($@)"
  local f p pkg VENV xpkgs v lropts
  local venvexe pyexe
  export VENV__SAVED_HOME=$HOME
  VENV="$1"
  [[ -z "$opt_pyver" ]] && venv_mgr_check_src_path "$VENV" "create"
  set_pyver_files
  if [[ -d $VENV ]]; then
    if [ $opt_force -eq 0 ]; then
      echo "Warning: virtual environment $VENV already exists!!"
    else
      run_traced "rm -fR $VENV"
    fi
  fi
  hash -r
  pyexe=$(which python$opt_pyver 2>/dev/null)
  [[ -z "$pyexe" ]] && pyexe=$(which $PYTHON 2>/dev/null)
  opt_pyver=$($pyexe --version 2>&1 | grep -Eo "[0-9]\.[0-9]")
  venvexe=$(which virtualenv 2>/dev/null)
  if [[ -n "$venvexe" ]]; then
    v=$(virtualenv --version 2>&1 | grep -Eo [0-9]+ | head -n1)
    if [ $v -gt 17 ]; then
      [ $opt_spkg -ne 0 ] && p="--system-site-packages"
    else
      [ $opt_spkg -ne 0 ] && p="--system-site-packages" || p="--no-site-packages"
    fi
    [[ -d $VENV ]] && p="$p --clear"
    [ $opt_alone -ne 0 ] && p="$p --always-copy"
    p="$p -q"
    p="$p -p $pyexe"
  else
    $pyexe -m venv --help &>/dev/null
    if [ $? -ne 0 ]; then
      echo "No virtualenv / venv package found!"
      exit 1
    fi
    venvexe="$pyexe -m venv"
    [ $opt_spkg -ne 0 ] && p="--system-site-packages"
    [[ -d $VENV ]] && p="$p --clear"
    [ $opt_alone -ne 0 ] && p="$p --copies"
  fi
  run_traced "$venvexe $p $VENV"
  sts=$?
  [ $sts -ne 0 ] && return
  cd_venv $VENV -f
  do_activate
  run_traced "$PIP install pip -U"
  PIPVER=$($PIP --version | grep -Eo [0-9]+ | head -n1)
  for pkg in $NEEDING_PKGS; do
    pip_install $pkg
  done
  [[ -n "$opt_oepath" ]] && lropts="-y $opt_pyver -BPRT -p $opt_oepath" || lropts="-y $opt_pyver -BPRT"
  [[ -n "$opt_oever" ]] && lropts="$lropts -b $opt_oever"
  [ $opt_verbose -gt 1 ] && echo "list_requirements.py -qs' ' $lropts -t bin"
  BINPKGS=$(list_requirements.py -qs' ' $lropts -t bin)
  [ $opt_verbose -gt 1 ] && echo "list_requirements.py -qs' ' $lropts -t python"
  OEPKGS=$(list_requirements.py -qs' ' $lropts -t python)
  bin_install_1 $VENV
  [ $opt_dry_run -eq 0 ] && custom_env $VENV $opt_pyver
  pip_install_1
  # [ $opt_dev -eq 0 ] && DEV_PKGS=
  [ -n "$opt_oever" ] && pip_install_2
  [ -n "$opt_rfile" ] && pip_install_req
  do_deactivate
  [[ -n "$opt_oever" && -d $HOME/$opt_oever ]] && run_traced "ln -s $opt_oepath $($READLINK -f ./odoo)"
  pop_cd
  do_venv_mgr_test $VENV
}

do_venv_exec() {
  # do_venv_exec VENV cmd
  local d f mime VENV V sitecustom
  VENV="$1"
  cd_venv $VENV -f
  do_activate
  run_traced "$2 $3 $4 $5 $6 $7 $8 $9"
  do_deactivate
  pop_cd
}

do_venv_pip() {
  # do_venv_pip VENV action pkg
  local d f VENV V popts
  local SAVED_PATH=$PATH
  local cmd="$2"
  VENV="$1"
  if [ $opt_alone -ne 0 ]; then
    V=""
    for d in ${PATH//:/ }; do
      [[ ! $d =~ ^$HOME/ || $d =~ ^/(usr/bin) ]] && V="$V:$d"
    done
    PATH=${V:1}
    [ $opt_verbose -ne 0 ] && echo "$ PATH=$PATH"
  fi
  V=""
  cd_venv "$VENV" "-f"
  do_activate
  pkg="$3"
  [[ $pkg == "pychart" ]] && pkg="python-chart"
  [[ $pkg =~ ^(psycopg2).* ]] && pkg="psycopg2-binary>=2.0.0"
  [[ $pkg =~ ^$PYBIN_PKGS([<=>!][0-9.]+)?$ ]] && pkg="python-$pkg"
  [[ $pkg =~ "-e " ]] && pkg=${pkg//-e /--editable=}
  [[ $opt_alone -ne 0 && ! $pkg =~ ^- ]] && popts="--isolated --disable-pip-version-check --no-cache-dir" || popts="--disable-pip-version-check"
  [[ $PIPVER -gt 18 && ! no-warn-conflicts =~ $popts ]] && popts="$popts --no-warn-conflicts"
  [[ $PIPVER -eq 19 && ! use-feature =~ $popts ]] && popts="$popts --use-feature=2020-resolver"
  [ $opt_verbose -eq 0 ] && popts="$popts -q"
  if [[ $pkg =~ $BIN_PKGS ]]; then
    [[ "$cmd" == "install" ]] && bin_install "$pkg" "$1"
  elif [[ $pkg =~ $EI_PKGS && "$cmd" == "install" ]]; then
    pip_install "$pkg" "$popts"
  elif [[ $pkg =~ $BZR_PKGS && "$cmd" == "install" ]]; then
    pip_install "$pkg"
  else
    [[ $cmd =~ (info|show) ]] && run_traced "$PIP show $pkg"
    # [[ "$cmd" == "install" ]] && run_traced "$PIP $cmd $pkg $popts"
    [[ $cmd == "install" ]] && pip_install "$pkg"
    [[ "$cmd" == "uninstall" ]] && run_traced "$PIP $cmd $pkg"
    # [[ "$cmd" == "update" ]] && run_traced "$PIP install $pkg $popts --upgrade"
    [[ $cmd == "update" ]] && pip_install "$pkg" "--upgrade"
  fi
  do_deactivate
  pop_cd
  export PATH=$SAVED_PATH
}

OPTOPTS=(h        a        B         C      D       f         k        I         n           O         o          p         q           r         s        V           v)
OPTDEST=(opt_help opt_bins opt_debug opt_cc opt_dev opt_force opt_keep opt_alone opt_dry_run opt_oever opt_oepath opt_pyver opt_verbose opt_rfile opt_spkg opt_version opt_verbose)
OPTACTI=(1        "="      "+"       1      1       1         1        1         1           "="       "="        "="       0           "="       1        "*>"        "+")
OPTDEFL=(0        ""       0         0      0       0         0        0         0           ""        ""         ""        -1          ""        0        ""          -1)
OPTMETA=("help"   "list"   ""        ""     ""      ""        ""       ""        ""          "ver"     "dir"      "pyver"   ""          "file"    ""       "version"   "verbose")
OPTHELP=("this help"
  "bin packages to install (* means wkhtmltopdf,lessc)"
  "debug mode: use unstable packages (testpypi / local tools / local devel)"
  "clear cache before execute pip command"
  "create v.environment with development packages"
  "force v.environment create, even if exists or inside another virtual env"
  "keep python2 executable as python"
  "run pip in an isolated mode, ignoring environment variables and user configuration"
  "do nothing (dry-run)"
  "install pypi required by odoo ver (amend, create or reset)"
  "odoo path:used to search odoo requirements and linked in venv"
  "python version"
  "silent mode"
  "after created v.environment install from the given requirements file"
  "create v.environment with access to the global site-packages"
  "show version"
  "verbose mode")
OPTARGS=(p1 p2 p3 p4 p5 p6 p7 p8 p9)
# no-global-site-packages.txt
parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
ACTIONS="help amend cp check create exec info install merge mv python shell rm show update test reset"
REXACT="(${ACTIONS// /|})"
if [[ $p1 =~ $REXACT ]]; then
  action=$p1
elif [[ $p2 =~ $REXACT ]]; then
  action=$p2
  p2=$p1
fi
[[ -z "$action" ]] && opt_help=1
# It runs inside travis test environment too
[[ -z "$opt_pyver" && -n "$TRAVIS_PYTHON_VERSION" ]] && opt_pyver=$TRAVIS_PYTHON_VERSION
[ $opt_verbose -eq -1 ] && opt_verbose=1
if [ $opt_help -gt 0 ]; then
  print_help "Manage virtual environment\naction may be: $ACTIONS" "(C) 2018-2021 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi
[ $opt_verbose -gt 3 ] && set -x
if [[ $action == "create" && -n "$VIRTUAL_ENV" ]] && [ ${opt_force:-0} -eq 0 ]; then
  echo "You cannot create a new virtual environment inside the current virtual environment"
  exit 1
fi
if [[ ! $action =~ (help|create) ]]; then
  p1=
  if [[ -n "$VIRTUAL_ENV" ]]; then
    if [[ ! -f $VIRTUAL_ENV/bin/activate ]]; then
      echo "Invalid virtual environment"
      exit 1
    fi
    p1=$VIRTUAL_ENV
    VENV_STS="pre"
  else
    if [[ -d "$p2" ]]; then
      p1=$($READLINK -e $p2)
      unset p2
    fi
    VENV_STS=""
  fi
  [[ -z "$p1" ]] && p1=$($READLINK -e ./)
  [[ ! -f $p1/bin/activate && -f $HOME/bin/activate ]] && p1=$($READLINK -e $HOME)
  if [[ -z "$p2" ]]; then
    p2=$p1
  else
    p9="$p8"
    p8="$p7"
    p7="$p6"
    p6="$p5"
    p5="$p4"
    p4="$p3"
    p3="$p2"
    p2="$p1"
  fi
  unset p1
fi
DO_POP=0
DO_DEACT=0
export PYTHONWARNINGS="ignore"
if [[ ! $action == "create" && -f $p2/bin/activate ]]; then
  grep -q "^export HOME=\"\$VIRTUAL_ENV\"" $p2/bin/activate && opt_alone=1
  [[ $opt_dev -eq 0 ]] && x=$(find ${p2}/lib -name pylint -o -name unittest2 -o -name coverage -o -name flake8 | wc -l)
  [[ $opt_dev -eq 0 && ${x:-0} -gt 1 ]] && opt_dev=1
fi
SAVED_HOME=$HOME
SAVED_PYTHONPATH=$PYTHONPATH
[[ $opt_alone -ne 0 ]] && PYTHONPATH=""
[[ $opt_debug -eq 2 && -d $HOME/tools && :$PATH: =~ :$HOME/tools: && -n "$PYTHONPATH" ]] && PYTHONPATH=$HOME/tools:$PYTHONPATH
[[ $opt_debug -eq 2 && -d $HOME/tools && :$PATH: =~ :$HOME/tools: && -z "$PYTHONPATH" ]] && PYTHONPATH=$HOME/tools
[[ $opt_debug -eq 3 ]] && package_debug
FLAG=">"
[ $opt_dry_run -eq 0 ] && FLAG="\$"
[[ -n "$opt_oever" && -z "$opt_oepath" && -d $HOME/odoo/$opt_oever/odoo ]] && opt_oepath="$HOME/odoo/$opt_oever/odoo"
[[ -n "$opt_oever" && -z "$opt_oepath" && -d $HOME/odoo/$opt_oever ]] && opt_oepath="$HOME/odoo/$opt_oever"
[[ -n "$opt_oever" && -z "$opt_oepath" && -d $HOME/$opt_oever/odoo ]] && opt_oepath="$HOME/$opt_oever/odoo"
[[ -n "$opt_oever" && -z "$opt_oepath" && -d $HOME/$opt_oever ]] && opt_oepath="$HOME/$opt_oever"
[ $opt_verbose -gt 2 ] && echo "# Odoo dir = '$opt_oever'"
if [[ $action == "rm" ]]; then
  [[ $PWD == $($READLINK -f $p2) ]] && cd
  rm -fR $p2
  hash -r
  exit 0
elif [[ ! $action =~ (help|create) ]]; then
  cd_venv $p2 "-q"
  do_activate "-q"
  [[ -z "$opt_pyver" ]] && venv_mgr_check_src_path $p2
  [[ -n "$opt_pyver" ]] && set_pyver_files
fi
[[ "$opt_bins" == "*" ]] && opt_bins="${BIN_PKGS//|/,}" && opt_bins="${opt_bins:1:-1}"
venv_mgr_check_oever $action
# [ $opt_dev -eq 0 -a -d "$p2" ] && x=$(find ${p2}/lib -name pylint -o -name unittest2 -o -name coverage -o -name flake8 | wc -l)
# [ $opt_dev -eq 0 -a ${x:-0} -gt 1 ] && opt_dev=1
if [[ $opt_dev -eq 0 || -z "$FUTURE" || -z "$CONFIGPARSER" || -z "$Z0LIB" || -z "$OS0" || -z $(which list_requirements.py 2>/dev/null) ]]; then
  DEV_PKGS=""
else
  cmd="list_requirements.py -qt python -BP"
  [[ $opt_dev -ne 0 ]] && cmd="$cmd -TR"
  [[ -n "$opt_pyver" ]] && cmd="$cmd -y$opt_pyver"
  [[ -n "$opt_oever" ]] && cmd="$cmd -b$opt_oever"
  DEV_PKGS=$($cmd -s" ")
fi
do_deactivate "-q"
pop_cd "-q"
if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "exec" ]; then
  do_venv_exec "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
elif [ "$action" == "python" ]; then
  do_venv_exec "$p2" "python" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
elif [ "$action" == "shell" ]; then
  do_venv_exec "$p2" "$SHELL" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
elif [[ $action =~ (info|install|show|update) ]]; then
  [[ $opt_cc -ne 0 && -d $HOME/.cache/pip ]] && run_traced "rm -fR $HOME/.cache/pip"
  do_venv_pip "$p2" "$action" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
elif [ "$action" == "create" ]; then
  [[ $opt_cc -ne 0 && -d $HOME/.cache/pip ]] && run_traced "rm -fR $HOME/.cache/pip"
  do_venv_create "$p2" "$p3" "$p4" "$p5" "$p6"
else
  do_venv_mgr "$action" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
fi
PYTHONPATH=$SAVED_PYTHONPATH
[ $opt_verbose -gt 3 ] && set +x
if [[ -n "$ERROR_PKGS" ]]; then
  echo "************************************************************"
  echo -e "\e[1mWarning! Following packages with wrong version or uninstalled\e[0m"
  echo "$ERROR_PKGS"
  echo "************************************************************"
  DISTO=$(xuname -d)
  FH=$(xuname -f)
  echo "Perhaps you should install ..."
  [[ $DISTO == "Fedora" ]] && echo "dnf install python3-devel libsass-devel zlib-devel        # If Fedora"
  [[ ! $DISTO == "Fedora" && $FH = "RHEL" ]] && echo "yum install python-devel python3-devel  # If RHEL"
  [[ ! $DISTO == "Fedora" && $FH = "RHEL" ]] && echo "yum install libsass-devel zlib-devel    # If RHEL"
  [[ $FH = "Debian" ]] && echo "apt-get install python3-dev python3-pip python3-venv          # If Debian"
  [[ $FH = "Debian" ]] && echo "apt-get install python-dev zlib1g-dev                         # If Debian"
  if [[ $ERROR_PKGS =~ lxml ]]; then
    [[ $DISTO == "Fedora" ]] && echo "dnf install redhat-rpm-config                         # If Fedora"
    [[ $DISTO == "Fedora" ]] && echo "dnf install libxml2-devel libxslt-devel               # If Fedora"
    [[ ! $DISTO == "Fedora" && $FH = "RHEL" ]] && echo "yum install libxml2-devel libxslt-devel  # If RHEL"
    [[ $FH = "Debian" ]] && echo "apt-get install libxml2-dev libxslt-dev                   # If Debian"
  fi
  if [[ $ERROR_PKGS =~ ldap ]]; then
    [[ $FH = "RHEL" ]] && echo "yum install openldap-devel                                  # If RHEL"
    [[ $FH = "Debian" ]] && echo "apt-get install libsasl2-dev libldap2-dev libssl-dev      # If Debian"
  fi
  if [[ $ERROR_PKGS =~ gevent ]]; then
    [[ $FH = "RHEL" ]] && echo "yum install libevent-devel                                  # If RHEL"
    [[ $FH = "Debian" ]] && echo "apt-get install libevent-dev                              # If Debian"
  fi
  if [[ $ERROR_PKGS =~ pycups ]]; then
    [[ $FH = "RHEL" ]] && echo "yum install libcups2-devel                                  # If RHEL"
    [[ $FH = "Debian" ]] && echo "apt-get install libcups2-dev                              # If Debian"
  fi
  if [[ $ERROR_PKGS =~ shapely ]]; then
    [[ $FH = "RHEL" ]] && echo "yum install geos-devel                                      # If RHEL"
    [[ $FH = "Debian" ]] && echo "apt-get install libgeos-dev                               # If Debian"
  fi
fi
