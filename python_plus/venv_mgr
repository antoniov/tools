#! /bin/bash
#
# Manage virtual environment
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2018-2020 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi

__version__=0.1.3.1
BASE_PKGS="coveralls codecov flake8 pycodestyle pylint"
SUP_PKGS="future python_plus"
SECURE_PKGS="urllib3[secure] cryptography pyOpenSSL idna certifi asn1crypto pyasn1"
FLT_PKGS="(jwt|FOO)"
ERROR_PKGS=""
LOCAL_PKGS="(clodoo|odoo|score|os0|python_plus|z0bug_odoo|z0lib|zerobug)"

pip_install() {
    if [[ $1 =~ $LOCAL_PKGS ]]; then
        :
    else
        run_traced "$PIP install "$@" --disable-pip-version-check"
    fi
}

pip_install_1() {
# pip_install_1(popt)
    local pkg popt=$1
    if [ $opt_dev -ne 0 ]; then
        [ $opt_verbose -gt 0 ] && echo -e "\e[1m.1 - Analyzing $SUP_PKGS $SECURE_PKGS $BASE_PKGS\e[0m"
        for pkg in $SUP_PKGS $SECURE_PKGS $BASE_PKGS; do
            run_traced "$PIP install $pkg  $popt --disable-pip-version-check"
            [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
        done
    else
        [ $opt_verbose -gt 0 ] && echo -e "\e[1m.1 - Analyzing $SUP_PKGS $SECURE_PKGS\e[0m"
        for pkg in $SUP_PKGS $SECURE_PKGS; do
            run_traced "$PIP install $pkg  $popt --disable-pip-version-check"
            [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
        done
    fi
}

pip_install_2() {
# pip_install_2(popt)
    local pkg popt=$1
    local xpkgs="(${SUP_PKGS// /|}|${SECURE_PKGS// /|}|${BASE_PKGS// /|})"
    [[ -n "xpkgs" ]] && xpkgs="${xpkgs/|)/)}"
    [ $opt_verbose -gt 0 ] && echo -e "\e[1m.2 - Analyzing $OEPKGS\e[0m"
    for pkg in $OEPKGS; do
        [[ "$pkg" =~ psycopg2 ]] && pkg="psycopg2-binary>=2.0.0"
        if [[ ! "$pkg" =~ $xpkgs ]]; then
            run_traced "$PIP install $pkg $popt --disable-pip-version-check"
            [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
        fi
        if [[ "$pkg" =~ $FLT_PKGS ]]; then
            run_traced "$PIP uninstall cryptography -y"
            run_traced "$PIP install cryptography  $popt --disable-pip-version-check"
        fi
    done
}

pip_install_req() {
# pip_install_req(popt)
    local f fn pkg popt=$1 flist
    local xpkgs="(${SUP_PKGS// /|}|${SECURE_PKGS// /|}|${BASE_PKGS// /|}|${OEPKGS// /|})"
    [[ -n "xpkgs" ]] && xpkgs="${xpkgs/|)/)}"
    for f in ${opt_rfile//,/ }; do
        fn=$(readlink -f $f)
        [ -z "$fn" ] && echo "File $f not found!"
        [ -z "$fn" ] && continue
        [ $opt_verbose -gt 0 ] && echo -e "\e[1m-- Analyzing file $fn\e[0m"
        # flist=$(cat $fn|tr "\n" " ")
        [ $opt_verbose -gt 1 -a -n "$opt_oever" ] && echo "list_requirements.py -s\" \" -BPRT -t python -q -b $opt_oever -m $fn -y $opt_pyver"
        [ $opt_verbose -gt 1 -a -z "$opt_oever" ] && echo "list_requirements.py -s\" \" -BPRT -t python -q -m $fn -y $opt_pyver"
        [[ -n "$opt_oever" ]] && flist=$(list_requirements.py -s" " -BPRT -t python -q -b $opt_oever -m $fn -y $opt_pyver)
        [[ -z "$opt_oever" ]] && flist=$(list_requirements.py -s" " -BPRT -t python -q -m $fn -y $opt_pyver)
        [ $opt_verbose -gt 0 ] && echo "--> $flist"
        for pkg in $flist; do
            [[ "$pkg" =~ psycopg2 ]] && pkg="psycopg2-binary>=2.0.0"
            if [[ ! "$pkg" =~ $xpkgs ]]; then
                run_traced "$PIP install $pkg $popt --disable-pip-version-check"
                [ $? -ne 0 ] && ERROR_PKGS="$ERROR_PKGS   '$pkg'"
            fi
            xpkgs="${xpkgs:0: -1}|$pkg)"
            if [[ "$pkg" =~ $FLT_PKGS ]]; then
                run_traced "$PIP uninstall cryptography -y"
                run_traced "$PIP install cryptography  $popt --disable-pip-version-check"
            fi
        done
    done
}

check_package() {
# check_package(pkg cmd)
    local op reqver xreqver sts curver vpkg
    local vpkg=$1

    op=$(echo "$vpkg"|grep -Eo '[!<=>]*'|head -n1)
    pkg=$(echo "$vpkg"|grep -Eo '[^!<=>\\[]*'|tr -d "'"|head -n1)
    reqver=$(echo "$vpkg"|grep -Eo '[^!<=>]*'|tr -d "'"|sed -n '2 p')
    [ -n "$reqver" ] && xreqver=$(echo $reqver|grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)'|awk -F. '{print $1*10000 + $2*100 + $3}') || xreqver=0
    sts=0
    if [[ -n "$reqver" ]]; then
        curver=$($PIP show $pkg|grep ^[Vv]ersion|awk -F: '{print $2}'|tr -d ', \r\n\(\)') || curver=
        [ -n "$curver" ] && xcurver=$(echo $curver|grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)'|awk -F. '{print $1*10000 + $2*100 + $3}') || xcurver=0
        if [[ -z "$op" ]] || [ $xcurver -ne $xreqver -a "$op" == '==' ] || [ $xcurver -ge $xreqver -a "$op" == '<' ] || [ $xcurver -le $xreqver -a "$op" == '>' ] || [ $xcurver -lt $xreqver -a "$op" == '>=' ] || [ $xcurver -gt $xreqver -a "$op" == '<=' ]; then
            echo "Package $pkg version $curver but expected $pkg$op$reqver!!!"
            ERROR_PKGS="$ERROR_PKGS   '$pkg'"
            [[ "$cmd" == "amend" ]] && run_traced "$PIP install $vpkg -U"
        else
            printf "Package %-30.30s OK\n" "${pkg}.............................."
        fi
    else
        eval $PIP show $pkg &>/dev/null
        if [ $? -eq 0 ]; then
            printf "Package %-30.30s OK\n" "${pkg}.............................."
        else
            echo "Package $pkg not installed!!!"
            ERROR_PKGS="$ERROR_PKGS   '$pkg'"
            [[ "$cmd" == "amend" ]] && run_traced "$PIP install $vpkg"
        fi
    fi
}

pip_check_1() {
# pip_check_1(cmd)
    local pkg cmd=$1
    local op reqver xreqver sts curver vpkg

    [ $opt_verbose -gt 0 ] && echo -e "\e[1m.1 - Analyzing\e[0m"
    for vpkg in $SUP_PKGS $SECURE_PKGS $BASE_PKGS; do
        check_package $vpkg $cmd
    done
}


pip_check_2() {
# pip_check_2(cmd)
    local pkg cmd=$1
    local xpkgs="(${SUP_PKGS// /|}|${SECURE_PKGS// /|}|${BASE_PKGS// /|})"
    [[ -n "xpkgs" ]] && xpkgs="${xpkgs/|)/)}"
    [ $opt_verbose -gt 0 ] && echo -e "\e[1m.2 - Analyzing\e[0m"
    for vpkg in $OEPKGS; do
        [[ $vpkg =~ psycopg2 ]] && vpkg="psycopg2-binary>=2.0.0"
        if [[ ! "$vpkg" =~ $xpkgs ]]; then
            check_package $vpkg $cmd
            xpkgs="${xpkgs:0: -1}|$vpkg)"
        fi
    done
}

pip_check_req() {
# pip_check_req(cmd)
    local f fn pkg cmd=$1 flist
    local xpkgs="(${SUP_PKGS// /|}|${SECURE_PKGS// /|}|${BASE_PKGS// /|}|${OEPKGS// /|})"
    [[ -n "xpkgs" ]] && xpkgs="${xpkgs/|)/)}"
    for f in ${opt_rfile//,/ }; do
        fn=$(readlink -f $f)
        [ -z "$fn" ] && echo "File $f not found!"
        [ -z "$fn" ] && continue
        [ $opt_verbose -gt 0 ] && echo -e "\e[1m-- Analyzing file $fn\e[0m"
        [ $opt_verbose -gt 1 -a -n "$opt_oever" ] && echo "list_requirements.py -s\" \" -BPRT -t python -q -b $opt_oever -m $fn -y $opt_pyver"
        [ $opt_verbose -gt 1 -a -z "$opt_oever" ] && echo "list_requirements.py -s\" \" -BPRT -t python -q -m $fn -y $opt_pyver"
        [[ -n "$opt_oever" ]] && flist=$(list_requirements.py -s" " -BPRT -t python -q -b $opt_oever -m $fn -y $opt_pyver)
        [[ -z "$opt_oever" ]] && flist=$(list_requirements.py -s" " -BPRT -t python -q -m $fn -y $opt_pyver)
        for pkg in $flist; do
            [[ "$pkg" =~ psycopg2 ]] && pkg="psycopg2-binary>=2.0.0"
            if [[ ! "$pkg" =~ $xpkgs ]]; then
                check_package $pkg $cmd
                xpkgs="${xpkgs:0: -1}|$pkg)"
            fi
            xpkgs="${xpkgs:0: -1}|$pkg)"
        done
    done
}

package_debug() {
# package_debug(VENV)
    local VENV=$1
    local p pkgdir
    pkgdir=$VENV/lib/python$opt_pyver/site-packages
    if [ $opt_debug -ne 0 -a -d $HOME/tools/ ]; then
        for p in clodoo odoo_score os0 python_plus z0bug_odoo z0lib zerobug; do
            if [[ -d $pkgdir/$p && ! -L $pkgdir/$p ]]; then
                run_traced "rm -fR $pkgdir/$p"
                run_traced "ln -s $HOME/tools/$p $pkgdir"
            fi
        done
    else
        for p in clodoo odoo_score os0 python_plus z0bug_odoo z0lib zerobug; do
            if [[ -L $pkgdir/$p ]]; then
                run_traced "rm -f $pkgdir/$p"
                # run_traced "pip install $p"
            fi
        done
    fi
}

custom_env() {
# custom_env(VENV pyver)
    local VIRTUAL_ENV=$1
    pushd $1 >/dev/null
    sed -i -e 's:VIRTUAL_ENV=.*:VIRTUAL_ENV="\$(readlink -f \$(dirname \$(readlink -f \$BASH_SOURCE))/..)":g' $PWD/bin/activate
    if $(grep -q "^export HOME=" $PWD/bin/activate); then
      sed -i -e 's|^export HOME=.*|export HOME="\$VIRTUAL_ENV"|g' $PWD/bin/activate
    elif $(grep -q "^# export HOME=" $PWD/bin/activate); then
      sed -i -e 's|^# export HOME=.*|# export HOME="\$VIRTUAL_ENV"|g' $PWD/bin/activate
    else
      [ $opt_alone -ne 0 ] && sed -ri "/deactivate *\(\) *\{/a\    export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate
      [ $opt_alone -eq 0 ] && sed -ri "/deactivate *\(\) *\{/a\    # export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate
      [ $pyver -gt 2 -a $opt_keep -eq 0 ] && sed -ri "/deactivate *\(\) *\{/a\    unalias pip &>/dev/null" $PWD/bin/activate
      [ $pyver -gt 2 -a $opt_keep -eq 0 ] && sed -ri "/deactivate *\(\) *\{/a\    unalias python &>/dev/null" $PWD/bin/activate
      [ $opt_spkg -ne 0 -a -n "$2" ] && echo "[ -f /usr/bin/pip$2 -a ! -f \$VIRTUAL_ENV/bin/pip ] && ln -s /usr/bin/pip$2 \$VIRTUAL_ENV/bin/pip">>$PWD/bin/activate
      echo "for f in \$VIRTUAL_ENV/bin/*;do">>$PWD/bin/activate
      echo "    [ -x \$f -a ! -d \$f ] && sed -i -e \"s|^#\!.*/bin/python|#\!\$VIRTUAL_ENV/bin/python|\" \$f">>$PWD/bin/activate
      echo "done">>$PWD/bin/activate
      [ $opt_alone -ne 0 ] && echo "export HOME=\"\$VIRTUAL_ENV\"">>$PWD/bin/activate
      [ $opt_alone -eq 0 ] && echo "# export HOME=\"\$VIRTUAL_ENV\"">>$PWD/bin/activate
      [ $pyver -gt 2 -a $opt_keep -eq 0 ] && echo "alias pip=$PIP">>$PWD/bin/activate
      [ $pyver -gt 2 -a $opt_keep -eq 0 ] && echo "alias python=$PYTHON">>$PWD/bin/activate
    fi
    sed -i -e 's|PATH="\$VIRTUAL_ENV/bin:\$PATH"|PATH="\$VIRTUAL_ENV/.local/bin:\$VIRTUAL_ENV/bin:\$PATH"|g' $PWD/bin/activate
    if [ $opt_spkg -ne 0  ]; then
      if [[ -d $PWD/.local/lib/python$2/site-packages ]]; then
        echo -e "import site\nsite.addsitedir('$PWD/.local/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib64/python$2/site-packages')\n">$PWD/lib/python$2/site-packages/sitecustomize.py
      else
        echo -e "import site\nsite.addsitedir('/usr/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib64/python$2/site-packages')\n">$PWD/lib/python$2/site-packages/sitecustomize.py
      fi
    elif [[ -d $PWD/.local/lib/python$2/site-packages ]]; then
      echo -e "import site\nsite.addsitedir('$PWD/.local/lib/python$2/site-packages')\n">$PWD/lib/python$2/site-packages/sitecustomize.py
    fi
    popd >/dev/null
}

set_pyver_files() {
    if [ -n "$opt_pyver" ]; then
        pyver=$(echo $opt_pyver|grep -o [0-9]|head -n1)
        [ $pyver -gt 2 ] && PIP=pip3
        [ $pyver -le 2 ] && PIP=pip
        [ $pyver -gt 2 ] && PYTHON=python3
        [ $pyver -le 2 ] && PYTHON=python
    fi
    PIPVER=$($PIP --version|grep -Eo [0-9]+|head -n1)
}

venv_mgr_check_src_path() {
# venv_mgr_check_src_path(VENV create)
    local do_deact=0 do_pop=0 f VENV
    [[ -z "$1" ]] && VENV=$(readlink -e ./)
    [[ -n "$1" ]] && VENV=$(readlink -e $1)
    if [[ -z "$VENV" ]]; then
        [[ -z "$2" ]] && echo "Missed virtual environment path!!"
        [[ -n "$2" ]] && echo "Missed python version!!"
        exit 1
    fi
    if [[ ! -d $VENV || ! -d $VENV/lib || ! -d $VENV/bin || ! -f $VENV/bin/activate ]]; then
        echo "Invalid virtual env $VENV!!"
        exit 1
    fi
    if [[ ! "$VENV" == "$PWD" ]]; then
        pushd $VENV >/dev/null
        do_pop=1
    fi
    if [[ -z "$VIRTUAL_ENV" ]]; then
        . bin/activate
        do_deact=1
    fi
    for f in ./bin/python[23].*; do PYTHON=$(echo $f|grep -Eo "python[2-3]\.[0-9]"); break; done
    if [ -z "$PYTHON" ]; then
        echo "Virtual env $VENV without python!!"
        exit 1
    fi
    opt_pyver=$(echo $PYTHON|grep -Eo "[2-3]\.[0-9]")
    [ $do_deact -ne 0 ] && deactivate
    [ $do_pop -ne 0 ] && popd >/dev/null
    [ $opt_verbose -gt 0 ] && echo "### Python version $opt_pyver ... ###"
    set_pyver_files
}

venv_mgr_test() {
#venv_mgr_test(VENV)
    local f x VENV
    local SAVED_HOME=$HOME
    local do_deact=0 do_pop=0
    [ -z "$1" ] && VENV=$(readlink -e ./)
    [ -n "$1" ] && VENV=$(readlink -e $1)
    [ $opt_verbose -gt 0 ] && echo "Validation test ..."
    [ $opt_dry_run -ne 0 ] && return
    if [[ ! "$VENV" == "$PWD" ]]; then
        [ $opt_verbose -gt 0 ] && echo "-------------------"
        # [ $opt_verbose -ne 0 ] && echo "$FLAG pushd $VENV >/dev/null"
        pushd $VENV >/dev/null
        do_pop=1
    fi
    if [[ -z "$VIRTUAL_ENV" ]]; then
        . bin/activate
        do_deact=1
        if [ $opt_verbose -gt 0 ]; then
            [[  -n "$HOME" && ! "$HOME" == "$SAVED_HOME" ]] && echo "Isolated environment (created with -I switch)."
            [[ "$HOME" == "$SAVED_HOME" ]] && echo "Environment not isolated (created w/o -I switch)."
        fi
        [[ -z "$HOME" ]] && echo "Wrong environment (No HOME directory declared)."
    fi
    [ $opt_verbose -gt 1 ] && echo "VPATH=$PATH"
    [ $opt_verbose -gt 1 ] && echo "VPYTHONPATH=$PYTHONPATH"
    [ $opt_dev -eq 0 ] && BASE_PKGS=
    for f in $PYTHON $PIP $BASE_PKGS; do
        f=$(echo $f|awk -F= '{print $1}')
        x=$(readlink -e $(which $f 2>/dev/null) 2>/dev/null)
        [[ -z "$x" ]] && echo "Corrupted VME: file $f not found!!"
        [[ -z "$x" ]] && continue
        [[ -n "$x" && ! $x =~ ^$VENV ]] && echo "Incomplete VME: file $x outside virtual env"
        [[ -n "$x" && ! $x =~ ^$VENV ]] && continue
        [ "$f" != "pylint" -a $opt_verbose -gt 0 ] && eval $f --version
        [ "$f" == "pylint" -a $opt_verbose -gt 0 ] && eval $f --version 2>/dev/null
    done
    [ $do_deact -ne 0 ] && deactivate
    [ $do_pop -ne 0 ] && popd >/dev/null
}

do_venv_mgr() {
# do_venv_mgr {cp|mv|merge|reset|test} VENV NEW_VENV
    local d f mime VENV V sitecustom do_pop xpkgs popt
    local do_deact=0 do_pop=0 f
    local cmd=$1
    [ -z "$2" ] && VENV=$(readlink -e ./)
    [ -n "$2" ] && VENV=$(readlink -e $2)
    [ -n "$3" ] && VENV_TGT=$(readlink -f $3)
    [[ $cmd =~ (amend|check|reset|test) ]] && VENV_TGT=$VENV
    [ $opt_alone -ne 0 ] && popt="-I"
    [ $PIPVER -gt 18 ] && popt="$popt --no-warn-conflicts"
    [ $opt_verbose -gt 1 -a -n "$opt_oever" ] && echo "list_requirements.py -s\" \" -BPRT -t python -q -b $opt_oever -y $opt_pyver"
    [ $opt_verbose -gt 1 -a -z "$opt_oever" ] && echo "list_requirements.py -s\" \" -PT -t python -q -y $opt_pyver"
    [[ -n "$opt_oever" ]] && OEPKGS=$(list_requirements.py -s" " -BPRT -t python -q -b $opt_oever -y $opt_pyver)
    [[ -z "$opt_oever" ]] && OEPKGS=$(list_requirements.py -s" " -PT -t python -q -y $opt_pyver)
    if [[ -z "$VENV" || -z "$VENV_TGT" ]]; then
      echo "Missed parameters!"
      echo "use: venv_mgr ${CMDS// /|} VENV NEW_VENV"
      exit 1
    fi
    if [[ "$VENV" == "$VENV_TGT" && ! $cmd =~ (amend|check|reset|test) ]]; then
      echo "Source and destination directories are the same!"
      echo "use: venv_mgr ${CMDS// /|} VENV NEW_VENV"
      exit 1
    fi
    if [[ $cmd =~ (amend|check|reset|test) ]]; then
      V=$VENV
    elif [[ "$cmd" == "cp" ]]; then
      if [[ -d $VENV_TGT ]]; then
        if [ $opt_force -eq 0 ]; then
            echo "Destination v.environment $VENV_TGT already exists!!"
            echo "use: venv_mgr cp -f VENV NEW_VENV"
            exit 1
        fi
        run_traced "rm -fR $VENV_TGT"
      fi
      run_traced "cp -r $VENV $VENV_TGT"
      V=$VENV_TGT
    elif [[ "$cmd" == "merge" ]]; then
      if [[ ! -d $VENV_TGT  || ! -d $VENV_TGT/bin || ! -f $VENV_TGT/bin/activate ]]; then
        echo "Invalid destination virtual env $VENV_TGT!"
        exit 1
      fi
      for d in bin include lib lib64 .local; do
        if [ -d "$VENV/$d" ]; then
          run_traced "rsync -a $VENV/$d/ $VENV_TGT/$d/"
        fi
      done
      V=$VENV_TGT
    else
      if [[ -d $VENV_TGT ]]; then
        echo "Destination virtual env $VENV_TGT already exists!"
        exit 1
      fi
      V=$VENV
    fi
    if [[ ! $cmd =~ (amend|check|test) ]]; then
        for f in $V/bin/*; do
          mime=$(file --mime-type -b $f)
          if [ "$mime" == "text/x-python" -o "${f: -3}" == ".py" ]; then
            [ $opt_verbose -gt 1 ] && echo "$FLAG sed -i -e \"s|^#\!.*/bin/python|#\!$VENV_TGT/bin/python|\" $f"
            [ $opt_dry_run -eq 0 ] && sed -i -e "s|^#\!.*/bin/python|#\!$VENV_TGT/bin/python|" $f
            [ $opt_dry_run -eq 0 -a "$cmd" == "reset" ] && chmod +x $f 
          fi
        done
    fi
    do_pop=0
    if [[ ! "$cmd" == "test" ]]; then
        if [[ ! "$VENV" == "$PWD" ]]; then
            [ $opt_verbose -ne 0 ] && echo "$FLAG pushd $V >/dev/null"
            pushd $VENV >/dev/null
            do_pop=1
        fi
        if [[ -z "$VIRTUAL_ENV" ]]; then
            [ $opt_verbose -ne 0 ] && echo "$FLAG . bin/activate"
            . bin/activate
            do_deact=1
        fi
        if [ $opt_dry_run -eq 0  -a -L ./lib64 ]; then
            rm -f ./lib64
            ln -s ./lib ./lib64
        fi
        run_traced "pip install pip -U"
        PIPVER=$(pip --version|grep -Eo [0-9]+|head -n1)
        [[ ! $cmd =~ (amend|check) ]] && pip_install_1 "$popt --upgrade"
        [[ $cmd =~ (amend|check) ]] && pip_check_1 $cmd
        [[ -n "$opt_oever" && "$cmd" == "reset" ]] && pip_install_2 "$popt --upgrade"
        [[ -n "$opt_oever" && $cmd =~ (amend|check) ]] && pip_check_2 $cmd
        [[ "$cmd" == "reset" && -n "$opt_rfile" ]] && pip_install_req "$popt --upgrade"
        [[ $cmd =~ (amend|check) && -n "$opt_rfile" ]] && pip_check_req $cmd
        if [[ ! $cmd == "check" ]]; then
            run_traced "sed -i -e 's:VIRTUAL_ENV=.*:VIRTUAL_ENV=\"'$VENV_TGT'\":g' $PWD/bin/activate"
            if $(grep -q "^# export HOME=" $PWD/bin/activate); then
                [ $opt_alone -eq 0 ] && run_traced "sed -i -e 's|^# export HOME=.*|# export HOME=\"\$VIRTUAL_ENV\"|g' $PWD/bin/activate"
                [ $opt_alone -ne 0 ] && run_traced "sed -i -e 's|^# export HOME=.*|export HOME=\"\$VIRTUAL_ENV\"|g' $PWD/bin/activate"
            elif $(grep -q "^export HOME=" $PWD/bin/activate); then
                [ $opt_alone -ne 0 ] && run_traced "sed -i -e 's|^export HOME=.*|export HOME=\"\$VIRTUAL_ENV\"|g' $PWD/bin/activate"
                [ $opt_alone -eq 0 ] && run_traced "sed -i -e 's|^export HOME=.*|# export HOME=\"\$VIRTUAL_ENV\"|g' $PWD/bin/activate"
            fi
            if $(grep -q "^ *# export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate); then
                [ $opt_alone -ne 0 ] && run_traced "sed -i -e 's|# export HOME=\$(grep|export HOME=\$(grep|' $PWD/bin/activate"
            elif $(grep -q "^ *export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate); then
                [ $opt_alone -eq 0 ] && run_traced "sed -i -e 's|export HOME=\$(grep|# export HOME=\$(grep|' $PWD/bin/activate"
            fi
            if [ $opt_dry_run -eq 0 ]; then
                sitecustom=$PWD/lib/python$opt_pyver/site-packages/sitecustomize.py
                echo "import sys">$sitecustom
                if [ $opt_spkg -ne 0 ]; then
                  if [[ -d $PWD/.local/lib/python$opt_pyver/site-packages ]]; then
                    echo -e "import site\nif '$VENV_TGT/.local/lib/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('$VENV_TGT/.local/lib/python$opt_pyver/site-packages')\nif '/usr/lib/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('/usr/lib/python$opt_pyver/site-packages')\nif '/usr/lib64/python$opt_pyver/site-packages' not in sys.path:     site.addsitedir('/usr/lib64/python$opt_pyver/site-packages')\n">>$sitecustom
                  else
                    echo -e "import site\nif '/usr/lib/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('/usr/lib/python$opt_pyver/site-packages')\nif '/usr/lib64/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('/usr/lib64/python$opt_pyver/site-packages')\n">>$sitecustom
                  fi
                elif [[ -d $PWD/.local/lib/python$opt_pyver/site-packages ]]; then
                  echo -e "import site\nif '$VENV_TGT/.local/lib/python$opt_pyver/site-packages' not in sys.path:    site.addsitedir('$VENV_TGT/.local/lib/python$opt_pyver/site-packages')\n">>$sitecustom
                fi
            fi
        fi
        if [ $do_deact -ne 0 ]; then
            echo "$FLAG deactivate"
            deactivate
            do_deact=0
        fi
        [[ -n "$opt_oever" && ( "$cmd" == "reset" && ! -L ./odoo ) ]] && run_traced "ln -s $HOME/$opt_oever $(readlink -f ./odoo)"
        if [ $do_pop -ne 0 ]; then
            echo "$FLAG popd >/dev/null"
            popd >/dev/null
            do_pop=0
        fi
        if [[ "$cmd" == "mv" ]]; then
            run_traced "mv $VENV $VENV_TGT"
        fi
    fi
    venv_mgr_test $V
}

do_venv_create() {
# do_venv_create VENV
    local f p pkg VENV xpkgs popt
    export VENV__SAVED_HOME=$HOME
    [ -z "$1" ] && export VENV=$(readlink -f ./)
    [ -n "$1" ] && export VENV=$(readlink -f $1)
    [[ -z "$opt_pyver" ]] && venv_mgr_check_src_path "$VENV" "create"
    set_pyver_files
    [ $opt_alone -ne 0 ] && popt="-I"
    [ $PIPVER -gt 18 ] && popt="$popt --no-warn-conflicts"
    if [ -d $VENV ]; then
        if [ $opt_force -eq 0 ]; then
            echo "Warning: virtual environment $VENV already exists!!"
        else
            run_traced "rm -fR $VENV"
        fi
    fi
    hash -r
    [ $opt_verbose -gt 1 -a -n "$opt_oever" ] && echo "list_requirements.py -s\" \" -BPRT -t python -q -b $opt_oever -y $opt_pyver"
    [[ -n "$opt_oever" ]] && OEPKGS=$(list_requirements.py -s" " -BPRT -t python -q -b $opt_oever -y $opt_pyver)
    [ $opt_spkg -ne 0 ] && p="--system-site-packages" || p="--no-site-packages"
    [ -d $VENV ] && p="$p --clear"
    run_traced "virtualenv -q $p -p /usr/bin/python$opt_pyver $VENV"
    sts=$?
    [ $sts -ne 0 ] && return
    run_traced "pushd $VENV >/dev/null"
    [ $opt_verbose -ne 0 ] && echo "$FLAG . bin/activate"
    [ $opt_dry_run -eq 0 ] && . bin/activate
    run_traced "pip install pip -U"
    PIPVER=$(pip --version|grep -Eo [0-9]+|head -n1)
    [ $opt_alone -ne 0 ] && popt="-I"
    [ $PIPVER -gt 18 ] && [[ ! no-warn-conflicts =~ $popt ]] && popt="$popt --no-warn-conflicts"
    [ $opt_dry_run -eq 0 ] && custom_env $VENV $opt_pyver
    pip_install_1 "$popt"
    [ $opt_dev -eq 0 ] && BASE_PKGS=
    [ -n "$opt_oever" ] && pip_install_2 "$popt"
    [ -n "$opt_rfile" ] && pip_install_req "$popt"
    [ $opt_verbose -ne 0 ] && echo "$FLAG deactivate"
    [ $opt_dry_run -eq 0 ] && deactivate
    [[ -n "$opt_oever" ]] && run_traced "ln -s $HOME/$opt_oever $(readlink -f ./odoo)"
    venv_mgr_test $VENV
    run_traced "popd >/dev/null"
}

do_venv_exec() {
# do_venv_exec VENV cmd
    local d f mime VENV V sitecustom
    local do_pop do_deact
    [[ -z "$1" ]] && VENV=$(readlink -e ./)
    [[ -n "$1" ]] && VENV=$(readlink -e $1)
    if [[ ! "$VENV" == "$PWD" ]]; then
        [ $opt_verbose -ne 0 ] && echo "$FLAG pushd $VENV >/dev/null"
        pushd $VENV >/dev/null
        do_pop=1
    fi
    if [[ -z "$VIRTUAL_ENV" ]]; then
        [ $opt_verbose -ne 0 ] && echo "$FLAG . bin/activate"
        . bin/activate
        do_deact=1
    fi
    run_traced "$2 $3 $4 $5 $6 $7 $8 $9"
    if [ $do_deact -ne 0 ]; then
        echo "$FLAG deactivate"
        deactivate
        do_deact=0
    fi
    if [ $do_pop -ne 0 ]; then
        echo "$FLAG popd >/dev/null"
        popd >/dev/null
        do_pop=0
    fi
}

do_venv_pip() {
# do_venv_pip VENV action pkg
    local d f VENV V popt
    local cmd=$2
    [[ -z "$1" ]] && VENV=$(readlink -e ./)
    [[ -n "$1" ]] && VENV=$(readlink -e $1)
    if [[ ! "$VENV" == "$PWD" ]]; then
        [ $opt_verbose -ne 0 ] && echo "$FLAG pushd $VENV >/dev/null"
        pushd $VENV >/dev/null
        do_pop=1
    fi
    if [[ -z "$VIRTUAL_ENV" ]]; then
        [ $opt_verbose -ne 0 ] && echo "$FLAG . bin/activate"
        . bin/activate
        do_deact=1
    fi
    pkg="$3"
    [ $opt_alone -ne 0 ] && popt="-I"
    [ $PIPVER -gt 18 ] && popt="$popt --no-warn-conflicts"
    [ "$cmd" == "info" ] && run_traced "$PIP show $pkg"
    [ "$cmd" == "show" ] && run_traced "$PIP show $pkg"
    [ "$cmd" == "install" ] && run_traced "$PIP $cmd $pkg --disable-pip-version-check"
    [ "$cmd" == "update" ] && run_traced "$PIP install $pkg $popt --upgrade --disable-pip-version-check"
    if [ $do_deact -ne 0 ]; then
        echo "$FLAG deactivate"
        deactivate
        do_deact=0
    fi
    if [ $do_pop -ne 0 ]; then
        echo "$FLAG popd >/dev/null"
        popd >/dev/null
        do_pop=0
    fi
}


OPTOPTS=(h        B         D       f         k        I         n           O         p         q           r         s        V           v)
OPTDEST=(opt_help opt_debug opt_dev opt_force opt_keep opt_alone opt_dry_run opt_oever opt_pyver opt_verbose opt_rfile opt_spkg opt_version opt_verbose)
OPTACTI=(1        1         1       1         1        1         1           "="       "="       0           "="       1        "*>"        "+")
OPTDEFL=(0        0         0       0         0        0         0           ""        ""        -1          ""        0        ""          -1)
OPTMETA=("help"   ""        ""      ""        ""       ""        ""          "ver"     "pyver"   ""          "file"    ""       "version"   "verbose")
OPTHELP=("this help"\
 "debug mode: use local packages"\
 "create v.environment with development packages"\
 "force v.environment create, even if exists"\
 "keep python2 executable"\
 "run pip in an isolated mode, ignoring environment variables and user configuration"\
 "do nothing (dry-run)"\
 "install pypi for odoo ver (create or reset)"\
 "python version"\
 "silent mode"\
 "after created v.environment install from the given requirements file"\
 "create v.environment with access to the global site-packages"\
 "show version"\
 "verbose mode")
OPTARGS=(p1 p2 p3 p4 p5 p6 p7 p8 p9)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
ACTIONS="help amend cp check create exec info install merge mv show update test reset"
REXACT="(${ACTIONS// /|})"
if [[ $p1 =~ $REXACT ]]; then
    action=$p1
elif [[ $p2 =~ $REXACT ]]; then
    action=$p2
    p2=$p1
fi
if [ -z "$action" ]; then
  opt_help=1
fi
# It runs inside travis test environment too
[ -z "$opt_pyver" -a -n "$TRAVIS_PYTHON_VERSION" ] && opt_pyver=$TRAVIS_PYTHON_VERSION
[ $opt_verbose -eq -1 ] && opt_verbose=1
if [ $opt_help -gt 0 ]; then
  print_help "Manage virtual environment\naction may be: $ACTIONS"\
  "(C) 2018-2020 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi
export PYTHONWARNINGS="ignore"
[ $opt_debug -ne 0 -a -d $HOME/tools/ ] && PYTHONPATH=$HOME/tools/
FLAG=">"
[ $opt_dry_run -eq 0 ] && FLAG="\$"
[[ -n "$opt_pyver" ]] && set_pyver_files
[[ -z "$opt_pyver" && ! $action  =~ (help|create) ]] && venv_mgr_check_src_path $p2
if [[ -z "$opt_oever" && ! $action  =~ (help|create) ]]; then
    x=$(find -L $p2 -name release.py)
    if [[ -n "$x" ]]; then
        p=$(dirname $x)
        pushd $p &>/dev/null
        x=$(echo -e "from __future__ import print_function\nimport release\nprint(release.version)\n"|python)
        opt_oever="$x"
        popd &>/dev/null
    fi
fi
if [ $opt_dev -eq 0 ]; then
    BASE_PKGS=$(list_requirements.py -qs" " -BP -t python)
elif [[ -n "$opt_oever" ]]; then
    # p=
    # for f in $BASE_PKGS; do
    #     x=$(list_requirements.py -s" " -TP -t python -b$opt_oever|grep -Eo "$f[<=>]*[0-9.]*[^-_a-zA-Z]")
    #     p="$p$x"
    # done
    # BASE_PKGS="$p"
    BASE_PKGS="$(list_requirements.py -qs" " -TBP -t python -b$opt_oever)"
else
    BASE_PKGS="$(list_requirements.py -qs" " -TBP -t python)"
fi
if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "exec" ]; then
    do_venv_exec "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
elif [[ $action =~ (info|install|show|update) ]]; then
    do_venv_pip "$p2" "$action" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
elif [ "$action" == "create" ]; then
    do_venv_create "$p2" "$p3" "$p4" "$p5" "$p6"
else
    do_venv_mgr "$action" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" "$p9"
fi
if [[ -n "$ERROR_PKGS" ]]; then
    echo "************************************************************"
    [[ "$action" == "check" ]] && echo -e "\e[1mWarning! Following packages with wrong version or uninstalled\e[0m"
    [[ "$action" != "check" ]] && echo -e "\e[1mWarning! Following packages were not installed!\e[0m"
    echo "$ERROR_PKGS"
    echo "************************************************************"
    echo "Perhaps you should install ..."
    echo "dnf install python-devel                             # If Fedora"
    echo "yum install python-devel                             # If RHEL"
    echo "apt-get install python-dev                           # If Debian"
    if [[ $ERROR_PKGS =~ lxml ]]; then
        echo "dnf install redhat-rpm-config                        # If Fedora"
        echo "dnf install libxml2-devel libxslt-devel              # If Fedora"
        echo "yum install libxml2-devel libxslt-devel              # If RHEL"
        echo "apt-get install libxml2-dev libxslt-dev              # If Debian"
    fi
    if [[ $ERROR_PKGS =~ ldap ]]; then
        echo "yum install openldap-devel                           # If RHEL"
        echo "apt-get install libsasl2-dev libldap2-dev libssl-dev # If Debian"
    fi
    if [[ $ERROR_PKGS =~ gevent ]]; then
        echo "yum install libevent-devel                           # If RHEL"
        echo "apt-get install libevent-dev                         # If Debian"
    fi
fi