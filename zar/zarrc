#! /bin/bash
# -*- coding: utf-8 -*-
#
# Copyright (C) SHS-AV s.r.l. (<http://ww.zeroincombenze.it>)
# This software is free software under GNU Affero GPL3
# Bash general purpose library
#__version__=0.1.49

detached_login() {
# detached_login([path] [path2] [path3])
    if [ $opt_cron -gt 0 -a "$SHELL" == "/bin/sh" ]; then
      if [ $opt_dry_run -eq 0 ]; then
        fqcmd=$(readlink -f $0)
        wlog "Run $fqcmd in cron mode"
        SHELL=/bin/bash exec "$fqcmd" "$@"
      fi
    elif [ $opt_cron -gt 0 -a -f $HOME/.bash_profile ]; then
      wlog "Simulate login ($HOME/.bash_profile)"
      . $HOME/.bash_profile
    fi
    if [[ ":$PATH:" =~ /usr/local/bin ]]; then
      :
    else
      export PATH=/usr/local/bin:$PATH
    fi
    if [ -n "$1" ]; then
      if [ -d $1 ]; then
        if [[ ":$PATH:" =~ $1 ]]; then
          :
        else
          export PATH=$PATH:$1
        fi
      fi
    fi
    if [ -n "$2" ]; then
      if [ -d $2 ]; then
        if [[ ":$PATH:" =~ $2 ]]; then
          :
        else
          export PATH=$PATH:$2
        fi
      fi
    fi
    if [ -n "$3" ]; then
      if [ -d $3 ]; then
        if [[ ":$PATH:" =~ $3 ]]; then
          :
        else
          export PATH=$PATH:$3
        fi
      fi
    fi
    wlog "PATH=$PATH"
}

conf_default() {
#conf_default(logfile)
    local sfx XDB
    ACTION=$1
    set_cfg_def "bckformat" "0"
    set_cfg_def "dbfilter" ".*"
    set_cfg_def "test_db" "test"
    set_cfg_def "tar_ext" ".gz .bz2 .tar"
    set_cfg_def "tar_opt" ""
    set_cfg_def "db_user" "odoo"
    set_cfg_def "pg_user" "postgres:postgres"
    local DBFA="zi[0-9]+"
    for sfx in A B C D E F G H; do
      x=DBF$sfx
      XDB=${!x}
      set_cfg_def "DB${sfx}_filter" "$XDB"
      set_cfg_def "DB${sfx}_keep_recent" "30"
      set_cfg_def "DB${sfx}_keep_monthly" "12"
    done
    set_cfg_def "odoo_rpc_host" "localhost"
    set_cfg_def "odoo_rpc_protocol" "xmlrpc"
    set_cfg_def "odoo_rpc_xmlport" "8069"
    set_cfg_def "odoo_version" "7.0"
    set_cfg_def "odoo_rpc_pwd" "admin"
    if [ "$DEV_ENVIRONMENT" == "$THIS" ]; then
      test_mode=1
    fi
    if [ $test_mode -ne 0 ]; then
      opt_dry_run=1
    fi
    if [ -n "$opt_conf" -a -f "$opt_conf" ]; then
      FCONF=$opt_conf
    elif [ $test_mode -ne 0 ]; then
      FCONF=$TESTDIR/zar.conf
    else
      FCONF=$TDIR/zar.conf
    fi
    if [ $test_mode -ne 0 ]; then
      publog=$TESTDIR/$1.log
    elif [ -z "$opt_log" ]; then
      publog="/var/log/zar/$1.log"
    else
      publog=$opt_log
    fi
    if [ ${opt_verbose:-0} -gt 0 -o ${opt_dry_run:-0} -gt 0  ]; then
      set_tlog_file "$publog" "" "echo"
    else
      set_tlog_file "$publog"
    fi
}

init_vars() {
#init_vars(dbsel)
    dbsel=$1
    declare -g PGDIR DBCKDIR HOST_PRD HOST_DEV BCKFORMAT TAR_EXT TAR_OPT
    declare -g REST2 TEST_DB NEWDBS REDB OE_OWN
    declare -g DBA DBB DBC DBD DBE DBF DBG DBH
    declare -g NCA NCB NCC NCD NCE NCF NCG NCH
    declare -g NAA NAB NAC NAD NAE NAF NAG NAH
    local sfx selsfx XDB
    if [ $test_mode -ne 0 ]; then
      PGDIR=$(findpkg "" "$TESTDIR")
    else
      PGDIR=$(findpkg "" "/var/lib" "postgresql  pgsql" "8.2 8.3 9.0 9.1 9.2 9.3 9.4")
      if [ -z "$PGDIR" ]; then
        wlog "No postgres directory found!"
        exit 1
      fi
    fi
    DBCKDIR="$PGDIR/backups"
    HOST_PRD=$(get_cfg_value 0 production_host)
    HOST_DEV=$(get_cfg_value 0 development_host)
    BCKFORMAT="$(get_cfg_value 0 bckformat)"
    TAR_EXT=$(get_cfg_value 0 tar_ext)
    TAR_OPT=$(get_cfg_value 0 tar_opt)
    REST2="$(get_cfg_value 0 enable_restore)"
    TEST_DB="$(get_cfg_value 0 test_db)"
    NEWDBS=$(get_cfg_value 0 bck_db)
    if [ -n "$NEWDBS" ]; then
      REDB="($TEST_DB|${NEWDBS//,/|})"
    else
      REDB="$TEST_DB"
    fi
    if [ -z $REDB ]; then
      REDB="test"
    fi
    OE_OWN=$(get_cfg_value 0 db_user)
    PG_OWN=$(get_cfg_value 0 pg_user)
    ODOO_RPC_HOST="$(get_cfg_value 0 odoo_rpc_host)"
    ODOO_RPC_PROTOCOL="$(get_cfg_value 0 odoo_rpc_protocol)"
    ODOO_RPC_XMLPORT="$(get_cfg_value 0 odoo_rpc_xmlport)"
    ODOO_VERSION="$(get_cfg_value 0 odoo_version)"
    ODOO_RPC_PWD="$(get_cfg_value 0 odoo_rpc_pwd)"
    selsfx=
    for sfx in A B C D E F G H; do
      if [ "$HOSTNAME" == "$HOST_PRD" ]; then
        eval DB$sfx="'$(get_cfg_value 0 PRD_DB${sfx}_filter)'"
        eval NC$sfx="$(get_cfg_value 0 PRD_DB${sfx}_keep_recent)"
        eval NA$sfx="$(get_cfg_value 0 PRD_DB${sfx}_keep_monthly)"
      elif [ "$HOSTNAME" == "$HOST_DEV" ]; then
        eval DB$sfx="'$(get_cfg_value 0 DEV_DB${sfx}_filter)'"
        eval NC$sfx="$(get_cfg_value 0 DEV_DB${sfx}_keep_recent)"
        eval NA$sfx="$(get_cfg_value 0 DEV_DB${sfx}_keep_monthly)"
      fi
      x=DB$sfx
      XDB=${!x}
      if [ -z "$XDB" ]; then
        eval DB$sfx="'$(get_cfg_value 0 DB${sfx}_filter)'"
        eval NC$sfx="$(get_cfg_value 0 DB${sfx}_keep_recent)"
        eval NA$sfx="$(get_cfg_value 0 DB${sfx}_keep_monthly)"
      fi
      if [ "$ACTION" != "restdb" ] && [ -n "$dbsel" -o  $opt_ex -ne 0 ]; then
        x=DB$sfx
        XDB=${!x}
        if [ -n "$dbsel" -a -n "$XDB" ] && [[ $dbsel =~ $XDB ]]; then
          selsfx=$sfx
        else
          eval DB$sfx=
          eval NC$sfx=
          eval NA$sfx=
        fi
      fi
    done
    if [ -n "$dbsel" -a -z "$selsfx" -a $opt_ex -eq 0 ]; then
      DBA="'$(get_cfg_value 0 dbfilter)'"
      NCA=$(get_cfg_value 0 keep_recent)
      NAA=$(get_cfg_value 0 keep_monthly)
    fi
    if [ $opt_ex -eq 0 ]; then
      DBSEL=
      for sfx in A B C D E F G H; do
        x=DB$sfx
        XDB=${!x}
        if [ -n "$XDB" ]; then
          if [ -z "$DBSEL" ]; then
            DBSEL="$XDB"
          elif [ "$DBSEL" != "$XDB" ]; then
            DBSEL=".*"
            break
          fi
        fi
      done
    else
      DBSEL=$dbsel
    fi
    if [[ "$opt_keep" =~ [0-9]+ ]]; then
      NCA=$opt_keep
    fi
    if [[ "$opt_km" =~ [0-9]+ ]]; then
      NAA=$opt_km
    fi
}

set_db_vars() {
#set_db_vars(db)
    dbsel=$1
    declare -g XDB XNC XNA
    local sfx x
    for sfx in A B C D E F G H; do
      x=DB${sfx}
      XDB=${!x}
      x=NC${sfx}
      XNC=${!x}
      x=NA${sfx}
      XNA=${!x}
      if [ -n "$XDB" ] && [[ $db =~ $XDB ]]; then
        break
      fi
   done
}

expand_tar() {
#expand_tar(db [sqlfname])
# current dir must be BCKDIR
    local src x
    local db=$1
    if [ "$BCKFORMAT" != "0" ]; then
      src=$db
      for x in $TAR_EXT; do
        if [ -f $db$x ]; then
          src=$db$x
          break
        fi
      done
      run_traced "tar $TAR_OPT -xf $src $2"
      if [ -f "$src" ]; then
        chown $PG_OWN $src
      fi
    fi
}

compress_tar() {
#compress_tar(db sqlfname)
# current dir must be BCKDIR
    local src x sts fn
    local db=$1
    if [ -f "$db-*.sql" ]; then
      chown $PG_OWN $db-*.sql
    fi
    if [ "$BCKFORMAT" != "0" ]; then
      src=$db
      x=$(echo $TAR_EXT|awk '{print $1}')
      src=$db$x
      run_traced "tar $TAR_OPT -cf $src $db-*.sql"
      sts=$?
      if [ $sts -eq $STS_SUCCESS -a -n "$2" ]; then
        wlog "removing archived files"
        for fn in $db-*.sql; do
          if [ "$fn" != "$2" ]; then
            rm -f $fn
          fi
        done
      fi
    fi
}

create_db_list_from_pg() {
# create_db_list_from_pg(dbsel pgsql_dir bck_dir bck_db)
    local dblist=
    local PGDIR=$2
    local sfx XDB DBCKDIR flst dbsel redb f x
    if [ -z $3 ]; then
      DBCKDIR="$PGDIR/backups"
    else
      DBCKDIR=$3
    fi
    flst="$HOME/db_pgsql.lst"
    dbsel=$1
    if [ -n "$dbsel" ]; then
      redb=$4
      if [ -z "$redb" ]; then
        redb="test"
      fi
      if [ $opt_dry_run -eq 0 -o $test_mode -ne 0 ]; then
        slog "Select DB matches $dbsel in $DBCKDIR"
      fi
      if [ $test_mode -ne 0 ]; then
        echo " invalid        | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |">$flst
        echo " zi01234567     | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |">>$flst
        echo " test           | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |">>$flst
      else
        psql -U$opt_user -lt -o $flst
      fi
      sort $flst -f -o $flst
      for db in $(awk -F"|" '{ print $1 }' $flst); do
        db=$(echo $db|sed -e 's/^ *//' -e 's/ *$//')
        if [[ $db =~ $redb ]]; then
          slog "DB $db is backup copy"
        else
          for sfx in A B C D E F G H; do
            x=DB$sfx
            XDB=${!x}
            f=0
            if [ -n "$XDB" ]; then
              if [[ $db =~ $XDB ]]; then
                if [ $opt_ex -ne 0 ]; then
                  if [ "$HOSTNAME" == "$HOST_PRD" ]; then
                    if [[ " $dblist " =~ [[:space:]]$dbsel[[:space:]] ]]; then
                      :
                    else
                      dblist="$dblist $dbsel"
                      f=1
                    fi
                    break
                  fi
                else
                  if [ "$HOSTNAME" == "$HOST_PRD" ]; then
                    if [[ " $dblist " =~ [[:space:]]$db[[:space:]] ]]; then
                      :
                    else
                      dblist="$dblist $db"
                      f=1
                    fi
                    break
                  fi
                fi
              fi
            fi
          done
          if [ $f -eq 0 ]; then
            slog "DB $db is not classified"
          fi
        fi
      done
      rm -f $flst
    fi
    echo $dblist
}

create_db_list_from_file() {
# create_db_list_from_file(dbsel pgsql_dir bck_dir bck_db)
    local dbsel=$1
    local dblist=
    local files fn db dbf sfx f x
    local XDB DBCKDIR redb
    if [ -z $3 ]; then
      DBCKDIR="$PGDIR/backups"
    else
      DBCKDIR=$3
    fi
    if [ -n "$dbsel" ]; then
      if [ "$BCKFORMAT" == "0" ]; then
        files=$DBCKDIR/*.sql
      else
        for x in $TAR_EXT; do
          files="$files $DBCKDIR/*$x"
        done
      fi
      for fn in $files; do
        if [ "$BCKFORMAT" == "0" ]; then
          dbf=${fn%%-*}
          x=$(basename $dbf)
        else
          x=$(basename $fn)
        fi
        db=${x%.*}
        for sfx in A B C D E F G H; do
          x=DB$sfx
          XDB=${!x}
          if [ -n "$XDB" ]; then
            if [[ $db =~ $XDB ]]; then
              if [ $opt_ex -ne 0 ]; then
                if [[ " $dblist " =~ [[:space:]]$dbsel[[:space:]] ]]; then
                  :
                else
                  dblist="$dblist $dbsel"
                fi
              else
                if [[ " $dblist " =~ [[:space:]]$db[[:space:]] ]]; then
                  :
                else
                  dblist="$dblist $db"
                fi
              fi
            fi
          fi
        done
      done
    fi
    echo "$dblist"
}
