#! /bin/bash
# -*- coding: utf-8 -*-
# Regression tests on zar
#
# READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
# export READLINK
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=""
for p in $TDIR $TDIR/.. $TDIR/../.. $HOME/venv_tools/bin $HOME/venv_tools/lib $HOME/tools; do
  [[ -d $p ]] && PYPATH=$(find $(readlink -f $p) -maxdepth 3 -name z0librc)
  [[ -n $PYPATH ]] && PYPATH=$(dirname $PYPATH) && break
done
PYPATH=$(echo -e "import os,sys;p=[os.path.dirname(x) for x in '$PYPATH'.split()];p.extend([x for x in os.environ['PATH'].split(':') if x not in p and x.startswith('$HOME')]);p.extend([x for x in sys.path if x not in p]);print(' '.join(p))"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0lib/z0librc ]]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 72
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$($READLINK -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

__version__=1.3.36.99


test_01() {
    local RES TRES
    if [ -f $OUTF ]; then
      RES=$OUTF
    else
      RES=
    fi
    test_result "zar_rest -T (found log)" "$OUTF" "$RES"
    return $?
}

test_02() {
    local RES TRES
    if [ -f $OUTF ]; then
      for db in zi01234567; do
        grep "DB to Restore: .*$db" $OUTF  &>/dev/null
        RES=$?
        test_result "zar_rest -T (found db $db in log file)" "0" "$RES"
      done
    else
      RES=1
    fi
    return $?
}

test_03() {
    local RES TRES
    if [ -f $OUTF ]; then
      for db in zi01234567; do
        local dtc=$(date +%Y%m%d)
        grep -q "File .*/${db}-$dtc.sql .* $db" <<< $OUT &>/dev/null
        RES=$?
        test_result "zar_rest -T (found 'into' db in log)" "0" "$RES"
      done
    else
      RES=1
    fi
    return $?
}

Z0BUG_setup() {
    local i db dtc tod dd
    Z0BUG_build_os_tree "backups"
    rm -f $TESTDIR/restdb.log
    rm -f $TESTDIR/res/backups/*.sql
    local tod=$(date +%Y%m%d)
    for db in zi01234567 zi01234589; do
      touch $TESTDIR/res/backups/${db}-$tod.sql
      # touch $TESTDIR/res/backups/${db}.err
      for i in {10..8}; do
          dtc=$(date -d "today - $i day" +%Y%m%d)
          touch $TESTDIR/res/backups/${db}-$dtc.sql
      done
    done
    local CONFN=$TESTDIR/zar.conf
    cat <<EOF >$CONFN
DBA_filter=zi0123
DBA_keep_recent=7
DBA_keep_monthly=3
development_host=$HOSTNAME
production_host=${HOSTNAME//s/z}-DEV
bck_db=yesterday
PRD_num_days_before=0
EOF
    local cmd="$RUNDIR/zar_rest -T zi01234567"
    OUTF=$TESTDIR/restdb.log
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      OUT=$(eval $cmd)
    else
      OUT=
      rm -f $OUTF
    fi
}


Z0BUG_teardown() {
    [ ${opt_dry_run:-0} -eq 0 ] && Z0BUG_remove_os_tree "backups"
}


Z0BUG_build_os_tree() {
    local p path os_tree root
    os_tree="${1//,/ }"
    root=$TESTDIR/res
    [ ! -d "$root" ] && mkdir -p $root
    for p in $os_tree; do
      [[ ${p:0} =~ [./] ]] && path=$p || path=$root/$p
      [ ! -d $path ] && mkdir -p $path
    done
}

Z0BUG_remove_os_tree() {
    local p path os_tree root
    os_tree="${1//,/ }"
    root=$TESTDIR/res
    [ ! -d "$root" ] && return
    for p in $os_tree; do
      [[ ${p:0} =~ [./] ]] && path=$p || path=$root/$p
      [ ! -d $path ] && continue
      rm -fR $path
    done
}


Z0BUG_init
parseoptest -l$TESTDIR/test_UNKNOWN.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts
if [ $opt_zLib -ne 0 ]; then
  ZARLIB=$(findpkg zarrc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/zar $HOME/dev")
  if [ -z "$ZARLIB" ]; then
    echo "Library file zarrc not found!"
    exit 2
  fi
  . $ZARLIB
fi

UT1_LIST=""
UT_LIST=""
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
