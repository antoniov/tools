#! /bin/bash
# -*- coding: utf-8 -*-
# Duplicate postgres DB
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
# This free software is released under GNU Affero GPL3

THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
elif [ -e /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit $STS_FAILED
fi

__version__="1.3.14"


detached_login() {
# detached_login([path] [path2] [path3])
    if [ $opt_cron -gt 0 -a "$SHELL" == "/bin/sh" ]; then
      if [ $opt_dry_run -eq 0 ]; then
        fqcmd=$(readlink -f $0)
        wlog "Run $fqcmd in cron mode"
        SHELL=/bin/bash exec "$fqcmd" "$@"
      fi
    elif [ $opt_cron -gt 0 -a -f $HOME/.bash_profile ]; then
      wlog "Simulate login ($HOME/.bash_profile)"
      . $HOME/.bash_profile
    fi
    if [[ ":$PATH:" =~ /usr/local/bin ]]; then
      :
    else
      export PATH=/usr/local/bin:$PATH
    fi
    if [ -n "$1" ]; then
      if [ -d $1 ]; then
        if [[ ":$PATH:" =~ $1 ]]; then
          :
        else
          export PATH=$PATH:$1
        fi
      fi
    fi
    if [ -n "$2" ]; then
      if [ -d $2 ]; then
        if [[ ":$PATH:" =~ $2 ]]; then
          :
        else
          export PATH=$PATH:$2
        fi
      fi
    fi
    if [ -n "$3" ]; then
      if [ -d $3 ]; then
        if [[ ":$PATH:" =~ $3 ]]; then
          :
        else
          export PATH=$PATH:$3
        fi
      fi
    fi
    wlog "PATH=$PATH"
}


kill_process() {
    sql="select datname,pid,xact_start,waiting,state from pg_stat_activity where datname='$NEWDB' and pid<>pg_backend_pid();"
    flog=$HOME/dup4test_proc.log
    psql -U$opt_user -d postgres -tc "$sql" -o $flog
    while IFS=\| read db pid pdt w st; do
      if [ -n "$st" ]; then
        db=$(echo $db)
        w=$(echo $w)
        st=$(echo $st)
        pid=$(echo $pid)
        if [ "$db" == "$NEWDB" ]; then
          if [ "$w" != "f" -a "${st:0:4}" != "idle" ]; then
            echo "DB non deletable"
          else
            echo "killing process $pid"
            kill $pid
          fi
        fi
      fi
    done < $flog
    rm -f $flog
}

backup_db() {
    local db=$1
    if [ $opt_dry_run -gt 0 ]; then
      wlog "> pg_dump -U$opt_user -Fp -f $DBCKDIR/$db-00000000.sql $db"
    else
      kill_process
      wlog "\$ pg_dump -U$opt_user -Fp -f $DBCKDIR/$db-00000000.sql $db"
      pg_dump -U$opt_user -Fp -f $DBCKDIR/$db-00000000.sql $db
    fi
}

OPTOPTS=(h        K        l       m        n            U          V           v)
OPTDEST=(opt_help opt_cron opt_log opt_mail opt_dry_run  opt_user   opt_version opt_verbose)
OPTACTI=(1        1        "="     1        "1"          "="        "*>"        1)
OPTDEFL=(0        0        ""      -1        0           "postgres" ""          0)
OPTMETA=("help"   "cron"   "file" "mail"    "do nothing" "username" "version"   "verbose")
OPTHELP=("this help"\
 "run in cron environment"\
 "log filename (def /var/log/bckdb.log)"\
 "disable mail server on target DB"\
 "do nothing (dry-run)"\
 "username (def postgres)"\
 "show version"\
 "verbose mode")
OPTARGS=(olddb newdb seldate)

parseoptargs $@

if [ "$opt_version" ]
then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]
then
  print_help "Restore/duplicate postgres DB"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ -z "$opt_log" ]; then
  publog="/var/log/zar/restdb.log"
else
  publog=$opt_log
fi
FCONF=$TDIR/zar.conf
eval $(init_cfg)
eval $(active_cfg)
set_tlog_file "$publog"
if [ $opt_cron -gt 0 ]; then
  detached_login "$@"
fi
link_cfg $FCONF
wlog "Starting restore/duplicate $__version__ by $USER"

DBCKDIR=$(findpkg "" "/var/lib" "postgresql  pgsql" "8.2 8.3 9.0 9.1 9.2 9.3 9.4" "backups")
if [ -z "$DBCKDIR" ]; then
  wlog "No postgres backup directory found!"
  exit 1
fi
wlog "Found $DBCKDIR directory"
HOST_PRD=$(get_cfg_value 0 production_host)
HOST_DEV=$(get_cfg_value 0 development_host)
wlog "PRD=$HOST_PRD"
wlog "DEV=$HOST_DEV"
OWN=$(get_cfg_value 0 db_user)
if [ -z "$OWN" ]; then
  OWN=odoo
fi
wlog "OWN=$OWN"
if [ -z "$olddb" ]; then
  OLDDB=$(get_cfg_value 0 db_name)
else
  OLDDB=$olddb
fi
if [ -z "$newdb" ]; then
  NEWDBS=$(get_cfg_value 0 bck_db)
  if [ "$NEWDBS" == "*" ]; then
    NEWDBS=$OLDDB
  fi
elif [ "$newdb" == "*" ]; then
  NEWDBS=$OLDDB
else
  NEWDBS=$newdb
fi
if [ -z "$OLDDB" -o -z "$NEWDBS" ]; then
  print_help
  exit
fi
TEST_DB="$(get_cfg_value 0 test_db)"
if [ -z "$TEST_DB" ]; then
  TEST_DB="$(get_cfg_value 0 bck_db)"
fi
if [[ $seldate =~ [0-9]{8} ]]; then
  NDAYSB=$seldate
elif [ "$HOSTNAME" == "$HOST_PRD" ]; then
  NDAYSB="$(get_cfg_value 0 PRD_num_days_before)"
elif [ "$HOSTNAME" == "$HOST_DEV" ]; then
  NDAYSB="$(get_cfg_value 0 DEV_num_days_before)"
fi
if [ -z "$NDAYSB" ]; then
  NDAYSB="$(get_cfg_value 0 num_days_before)"
fi
if [ -z "$NDAYSB" ]; then
  NDAYSB=yesterday
fi
ctr=0
passed=""
for NEWDB in ${NEWDBS//,/ }; do
  for ND in ${NDAYSB//,/ }; do
    if [[ " $passed " =~ [[:space:]]$NEWDB[[:space:]] ]]; then
       continue
    fi
    if [[ $ND =~ [0-9]{8} ]]; then
      dtdb=$ND
    elif [[ $ND =~ [0-9]+ ]]; then
      NDAYB=-${ND}day
      dtdb=$(date -d $NDAYB +"%Y%m%d")
    else
      dtdb=$(date -d yesterday +"%Y%m%d")
    fi
    if [[ " $passed " =~ [[:space:]]$dtdb[[:space:]] ]]; then
       continue
    fi
    if [ $opt_mail -eq -1 ]; then
      opt_mail=0
      if [ "$HOSTNAME" == "$HOST_DEV" ]; then
        opt_mail=1
      elif [[ $NEWDB =~ $TEST_DB ]]; then
        opt_mail=1
      fi
    fi
    echo "Searching $DBCKDIR/$OLDDB-$dtdb.sql"
    if [ ! -f $DBCKDIR/$OLDDB-$dtdb.sql ]; then
      echo "No sql file found!!!"
      exit 1
    fi
    if [ $opt_dry_run -eq 0 ]; then
      wlog "Restore/duplicate $OLDDB-$dtdb.sql $NEWDB"
    else
      echo "Should restore $OLDDB-$dtdb.sql $NEWDB"
    fi
    if [ "$NEWDB" == "$OLDDB" -a "$dtdb" != "00000000" ]; then
      backup_db $OLDDB
    fi
    echo "DROP DATABASE IF EXISTS $NEWDB;">$NEWDB.txt
    echo "CREATE DATABASE $NEWDB TEMPLATE template1;">>$NEWDB.txt
    echo "ALTER DATABASE $NEWDB OWNER TO $OWN;">>$NEWDB.txt
    if [ $opt_dry_run -eq 0 ]; then
      kill_process
      echo "Creating new DB $NEWDB"
      psql -U$opt_user -d postgres -f $NEWDB.txt -o ${NEWDB}_pre.log
      echo "Loading data into DB $NEWDB"
      psql -U$opt_user -d $NEWDB -f $DBCKDIR/$OLDDB-$dtdb.sql -o $NEWDB.log
      ((ctr++))
    fi
    if [ $opt_mail -gt 0 ]; then
      fsql=$HOME/dup4test.sql
      wlog "Disabling inbound mail ..."
      echo "update ir_cron set interval_number=60000 where name='Fetchmail Service';">$fsql
      echo "update fetchmail_server set active=false;">>$fsql
      wlog "Disabling outbound mail ..."
      echo "update ir_mail_server set active=false;">>$fsql
      if [ $opt_dry_run -eq 0 ]; then
        psql -U$opt_user -d $NEWDB -f $fsql
      fi
    fi
    passed="$passed $NEWDB $dtdb"
  done
done
if [ $opt_dry_run -eq 0 ]; then
  sleep 30
fi
wlog "All $ctr databases are restored"
exit 0
