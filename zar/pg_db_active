#! /bin/bash
# -*- coding: utf-8 -*-
#
# pg_db_active
# manage postgres sessions
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2016-2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
for x in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../../z0lib . .. /etc; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi

__version__=1.3.32.8


db_act_list() {
# db_act_list(-C|-c|-k|-l|-w|-z [pos])  # count_all, count, return older pid to kill, list sessions, return active sess to wait
    local act=$1
    local fw
    local sql sqlc sess_ctr LOG wait4 valid_sess db pid w st older
    local pos=0
    [ -n "$2" ] && pos=$2
    [ $PSQL_VER -ge 96 ] && fw="wait_event" || fw="waiting"
    if [ "$act" == "-z" ]; then local ord="desc"; else local ord=; fi
    if [ -z "$DB" ]; then
      sql="select datname,pid,state_change,$fw,state from pg_stat_activity where pid<>pg_backend_pid() order by state_change $ord;"
    else
      sql="select datname,pid,state_change,$fw,state from pg_stat_activity where datname='$DB' and pid<>pg_backend_pid() order by state_change $ord;"
    fi
    if [ "$act" == "-c" -o "$act" == "-C" ]; then
      if [ -z "$DB" -o "$act" == "-C" ]; then
        sqlc="select count(pid) from pg_stat_activity where pid<>pg_backend_pid();"
      else
        sqlc="select count(pid) from pg_stat_activity where datname='$DB' and pid<>pg_backend_pid();"
      fi
      sess_ctr=$(psql -Upostgres -tc "$sqlc"|head -n1)
      sess_ctr=$(echo $sess_ctr)
    else
      LOG=~/${THIS}_$$.log
      psql -Upostgres -tc "$sql" -o $LOG
      wait4=0
      sess_ctr=0
      valid_sess=0
      older=0
      while IFS=\| read db pid dt w st; do
        if [ -n "$st" ]; then
          ((sess_ctr++))
          db=$(echo $db)
          w=$(echo $w)
          if [ $PSQL_VER -ge 96 ]; then
            [ -z "$w" ] && w="f" || w="t"
          fi
          st=$(echo $st)
          pid=$(echo $pid)
          if [ "$act" == "-l" ]; then
            # echo -e "($pid)\t$db\t$w\t$st"
            printf "(%6.6s) %-16.16s %2.2s %-8.8s %20.20s\n" "$pid" "$db" "$w" "$st" "$dt"
          fi
          if [ $older -eq 0 -a "$w" == "f" -a "$st" == "idle" -a "$db" != "postgres" ]; then
            ((valid_sess++))
            if [ $pos -gt 0 ]; then
              if [ $valid_sess -eq $pos ]; then
                older=$pid;
              fi
            else
              older=$pid
            fi
          fi
          if [ "$db" == "$DB" ]; then
            if [ "$w" != "f" ]; then
              wait4=1
            fi
            if [ "${st:0:4}" != "idle" ]; then
              wait4=1
            fi
          fi
        fi
      done < $LOG
      rm -f $LOG
    fi
    if [ "$act" == "-w" ]; then
      return $wait4
    elif [ "$act" == "-c" -o "$act" == "-C" -o "$act" == "-l" ]; then
      echo $sess_ctr
    elif [ "$act" == "-k" -o "$act" == "-z" ]; then
      echo $older
    fi
    return 0
}

OPTOPTS=(h        a           C        c       G         k        L        n           p        s        V           v           w       z)
OPTDEST=(opt_help act_kill4db act_ctra act_ctr opt_grant act_kill opt_lock opt_dry_run pool     opt_show opt_version opt_verbose wait_db opt_last)
OPTACTI=(1        "1>"        "1>"     "1>"    1         "1>"     1        1           "="      1        "*"         1           1       1)
OPTDEFL=(0        0           0        0       0         0        0        0           -1       0        ""          0           0       0)
OPTMETA=("help"   "kill_all" "count"   "count" ""        "kill"   ""       ""          "number" ""       "version"   "verbose"   "wait"  "")
OPTHELP=("this help"\
 "kill all sessions of DB!"\
 "count all active connections"\
 "count active connections on DB"\
 "grant connection to DB"\
 "kill all sessions out of pool"\
 "lock DB to avoid new connections"\
 "do nothing (dry-run)"\
 "declare # of session pool"\
 "show pool size"\
 "show version end exit"\
 "verbose mode"\
 "wait for DB idle after kill"\
 "search just for last session")
OPTARGS=(DB)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Check/kill for postgres DB sessions"\
  "(C) 2016-2019 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Postgresql\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
PSQL_VER=$(psql --version|grep -Eo "[0-9]\.[0-9]"|tr -d ".")
if [ $pool -lt 1 ]; then
  pool=$(psql -Upostgres -tc "select setting from pg_settings where name='max_connections';"|head -n1)
  pool=$(echo $pool)
fi
if [ $opt_show -ne 0 ]; then
  echo $pool
  exit 0
fi
if [ $pool -lt 5 ]; then
  pool=5
fi
sleep_tm=5
loop_ctr=1
if [ $act_ctr -ne 0 ]; then
  if [ -n "$DB" ]; then
    act=-c
  else
    echo "Missing DB name!"
    exit 1
  fi
elif [ $act_ctra -ne 0 ]; then
  act=-C
elif [ $act_kill -ne 0 ]; then
  act=-C
  loop_ctr=8
  sleep_tm=1
elif [ $act_kill4db -ne 0 ]; then
  if [ -n "$DB" ]; then
    act=-c
    loop_ctr=1
    sleep_tm=0
    if [ $opt_lock -gt 0 ]; then
      if [ $opt_verbose -gt 0 ]; then
        echo "Revoce access from $DB"
      fi
      if [ $opt_dry_run -eq 0 ]; then
        sqlc="REVOKE CONNECT ON DATABASE $DB FROM PUBLIC, odoo;"
        psql -Upostgres -tc "$sqlc" &>/dev/null
      fi
    fi
  else
    echo "Missing DB name!"
    exit 1
  fi
elif [ $wait_db -ne 0 ]; then
  if [ -n "$DB" ]; then
    act=-c
  else
    act=-C
  fi
else
  act=-l
fi
let threshold="$pool/5"
let pool_max="$pool-$threshold"
let pool_min="$pool_max-$threshold"
bias=0
sts=1
while [ $sts -ne 0 -a $loop_ctr -gt 0 ]; do
  if [ $act_kill -ne 0 -o $act_kill4db -ne 0 ]; then
    sess_ctr=$(db_act_list "$act")
    if [ $opt_verbose -gt 0 ]; then
      echo "Found $sess_ctr currently active sessions"
    fi
    if [ $sess_ctr -gt 0 ]; then
      if [ $act_kill4db -ne 0 ]; then
        killing=1
        if [ $bias -eq 0 ]; then
          bias=1
          if [ $opt_last -eq 0 ]; then
            loop_ctr=$sess_ctr
            ((loop_ctr++))
          fi
        elif [ $opt_dry_run -ne 0 ]; then
          ((bias++))
        fi
      elif [ $sess_ctr -gt $pool_max ]; then
        killing=1
        ((bias++))
        loop_ctr=$threshold
      elif [ $sess_ctr -gt $pool_min -a $bias -ne 0 ]; then
        killing=1
      else
        killing=0
        bias=0
      fi
      if [ $killing -gt 0 ]; then
        if [ $opt_last -ne 0 ]; then
          if [ $opt_dry_run -ne 0 ]; then
            pid=$(db_act_list "-z" "$bias")
          else
            pid=$(db_act_list "-z")
          fi
        else
          if [ $opt_dry_run -ne 0 ]; then
            pid=$(db_act_list "-k" "$bias")
          else
            pid=$(db_act_list "-k")
          fi
        fi
        if [ ${pid:-0} -ne 0 ]; then
          if [ $opt_dry_run -eq 0 ]; then
            if [ $opt_verbose -gt 0 ]; then
              echo "Killing process pid=$pid"
            fi
            # kill $pid &>/dev/null
            sqlc="select pg_terminate_backend(pid) from pg_stat_activity where pid=$pid;"
            psql -Upostgres -tc "$sqlc" &>/dev/null
          else
            echo "Process pid=$pid should be killed"
            sts=0
          fi
        elif [ $opt_dry_run -eq 0 ]; then
          ((loop_ctr++))
        fi
        sts=1
      else
        sts=0
      fi
    else
      sts=0
    fi
  else
    db_act_list "$act"
    sts=$?
  fi
  ((loop_ctr--))
  if [ $sts -ne 0 ]; then
    sleep $sleep_tm
  fi
done
if [ $wait_db -ne 0 -a -n "$DB" ]; then
  act=-w
  loop_ctr=3
  sleep_tm=1
  while [ $sts -ne 0 -a $loop_ctr -gt 0 ]; do
    db_act_list "$act"
    sts=$?
    ((loop_ctr--))
    if [ $sts -ne 0 ]; then
      if [ $opt_verbose -gt 0 ]; then
        echo "Waiting for DB going idle"
      fi
      sleep $sleep_tm
    fi
  done
  sleep 1
fi
if [ $opt_grant -gt 0 -a -n "$DB" ]; then
  if [ $opt_verbose -gt 0 ]; then
    echo "Grant access to $DB"
  fi
  if [ $opt_dry_run -eq 0 ]; then
    sqlc="GRANT CONNECT ON DATABASE $DB TO PUBLIC, odoo;"
    psql -Upostgres -tc "$sqlc" &>/dev/null
  fi
fi
exit $sts
