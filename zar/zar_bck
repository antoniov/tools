#! /bin/bash
# -*- coding: utf-8 -*-
#
# Backup postgres DB
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in $TDIR $TDIR/.. . .. $TDIR/../../z0lib $TDIR/../z0lib /etc; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ZARLIB=$(findpkg zarrc "$TDIR $TDIR/..")
if [ -z "$ZARLIB" ]; then
  echo "Library file zarrc not found!"
  exit 2
fi
. $ZARLIB
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=1.3.27


inherit_options() {
    OPTS=
    if [ $opt_ex -gt 0 ]; then
      OPTS=e$OPTS
    fi
    if [ $opt_cron -gt 0 ]; then
      OPTS=K$OPTS
    fi
    if [ $opt_dry_run -gt 0 ]; then
      OPTS=n$OPTS
    fi
    if [ $opt_verbose -gt 0 ]; then
      OPTS=v$OPTS
    fi
    if [ -n "$opt_user" ]; then
      OPTS="${OPTS}U$opt_user"
    fi
    if [ -n "$OPTS" ]; then
      OPTS=-$OPTS
    fi
    if [ -n "$opt_conf" -a "$opt_conf" != "$TDIR/zar.conf" ]; then
      OPTS="$OPTS -c $opt_conf"
    fi
}


OPTOPTS=(h        c        e      K        l       n            o        T         U          V           v)
OPTDEST=(opt_help opt_conf opt_ex opt_cron opt_log opt_dry_run  opt_name test_mode opt_user   opt_version opt_verbose)
OPTACTI=(1        "="      1      1        "="     1            "="      1         "="        "*>"        1)
OPTDEFL=(0        ""       0      0        ""      0            ""       0         "postgres" ""          0)
OPTMETA=("help"   "file"   ""     "cron"   "file"  "do nothing" "fname"  "test"    "username" "version"   "verbose")
OPTHELP=("this help"\
 "configuration file (def zar.conf)"\
 "exact DB name (rather matches DB name)"\
 "run in cron environment"\
 "log filename (def /var/log/bckdb.log)"\
 "do nothing (dry-run)"\
 "output filename (def dbname-date)"\
 "test mode (implies dry-run)"\
 "username (def postgres)"\
 "show version"\
 "verbose mode")
OPTARGS=(dbsel)

parseoptargs $@
if [ "$opt_version" ]
then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]
then
  print_help "Backup postgres DB"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
CFG_init
conf_default "bckdb"
if [ $opt_cron -gt 0 ]; then
  detached_login "$@"
fi
link_cfg $FCONF
wlog "=== Starting backup $__version__ by $opt_user ==="

init_vars "$dbsel"
if [ ! -d $DBCKDIR ]; then
  mkdir -p $DBCKDIR
fi
if [ "$BCKFORMAT" == "0" ]; then
  wlog "-- Backupped DBs stored in sql files --"
else
  wlog "-- Backupped DBs stored in compress tar files --"
fi
wlog "PRD=$HOST_PRD"
wlog "DEV=$HOST_DEV"
dblist=$(create_db_list_from_pg "$DBSEL" "$PGDIR" "$DBCKDIR" "$REDB")
wlog "- DB to Backup:$dblist"
ctr=0
if [ -n "$dblist" ]; then
  inherit_options
  if [ -z "$opt_name" -a $test_mode -eq 0 ]; then
    if [ -f $TDIR/zar_purge ]; then
      cmd=$TDIR/zar_purge
    else
      cmd=./zar_purge
    fi
    wlog "\$ $cmd $OPTS $DBSEL"
    eval $cmd $OPTS "'$dbsel'"
  fi
  CWD=$PWD
  cd $DBCKDIR
  dtc=$(date +%Y%m%d)
  for db in $dblist
  do
    wlog "backup $db"
    if [ -z "$opt_name" ]; then
      expand_tar $db
      sqlfname=$DBCKDIR/$db-$dtc.sql
    else
      sqlfname=$opt_name
      if [ -f $sqlfname ]; then
        echo "File $sqlfname already exists!"
        exit 1
      fi
    fi
    if [[ ( -n "$HOST_DEV" && ! $HOSTNAME =~ $HOST_DEV ) || -n "$opt_name" ]]; then
      if [ $opt_dry_run -gt 0 ]; then
        wlog "> pg_dump -U$opt_user -Fp -f $sqlfname $db"
      else
        # wlog "\$ pg_dump -U$opt_user -Fp -f $sqlfname $db"
        run_traced "pg_dump -U$opt_user -Fp -f $sqlfname $db"
        if [[ -z "$opt_name" && $HOSTNAME =~ $HOST_PRD && -n "$HOST_DEV" ]]; then
          # wlog "\$ scp $sqlfname $HOST_DEV:$sqlfname"
          run_traced "scp $sqlfname $HOST_DEV:$sqlfname"
        fi
      fi
      ((ctr++))
    else
      wlog "Waiting for backup from production host"
      if [ $opt_dry_run -eq 0 ]; then
        wctr=25
        while [ ! -f $sqlfname -a $wctr -gt 0 ]; do
          sleep 180
          ((wctr--))
        done
        wlog "Received $sqlfname"
      fi
    fi
    if [ -z "$opt_name" ]; then
      compress_tar $db $sqlfname
    fi
  done
  if [ $opt_dry_run -eq 0 ]; then
    wlog "== $ctr databases are backupped!"
  else
    wlog "== $ctr databases should be backupped!"
  fi
  if [ -z "$opt_name" -a $test_mode -eq 0 ]; then
    if [ -f $TDIR/zar_purge ]; then
      cmd=$TDIR/zar_rest
    else
      cmd=./zar_rest
    fi
    if [ -z "$REST2" ]; then
      if [[ $HOSTNAME =~ $HOST_PRD && -z "$HOST_DEV" ]]; then
        wlog "\$ $cmd $OPTS"
        eval $cmd $OPTS
      elif [[ -n "$HOST_DEV" && $HOSTNAME =~ $HOST_DEV ]]; then
        wlog "\$ $cmd $OPTS"
        eval $cmd $OPTS
      fi
    else
      if [ "$REST2" == "1" ]; then
        wlog "\$ $cmd $OPTS"
        eval $cmd $OPTS
      fi
    fi
  fi
  cd $CWD
fi
exit 0
