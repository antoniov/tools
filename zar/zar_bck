#! /bin/bash
# -*- coding: utf-8 -*-
# Backup postgres DB
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
# This free software is released under GNU Affero GPL3

THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
elif [ -e /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit $STS_FAILED
fi

__version__="1.3.15"


detached_login() {
# detached_login([path] [path2] [path3])
    if [ $opt_cron -gt 0 -a "$SHELL" == "/bin/sh" ]; then
      if [ $opt_dry_run -eq 0 ]; then
        fqcmd=$(readlink -f $0)
        wlog "Run $fqcmd in cron mode"
        SHELL=/bin/bash exec "$fqcmd" "$@"
      fi
    elif [ $opt_cron -gt 0 -a -f $HOME/.bash_profile ]; then
      wlog "Simulate login ($HOME/.bash_profile)"
      . $HOME/.bash_profile
    fi
    if [[ ":$PATH:" =~ /usr/local/bin ]]; then
      :
    else
      export PATH=/usr/local/bin:$PATH
    fi
    if [ -n "$1" ]; then
      if [ -d $1 ]; then
        if [[ ":$PATH:" =~ $1 ]]; then
          :
        else
          export PATH=$PATH:$1
        fi
      fi
    fi
    if [ -n "$2" ]; then
      if [ -d $2 ]; then
        if [[ ":$PATH:" =~ $2 ]]; then
          :
        else
          export PATH=$PATH:$2
        fi
      fi
    fi
    if [ -n "$3" ]; then
      if [ -d $3 ]; then
        if [[ ":$PATH:" =~ $3 ]]; then
          :
        else
          export PATH=$PATH:$3
        fi
      fi
    fi
    wlog "PATH=$PATH"
}

create_db_list() {
# create_db_list(dbsel pgsql_dir bck_dir)
    local PGDIR=$2
    if [ -z $3 ]; then
      local DBCKDIR="$PGDIR/backups"
    else
      local DBCKDIR=$3
    fi
    local flst="$HOME/db_pgsql.lst"
    local re=$1
    if [ -z "$re" ]; then
      re=".*"
    fi
    if [ $opt_dry_run -gt 0 ]; then
      echo "Select DB matches $re in $DBCKDIR"
    else
      wlog "Select DB matches $re in $DBCKDIR"
    fi
    psql -U$opt_user -lt -o $flst
    sort $flst -f -o $flst
    local dblist=
    for db in $(awk -F"|" '{ print $1 }' $flst); do
      db=$(echo $db|sed -e 's/^ *//' -e 's/ *$//')
      if [[ $db =~ $re ]]; then
        if [ "$HOSTNAME" == "$HOST_PRD" -o \( "${db:0:4}" != "prov" -a "${db:0:4}" != "test" \) ]; then
          dblist=$(echo "$dblist $db")
        fi
      fi
    done
    rm -f $flst
    echo "$dblist"
}

inherit_options() {
    OPTS=
    if [ $opt_cron -gt 0 ]; then
      OPTS=K$OPTS
    fi
    if [ $opt_dry_run -gt 0 ]; then
      OPTS=n$OPTS
    fi
    if [ $opt_verbose -gt 0 ]; then
      OPTS=v$OPTS
    fi
    if [ -n "$opt_user" ]; then
      OPTS="${OPTS}U$opt_user"
    fi
    if [ -n "$OPTS" ]; then
      OPTS=-$OPTS
    fi
}

OPTOPTS=(h        K        l       n            U          V           v)
OPTDEST=(opt_help opt_cron opt_log opt_dry_run  opt_user   opt_version opt_verbose)
OPTACTI=(1        1        "="     1            "="        "*>"        1)
OPTDEFL=(0        0        ""      0            "postgres" ""          0)
OPTMETA=("help"   "cron"   "file"  "do nothing" "username" "version"   "verbose")
OPTHELP=("this help"\
 "run in cron environment"\
 "log filename (def /var/log/bckdb.log)"\
 "do nothing (dry-run)"\
 "username (def postgres)"\
 "show version"\
 "verbose mode")
OPTARGS=(dbsel)

parseoptargs $@

if [ "$opt_version" ]
then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]
then
  print_help "Backup postgres DB"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ -z "$opt_log" ]; then
  publog="/var/log/zar/bckdb.log"
else
  publog=$opt_log
fi
FCONF=$TDIR/zar.conf
eval $(init_cfg)
eval $(active_cfg)
set_tlog_file "$publog"
if [ $opt_cron -gt 0 ]; then
  detached_login "$@"
fi
link_cfg $FCONF
wlog "Starting backup $__version__ by $USER"

PGDIR=$(findpkg "" "/var/lib" "postgresql  pgsql" "8.2 8.3 9.0 9.1 9.2 9.3 9.4")
if [ -z "$PGDIR" ]; then
  wlog "No postgres directory found!"
  exit 1
fi
wlog "Found $PGDIR directory"
DBCKDIR="$PGDIR/backups"
if [ ! -d $DBCKDIR ]; then
  mkdir -p $DBCKDIR
fi
wlog "Backup directory is $DBCKDIR"
HOST_PRD=$(get_cfg_value 0 production_host)
HOST_DEV=$(get_cfg_value 0 development_host)
wlog "PRD=$HOST_PRD"
wlog "DEV=$HOST_DEV"
if [ "$HOSTNAME" == "erp" -a -z "$HOST_DEV" ]; then
  HOST_DEV=erp-copia
fi
if [ -z "$dbsel" ]; then
  dbsel=$(get_cfg_value 0 dbfilter)
fi
if [ -z "$dbsel" ]; then
  if [ "$HOSTNAME" == "erp-copia" -o "$HOSTNAME" == "erp" ]; then
    dbsel="[Cc]s[a-zA-Z0-9_]*"
  elif [ "$HOSTNAME" == "greenservice" ]; then
    dbsel="[Gg]reen[a-zA-Z0-9_]*"
  elif [ "${HOSTNAME:0:3}" == "shs" ]; then
    dbsel="[Zz]i[a-zA-Z0-9_]*"
  fi
fi
dblist=$(create_db_list "$dbsel" "$PGDIR" "$DBCKDIR")
ctr=0
if [ -n "$dblist" ]
then
  dt=$(date +%F)
  dtc=$(date +%Y%m%d)
  for db in $dblist
  do
    wlog "backup $db"
    if [ "$HOSTNAME" != "$HOST_DEV" ]; then
      if [ $opt_dry_run -gt 0 ]; then
        wlog "> pg_dump -U$opt_user -Fp -f $DBCKDIR/$db-$dtc.sql $db"
      else
        wlog "\$ pg_dump -U$opt_user -Fp -f $DBCKDIR/$db-$dtc.sql $db"
        pg_dump -U$opt_user -Fp -f $DBCKDIR/$db-$dtc.sql $db
        if [ "$HOSTNAME" == "$HOST_PRD" -a -n "$HOST_DEV" ]; then
          wlog "\$ scp $DBCKDIR/$db-$dtc.sql $HOST_DEV:$DBCKDIR/$db-$dtc.sql"
          scp $DBCKDIR/$db-$dtc.sql $HOST_DEV:$DBCKDIR/$db-$dtc.sql
        fi
      fi
      ((ctr++))
    else
      wlog "Waiting for backup from production host"
      if [ $opt_dry_run -eq 0 ]; then
        wctr=25
        while [ ! -f $DBCKDIR/$db-$dtc.sql -a $wctr -gt 0 ]; do
          sleep 180
          ((wctr--))
        done
        wlog "Received $DBCKDIR/$db-$dtc.sql"
      fi
    fi
  done
  wlog "All $ctr databases are backupped!"
  inherit_options
  wlog "\$ ./zar_purge $OPTS $dbsel"
  ./zar_purge $OPTS $dbsel
  if [ "$HOSTNAME" == "$HOST_PRD" -a -z "$HOST_DEV" ]; then
    wlog "\$ ./zar_rest $OPTS"
    ./zar_rest $OPTS
  elif [ "$HOSTNAME" == "$HOST_DEV" ]; then
    wlog "\$ ./zar_rest $OPTS"
    ./zar_rest $OPTS
  fi
fi
exit 0
