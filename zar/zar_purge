#! /bin/bash
# -*- coding: utf-8 -*-
#
# Purge backupped postgres DB
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
# READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
# export READLINK
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=""
for p in $TDIR $TDIR/.. $TDIR/../.. $HOME/venv_tools/bin $HOME/venv_tools/lib $HOME/tools; do
  [[ -d $p ]] && PYPATH=$(find $(readlink -f $p) -maxdepth 3 -name z0librc)
  [[ -n $PYPATH ]] && PYPATH=$(dirname $PYPATH) && break
done
PYPATH=$(echo -e "import os,sys;p=[os.path.dirname(x) for x in '$PYPATH'.split()];p.extend([x for x in os.environ['PATH'].split(':') if x not in p and x.startswith('$HOME')]);p.extend([x for x in sys.path if x not in p]);print(' '.join(p))"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0lib/z0librc ]]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 72
fi
ZARLIB=$(findpkg zarrc "$PYPATH")
if [[ -z "$ZARLIB" ]]; then
  echo "Library file zarrc not found!"
  exit 72
fi
. $ZARLIB
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "ZARLIB=$ZARLIB"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$($READLINK -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"

__version__=1.3.36.99


OPTOPTS=(h        c        e      i      I       K        k          l       m          n            T         U          V           v)
OPTDEST=(opt_help opt_conf opt_ex opt_in opt_nce opt_cron opt_keep   opt_log opt_km     opt_dry_run  test_mode opt_user   opt_version opt_verbose)
OPTACTI=(1        "="      1      1      1       1        "="        "="     "="        "1"          1         "="        "*>"        1)
OPTDEFL=(0        ""       0      0      0       0        ""         ""      ""         0            0         "postgres" ""          0)
OPTMETA=("help"   "file"   ""     ""     ""      "cron"   "# copies" "file"  "# copies" "do nothing" "test"    "username" "version"   "verbose")
OPTHELP=("this help"\
 "configuration file (def zar.conf)"\
 "exact DB name (rather matches DB name)"\
 "run inside backup (do not compress)"\
 "do not expand neither compress files"\
 "run in cron environment"\
 "keep # recent copies of db (max 60)"\
 "log filename (def /var/log/bckdb.log)"\
 "keep # of monthly copies of db (max 12)"\
 "do nothing (dry-run)"\
 "test mode (implies dry-run)"\
 "username (def postgres)"\
 "show version"\
 "verbose mode")
OPTARGS=(dbsel)

parseoptargs "$@"

if [ "$opt_version" ]
then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]
then
  print_help "Purge postgres DB"\
  "(C) 2015-2021 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
CFG_init
conf_default "purgedb"
if [ $opt_cron -gt 0 ]; then
  detached_login "$@"
fi
link_cfg $FCONF
wlog "=== Starting purge backup $__version__ by $opt_user ==="

init_vars "$dbsel"
dblist=$(create_db_list_from_file "$DBSEL" "$PGDIR" "$DBCKDIR" "$REDB")
if [ "$BCKFORMAT" == "0" ]; then
  wlog "-- Backup keeps sql files --"
else
  wlog "-- Backupped DBs stored in compress tar files --"
fi
if [ "$BCK_ENV" == "PRD" ]; then
  wlog "-- Production environment --"
elif [ "$BCK_ENV" == "DEV" ]; then
  wlog "-- Development/backup environment --"
else
  wlog "-- Unique environment w/o dev/backup host --"
fi
wlog "PRD=$HOST_PRD//$URL_PRD"
wlog "DEV=$HOST_DEV//$URL_DEV"
wlog "- Files of DB to Purge:$dblist"
dovalid=0
for sfx in A B C D E F G H; do
  x=DB${sfx}
  XDB=${!x}
  x=NC${sfx}
  XNC=${!x}
  x=NA${sfx}
  XNA=${!x}
  [ -n "$XDB" ] && wlog "Keep $XNC recent copies copies and $XNA monthly copies of $XDB"
  [ -n "$XDB" ] && dovalid=1
done
ctr=0
pushd $DBCKDIR >/dev/null
if [ $dovalid -gt 0 ]; then
  for db in $dblist; do
    set_db_vars "$db"
    range=$XNC
    if [ -n "$range" ]; then
      mindate_r=$(date -d "today - $XNC day" +%Y%m%d)
      mindate_a=$(date -d "today - $XNA month" +%Y%m%d)
      [ $opt_nce -ne 0 ] || expand_tar $db
      wlog "Delete recent file older than $mindate_r (-$XNC days)"
      wlog "Delete monthly file older than $mindate_a (-$XNA months)"
      for fn in $db-*.sql; do
        dtc=${fn: -12: -4}
        if [[ ! $dtc =~ ^[0-9]+$ ]]; then
          dtc=99991231
        fi
        dd=${dtc: -2}
        if [ $dd -ne 1 -a $dtc -lt $mindate_r ] || [ $dd -eq 1 -a $dtc -lt $mindate_a ]; then
          if [ $opt_dry_run -gt 0 -a ${test_mode:-0} -eq 0 ]; then
            echo "File $fn should be deleted!"
          else
            wlog "File $fn deleted!"
            rm -f $fn
          fi
          ((ctr++))
        fi
      done
      dtc=$(date +%Y%m%d)
      [ $opt_in -ne 0 -o $opt_nce -ne 0 ] || compress_tar $db "$db-$dtc.sql"
    fi
  done
fi
popd >/dev/null
if [ $opt_dry_run -eq 0 ]; then
  wlog "== $ctr files are purged!"
else
  wlog "== $ctr files should be purged!"
fi
exit 0
