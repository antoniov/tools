#! /bin/bash
# -*- coding: utf-8 -*-
#
# Copy table between 2 Dbs
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 1.0.5.1
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
HOME_DEV="$HOME/devel"
[[ -x $TDIR/../bin/python ]] && PYTHON=$(readlink -f $TDIR/../bin/python) || [[ -x $TDIR/python ]] && PYTHON="$TDIR/python" || PYTHON="python"
[[ -z $PYPATH ]] && PYPATH=$(echo -e "C='"$TDIR"'\nD='"$HOME_DEV"'\nimport os,sys\no=os.path\na=o.abspath\nj=o.join\nd=o.dirname\nb=o.basename\nf=o.isfile\np=o.isdir\nH=o.expanduser('~')\nT=j(H,'tools')\nR=j(H,'pypi') if b(D)=='venv_tools' else j(H,D,'pypi')\nW=D if b(D)=='venv_tools' else j(D,'venv')\ndef apl(L,P,B):\n if P:\n  if p(j(P,B,B)) and p(j(P,B,B,'scripts')) and f(j(P,B,B,'__init__')):\n   L.append(j(P,B,B))\n   return 1\n  elif j(P,B):\n   L.append(j(P,B))\n   return 1\n return 0\nL=[C]\nif b(C) in ('scripts','tests','travis','_travis'):\n C=a(j(C,'..'))\n L.append(C)\nif b(C)==d(C) and f(j(C,'..','setup.py')):\n C=a(j(C,'..'))\nP=os.environ['PATH'].split(':')\nV= ''\nfor X in sys.path:\n if not p(T) and p(j(X,'tools')):\n  T=j(X,'tools')\n if not V and b(X)=='site-packages':\n  V=X\nfor B in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if p(j(C,B)):\n  F=apl(L,C,B)\n else:\n  F=0\n  for X in P:\n   if p(j(X,B)):\n    F=apl(L,X,B)\n    break\n  if not F:\n   F=apl(L,V,B)\n  if not F:\n   apl(L,T,B)\nL=L+[os.getcwd()]+P\np=set()\npa=p.add\np=[x for x in L if x and x.startswith((H,D,C)) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found in <$PYPATH>!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
ZARLIB=$(findpkg zarrc "$PYPATH")
if [[ -z "$ZARLIB" ]]; then
  echo "Library file zarrc not found!"
  exit 72
fi
. $ZARLIB
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "ZARLIB=$ZARLIB"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"

DIST_CONF=$(findpkg ".z0tools.conf" "$PYPATH")
TCONF="$HOME/.z0tools.conf"
CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"

__version__=1.3.38


OPTOPTS=(h        d        f      l       n            s        t        U          V           v           w)
OPTDEST=(opt_help opt_dst  opt_f  opt_log opt_dry_run  opt_src  opt_tbl  opt_user   opt_version opt_verbose opt_wep)
OPTACTI=("+"      "="      "="    "="     1            "="      "="      "="        "*>"        1           1)
OPTDEFL=(0        ""       "id"   ""      0            ""       ""       "postgres" ""          0           0)
OPTMETA=("help"   "DBname" "name" "file"  "do nothing" "DBname" "table"  "username" "version"   "verbose"   "")
OPTHELP=("this help"\
 "destination DB name"\
 "field name to count (def id)"\
 "log filename (def /var/log/bckdb.log)"\
 "do nothing (dry-run)"\
 "source DB name"\
 "table to copy"\
 "username (def postgres)"\
 "show version"\
 "verbose mode"\
 "wep destination table before import")
OPTARGS=()


parseoptargs "$@"
if [ -z "$opt_src" -o -z "$opt_dst" -o -z "$opt_tbl" ]; then
  opt_help=1
fi
if [ "$opt_version" ]
then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]
then
  print_help "Copy table between DBs"\
  "(C) 2015-2020 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ -z "$opt_log" ]; then
  publog="/var/log/zar/cptbl.log"
else
  publog=$opt_log
fi
FCONF=$TDIR/zar.conf
CFG_init
set_tlog_file "$publog"
link_cfg $FCONF
wlog "Starting copy $__version__ by $opt_user"

PGDIR=$(findpkg "" "/var/lib" "postgresql  pgsql" "8.2 8.3 9.0 9.1 9.2 9.3 9.4")
if [ -z "$PGDIR" ]; then
  wlog "No postgres directory found!"
  exit 1
fi
wlog "Found $PGDIR directory"
DBCKDIR="$PGDIR/backups"
if [ ! -d $DBCKDIR ]; then
  mkdir -p $DBCKDIR
fi
wlog "Backup directory is $DBCKDIR"
HOST_PRD=$(get_cfg_value 0 production_host)
HOST_DEV=$(get_cfg_value 0 development_host)
wlog "PRD=$HOST_PRD"
wlog "DEV=$HOST_DEV"
opt_tbl=${opt_tbl//./_}
PID=$$
tmpfn=./tmp$PID
echo "Stats before copy ..."
[[ "$opt_f" == "id" ]] && psql -U$opt_user -Atec "select last_value from ${opt_tbl}_id_seq;" $opt_dst
[[ "$opt_f" == "id" ]] && OLDNXT=$(psql -U$opt_user -Atc "select last_value from ${opt_tbl}_id_seq;" $opt_dst)
psql -U$opt_user -Atec "select max($opt_f) from $opt_tbl;" $opt_dst
psql -U$opt_user -Atec "select count($opt_f) from $opt_tbl;" $opt_src
CTRBEF=$(psql -U$opt_user -Atc "select count($opt_f) from $opt_tbl;" $opt_src)
echo "Copy data from source DB $opt_src"
run_traced "pg_dump -U$opt_user -a --inserts --disable-triggers -Fp -f $tmpfn.sql -t $opt_tbl $opt_src"
if [ $opt_wep -ne 0 ]; then
  echo "Deleting table $opt_tbl from DB $opt_dst"
  run_traced "psql -U$opt_user -Atec \"delete from $opt_tbl;\" $opt_dst"
fi
echo "Paste data into destination DB $opt_dst"
run_traced "psql -U$opt_user -d $opt_dst -f $tmpfn.sql -o $tmpfn.log 2>$tmpfn.err"
echo "Resulting stats ..."
psql -U$opt_user -Atec "select max($opt_f) from $opt_tbl;" $opt_dst
psql -U$opt_user -Atec "select count($opt_f) from $opt_tbl;" $opt_dst
NXTID=$(psql -U$opt_user -Atc "select max($opt_f) from $opt_tbl;" $opt_dst)
# ((NXTID++))
if [ $OLDNXT -gt $NXTID ]; then
  NXTID=$OLDNXT
fi
[[ "$opt_f" == "id" ]] && psql -U$opt_user -Atec "select last_value from ${opt_tbl}_id_seq;" $opt_dst
[[ "$opt_f" == "id" ]] && run_traced "psql -U$opt_user -d $opt_dst -c \"alter sequence ${opt_tbl}_id_seq restart $NXTID;\""
echo "Currently stats after copy ..."
[[ "$opt_f" == "id" ]] && psql -U$opt_user -Atec "select last_value from ${opt_tbl}_id_seq;" $opt_dst
psql -U$opt_user -Atec "select max($opt_f) from $opt_tbl;" $opt_dst
psql -U$opt_user -Atec "select count($opt_f) from $opt_tbl;" $opt_src
CTRAFT=$(psql -U$opt_user -Atc "select count($opt_f) from $opt_tbl;" $opt_src)
((DIF=CTRAFT-CTRBEF))
if [ $opt_wep -ne 0 ]; then
  echo "$CTRAFT records replace $CTRBEF records"
elif [ $DIF -eq 0 ]; then
  echo "No new record inserted"
else
  echo "$DIF new records inserted"
fi
rm -f $tmpfn.*
exit 0
