#! /bin/bash
# -*- coding: utf-8 -*-
# Regression tests on zar
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script cvt_script requires bash 4.0+!" && exit 4
[[ -d "$HOME/dev" ]] && HOME_DEV="$HOME/dev" || HOME_DEV="$HOME/devel"
PYPATH=$(echo -e "import os,sys;\nTDIR='"$TDIR"';HOME_DEV='"$HOME_DEV"'\nHOME=os.environ.get('HOME');y=os.path.join(HOME_DEV,'pypi');t=os.path.join(HOME,'tools')\ndef apl(l,p,x):\n  d2=os.path.join(p,x,x)\n  d1=os.path.join(p,x)\n  if os.path.isdir(d2):\n   l.append(d2)\n  elif os.path.isdir(d1):\n   l.append(d1)\nl=[TDIR]\nfor x in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if TDIR.startswith(y):\n  apl(l,y,x)\n elif TDIR.startswith(t):\n  apl(l,t,x)\nl=l+os.environ['PATH'].split(':')\np=set()\npa=p.add\np=[x for x in l if x and x.startswith(HOME) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

__version__=1.3.37


test_01() {
    local RES TRES
    if [ -f $OUTF ]; then
      RES=$OUTF
    else
      RES=
    fi
    test_result "zar_rest -T (found log)" "$OUTF" "$RES"
    return $?
}

test_02() {
    local RES TRES
    if [ -f $OUTF ]; then
      for db in zi01234567; do
        grep "DB to Restore: .*$db" $OUTF  &>/dev/null
        RES=$?
        test_result "zar_rest -T (found db $db in log file)" "0" "$RES"
      done
    else
      RES=1
    fi
    return $?
}

test_03() {
    local RES TRES
    if [ -f $OUTF ]; then
      for db in zi01234567; do
        local dtc=$(date +%Y%m%d)
        grep "File .*/zi01234567-$dtc.sql .* yesterday" <<< $OUT &>/dev/null
        RES=$?
        test_result "zar_rest -T (found 'into' db in log)" "0" "$RES"
      done
    else
      RES=1
    fi
    return $?
}

Z0BUG_setup() {
    local i db dtc tod dd
    Z0BUG_build_os_tree "backups"
    rm -f $TESTDIR/restdb.log
    rm -f $TESTDIR/res/backups/*.sql
    local tod=$(date +%Y%m%d)
    for db in zi01234567 zi01234589; do
      touch $TESTDIR/res/backups/${db}-$tod.sql
      # touch $TESTDIR/res/backups/${db}.err
      for i in {10..8}; do
          dtc=$(date -d "today - $i day" +%Y%m%d)
          touch $TESTDIR/res/backups/${db}-$dtc.sql
      done
    done
    local CONFN=$TESTDIR/zar.conf
    cat <<EOF >$CONFN
DBA_filter=zi0123
DBA_keep_recent=7
DBA_keep_monthly=3
production_host=$HOSTNAME
development_host=${HOSTNAME//s/z}-DEV
bck_db=yesterday
PRD_num_days_before=0
EOF
    local cmd="$RUNDIR/zar_rest -T zi01234567"
    OUTF=$TESTDIR/restdb.log
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      OUT=$(eval $cmd)
    else
      OUT=
      rm -f $OUTF
    fi
}


Z0BUG_teardown() {
    [ ${opt_dry_run:-0} -eq 0 ] && Z0BUG_remove_os_tree "backups"
}


Z0BUG_build_os_tree() {
    local p path os_tree root
    os_tree="${1//,/ }"
    root=$TESTDIR/res
    [ ! -d "$root" ] && mkdir -p $root
    for p in $os_tree; do
      [[ ${p:0} =~ [./] ]] && path=$p || path=$root/$p
      [ ! -d $path ] && mkdir -p $path
    done
}

Z0BUG_remove_os_tree() {
    local p path os_tree root
    os_tree="${1//,/ }"
    root=$TESTDIR/res
    [ ! -d "$root" ] && return
    for p in $os_tree; do
      [[ ${p:0} =~ [./] ]] && path=$p || path=$root/$p
      [ ! -d $path ] && continue
      rm -fR $path
    done
}


Z0BUG_init
parseoptest -l$TESTDIR/test_tests.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts


UT1_LIST=""
UT_LIST=""
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
