#! /bin/bash
# -*- coding: utf-8 -*-
#
# please
# Developer shell
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
elif [ -f /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit $STS_FAILED
fi
if [ -f $TDIR/travisrc ]; then
. $TDIR/travisrc
elif [ -f $TDIR/../travisrc ]; then
. $TDIR/../travisrc
elif [ -f ./travisrc ]; then
. ./travisrc
elif [ -f ~/travisrc ]; then
. ~/travisrc
else
  echo "Library file travisrc not found!"
  exit $STS_FAILED
fi

__version__=0.1.27.6


ant_rm_trap () {
    wlog "... recover $1"
    local f1=$(readlink -f $1)
    local fhist=$f1.tracehistory
    local lne=$(head -n1 $f1)
    if [ -n "$lne" -a "${lne:0:5}" == "trap " ]; then
      tail -n+2 $f1>$f1.tmp
      mv -f $f1.tmp $f1
    fi
}

ant_add_trap () {
    echo "... analyzing $1"
    local f1=$(readlink -f $1)
    local fhist=$f1.tracehistory
    ant_rm_trap "$f1"
    echo "trap \"echo [\$LINENO] \$0:\$BASH_COMMAND>>$fhist\" DEBUG">$f1.sh
    local line=
    while IFS=\~ read -r line; do
      echo "$line">>$f1.sh
      if [ "${line:0:1}" == "." ]; then
        local fn="${line:2}"
        local p="$(dirname $fn)"
        if [ "$p" == "." ]; then
          if [ "$(echo " $FL_2_TEST "|grep -v [[:space:]]$fn[[:space:]] 2>/dev/null)" ]; then
            FL_2_TEST="$FL_2_TEST $fn"
          fi
        fi
      fi
    done < "$f1"
    # cat $fhist $f1>$f1.sh
    rm -f $fhist
    chmod +x $f1.sh
    mv -f $f1.sh $f1
}


do_annotate () {
# do_annotate(script, include_list)
  # set -x
  wlog "do_annotate \"$1\" \"$2\""
  trap - DEBUG
  FL_2_TEST=${2//,/ }
  local f1=$(readlink -f $1)
  local fhist=$f1.tracehistory
  if [ -f $f1 ]; then
    CWD=$PWD
    mkdir -p ./cover
    ant_add_trap "$f1"
    local fn
    for fn in $FL_2_TEST; do
      ant_add_trap $fn
    done
    $f1
    cd $CWD
    ant_rm_trap "$f1"
    for fn in $FL_2_TEST; do
      ant_rm_trap $fn
    done
    chmod +x $f1
    if [ $opt_keep -gt 0 ]; then local opts_k=-k; else local opts_l=; fi
    python $TDIR/$THIS.py "$f1" "$opts_k"
    rm -f $fhist
    for fn in $FL_2_TEST; do
      fhist=$fn.tracehistory
      python $TDIR/$THIS.py "$fn" "$opts_k"
      rm -f $fhist
    done
  fi
  return 0
}


do_check (){
    wlog "do_check \"$1\" \"$2\" \"$3\""
    if [ -x $TOOLS_PATH/travis_run_tests ]; then
      opts=$(inherits_travis_opts "Knrv")
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      please_run_tests "-K"
      sts=$?
    else
      sts=127
    fi
    return $sts
}


do_test () {
    wlog "do_test"
    if [ -x $TOOLS_PATH/travis_run_tests ]; then
      opts=$(inherits_travis_opts "Tnrv")
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      please_run_tests "-T"
      sts=$?
    else
      test_sts=$STS_FAILED
      sts=$test_sts
    fi
    return $sts
}


do_diff () {
    wlog "do_diff \"$1\" \"$2\" \"$3\""
    opt_diff=1
    opts=$(inherits_travis_opts "nvd")
    dist_pkg $opts $pkgname;
    sts=$?
    return $sts
}


do_replace () {
    opts=$(inherits_travis_opts "nvR")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_commit () {
    opts=$(inherits_travis_opts "nvC")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_push () {
    opts=$(inherits_travis_opts "nvP")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_fetch () {
    opts=$(inherits_travis_opts "nvF")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_coverage () {
    wlog "do_coverage \"$1\" \"$2\" \"$3\""
    run_coverage_test
    sts=$?
    return $sts
}


do_travis (){
    wlog "do_travis \"$1\" \"$2\" \"$3\""
    if [ $opt_r -gt 0 ]; then
      please_run_tests "-KT"
    else
      opts=$(inherits_travis_opts "cnv")
      if [ -n "$opts" ]; then
        travis "$opts" "$@"
      else
        travis "$@"
      fi
    fi
    sts=$?
    return $sts
}


do_version () {
    cd $PKGPATH; $DEVPATH/dist_pkg -- $pkgname $PRJNAME;
    if [ "$PRJNAME" != "Odoo" ]; then
      echo "Project $PRJNAME V$prjversion [$pkgname] answer:";
      cd $PKGPATH; PYTHONPATH=$PKGPATH python $PRJNAME;
    else
      echo "Project $PRJNAME V$BRANCH [$pkgname $prjversion]";
    fi;
}


do_distribution () {
    wlog "do_distribution $1 $2"
    sts=$STS_SUCCESS
    if [ -f ./.travis.yml ]; then
      local f1=./.travis.yml
    elif [ -f ../.travis.yml ]; then
      local f1=../.travis.yml
    else
      local f1=
      echo "File .travis.yml not found!"
      sts=$STS_FAILED
    fi
    if [ -n "$f1" ]; then
      if [ "$2" == "oca" ]; then
        run_traced "sed -i -e 's:^  # - TRANSIFEX=\"1\":  - TRANSIFEX=\"1\":' $f1"
      elif [ "$2" == "zeroincombenze" ]; then
        run_traced "sed -i -e 's:^  - TRANSIFEX=\"1\":  # - TRANSIFEX=\"1\":' $f1"
      else
        local f1=
        echo "Missed parameter! use:"
        echo "\$ please distribution pkgname|. oca|zeroincombenze"
        sts=$STS_FAILED
      fi
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -f ./README.md ]; then
        local f1=./README.md
      elif [ -f ../README.md ]; then
        local f1=../README.md
      elif [ -f ./README.rst ]; then
        local f1=./README.rst
      elif [ -f ../README.rst ]; then
        local f1=../README.rst
      else
        local f1=
      fi
      if [ -n "$f1" ]; then
        if [ "$2" == "oca" ]; then
          run_traced "sed -i -e s:/zeroincombenze/$1:/OCA/$pkgname:g $f1"
        elif [ "$2" == "zeroincombenze" ]; then
          run_traced "sed -i -e s:/OCA/$1:/zeroincombenze/$pkgname:g $f1"
        fi
      fi
    fi
    return $sts
}

OPTOPTS=(h        b          c        d        j        k        L         n           p         q           r     s        t         u       V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_diff opt_dprj opt_keep opt_log   opt_dry_run opt_dpath opt_verbose opt_r opt_srcs test_mode opt_uop opt_version opt_verbose)
OPTACTI=(1        "="        "="      1        1        1        "="       1           "="       0           1     "="      1         1       "*"         "+")
OPTDEFL=(1        "9.0"      ""       0        0        0        ""        0           ""        -1          0     ""       0         0       ""          -1)
OPTMETA=("help"   "branch"   "file"   "diff"   "dprj"   "keep"   "logfile" "noop"      "path"    "quiet"     "rxt" "files"  "test"    "uop"   "version"   "verbose")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file (def .travis.conf)"\
 "do diff no real action"\
 "execute tests in project dir rather in test dir"\
 "keep coverage statistics in annotate test"\
 "log file name"\
 "do nothing (dry-run)"\
 "declare local git path"\
 "silent mode"\
 "run rescricted mode (w/o parsing travis.yml file)"\
 "files include in annotate test"\
 "test mode (implies dry-run)"\
 "check for unary operator W503"\
 "show version end exit"\
 "verbose mode")
OPTARGS=(action pkg sub1 sub2)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Developer shell\nAction may be on of:\nhelp|annotate|autopep8|check|chkconfig|[if-commit]|config|coverage|diff|distribution|[if-]fetch|[if-push]|[if-replace]|test|travis|version|wep"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

opts_travis
$(init_cfg)
$(active_cfg)
conf_default
link_cfg $TCONF
init_travis
if [ $opt_verbose -gt 1 ]; then set -x; fi
prepare_env_travis "$action" "-r"
sts=$STS_SUCCESS
sts_bash=127
sts_flake8=127
sts_pylint=127
test_sts=127
if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "annotate" ]; then
  do_annotate "$pkg" "$opt_srcs"
  sts=$?
elif [ "$action" == "autopep8" ]; then
  opts=$(inherits_travis_opts "dnuv")
  if [ "$PRJNAME" == "Odoo" ]; then
    opts="$opts -o"
  fi
  if [ $opt_verbose -gt 0 ]; then
    echo "topep8 $PKGPATH $opts"
  fi
  topep8 "$PKGPATH" "$opts"
elif [ "$action" == "check" ]; then
  do_check "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "chkconfig" ]; then
  do_chkconfig
  sts=$STS_SUCCESS
elif [ "$action" == "if-commit" ]; then
  opt_dry_run=1
  do_commit "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "commit" ]; then
  do_commit "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "config" ]; then
  if [ $opt_r -gt 0 ]; then
    DIST_CONF=$(readlink -f $PKGPATH/conf/.local_dist_pkg.conf)
    vim $DIST_CONF
  else
    vim $TCONF
  fi
  sts=$STS_SUCCESS
elif [ "$action" == "coverage" ]; then
  do_coverage "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "distribution" ]; then
  do_distribution "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "diff" ]; then
  do_diff "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-fetch" ]; then
  opt_dry_run=1
  do_fetch "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "fetch" ]; then
  do_fetch "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-push" ]; then
  opt_dry_run=1
  do_push "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "push" ]; then
  do_push "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-replace" ]; then
  opt_dry_run=1
  do_replace "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "replace" ]; then
  do_replace "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "test" ]; then
  do_test "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "travis" ]; then
  do_travis "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "version" ]; then
  do_version "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "wep" ]; then
  if [ $opt_verbose -gt 0 ]; then
    echo "clean_dirs \"$PKGPATH\""
  fi
  clean_dirs "$PKGPATH"
else
  echo "Invalid action!"
  echo "Use $THIS help|annotate|autopep8|check|chkconfig|[if-commit]|config|coverage|diff|distribution|[if-]fetch|[if-push]|[if-replace]|test|travis|version|wep"
  sts=$STS_FAILED
fi
exit $sts
