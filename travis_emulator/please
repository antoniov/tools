#! /bin/bash
# -*- coding: utf-8 -*-
#
# please
# Developer shell
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
elif [ -f /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit 1
fi
. $TDIR/travisrc

__version__="0.1.16.1"
STS_FAILED=1
STS_SUCCESS=0

ant_rm_trap () {
    if [ $opt_verbose -gt 0 ]; then
      echo "... recover $1"
    fi
    local f1=$(readlink -f $1)
    local fhist=$f1.tracehistory
    local ln=$(head -n1 $f1)
    if [ -n "$ln" -a "${ln:0:5}" == "trap " ]; then
      tail -n+2 $f1>$f1.tmp
      mv -f $f1.tmp $f1
    fi
}

ant_add_trap () {
    if [ $opt_verbose -gt 0 ]; then
      echo "... analyzing $1"
    fi
    local f1=$(readlink -f $1)
    local fhist=$f1.tracehistory
    ant_rm_trap "$f1"
    echo "trap \"echo [\$LINENO] \$0:\$BASH_COMMAND>>$fhist\" DEBUG">$f1.sh
    local line=
    while IFS=\~ read -r line; do
      echo "$line">>$f1.sh
      if [ "${line:0:1}" == "." ]; then
        local fn="${line:2}"
        local p="$(dirname $fn)"
        if [ "$p" == "." ]; then
          if [ "$(echo " $FL_2_TEST "|grep -v [[:space:]]$fn[[:space:]] 2>/dev/null)" ]; then
            FL_2_TEST="$FL_2_TEST $fn"
          fi
        fi
      fi
    done < "$f1"
    # cat $fhist $f1>$f1.sh
    rm -f $fhist
    chmod +x $f1.sh
    mv -f $f1.sh $f1
}

do_annotate () {
# do_annotate(script, include_list)
  # set -x
  trap - DEBUG
  FL_2_TEST=${2//,/ }
  local f1=$(readlink -f $1)
  local fhist=$f1.tracehistory
  if [ -f $f1 ]; then
    CWD=$PWD
    mkdir -p ./cover
    ant_add_trap "$f1"
    local fn
    for fn in $FL_2_TEST; do
      ant_add_trap $fn
    done
    $f1
    cd $CWD
    ant_rm_trap "$f1"
    for fn in $FL_2_TEST; do
      ant_rm_trap $fn
    done
    chmod +x $f1
    if [ $opt_keep -gt 0 ]; then local opts_k=-k; else local opts_l=; fi
    python $TDIR/$THIS.py "$f1" "$opts_k"
    rm -f $fhist
    for fn in $FL_2_TEST; do
      fhist=$fn.tracehistory
      python $TDIR/$THIS.py "$fn" "$opts_k"
      rm -f $fhist
    done
  fi
  return 0
}


do_check (){
    if [ -z "$TOOLS_PATH" ]; then
      if [ -d $TDIR/_travis -a $opt_r -gt 0 ]; then
        TOOLS_PATH=$TDIR/_travis
      elif [ -d $HOME/dev/_travis -a $opt_r -gt 0 ]; then
        TOOLS_PATH=$HOME/dev/_travis
      elif [ -d $TDIR/maintainer-quality-tools/travis ]; then
        TOOLS_PATH=$TDIR/maintainer-quality-tools/travis
      elif [ -d $HOME/dev/maintainer-quality-tools/travis ]; then
        TOOLS_PATH=$HOME/dev/maintainer-quality-tools/travis
      elif [ -d /opt/odoo/dev/maintainer-quality-tools/travis ]; then
        TOOLS_PATH=/opt/odoo/dev/maintainer-quality-tools/travis
      else
        unset -v TOOLS_PATH
      fi
    fi
    if [ $opt_verbose -gt 0 ]; then
      echo "TOOLS_PATH=$TOOLS_PATH"
    fi
    if [ $(echo $PATH|grep -v "$TOOLS_PATH"  2>/dev/null) ]; then
      export PATH=$TOOLS_PATH:$PATH
    fi
    export FLAKE8_CONFIG_DIR=$TOOLS_PATH/cfg
    export LINT_CHECK=1
    if [ -z $BRANCH ]; then
      BRANCH=$opt_branch
    fi
    export VERSION=$BRANCH
    export TRAVIS_BUILD_DIR=$PKGPATH
    export ODOO_REPO=$repository
    export VERBOSE_MODE=$opt_verbose
    sts=0
    # if [ -f $TOOLS_PATH/travis_install_pkgs ]; then
    #   run_traced $TOOLS_PATH/travis_install_pkgs
    #   if [ $? -ne 0 ]; then sts=$?; fi
    # fi
    if [ $sts -eq 0 ]; then
      if [ $opt_r -gt 0 ]; then
        test_flake8
        sts=$?
        if [ $sts -eq 0 ]; then
          test_pylint
          sts=$?
        fi
      else
        if [ $TOOLS_PATH/travis_run_tests ]; then
          run_traced $TOOLS_PATH/travis_run_tests
          if [ $? -ne 0 ]; then sts=$?; fi
        else
          sts=127
        fi
      fi
    fi
    return $sts
}

test_flake8 () {
    FLAKE8_CONFIG_DIR="$(dirname $0)/cfg"
    run_traced "flake8 . --config=${FLAKE8_CONFIG_DIR}/travis_run_flake8__init__.cfg"
    sts=$?
    if [ $sts -eq 0 ]; then
      run_traced "flake8 . --config=${FLAKE8_CONFIG_DIR}/travis_run_flake8.cfg"
      sts=$?
    fi
    return $sts
}

test_pylint () {
    sts=0
    TRAVIS_BUILD_DIR=$PKGPATH
    MODULES_TO_TEST=$TRAVIS_BUILD_DIR
    PYLINT_CONFIG_DIR="$(dirname $0)/cfg"

    # Fix pylint path. More info: https://www.mail-archive.com/code-quality@python.org/msg00294.html
    export PYTHONPATH=${PYTHONPATH}:${MODULES_TO_TEST}
    if [ "$PRJNAME" == "Odoo" ]; then
      touch $MODULES_TO_TEST/__init__.py
      VERSION=$BRANCH
    fi
    IFS="/" read -a REPO <<< "${ODOO_REPO}"
    export PATH=${PATH}:${PWD}/../${REPO[1]}-${VERSION}/openerp

    #run pylint command
    run_traced "pylint --rcfile=${PYLINT_CONFIG_DIR}/travis_run_pylint.cfg ${MODULES_TO_TEST}"
    sts=$?
    return $sts
}


do_test () {
    if [ $opt_verbose -gt 0 ]; then
      set -x  #debug
    fi
    if [ -f ~/dev/pypi/$1/$1/tests/all_tests ]; then
      if [ $opt_dprj -gt 0 ]; then
        cd ~/dev/pypi/$1/$1
        ./tests/all_tests
      else
        cd ~/dev/pypi/$1/$1/tests
        ./all_tests
      fi
      sts=$?
    elif [ -f ~/dev/pypi/$1/$1/tests/test_$1.py ]; then
      if [ $opt_dprj -gt 0 ]; then
        cd ~/dev/pypi/$1/$1
      else
        cd ~/dev/pypi/$1/$1/tests
      fi
      PYTHONPATH=~/dev/pypi/$1 python ~/dev/pypi/$1/$1/tests/test_$1.py
      sts=$?
    else
      sts=1
    fi
    # set +x #debug
    return $sts
}

do_travis (){
    travis local/"$1";
    return 0
}


OPTOPTS=(h        b          c        d        j        k        L         n           p         q         r     s        t         u       V           v           y)
OPTDEST=(opt_help opt_branch opt_conf opt_diff opt_dprj opt_keep opt_log   opt_dry_run opt_dpath opt_quiet opt_r opt_srcs test_mode opt_uop opt_version opt_verbose opt_yes)
OPTACTI=(1        "="        "="      1        1        1        "="       1           "="       1         1     "="      1         1       "*"         1           "*")
OPTDEFL=(1        "9.0"      ""       0        0        0        ""        0           ""        0         0     ""       0         0       ""          0           "")
OPTMETA=("help"   "branch"   "file"   "diff"   "dprj"   "kkep"   "logfile" "noop"      "path"    "quiet"   "rxt" "files"  "test"    "uop"   "version"   "verbose"   "yes")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file"\
 "do diff no real action"\
 "execute test from project dir (not in test dir)"\
 "keep coverage statistics in annotate test"\
 "log file name"\
 "do nothing (dry-run)"\
 "declare local git path"\
 "quiet mode"\
 "run restricted mode (w/o maintainer-quality-tools)"\
 "files include in annotate test"\
 "test mode (implies dry-run)"\
 "check for unary operator W503"\
 "show version end exit"\
 "verbose mode"\
 "assume yes")
OPTARGS=(action pkg sub1 sub2)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Developer shell\nAction may be: check, test, all (default) or setup"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ -n "$opt_conf" -a -f "$opt_conf" ]; then
  TCONF=$opt_conf
else
  TCONF=$TDIR/.travis.conf
fi
$(init_cfg)
$(active_cfg)
conf_default
link_cfg $TCONF
if [ "$pkg" ]; then
  PKGPATH=$pkg
else
  PKGPATH=$PWD
fi
PKGPATH=$(set_pkgpath "$PKGPATH")
pkgname=$(basename $PKGPATH)
init_travis
if [ -z "$PRJNAME" ]; then
  PRJNAME=$(basename $PKGPATH)
fi
if [ "$opt_dpath" ]; then
  LGITPATH="$opt_dpath"
else
  if [ "$REPOSNAME" ]; then
    declare LGITPATH=$(get_cfg_value "" "${REPOSNAME}_distpath")
  else
    declare LGITPATH=
  fi
  if [ -z "$LGITPATH" ]; then
    declare LGITPATH=$(get_cfg_value "" "${PRJNAME}_distpath")
  fi
  if [ -z "$LGITPATH" ]; then
    LGITPATH=$(get_cfg_value "" "distpath")
  fi
fi
LGITPATH=$(expand_path "$LGITPATH")


sts=0
if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "annotate" ]; then
  if [ $opt_verbose -gt 0 ]; then
    echo "do_annotate \"$pkg\" \"$opt_srcs\""
  fi
  do_annotate "$pkg" "$opt_srcs"
  sts=$?
elif [ "$action" == "autopep8" ]; then
  opts=
  if [ $opt_dry_run -gt 0 ]; then
    opts="${opts}n"
  fi
  if [ $opt_verbose -gt 0 ]; then
    opts="${opts}v"
  fi
  if [ $opt_diff -gt 0 ]; then
    opts="${opts}d"
  fi
  if [ $opt_uop -gt 0 ]; then
    opts="${opts}u"
  fi
  if [ -n "$opts" ]; then
    opts="-${opts}"
  fi
  if [ $opt_verbose -gt 0 ]; then
    echo "topep8 $PKGPATH $opts"
  fi
  topep8 "$PKGPATH" "$opts"
elif [ "$action" == "check" ]; then
  do_check "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "test" ]; then
  do_test "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "travis" ]; then
  do_travis "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "wep" ]; then
  if [ $opt_verbose -gt 0 ]; then
    echo "clean_dirs \"$PKGPATH\""
  fi
  clean_dirs "$PKGPATH"
else
  echo "Invalid action!"
  echo "Use $THIS help|annotate|autopep8|check|test|wep"
  sts=1
fi
exit $sts
