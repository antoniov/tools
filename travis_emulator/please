#! /bin/bash
# -*- coding: utf-8 -*-
#
# please
# Developer shell
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in "$TDIR" "$TDIR/.." "." ".." "~" "/etc"; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg "travisrc" "$TDIR . .. $HOME/dev $HOME" "_travis")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR

__version__=0.1.34


do_annotate() {
    wlog "do_annotate"
    run_annotate_test "-T"
    sts=$?
    return $sts
}

do_check() {
    wlog "do_check \"$1\" \"$2\" \"$3\""
    if [ -x $TOOLS_PATH/travis_run_tests ]; then
      opts=$(inherits_travis_opts "Knrv")
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      please_run_tests "-K"
      sts=$?
    else
      sts=127
    fi
    return $sts
}


do_test() {
    wlog "do_test"
    if [ -x $TOOLS_PATH/travis_run_tests ]; then
      opts=$(inherits_travis_opts "Tnrv")
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      please_run_tests "-T"
      sts=$?
    else
      test_sts=$STS_FAILED
      sts=$test_sts
    fi
    return $sts
}


do_diff() {
    wlog "do_diff \"$1\" \"$2\" \"$3\""
    opt_diff=1
    opts=$(inherits_travis_opts "nvd")
    dist_pkg $opts $PKGNAME;
    sts=$?
    return $sts
}


do_replace() {
    opts=$(inherits_travis_opts "nvR")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_commit() {
    opts=$(inherits_travis_opts "nvC")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_push() {
    opts=$(inherits_travis_opts "nvP")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_fetch() {
    opts=$(inherits_travis_opts "nvF")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_coverage() {
    wlog "do_coverage \"$1\" \"$2\" \"$3\""
    run_coverage_test
    sts=$?
    return $sts
}


do_travis() {
    wlog "do_travis \"$1\" \"$2\" \"$3\""
    if [ $opt_r -gt 0 ]; then
      please_run_tests "-KT"
    else
      opts=$(inherits_travis_opts "cnv")
      if [ -n "$opts" ]; then
        travis "$opts" "$@"
      else
        travis "$@"
      fi
    fi
    sts=$?
    return $sts
}

do_version() {
    cd $PKGPATH; $DEVPATH/dist_pkg -- $PKGNAME $PRJNAME;
    if [ "$PRJNAME" != "Odoo" ]; then
      echo "Project $PRJNAME V$prjversion [$PKGNAME] answer:";
      cd $PKGPATH; PYTHONPATH=$PKGPATH python $PRJNAME;
    else
      echo "Project $PRJNAME V$BRANCH [$PKGNAME $prjversion]";
    fi;
}

add_copyright() {
#add_copyright(file)
    if [ $opt_dry_run -eq 0 ]; then
      echo "[//]: # (copyright)">>$1
      echo "">>$1
      echo "----">>$1
      echo "">>$1
      echo "**Odoo** is a trademark of [Odoo S.A.](https://www.odoo.com/)">>$1
      echo "">>$1
      echo "**OCA**, or the [Odoo Community Association](http://odoo-community.org/), is a nonprofit organization whose">>$1
      echo "mission is to support the collaborative development of Odoo features and">>$1
      echo "promote its widespread use.">>$1
      echo "">>$1
      echo "**zeroincombenze®** is a trademark of [SHS-AV s.r.l.](http://www.shs-av.com/)">>$1
      echo "which distributes and promotes **Odoo** ready-to-use on its own cloud infrastructure.">>$1
      echo "[Zeroincombenze® distribution](http://wiki.zeroincombenze.org/en/Odoo)">>$1
      echo "is mainly designed for Italian law and markeplace.">>$1
      echo "Everytime, every Odoo DB and customized code can be replicated on local server.">>$1
      echo "">>$1
      echo "[//]: # (end copyright)">>$1
    fi
}

cvt_readme() {
# cvt_readme(file_readme oca|zero)
# params: 1=repository, 2=pkgname, 3=odoo_ver, 4=ver(major), 5=helpname
#         8=(txt1)repos 9=(txt2)repos
    local fn=$1
    local fntmp=$fn.tmp
    local wf=0 nleof=0 Irunbot=0 Ibuild=0 Icoverage=0 Icodecov=0 Iclimate=0 Ilicense=0 Itryit=0 Idocs=0 Ihelp=0
    local line lne1 lne2 repository txtrepos ver
    local helpname=
    if [ "$PKGNAME" == "l10n-italy-supplemental" -o "$PKGNAME" == "l10n-italy" ]; then
      helpname=FI
    fi
    rm -f $fntmp
    ver=$(echo $BRANCH|grep -Eo '[0-9]+'|head -n1)
    if [ "$2" == "oca" ]; then
      repository=OCA
      txt1repos=repos
      txt2repos=r
      local Icht=1
      local Icright=1
    elif [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
      repository=zeroincombenze
      txt1repos=repos/github
      txt2repos=github
      local Icht=0
      local Icright=0
    fi
    # set -x #debug
    while IFS=⌂ read -r line r || [ -n "$line" ]; do
      lne1="⌂"
      lne2="⌂"
      Ibutton=0
      local xxline="$line"
      if [[ "$line" =~ Build.Status.*https://travis-ci.org/ ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Ibuild -ne 0 ]; then
          line="⌂"
        else
          Ibuild=1
          line="[![Build Status](https://travis-ci.org/\${1}/\${2}.svg?branch=\${3})](https://travis-ci.org/\${1}/\${2})"
        fi
      elif [[ "$line" =~ Coverage.Status.*https://coveralls.io/ ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Icoverage -ne 0 ]; then
          line="⌂"
        else
          Icoverage=1
          line="[![Coverage Status](https://coveralls.io/\${8}/\${1}/\${2}/badge.svg?branch=\${3})](https://coveralls.io/\${9}/\${1}/\${2}?branch=\${3})"
        fi
      elif [[ "$line" =~ codecov.*https://codecov.io/gh/ ]]; then
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Icodecov -ne 0 ]; then
          line="⌂"
        else
          Ibutton=1
          Icodecov=1
          line="[![codecov](https://codecov.io/gh/\${1}/\${2}/branch/\${3}/graph/badge.svg)](https://codecov.io/gh/\${1}/\${2})"
        fi
      elif [[ "$line" =~ Tech.Doc.*(http://www.odoo.com/documentation/|http://wiki.zeroincombenze.org/en/Odoo/dev/) ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Idocs -ne 0 ]; then
          line="⌂"
        else
          Idocs=1
          if [[ "$line" =~ Tech.Doc.*(http://www.odoo.com/documentation/|http://wiki.zeroincombenze.org/en/Odoo/dev/) ]]; then
            line="⌂"
          fi
        fi
      elif [[ "$line" =~ Help.*(https://www.odoo.com/forum/|http://wiki.zeroincombenze.org/.*/Odoo/.*/man/) ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Ihelp -ne 0 ]; then
          line="⌂"
        else
          Ihelp=1
          if [[ "$line" =~ Help.*(https://www.odoo.com/forum/|http://wiki.zeroincombenze.org/.*/Odoo/.*/man/) ]]; then
            line="⌂"
          fi
        fi
      elif [[ "$line" =~ Runbot.Status.*https://runbot.odoo-community.org/ ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Irunbot -ne 0 ]; then
          line="⌂"
        else
          Irunbot=1
        fi
      elif [[ "$line" =~ Code.Climate.*https://codeclimate.com/github/ ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif  [ $Iclimate -ne 0 ]; then
          line="⌂"
        else
          Iclimate=1
        fi
      elif [[ "$line" =~ https://img.shields.io/badge/licence-AGPL ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Ilicense -ne 0 ]; then
          line="⌂"
        else
          Ilicense=1
          line="[![license agpl](https://img.shields.io/badge/licence-AGPL--3-blue.svg)](http://www.gnu.org/licenses/agpl-3.0.html)"
        fi
      elif [[ "$line" =~ try.it.*https://www.zeroincombenze.it ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Itryit -ne 0 ]; then
          line="⌂"
        else
          Itryit=1
          if [[ "$line" =~ try.it.*https://www.zeroincombenze.it ]]; then
            line="⌂"
          fi
        fi
      elif [[ "$line" =~ chat.with.us ]]; then
        Ibutton=1
        if [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          line="⌂"
        elif [ $Icht -ne 0 ]; then
          line="⌂"
        else
          Icht=1
          if [[ "$line" =~ http://www.shs-av.com ]]; then
            line="⌂"
          fi
        fi
      fi
      if [ $Icright -eq 0 ] && [[ "$line" =~ \[//\]:.*#.*copyright ]]; then
        Icright=2
      fi
      if [ $Icright -eq 2 ] && [[ "$line" =~ \[//\]:.*#.*end.copyright ]]; then
        Icright=3
        add_copyright $fntmp
        line="⌂"
      fi
      if [ $Ibutton -eq 0 -a $wf -eq 0 ] && [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
        wf=1
        if [ $Ibuild -eq 0 ]; then
          Ibuild=1
          lne1="[![Build Status](https://travis-ci.org/\${1}/\${2}.svg?branch=\${3})](https://travis-ci.org/\${1}/\${2})"
          lne1="$(echo -n "$lne1"|sed -e 's|\${1}|'$repository'|g' -e 's|\${2}|'$PKGNAME'|g' -e 's|\${3}|'$BRANCH'|g'  -e 's|\${4}|'$ver'|g' -e 's|\${5}|'$helpname'|g' -e 's|\${8}|'$txt1repos'|g' -e 's|\${9}|'$txt2repos'|g')"
          echo "$lne1">>$fntmp
        fi
        if [ $Ilicense -eq 0 ]; then
          Ilicense=1
          lne1="[![license agpl](https://img.shields.io/badge/licence-AGPL--3-green.svg)](http://www.gnu.org/licenses/agpl-3.0.html)"
          lne1="$(echo -n "$lne1"|sed -e 's|\${1}|'$repository'|g' -e 's|\${2}|'$PKGNAME'|g' -e 's|\${3}|'$BRANCH'|g'  -e 's|\${4}|'$ver'|g' -e 's|\${5}|'$helpname'|g' -e 's|\${8}|'$txt1repos'|g' -e 's|\${9}|'$txt2repos'|g')"
          echo "$lne1">>$fntmp
        fi
        if [ $Icoverage -eq 0 ]; then
          Icoverage=1
          lne1="[![Coverage Status](https://coveralls.io/\${8}/\${1}/\${2}/badge.svg?branch=\${3})](https://coveralls.io/\${9}/\${1}/\${2}?branch=\${3})"
          lne1="$(echo -n "$lne1"|sed -e 's|\${1}|'$repository'|g' -e 's|\${2}|'$PKGNAME'|g' -e 's|\${3}|'$BRANCH'|g'  -e 's|\${4}|'$ver'|g' -e 's|\${5}|'$helpname'|g' -e 's|\${8}|'$txt1repos'|g' -e 's|\${9}|'$txt2repos'|g')"
          echo "$lne1">>$fntmp
        fi
        if [ $Icodecov -eq 0 ]; then
          Icodecov=1
          lne1="[![codecov](https://codecov.io/gh/\${1}/\${2}/branch/\${3}/graph/badge.svg)](https://codecov.io/gh/\${1}/\${2})"
          lne1="$(echo -n "$lne1"|sed -e 's|\${1}|'$repository'|g' -e 's|\${2}|'$PKGNAME'|g' -e 's|\${3}|'$BRANCH'|g'  -e 's|\${4}|'$ver'|g' -e 's|\${5}|'$helpname'|g' -e 's|\${8}|'$txt1repos'|g' -e 's|\${9}|'$txt2repos'|g')"
          echo "$lne1">>$fntmp
        fi
        if [ $Idocs -eq 0 ]; then
          Idocs=1
          lne1="[![Tech Doc](https://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-docs-\${4}.svg)](http://wiki.zeroincombenze.org/en/Odoo/dev/${3})"
          lne1="$(echo -n "$lne1"|sed -e 's|\${1}|'$repository'|g' -e 's|\${2}|'$PKGNAME'|g' -e 's|\${3}|'$BRANCH'|g'  -e 's|\${4}|'$ver'|g' -e 's|\${5}|'$helpname'|g' -e 's|\${8}|'$txt1repos'|g' -e 's|\${9}|'$txt2repos'|g')"
          echo "$lne1">>$fntmp
        fi
        if [ $Ihelp -eq 0 ]; then
          Ihelp=1
          lne1="[![Help](http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-help-\${4}.svg)](http://wiki.zeroincombenze.org/en/Odoo/\${3}/man/\${5})"
          lne1="$(echo -n "$lne1"|sed -e 's|\${1}|'$repository'|g' -e 's|\${2}|'$PKGNAME'|g' -e 's|\${3}|'$BRANCH'|g'  -e 's|\${4}|'$ver'|g' -e 's|\${5}|'$helpname'|g' -e 's|\${8}|'$txt1repos'|g' -e 's|\${9}|'$txt2repos'|g')"
          echo "$lne1">>$fntmp
        fi
        if [ $Itryit -eq 0 ]; then
          Itryit=1
          lne1="[![try it](https://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-try-it-7.svg)](http://erp\${4}.zeroincombenze.it)"
          lne1="$(echo -n "$lne1"|sed -e 's|\${1}|'$repository'|g' -e 's|\${2}|'$PKGNAME'|g' -e 's|\${3}|'$BRANCH'|g'  -e 's|\${4}|'$ver'|g' -e 's|\${5}|'$helpname'|g' -e 's|\${8}|'$txt1repos'|g' -e 's|\${9}|'$txt2repos'|g')"
          echo "$lne1">>$fntmp
        fi
        lne1="⌂"
      fi
      [ "$lne1" != "⌂" ] && echo "$lne1">>$fntmp
      if [ $Icright -ne 2 -a "$line" != "⌂" ]; then
        line="$(echo -n "$line"|sed -e 's|\${1}|'$repository'|g' -e 's|\${2}|'$PKGNAME'|g' -e 's|\${3}|'$BRANCH'|g'  -e 's|\${4}|'$ver'|g' -e 's|\${5}|'$helpname'|g' -e 's|\${8}|'$txt1repos'|g' -e 's|\${9}|'$txt2repos'|g')"
        echo "$line">>$fntmp
        if [ -z "$line" ]; then nleof=1; else nleof=0; fi
      fi
      [ "$lne2" != "⌂" ] && echo "$lne2">>$fntmp; if [ -z "$lne2" ]; then nleof=1; else nleof=0; fi
    done < "$fn"
    if [ $Icright -eq 0 ]; then
      [ $nleof -eq 0 ] && echo "">>$fntmp
      add_copyright $fntmp
      # [ $nleof -eq 0 ] && echo "">>$fntmp
      nleof=1
    fi
    if [ $Icht -eq 0 ]; then
      [ $nleof -eq 0 ] && echo "">>$fntmp
      line="[![chat with us](http://www.shs-av.com/wp-content/chat_with_us.png)](https://www.zeroincombenze.it/chi-siamo/contatti/)"
      echo "$line">>$fntmp
      nleof=1
    fi
    # set +x #debug
    if [ "$(diff -q $fn $fntmp)" ]; then
      run_traced "mv $fn $fn.bak"
      run_traced "mv $fntmp $fn"
    else
      rm -f $fntmp
    fi
}

do_distribution() {
    wlog "do_distribution $1 $2"
    sts=$STS_SUCCESS
    if [ -f ./.travis.yml ]; then
      local f1=./.travis.yml
    elif [ -f ../.travis.yml ]; then
      local f1=../.travis.yml
    else
      local f1=
      echo "File .travis.yml not found!"
      sts=$STS_FAILED
    fi
    if [ $opt_orig -gt 0 ]; then
      if [ "$2" == "oca" ]; then
         local gitprj=$(git remote -v|grep upstream|head -n1|awk '{print $2}')
      elif [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
        local gitprj=$(git remote -v|grep origin|head -n1|awk '{print $2}')
      else
        local gitprj=
      fi
      if [ -z "$gitprj" ]; then
        echo "git project not found!"
        f1=
        sts=$STS_FAILED
      else
        run_traced "git clone $gitprj tmp -b $BRANCH --depth 1 --single-branch"
      fi
    fi
    f1_oca=$(dirname $f1)/oca__$(basename $f1)
    f1_z0i=$(dirname $f1)/z0i__$(basename $f1)
    if [ -n "$f1" ]; then
      if [ "$2" == "oca" ]; then
        if [ $opt_orig -gt 0 ]; then
          run_traced "mv ./tmp/.travis.yml $f1_oca"
        fi
        if [ -f $f1_oca ]; then
          run_traced "mv $f1 $f1_z0i"
          run_traced "mv $f1_oca $f1"
        fi
        local fntmp=$f1.tmp
        cat $f1|sed -e 's:^  # - TRANSIFEX="1":  - TRANSIFEX="0":'>$fntmp
        if [ "$(diff -q $f1 $fntmp)" ]; then
          run_traced "sed -i -e 's:^  # - TRANSIFEX=\"1\":  - TRANSIFEX=\"0\":' $f1"
        fi
        rm -f $fntmp
      elif [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
        if [ $opt_orig -gt 0 ]; then
          run_traced "mv ./tmp/.travis.yml $f1_z0i"
        fi
        if [ -f $f1_z0i ]; then
          run_traced "mv $f1 $f1_oca"
          run_traced "mv $f1_z0i $f1"
        fi
        local fntmp=$f1.tmp
        cat $f1|sed -e 's:^  - TRANSIFEX=\"0\":  # - TRANSIFEX=\"1\":'>$fntmp
        if [ "$(diff -q $f1 $fntmp)" ]; then
          run_traced "sed -i -e 's:^  - TRANSIFEX=\"0\":  # - TRANSIFEX=\"1\":' $f1"
        fi
        rm -f $fntmp
      else
        local f1=
        echo "Missed parameter! use:"
        echo "\$ please distribution PKGNAME|. oca|zeroincombenze|zero"
        sts=$STS_FAILED
      fi
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -f ./README.md ]; then
        local f1=./README.md
      elif [ -f ../README.md ]; then
        local f1=../README.md
      elif [ -f ./README.rst ]; then
        local f1=./README.rst
      elif [ -f ../README.rst ]; then
        local f1=../README.rst
      else
        local f1=
      fi
      if [ -n "$f1" ]; then
        local f=$(basename $f1)
        f1_oca=$(dirname $f1)/oca__$f
        f1_z0i=$(dirname $f1)/z0i__$f
        if [ "$2" == "oca" ]; then
          if [ $opt_orig -gt 0 ]; then
            run_traced "mv ./tmp/$f $f1_oca"
          fi
          if [ -f $f1_oca ]; then
            run_traced "mv $f1 $f1_z0i"
            run_traced "mv $f1_oca $f1"
          fi
        elif [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          if [ $opt_orig -gt 0 ]; then
            run_traced "mv ./tmp/$f $f1_z0i"
          fi
          if [ -f $f1_z0i ]; then
            run_traced "mv $f1 $f1_oca"
            run_traced "mv $f1_z0i $f1"
          fi
        fi
        cvt_readme $f1 $2
      fi
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      f1=oca_dependencies.txt
      f1_oca=oca__$f1
      f1_z0i=z0i__$f1
      if [ "$2" == "oca" ]; then
        if [ $opt_orig -gt 0 ]; then
          run_traced "mv ./tmp/$f1 $f1_oca"
        fi
        if [ -f $f1_oca ]; then
          run_traced "mv $f1 $f1_z0i"
          run_traced "mv $f1_oca $f1"
        fi
      elif [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
        if [ $opt_orig -gt 0 ]; then
          run_traced "mv ./tmp/$f1 $f1_z0i"
        fi
        if [ -f $f1_z0i ]; then
          run_traced "mv $f1 $f1_oca"
          run_traced "mv $f1_z0i $f1"
        fi
      fi
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      f1_oca=l10n_it_base
      f1_z0i=l10n_it_bbone
      for f in $(find . -type f -name __openerp__.py -o -name __manifest__.py); do
        f1=$(readlink -e $f)
        local fntmp=$f1.tmp
        if [ "$2" == "oca" ]; then
          cat $f1|sed -e 's:'$f1_z0i':'$f1_oca':'>$fntmp
          if [ "$(diff -q $f1 $fntmp)" ]; then
            run_traced "sed -i -e 's:'$f1_z0i':'$f1_oca':' $f1"
          fi
        elif [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
          cat $f1|sed -e 's:'$f1_oca':'$f1_z0i':'>$fntmp
          if [ "$(diff -q $f1 $fntmp)" ]; then
            run_traced "sed -i -e 's:'$f1_oca':'$f1_z0i':' $f1"
          fi
        fi
        rm -f $fntmp
      done
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -d tmp ]; then
        rm -fR tmp
      fi
    fi
    return $sts
}

do_pythonhosted() {
    wlog "do_pythonhosted $1 $2 $3"
    sts=$STS_SUCCESS
    if [ -z "$2" ]; then
      echo "Missing URL! use:"
      echo "> please pythonhosted PKGNAME URL"
      return $STS_FAILED
    fi
    local URL=$2
    if [ "${URL: -2}" != "/" ]; then
      local URL=$URL/
    fi
    local TITLE="$3"
    local CWD=$PWD
    cd $PKGPATH
cat <<EOF >index.html
<!DOCTYPE HTML>
   <head>
       <meta http-equiv="refresh" content="0; $URL">
       <script type="text/javascript">
           top.location.href = "$URL"
       </script>
       <title>Redirect</title>
   </head>
   <body>
       Please wait for a moment .. <a href='$URL' $2</a>
   </body>
</html>
EOF
    zip -j pythonhosted-$PKGNAME.zip index.html
    if [ -f index.html ]; then
      rm -f index.html
    fi
    cd $CWD
    if [ -f $PKGPATH/pythonhosted-$PKGNAME.zip ]; then
      echo "Now you can download $PKGPATH/pythonhosted-$PKGNAME.zip in pypy webpage of project"
    fi
    return $sts
}

do_synchro() {
    wlog "do_synchro $1 $2"
    if [ "$2" == "oca" ]; then
      if [ "$PRJNAME" == "Odoo" ]; then
        clean_dirs "$PKGPATH"
        if [ "$PKGNAME" == "l10n-italy" ]; then
          if [ -d l10n_it_bbone ]; then
            run_traced "rm -fR l10n_it_bbone"
          fi
        fi
        run_traced "git checkout $BRANCH"
        do_distribution "$PKGNAME" "$2"
        git status
        git remote -v
        run_traced "git pull --no-edit upstream $BRANCH"
      fi
    elif [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
      if [ "$PRJNAME" == "Odoo" ]; then
        clean_dirs "$PKGPATH"
        run_traced "git checkout $BRANCH"
        do_distribution "$PKGNAME" "$2"
        if [ "$PKGNAME" == "l10n-italy" ]; then
          if [ ! -d l10n_it_bbone ]; then
            run_traced "cp -R ../l10n-italy-supplemental/l10n_it_bbone ./"
          fi
        fi
        local x=($git status -s)
        if [ -n "$x" ]; then
          run_traced "git commit -am \"[SYNCHRO] Synchronizing against OCA repository\""
        fi
        git remote -v
        run_traced "git push"
        git status
        if [ "$PKGNAME" == "l10n-italy" ]; then
          if [ -d l10n_it_bbone ]; then
            run_traced "rm -fR l10n_it_bbone"
          fi
        fi
      fi
    else
      echo "Missed parameter! use:"
      echo "\$ please synchro PKGNAME|. oca|zeroincombenze|zero"
      sts=$STS_FAILED
    fi




}

do_docs() {
    wlog "do_docs $1"
    sts=$STS_SUCCESS
    local doxygen_conf
    doxygen_conf=.${1}_doc.conf
    if [ ! -f $doxygen_conf ]; then
      doxygen -g $doxygen_conf
      vim $doxygen_conf
    fi
    doxygen $doxygen_conf
    return $?
}

do_publish() {
#do_publish PKGNAME (svg|docs)
    wlog "do_publish $1 $2"
    sts=$STS_SUCCESS
    if [ "$2" == "svg" ]; then
      do_publish_svg "$@"
    elif [ "$2" == "docs" ]; then
      do_publish_docs "$@"
    else
      echo "Missing object! Use:"
      echo "> please publish PKGNAME (svg|docs)"
      sts=$STS_FAILED
    fi
    return $sts
}

mvfiles () {
# mvfiles(srcpath, tgtpath, files, owner)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    local f
    if [ -d $1 -a -n "$2" ]; then
      if [ -d $2 ]; then
        cd $1
        for f in $l; do
          if [ -e $1/$f ]; then
            run_traced "mv $1/$f $2/$f"
            if [ $4 ]; then
              run_traced "chown $4 $2/$f"
            fi
          else
            elog "! File $1/$f not found!!"
            sts=$STS_FAILED
          fi
        done
      else
        elog "! Directory $2 not found!!"
        sts=$STS_FAILED
      fi
    else
      elog "! Directory $1 not found!!"
      sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}

do_publish_svg() {
#do_publish_svg pgkname svg (prd|dev)
    local sts=$STS_FAILED
    local HTML_SVG_DIR=$(get_cfg_value 0 "HTML_SVG_DIR")
    local DEV_SVG=$(get_cfg_value 0 "DEV_SVG")
    if [ "$HOSTNAME" == "$PRD_HOST" ]; then
      local tgt="prd"
    elif [ "$HOSTNAME" == "$DEV_HOST" ]; then
      local tgt="dev"
    else
      local tgt=""
    fi
    mvfiles "$DEV_SVG" "$HTML_SVG_DIR/$tgt" "*.svg" "apache:apache"
    local sts=$?
    if [ "$HOSTNAME" == "$DEV_HOST" ]; then
      scpfiles "$HTML_SVG_DIR/$tgt" "$PRD_HOST:$HTML_SVG_DIR/$tgt" "*.svg"
      local s=$?
      [ $sts -eq $STS_SUCCESS ]&&sts=$s
    fi
    return $sts
}

do_publish_docs() {
#do_publish_svg pgkname docs
    local sts=$STS_FAILED
    local HTML_DOCS_DIR=$(get_cfg_value "" "HTML_DOCS_DIR")
    if [ -d $HTML_DOCS_DIR/$1 ]; then
      rm -fR $HTML_DOCS_DIR/$1
    fi
    if [ ! -d $HTML_DOCS_DIR/$1 ]; then
      mkdir -p $HTML_DOCS_DIR/$1
      chown apache:apache $HTML_DOCS_DIR/$1
    fi
    mvfiles "$PRJPATH/html" "$HTML_DOCS_DIR/$1" "" "apache:apache"
    local sts=$?
    rmdir $PRJPATH/html
    if [ -d $PRJPATH/latex ]; then
      rm -fR $PRJPATH/latex
    fi
    return $sts
}

OPTOPTS=(h        b          c        d        j        k        L         m       n           O        p         q           r     s        t         u       V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_diff opt_dprj opt_keep opt_log   opt_mis opt_dry_run opt_orig opt_dpath opt_verbose opt_r opt_srcs test_mode opt_uop opt_version opt_verbose)
OPTACTI=(1        "="        "="      1        1        1        "="       1       1           1        "="       0           1     "="      1         1       "*"         "+")
OPTDEFL=(1        "9.0"      ""       0        0        0        ""        0       0           0        ""        -1          0     ""       0         0       ""          -1)
OPTMETA=("help"   "branch"   "file"   "diff"   "dprj"   "keep"   "logfile" ""      "noop"      ""       "path"    "quiet"     "rxt" "files"  "test"    "uop"   "version"   "verbose")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file (def .travis.conf)"\
 "do diff no real action"\
 "execute tests in project dir rather in test dir"\
 "keep coverage statistics in annotate test"\
 "log file name"\
 "show missing line in report coverage"\
 "do nothing (dry-run)"\
 "pull original README in distribution"\
 "declare local git path"\
 "silent mode"\
 "run rescricted mode (w/o parsing travis.yml file)"\
 "files include in annotate test"\
 "test mode (implies dry-run)"\
 "check for unary operator W503"\
 "show version end exit"\
 "verbose mode")
OPTARGS=(action pkg sub1 sub2)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
HLPCMDLIST="help|annotate|autopep8|check|chkconfig|[if-commit]|config|coverage|diff|distribution|docs|[if-]fetch|[if-push]|[if-replace]|publish|pythonhosted|synchro|test|travis|version|wep"
if [ $opt_help -gt 0 ]; then
  print_help "Developer shell\nAction may be on of:\n$HLPCMDLIST"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

opts_travis
eval $(init_cfg)
eval $(active_cfg)
conf_default
set_cfg_def "HTML_SVG_DIR" "/var/www/html/wp-zi/wp-content/uploads/ci-ct"
set_cfg_def "DEV_SVG" "/opt/odoo/dev/svg"
set_cfg_def "HTML_DOCS_DIR" "/var/www/html/mw/html"
link_cfg $TCONF
init_travis
if [ $opt_verbose -gt 1 ]; then set -x; fi
prepare_env_travis "$action" "-r"
sts=$STS_SUCCESS
sts_bash=127
sts_flake8=127
sts_pylint=127
test_sts=127
if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "annotate" ]; then
  do_annotate "$PKGNAME" "$opt_srcs"
  sts=$?
elif [ "$action" == "autopep8" ]; then
  opts=$(inherits_travis_opts "dnuv")
  if [ "$PRJNAME" == "Odoo" ]; then
    opts="$opts -o"
  fi
  if [ $opt_verbose -gt 0 ]; then
    echo "topep8 $PKGPATH $opts"
  fi
  topep8 "$PKGPATH" "$opts"
elif [ "$action" == "check" ]; then
  do_check "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "chkconfig" ]; then
  do_chkconfig
  sts=$STS_SUCCESS
elif [ "$action" == "if-commit" ]; then
  opt_dry_run=1
  do_commit "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "commit" ]; then
  do_commit "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "config" ]; then
  if [ $opt_r -gt 0 ]; then
    DIST_CONF=$(readlink -f $PKGPATH/conf/.local_dist_pkg.conf)
    vim $DIST_CONF
  else
    vim $TCONF
  fi
  sts=$STS_SUCCESS
elif [ "$action" == "coverage" ]; then
  do_coverage "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "distribution" ]; then
  do_distribution "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "diff" ]; then
  do_diff "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-fetch" ]; then
  opt_dry_run=1
  do_fetch "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "fetch" ]; then
  do_fetch "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-push" ]; then
  opt_dry_run=1
  do_push "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "push" ]; then
  do_push "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-replace" ]; then
  opt_dry_run=1
  do_replace "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "replace" ]; then
  do_replace "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "test" ]; then
  do_test "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "travis" ]; then
  do_travis "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "version" ]; then
  do_version "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "wep" ]; then
  if [ $opt_verbose -gt 0 ]; then
    echo "clean_dirs \"$PKGPATH\""
  fi
  clean_dirs "$PKGPATH"
else
  cmd="do_$action"
  if [ "$(type -t $cmd)" == "function" ]; then
    eval $cmd "$PKGNAME" "$sub1" "$sub2"
    sts=$?
  else
    echo "Invalid action!"
    echo "Use $THIS $HLPCMDLIST"
    sts=$STS_FAILED
  fi
fi
exit $sts
