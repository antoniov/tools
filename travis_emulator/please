#! /bin/bash
# -*- coding: utf-8 -*-
#
# please
# Developer shell
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
elif [ -f /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit $STS_FAILED
fi
if [ -f $TDIR/travisrc ]; then
. $TDIR/travisrc
elif [ -f $TDIR/../travisrc ]; then
. $TDIR/../travisrc
elif [ -f ./travisrc ]; then
. ./travisrc
elif [ -f ~/travisrc ]; then
. ~/travisrc
else
  echo "Library file travisrc not found!"
  exit $STS_FAILED
fi

__version__=0.1.30




# do_annotate() {
# # do_annotate(script, include_list)
#  # set -x
#  wlog "do_annotate \"$1\" \"$2\""
#  trap - DEBUG
#  FL_2_TEST=${2//,/ }
#  local f1=$(readlink -f $1)
#  FHIST=$f1.tracehistory
#  if [ -f $f1 ]; then
#    CWD=$PWD
#    mkdir -p ./cover
#    ant_add_trap "$f1"
#    local fn
#    for fn in $FL_2_TEST; do
#      ant_add_trap $fn
#    done
#    $f1
#    cd $CWD
#    ant_rm_trap "$f1"
#    for fn in $FL_2_TEST; do
#      ant_rm_trap $fn
#    done
#    chmod +x $f1
#    if [ $opt_keep -gt 0 ]; then local opts_k=-k; else local opts_l=; fi
#    python $TDIR/$THIS.py "$f1" "$opts_k"
#    rm -f $FHIST
#  fi
#  return 0
# }

do_annotate() {
    wlog "do_annotate"
    run_annotate_test "-T"
    sts=$?
    return $sts
}

do_check() {
    wlog "do_check \"$1\" \"$2\" \"$3\""
    if [ -x $TOOLS_PATH/travis_run_tests ]; then
      opts=$(inherits_travis_opts "Knrv")
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      please_run_tests "-K"
      sts=$?
    else
      sts=127
    fi
    return $sts
}


do_test() {
    wlog "do_test"
    if [ -x $TOOLS_PATH/travis_run_tests ]; then
      opts=$(inherits_travis_opts "Tnrv")
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      please_run_tests "-T"
      sts=$?
    else
      test_sts=$STS_FAILED
      sts=$test_sts
    fi
    return $sts
}


do_diff() {
    wlog "do_diff \"$1\" \"$2\" \"$3\""
    opt_diff=1
    opts=$(inherits_travis_opts "nvd")
    dist_pkg $opts $PKGNAME;
    sts=$?
    return $sts
}


do_replace() {
    opts=$(inherits_travis_opts "nvR")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_commit() {
    opts=$(inherits_travis_opts "nvC")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_push() {
    opts=$(inherits_travis_opts "nvP")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_fetch() {
    opts=$(inherits_travis_opts "nvF")
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}


do_coverage() {
    wlog "do_coverage \"$1\" \"$2\" \"$3\""
    run_coverage_test
    sts=$?
    return $sts
}


do_travis() {
    wlog "do_travis \"$1\" \"$2\" \"$3\""
    if [ $opt_r -gt 0 ]; then
      please_run_tests "-KT"
    else
      opts=$(inherits_travis_opts "cnv")
      if [ -n "$opts" ]; then
        travis "$opts" "$@"
      else
        travis "$@"
      fi
    fi
    sts=$?
    return $sts
}


do_version() {
    cd $PKGPATH; $DEVPATH/dist_pkg -- $PKGNAME $PRJNAME;
    if [ "$PRJNAME" != "Odoo" ]; then
      echo "Project $PRJNAME V$prjversion [$PKGNAME] answer:";
      cd $PKGPATH; PYTHONPATH=$PKGPATH python $PRJNAME;
    else
      echo "Project $PRJNAME V$BRANCH [$PKGNAME $prjversion]";
    fi;
}


do_distribution() {
    wlog "do_distribution $1 $2"
    sts=$STS_SUCCESS
    if [ -f ./.travis.yml ]; then
      local f1=./.travis.yml
    elif [ -f ../.travis.yml ]; then
      local f1=../.travis.yml
    else
      local f1=
      echo "File .travis.yml not found!"
      sts=$STS_FAILED
    fi
    if [ -n "$f1" ]; then
      if [ "$2" == "oca" ]; then
        run_traced "sed -i -e 's:^  # - TRANSIFEX=\"1\":  - TRANSIFEX=\"1\":' $f1"
      elif [ "$2" == "zeroincombenze" ]; then
        run_traced "sed -i -e 's:^  - TRANSIFEX=\"1\":  # - TRANSIFEX=\"1\":' $f1"
      else
        local f1=
        echo "Missed parameter! use:"
        echo "\$ please distribution PKGNAME|. oca|zeroincombenze"
        sts=$STS_FAILED
      fi
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -f ./README.md ]; then
        local f1=./README.md
      elif [ -f ../README.md ]; then
        local f1=../README.md
      elif [ -f ./README.rst ]; then
        local f1=./README.rst
      elif [ -f ../README.rst ]; then
        local f1=../README.rst
      else
        local f1=
      fi
      if [ -n "$f1" ]; then
        if [ "$2" == "oca" ]; then
          run_traced "sed -i -e s:/zeroincombenze/$1:/OCA/$PKGNAME:g $f1"
        elif [ "$2" == "zeroincombenze" ]; then
          run_traced "sed -i -e s:/OCA/$1:/zeroincombenze/$PKGNAME:g $f1"
        fi
      fi
    fi
    return $sts
}

do_pythonhosted() {
    wlog "do_pythonhosted $1 $2 $3"
    sts=$STS_SUCCESS
    if [ -z "$2" ]; then
      echo "Missing URL! use:"
      echo "> please pythonhosted PKGNAME URL"
      return $STS_FAILED
    fi
    local URL=$2
    if [ "${URL: -2}" != "/" ]; then
      local URL=$URL/
    fi
    local TITLE="$3"
    local CWD=$PWD
    cd $PKGPATH
cat <<EOF >index.html
<!DOCTYPE HTML>
   <head>
       <meta http-equiv="refresh" content="0; $URL">
       <script type="text/javascript">
           top.location.href = "$URL"
       </script>
       <title>Redirect</title>
   </head>
   <body>
       Please wait for a moment .. <a href='$URL' $2</a>
   </body>
</html>
EOF
    zip -j pythonhosted-$PKGNAME.zip index.html
    if [ -f index.html ]; then
      rm -f index.html
    fi
    cd $CWD
    if [ -f $PKGPATH/pythonhosted-$PKGNAME.zip ]; then
      echo "Now you can download $PKGPATH/pythonhosted-$PKGNAME.zip in pypy webpage of project"
    fi
    return $sts
}

do_docs() {
    wlog "do_docs $1"
    sts=$STS_SUCCESS
    local doxygen_conf
    doxygen_conf=.${1}_doc.conf
    if [ ! -f $doxygen_conf ]; then
      doxygen -g $doxygen_conf
      vim $doxygen_conf
    fi
    doxygen $doxygen_conf
    return $?
}

do_publish() {
#do_publish PKGNAME (svg|docs)
    wlog "do_publish $1 $2"
    sts=$STS_SUCCESS
    if [ "$2" == "svg" ]; then
      do_publish_svg "$@"
    elif [ "$2" == "docs" ]; then
      do_publish_docs "$@"
    else
      echo "Missing object! Use:"
      echo "> please publish PKGNAME (svg|docs)"
      sts=$STS_FAILED
    fi
    return $sts
}

mvfiles () {
# mvfiles(srcpath, tgtpath, files, owner)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    local f
    if [ -d $1 -a -n "$2" ]; then
      if [ -d $2 ]; then
        cd $1
        for f in $l; do
          if [ -e $1/$f ]; then
            run_traced "mv $1/$f $2/$f"
            if [ $4 ]; then
              run_traced "chown $4 $2/$f"
            fi
          else
            elog "! File $1/$f not found!!"
            sts=$STS_FAILED
          fi
        done
      else
        elog "! Directory $2 not found!!"
        sts=$STS_FAILED
      fi
    else
      elog "! Directory $1 not found!!"
      sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}

do_publish_svg() {
#do_publish_svg pgkname svg (prd|dev)
    local sts=$STS_FAILED
    local HTML_SVG_DIR=$(get_cfg_value 0 "HTML_SVG_DIR")
    local DEV_SVG=$(get_cfg_value 0 "DEV_SVG")
    if [ "$HOSTNAME" == "$PRD_HOST" ]; then
      local tgt="prd"
    elif [ "$HOSTNAME" == "$DEV_HOST" ]; then
      local tgt="dev"
    else
      local tgt=""
    fi
    mvfiles "$DEV_SVG" "$HTML_SVG_DIR/$tgt" "*.svg" "apache:apache"
    local sts=$?
    if [ "$HOSTNAME" == "$DEV_HOST" ]; then
      scpfiles "$HTML_SVG_DIR/$tgt" "$PRD_HOST:$HTML_SVG_DIR/$tgt" "*.svg"
      local s=$?
      [ $sts -eq $STS_SUCCESS ]&&sts=$s
    fi
    return $sts
}

do_publish_docs() {
#do_publish_svg pgkname docs
    local sts=$STS_FAILED
    local HTML_DOCS_DIR=$(get_cfg_value "" "HTML_DOCS_DIR")
    if [ -d $HTML_DOCS_DIR/$1 ]; then
      rm -fR $HTML_DOCS_DIR/$1
    fi
    if [ ! -d $HTML_DOCS_DIR/$1 ]; then
      mkdir -p $HTML_DOCS_DIR/$1
      chown apache:apache $HTML_DOCS_DIR/$1
    fi
    mvfiles "$PRJPATH/html" "$HTML_DOCS_DIR/$1" "" "apache:apache"
    local sts=$?
    rmdir $PRJPATH/html
    if [ -d $PRJPATH/latex ]; then
      rm -fR $PRJPATH/latex
    fi
    return $sts
}

OPTOPTS=(h        b          c        d        j        k        L         m       n           p         q           r     s        t         u       V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_diff opt_dprj opt_keep opt_log   opt_mis opt_dry_run opt_dpath opt_verbose opt_r opt_srcs test_mode opt_uop opt_version opt_verbose)
OPTACTI=(1        "="        "="      1        1        1        "="       1       1           "="       0           1     "="      1         1       "*"         "+")
OPTDEFL=(1        "9.0"      ""       0        0        0        ""        0       0           ""        -1          0     ""       0         0       ""          -1)
OPTMETA=("help"   "branch"   "file"   "diff"   "dprj"   "keep"   "logfile" ""      "noop"      "path"    "quiet"     "rxt" "files"  "test"    "uop"   "version"   "verbose")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file (def .travis.conf)"\
 "do diff no real action"\
 "execute tests in project dir rather in test dir"\
 "keep coverage statistics in annotate test"\
 "log file name"\
 "show missing line in report coverage"\
 "do nothing (dry-run)"\
 "declare local git path"\
 "silent mode"\
 "run rescricted mode (w/o parsing travis.yml file)"\
 "files include in annotate test"\
 "test mode (implies dry-run)"\
 "check for unary operator W503"\
 "show version end exit"\
 "verbose mode")
OPTARGS=(action pkg sub1 sub2)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
HLPCMDLIST="help|annotate|autopep8|check|chkconfig|[if-commit]|config|coverage|diff|distribution|docs|[if-]fetch|[if-push]|[if-replace]|publish|pythonhosted|test|travis|version|wep"
if [ $opt_help -gt 0 ]; then
  print_help "Developer shell\nAction may be on of:\n$HLPCMDLIST"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

opts_travis
eval $(init_cfg)
eval $(active_cfg)
conf_default
set_cfg_def "HTML_SVG_DIR" "/var/www/html/wp-zi/wp-content/uploads/ci-ct"
set_cfg_def "DEV_SVG" "/opt/odoo/dev/svg"
set_cfg_def "HTML_DOCS_DIR" "/var/www/html/mw/html"
link_cfg $TCONF
init_travis
if [ $opt_verbose -gt 1 ]; then set -x; fi
prepare_env_travis "$action" "-r"
sts=$STS_SUCCESS
sts_bash=127
sts_flake8=127
sts_pylint=127
test_sts=127
if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "annotate" ]; then
  do_annotate "$PKGNAME" "$opt_srcs"
  sts=$?
elif [ "$action" == "autopep8" ]; then
  opts=$(inherits_travis_opts "dnuv")
  if [ "$PRJNAME" == "Odoo" ]; then
    opts="$opts -o"
  fi
  if [ $opt_verbose -gt 0 ]; then
    echo "topep8 $PKGPATH $opts"
  fi
  topep8 "$PKGPATH" "$opts"
elif [ "$action" == "check" ]; then
  do_check "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "chkconfig" ]; then
  do_chkconfig
  sts=$STS_SUCCESS
elif [ "$action" == "if-commit" ]; then
  opt_dry_run=1
  do_commit "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "commit" ]; then
  do_commit "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "config" ]; then
  if [ $opt_r -gt 0 ]; then
    DIST_CONF=$(readlink -f $PKGPATH/conf/.local_dist_pkg.conf)
    vim $DIST_CONF
  else
    vim $TCONF
  fi
  sts=$STS_SUCCESS
elif [ "$action" == "coverage" ]; then
  do_coverage "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "distribution" ]; then
  do_distribution "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "diff" ]; then
  do_diff "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-fetch" ]; then
  opt_dry_run=1
  do_fetch "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "fetch" ]; then
  do_fetch "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-push" ]; then
  opt_dry_run=1
  do_push "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "push" ]; then
  do_push "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-replace" ]; then
  opt_dry_run=1
  do_replace "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "replace" ]; then
  do_replace "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "test" ]; then
  do_test "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "travis" ]; then
  do_travis "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "version" ]; then
  do_version "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "wep" ]; then
  if [ $opt_verbose -gt 0 ]; then
    echo "clean_dirs \"$PKGPATH\""
  fi
  clean_dirs "$PKGPATH"
else
  cmd="do_$action"
  if [ "$(type -t $cmd)" == "function" ]; then
    eval $cmd "$PKGNAME" "$sub1" "$sub2"
    sts=$?
  else
    echo "Invalid action!"
    echo "Use $THIS $HLPCMDLIST"
    sts=$STS_FAILED
  fi
fi
exit $sts
