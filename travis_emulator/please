#! /bin/bash
# -*- coding: utf-8 -*-
#
# please
# Developer shell
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
elif [ -f /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit $STS_FAILED
fi
. $TDIR/travisrc

__version__="0.1.19"


ant_rm_trap () {
    if [ $opt_verbose -gt 0 ]; then
      echo "... recover $1"
    fi
    local f1=$(readlink -f $1)
    local fhist=$f1.tracehistory
    local ln=$(head -n1 $f1)
    if [ -n "$ln" -a "${ln:0:5}" == "trap " ]; then
      tail -n+2 $f1>$f1.tmp
      mv -f $f1.tmp $f1
    fi
}

ant_add_trap () {
    if [ $opt_verbose -gt 0 ]; then
      echo "... analyzing $1"
    fi
    local f1=$(readlink -f $1)
    local fhist=$f1.tracehistory
    ant_rm_trap "$f1"
    echo "trap \"echo [\$LINENO] \$0:\$BASH_COMMAND>>$fhist\" DEBUG">$f1.sh
    local line=
    while IFS=\~ read -r line; do
      echo "$line">>$f1.sh
      if [ "${line:0:1}" == "." ]; then
        local fn="${line:2}"
        local p="$(dirname $fn)"
        if [ "$p" == "." ]; then
          if [ "$(echo " $FL_2_TEST "|grep -v [[:space:]]$fn[[:space:]] 2>/dev/null)" ]; then
            FL_2_TEST="$FL_2_TEST $fn"
          fi
        fi
      fi
    done < "$f1"
    # cat $fhist $f1>$f1.sh
    rm -f $fhist
    chmod +x $f1.sh
    mv -f $f1.sh $f1
}

do_annotate () {
# do_annotate(script, include_list)
  # set -x
  if [ $opt_verbose -gt 0 ]; then
    echo "do_annotate \"$1\" \"$2\""
  fi
  trap - DEBUG
  FL_2_TEST=${2//,/ }
  local f1=$(readlink -f $1)
  local fhist=$f1.tracehistory
  if [ -f $f1 ]; then
    CWD=$PWD
    mkdir -p ./cover
    ant_add_trap "$f1"
    local fn
    for fn in $FL_2_TEST; do
      ant_add_trap $fn
    done
    $f1
    cd $CWD
    ant_rm_trap "$f1"
    for fn in $FL_2_TEST; do
      ant_rm_trap $fn
    done
    chmod +x $f1
    if [ $opt_keep -gt 0 ]; then local opts_k=-k; else local opts_l=; fi
    python $TDIR/$THIS.py "$f1" "$opts_k"
    rm -f $fhist
    for fn in $FL_2_TEST; do
      fhist=$fn.tracehistory
      python $TDIR/$THIS.py "$fn" "$opts_k"
      rm -f $fhist
    done
  fi
  return 0
}


do_check (){
    if [ $opt_verbose -gt 0 ]; then
      echo "do_check \"$1\" \"$2\" \"$3\""
    fi
    prepare_env_travis "check"
    # if [ -f $TOOLS_PATH/travis_install_pkgs ]; then
    #   run_traced $TOOLS_PATH/travis_install_pkgs
    #   if [ $? -ne 0 ]; then sts=$?; fi
    # fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ $opt_r -gt 0 ]; then
        test_bash
        sts_bash=$?
        cd $TOOLS_PATH
        test_flake8
        sts_flake8=$?
        test_pylint
        sts_pylint=$?
        do_summary "$sts_flake8" "$sts_pylint" "$sts_bash"
        sts=$(($sts_flake8 || $sts_pylint))
      else
        if [ $TOOLS_PATH/travis_run_tests ]; then
          run_traced $TOOLS_PATH/travis_run_tests
          if [ $? -ne 0 ]; then sts=$?; fi
        else
          sts=127
        fi
      fi
    fi
    return $sts
}

test_flake8 () {
    echo "======== Testing test_flake8 ========"
    FLAKE8_CONFIG_DIR="$PWD/cfg"
    run_traced "flake8 . --config=${FLAKE8_CONFIG_DIR}/travis_run_flake8__init__.cfg"
    local status1=$?
    run_traced "flake8 . --config=${FLAKE8_CONFIG_DIR}/travis_run_flake8.cfg"
    local status2=$?
    return $((${status1} || ${status2}))
}

test_pylint () {
    echo "======== Testing test_pylint ========"
    sts=$STS_SUCCESS
    TRAVIS_BUILD_DIR=$PKGPATH
    MODULES_TO_TEST=$TRAVIS_BUILD_DIR
    PYLINT_CONFIG_DIR="$PWD/cfg"
    if [ "$PRJNAME" == "Odoo" ]; then
      pylint_rcfile=${PYLINT_CONFIG_DIR}/travis_run_pylint.cfg
    else
      pylint_rcfile=${PYLINT_CONFIG_DIR}/travis_run_pylint_PYPI.cfg
    fi

    export PYTHONPATH=${PYTHONPATH}:${MODULES_TO_TEST}
    if [ "$PRJNAME" == "Odoo" ]; then
      touch $MODULES_TO_TEST/__init__.py
    fi
    IFS="/" read -a REPO <<< "${ODOO_REPO}"
    export PATH=${PATH}:${PWD}/../${REPO[1]}-${VERSION}/openerp

    #run pylint command
    run_traced "pylint --rcfile=$pylint_rcfile ${MODULES_TO_TEST}"
    sts=$?
    return $sts
}

test_bash () {
    echo "========= Testing test_bash ========="
    sts=$STS_SUCCESS
    local f
    for f in $(find . -type f|tr "\n" " "); do
      local x=$(head $f -n1)
      if [ "$x" == "#!/bin/bash" -o "$x" == "#! /bin/bash" ]; then
        if [ "$(grep ^[[:space:]]*set[[:space:]]*-x $f 2>/dev/null)" ]; then
          echo "Invalid statement 'set -x' in $f"
          sts=$STS_FAILED
        fi
      fi
    done
    return $sts
}


do_test () {
    prepare_env_travis "test"
    if [ -f ~/dev/pypi/$1/$1/tests/all_tests ]; then
      if [ $opt_dprj -gt 0 ]; then
        cd ~/dev/pypi/$1/$1
        ./tests/all_tests
      else
        cd ~/dev/pypi/$1/$1/tests
        ./all_tests
      fi
      sts=$?
    elif [ -f ~/dev/pypi/$1/$1/tests/test_$1.py ]; then
      if [ $opt_dprj -gt 0 ]; then
        cd ~/dev/pypi/$1/$1
      else
        cd ~/dev/pypi/$1/$1/tests
      fi
      PYTHONPATH=~/dev/pypi/$1 python ~/dev/pypi/$1/$1/tests/test_$1.py
      sts=$?
    else
      sts=$STS_FAILED
    fi
    # set +x #debug
    return $sts
}


do_coverage () {
    run_traced "cd $PRJPATH"
    prepare_env_travis "coverage"
    run_traced "find . -name \"*$PRJNAME*.log\" -exec rm -f '{}' \;"
    if [ -f ~/dev/pypi/$1/$1/__main__.py ]; then
      run_traced "coverage erase"
      if [ $opt_verbose -gt 0 ]; then
        echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PKGPATH coverage run --source $PRJNAME __main__.py"
      fi
      sts=0
      if [ $opt_dry_run -eq 0 ]; then
        DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PKGPATH coverage run --source $PRJNAME __main__.py
        coverage report
      fi
      sts=$?
    else
      sts=$STS_FAILED
    fi
    return $sts
}


do_travis (){
    travis local/"$1";
    return 0
}


do_version () {
    cd $PKGPATH; $DEVPATH/dist_pkg -- $pkgname $PRJNAME;
    if [ "$PRJNAME" != "Odoo" ]; then
      echo "Project $PRJNAME V$prjversion [$pkgname] answer:";
      cd $PKGPATH; PYTHONPATH=$PKGPATH python $PRJNAME;
    else
      echo "Project $PRJNAME V$BRANCH [$pkgname $prjversion]";
    fi;
}

OPTOPTS=(h        b          c        d        j        k        L         n           p         q         r     s        t         u       V           v           y)
OPTDEST=(opt_help opt_branch opt_conf opt_diff opt_dprj opt_keep opt_log   opt_dry_run opt_dpath opt_quiet opt_r opt_srcs test_mode opt_uop opt_version opt_verbose opt_yes)
OPTACTI=(1        "="        "="      1        1        1        "="       1           "="       1         1     "="      1         1       "*"         1           "*")
OPTDEFL=(1        "9.0"      ""       0        0        0        ""        0           ""        0         0     ""       0         0       ""          0           "")
OPTMETA=("help"   "branch"   "file"   "diff"   "dprj"   "kkep"   "logfile" "noop"      "path"    "quiet"   "rxt" "files"  "test"    "uop"   "version"   "verbose"   "yes")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file"\
 "do diff no real action"\
 "execute test from project dir (not in test dir)"\
 "keep coverage statistics in annotate test"\
 "log file name"\
 "do nothing (dry-run)"\
 "declare local git path"\
 "quiet mode"\
 "restricted mode, no maintainer-quality-tools (config is local)"\
 "files include in annotate test"\
 "test mode (implies dry-run)"\
 "check for unary operator W503"\
 "show version end exit"\
 "verbose mode"\
 "assume yes")
OPTARGS=(action pkg sub1 sub2)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Developer shell\nAction may be: help|annotate|autopep8|check|chkconfig|config|coverage|test|travis|version|wep"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

opts_travis
$(init_cfg)
$(active_cfg)
conf_default
link_cfg $TCONF
init_travis
if [ $opt_verbose -gt 1 ]; then set -x; fi
prepare_env_travis "$action"
sts=$STS_SUCCESS
if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "annotate" ]; then
  do_annotate "$pkg" "$opt_srcs"
  sts=$?
elif [ "$action" == "autopep8" ]; then
  opts=$(inherits_travis_opts "dnuv")
  if [ $opt_verbose -gt 0 ]; then
    echo "topep8 $PKGPATH $opts"
  fi
  topep8 "$PKGPATH" "$opts"
elif [ "$action" == "check" ]; then
  do_check "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "chkconfig" ]; then
  do_chkconfig
  sts=$STS_SUCCESS
elif [ "$action" == "config" ]; then
  if [ $opt_r -gt 0 ]; then
    DIST_CONF=$(readlink -f $PKGPATH/conf/.local_dist_pkg.conf)
    vim $DIST_CONF
  else
    vim $TCONF
  fi
  sts=$STS_SUCCESS
elif [ "$action" == "coverage" ]; then
  do_coverage "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "test" ]; then
  do_test "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "travis" ]; then
  if [ $opt_r -gt 0 ]; then
    do_check "$pkgname" "$sub1" "$sub2"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      do_test "$pkgname" "$sub1" "$sub2"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      do_coverage "$pkgname" "$sub1" "$sub2"
      sts=$?
    fi
  else
    opts=$(inherits_travis_opts "cnrv")
    if [ $opt_verbose -gt 0 ]; then
      echo "do_travis \"$opts\" \"$pkgname\" \"$sub1\" \"$sub2\""
    fi
    do_travis "$opts" "$pkgname" "$sub1" "$sub2"
  fi
  sts=$?
elif [ "$action" == "version" ]; then
  do_version "$pkgname" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "wep" ]; then
  if [ $opt_verbose -gt 0 ]; then
    echo "clean_dirs \"$PKGPATH\""
  fi
  clean_dirs "$PKGPATH"
else
  echo "Invalid action!"
  echo "Use $THIS help|annotate|autopep8|check|chkconfig|config|coverage|test|travis|wep"
  sts=$STS_FAILED
fi
exit $sts
