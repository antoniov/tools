#! /bin/bash
# -*- coding: utf-8 -*-
#
# please
# Developer shell
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2017 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../../z0lib . .. /etc; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. $TDIR/../travis_emulator $TDIR/../../travis_emulator . .. $HOME/dev")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.1.52.9


#
# General Purpose options:
# -A dont exec odoo test
# -B exec bash test
# -b branch: must be 6.1 7.0, 8.0, 9.0 or 10.0
# -C commit & push | dont exc clodoo test
# -c configuration file
# -d diff
# -F fetch
# -f force
# -H use virtualenv
# -k keep files
# -K exec bash, flake8 and pylint tests | run cron environ
# -j exec tests in project dir rather in test dir
# -m show missing line in report
# -n do nothing (dry-run)
# -O run odoo burst
# -o OCA directives
# -P push
# -p local path
# -q silent mode
# -R replace | replica
# -r rescricted mode (w/o parsing travis.yml file)
# -S status
# -T exec regression test
# -t do nothing (test-mode)
# -u dont update newer files
# -V show version
# -v verbose mode
# -W whatis
# -w wep


move() {
# move(src dst)
    if [ -f "$2" ]; then rm -f $2; fi
    run_traced "cp -p $1 $2"
    run_traced "rm -f $1"
}

move_n_bak() {
# move_n_bak(src dst)
    if [ -f "$2.bak" ]; then rm -f $2.bak; fi
    run_traced "cp -p $2 $2.bak"
    run_traced "mv -f $1 $2"
}

add_copyright() {
#add_copyright(file rst zero|oca|oia)
    if [ "$PRJNAME" == "Odoo" ]; then
      if [ $2 -eq 1 ]; then
        echo ".. [//]: # (copyright)">>$1
      else
        echo "[//]: # (copyright)">>$1
      fi
      echo "">>$1
      echo "----">>$1
      echo "">>$1
      if [ $2 -eq 1 ]; then
        echo "**Odoo** is a trademark of  \`Odoo S.A.">>$1
        echo "<https://www.odoo.com/>\`_.">>$1
        echo "(formerly OpenERP, formerly TinyERP)">>$1
      else
        echo "**Odoo** is a trademark of [Odoo S.A.](https://www.odoo.com/) (formerly OpenERP, formerly TinyERP)">>$1
      fi
      echo "">>$1
      if [ $2 -eq 1 ]; then
        echo "**OCA**, or the  \`Odoo Community Association">>$1
        echo "<http://odoo-community.org/>\`_.">>$1
        echo "is a nonprofit organization whose">>$1
      else
        echo "**OCA**, or the [Odoo Community Association](http://odoo-community.org/), is a nonprofit organization whose">>$1
      fi
      echo "mission is to support the collaborative development of Odoo features and">>$1
      echo "promote its widespread use.">>$1
      echo "">>$1
      if [ "$3" == "oia" ]; then
        echo "**Odoo Italia Associazione**, or the [Associazione Odoo Italia](https://www.odoo-italia.org/)">>$1
        echo "is the nonprofit Italian Community Association whose mission">>$1
        echo "is to support the collaborative development of Odoo designed for Italian law and markeplace.">>$1
        echo "Since 2017, Odoo Italia Associazione replaces OCA members of Italy are developping code under Odoo Proprietary License.">>$1
        echo "Odoo Italia Associazione distributes only code under AGPL free license.">>$1
        echo "">>$1
        echo "[Odoo Italia Associazione](https://www.odoo-italia.org/) è un'Associazione senza fine di lucro">>$1
        echo "che dal 2017 sostituisce gli sviluppatori italiani di OCA che sviluppano">>$1
        echo "con Odoo Proprietary License a pagamento.">>$1
        echo "">>$1
        echo "Odoo Italia Associazione distribuisce il codice esclusivamente con licenza [AGPL](http://www.gnu.org/licenses/agpl-3.0.html)">>$1
        echo "">>$1
      else
        if [ $2 -eq 1 ]; then
          echo "**zeroincombenze®** is a trademark of \`SHS-AV s.r.l.">>$1
          echo "<http://www.shs-av.com/>\`_.">>$1
        else
          echo "**zeroincombenze®** is a trademark of [SHS-AV s.r.l.](http://www.shs-av.com/)">>$1
        fi
        echo "which distributes and promotes **Odoo** ready-to-use on its own cloud infrastructure.">>$1
        echo "[Zeroincombenze® distribution](http://wiki.zeroincombenze.org/en/Odoo)">>$1
        echo "is mainly designed for Italian law and markeplace.">>$1
        echo "Everytime, every Odoo DB and customized code can be deployed on local server too.">>$1
        echo "">>$1
      fi
      if [ $2 -eq 1 ]; then
        echo "">>$1
        echo ".. [//]: # (end copyright)">>$1
      else
        echo "[//]: # (end copyright)">>$1
      fi
    else
      if [ $2 -eq 1 ]; then
        echo ".. [//]: # (copyright)">>$1
      else
        echo "[//]: # (copyright)">>$1
      fi
      echo "">>$1
      echo "----">>$1
      echo "">>$1
      if [ $2 -eq 1 ]; then
        echo "**zeroincombenze®** is a trademark of \`SHS-AV s.r.l.">>$1
        echo "<http://www.shs-av.com/>\`_.">>$1
      else
        echo "**zeroincombenze®** is a trademark of [SHS-AV s.r.l.](http://www.shs-av.com/)">>$1
      fi
      echo "which distributes and promotes **Odoo** ready-to-use on its own cloud infrastructure.">>$1
      echo "">>$1
      echo "Odoo is a trademark of Odoo S.A.">>$1
      if [ $2 -eq 1 ]; then
        echo "">>$1
        echo ".. [//]: # (end copyright)">>$1
      else
        echo "[//]: # (end copyright)">>$1
      fi
    fi
}

add_addons() {
#add_addons(file rst zero|oca|oia ORIG)
    if [ "$PRJNAME" == "Odoo" ]; then
      if [ $2 -eq 1 ]; then
        echo ".. [//]: # (addons)">>$1
      else
        echo "[//]: # (addons)">>$1
      fi
      $TDIR/gen_addons_table.py addons $4>>$1
      if [ $2 -eq 1 ]; then
        echo "">>$1
        echo ".. [//]: # (end addons)">>$1
      else
        echo "[//]: # (end addons)">>$1
      fi
    fi
}

restore_owner() {
    if [ "$USER" != "odoo" ]; then
      if sudo -v &>/dev/null; then
        run_traced "sudo chown -R odoo:odoo .git"
      elif [ "$USER" != "travis" ]; then
        run_traced "chown -R odoo:odoo .git"
      fi
    fi
}

expand_macro() {
    local t p v lne lne1
    lne="$1"
    for t in {1..9} LNK_DOCS BTN_DOCS LNK_HELP BTN_HELP;do
      p=\${$t}
      v=${M[$t]}
      lne1="${lne//$p/$v}"
      lne="$lne1"
    done
    echo -n "$lne"
}

build_line() {
# build_line(flag replmnt act)
    local v w x line
    v=${1^^}
    w="LNK_${v:1}"
    v="BTN_${v:1}"
    line="$2"
    if [[ $3 =~ md_BTN ]]; then
      if [ -n "${M[$v]}" ]; then
        x="${M[$v]}"
        line="$line($x)]"
      fi
      if [ -n "${M[$w]}" ]; then
        x="${M[$w]}"
        line="$line($x)"
      fi
    elif [[ $3 =~ rstBTN_.*/1 ]]; then
      if [ -z "$2" ]; then
        line=".. image::"
      else
        line=".. ${line:0: -1} image::"
      fi
      if [ -n "${M[$v]}" ]; then
        x="${M[$v]}"
        line="$line $x"
      fi
    elif [[ $3 =~ rstBTN_.*/2 ]]; then
      if [ -z "$2" ]; then
        line="   :target:"
      else
        line=".. _${line:1: -2}:"
      fi
      if [ -n "${M[$w]}" ]; then
        x="${M[$w]}"
        line="$line $x"
      fi
    elif [ "$3" == "CHPT_lang_en" ]; then
      line="[![en](https://github.com/zeroincombenze/grymb/blob/master/flags/en_US.png)](https://www.facebook.com/groups/openerp.italia/)"
    elif [ "$3" == "CHPT_lang_it" ]; then
      line="[![it](https://github.com/zeroincombenze/grymb/blob/master/flags/it_IT.png)](https://www.facebook.com/groups/openerp.italia/)"
    elif [[ $3 =~ CHPT_ ]]; then
      :
    fi
    echo "$line"
}

cvt_doxygenconf() {
    local fn=$1
    if [ -f $fn ]; then
      local fntmp=$fn.tmp
      rm -f $fntmp
      local line lne submod url p v
      while IFS= read -r line r || [ -n "$line" ]; do
        if [[ $line =~ ^PROJECT_NAME ]]; then
          line="PROJECT_NAME           = \"$PRJNAME\""
        elif [[ $line =~ ^PROJECT_BRIEF ]]; then
          line="PROJECT_BRIEF          = \"$prjdesc\""
        elif [[ $line =~ ^HTML_COLORSTYLE_HUE ]]; then
          line="HTML_COLORSTYLE_HUE    = 93"
        elif [[ $line =~ ^HTML_COLORSTYLE_SAT ]]; then
          line="HTML_COLORSTYLE_SAT    = 87"
        elif [[ $line =~ ^HTML_COLORSTYLE_GAMMA ]]; then
          line="HTML_COLORSTYLE_GAMMA  = 120"
        elif [[ $line =~ ^HTML_COLORSTYLE_GAMMA ]]; then
          line="HTML_COLORSTYLE_GAMMA  = 120"
        elif [[ $line =~ ^JAVADOC_AUTOBRIEF ]]; then
          line="JAVADOC_AUTOBRIEF      = YES"
        elif [[ $line =~ ^OPTIMIZE_OUTPUT_JAVA ]]; then
          line="OPTIMIZE_OUTPUT_JAVA   = YES"
        elif [[ $line =~ ^EXTRACT_STATIC ]]; then
          line="EXTRACT_STATIC         = YES"
        elif [[ $line =~ ^FILTER_SOURCE_FILES ]]; then
          line="FILTER_SOURCE_FILES    = YES"
        elif [[ $line =~ ^INPUT_FILTER ]]; then
          line="INPUT_FILTER           = /usr/bin/doxypy.py"
        elif [[ $line =~ ^HTML_TIMESTAMP ]]; then
          line="HTML_TIMESTAMP         = YES"
        elif [[ $line =~ ^GENERATE_LATEX ]]; then
          line="GENERATE_LATEX         = NO"
        elif [[ $line =~ ^EXCLUDE_PATTERNS ]]; then
          line="EXCLUDE_PATTERNS       = */tests/* "
        fi
        echo "$line">>$fntmp
      done < "$fn"
      if [ -n "$(diff -q $fn $fntmp)" ]; then
        # run_traced "cp -p $fn $fn.bak"
        # run_traced "mv $fntmp $fn"
        move_n_bak $fntmp $fn
      else
        rm -f $fntmp
      fi
    fi
}

cvt_gitmodule() {
#cvt_gitmodule(oca|zero|oia)
    if [ -f .gitmodules ]; then
      local fn=.gitmodules
      local fntmp=$fn.tmp
      local urlty=
      if [ "${1:0:3}" == "oia" ]; then
        urlty=oia-http
      else
        urlty=zero-http
      fi 
      rm -f $fntmp
      local line lne submod url p v
      while IFS= read -r line r || [ -n "$line" ]; do
        if [ "${line:0:1}" == "[" -a "${line: -1}" == "]" ]; then
          lne="${line:1: -1}"
          read p v <<<"$lne"
          submod=${v//\"/}
        else
          lne=$(echo $line)
          IFS== read p v <<<$lne
          lne=$(echo $p)
          if [ "$lne" == "url" ]; then
            url=$(build_pkgurl $submod $urlty URL)
            lne=$(echo $v)
            if [ "$lne" != "$url" ]; then
              v="${line//$lne/$url}"
              line="$v"
            fi
          fi
        fi
        echo "$line">>$fntmp
      done < "$fn"
      if [ -n "$(diff -q $fn $fntmp)" ]; then
        # run_traced "cp -p $fn $fn.bak"
        # run_traced "mv $fntmp $fn"
        move_n_bak $fntmp $fn
      else
        rm -f $fntmp
      fi
    fi
}

cvt_readme() {
# cvt_readme(file_readme oca|zero|oia currpt ORIG)
# params: 1=REMOTEREPO, 2=pkgname, 3=odoo_ver, 4=ver(major), 5=helpname
#         7=repos/pkgname, 8=(txt1)repos 9=(txt2)repos
    local fn=$1
    local fntmp=$fn.tmp
    local wf=0 nxtwf=0 prewf=0 preline=0
    local Irunbot=0 Ibuild=0 Icoverage=0 Icodecov=0 Iclimate=0 Ilicense=0 Itryit=0 Idocs=0 Ihelp=0 IOCA=0
    local Icright=0 Iaddons=0 Irst=0 Ichat=0 Ilang_en=0 Ilang_it=0 Idiff=0
    local line lne1 lne2 REMOTEREPO txtrepos ver i v w x y
    local ignnextlines=0
    local helpname=
    local OCA_REMOTEREPO OCA_txt1repos OCA_txt2repos
    unset M[*] TKNS[*] REPL[*] ACT[*]
    declare -gA M
    declare -a TKNS REPL ACT RHLP WK
    RHLP[0]="FI=l10n-italy-supplemental:l10n-italy"
    RHLP[1]="FI=account-:bank-:analytic:l10n_it"
    RHLP[2]="MM=product-"
    RHLP[3]="LO=stock-:purchase"
    RHLP[4]="SD=stock-:sale"
    i=0
    while [ $i -lt ${#RHLP[@]} ]; do
      x=${RHLP[$i]}
      IFS=\= read p v<<<$x
      w=${v//:/ }
      for v in $w; do
        if [[ "$PKGNAME" =~ "$v" ]] || [[ "$REPOSNAME" =~ "$v" ]]; then
          helpname=$p
          break
        fi
      done
      if [ -n "$helpname" ]; then
        break
      fi
      ((i++))
    done
    if [ -n "$BRANCH" ]; then
      if [ "$BRANCH" == "master" ]; then
        ver=$BRANCH
      else
        ver=$(echo $BRANCH|grep -Eo '[0-9]+'|head -n1)
      fi
    else
      BRANCH=master
      ver=master
    fi
    OCA_REMOTEREPO=OCA
    OCA_txt1repos=repos
    OCA_txt2repos=r
    if [ "$2" == "oca" ]; then
      REMOTEREPO=$OCA_REMOTEREPO
      txt1repos=$OCA_txt1repos
      txt2repos=OCA_txt2repos
    elif [ "$2" == "zeroincombenze" -o "$2" == "zero" ]; then
      REMOTEREPO=zeroincombenze
      txt1repos=repos/github
      txt2repos=github
    elif [ "$2" == "oia" ]; then
      REMOTEREPO=Odoo-Italia-Associazione
      txt1repos=repos/github
      txt2repos=github
    fi
    M[1]=$REMOTEREPO
    if [ "$PRJNAME" == "tools" -o "$PKGNAME" == "tools" ]; then
      M[2]=tools
    elif [ "$LGITPATH" == "/opt/odoo/tools/$PKGNAME" ]; then    # Just for debug
      M[2]=tools
    else
      M[2]=$PKGNAME
    fi
    M[3]=$BRANCH
    M[4]=$ver
    M[5]=$helpname
    if [ -z "$REPOSNAME" ]; then
      M[7]=${M[2]}
    elif [ "$LGITPATH" == "/opt/odoo/tools/$PKGNAME" ]; then    # Just for debug
      M[7]=${M[2]}
    else
      M[7]=$REPOSNAME
    fi
    M[8]=$txt1repos
    M[9]=$txt2repos
    v=${M[7]}
    M[LNK_BUILD]="https://travis-ci.org/$REMOTEREPO/$v"
    M[BTN_BUILD]="https://travis-ci.org/$REMOTEREPO/$v.svg?branch=$BRANCH"
    M[LNK_LICENSE]="http://www.gnu.org/licenses/agpl-3.0.html"
    M[BTN_LICENSE]="https://img.shields.io/badge/licence-AGPL--3-blue.svg"
    M[LNK_COVERAGE]="https://coveralls.io/$txt2repos/$REMOTEREPO/$v?branch=$BRANCH"
    M[BTN_COVERAGE]="https://coveralls.io/$txt1repos/$REMOTEREPO/$v/badge.svg?branch=$BRANCH"
    M[LNK_OCA_COVERAGE]="https://coveralls.io/$OCA_txt2repos/$OCA_REMOTEREPO/$v?branch=$BRANCH"
    M[BTN_OCA_COVERAGE]="https://coveralls.io/$OCA_txt1repos/$OCA_REMOTEREPO/$v/badge.svg?branch=$BRANCH"
    if [ -z "$REPOSNAME" ]; then
      M[LNK_CODECOV]="https://codecov.io/gh/$REMOTEREPO/$v/branch/$BRANCH"
    else
      M[LNK_CODECOV]="https://codecov.io/gh/$REMOTEREPO/$v/branch/$BRANCH"
    fi
    M[LNK_OCA_CODECOV]="https://codecov.io/gh/$OCA_REMOTEREPO/$v/branch/$BRANCH"
    M[BTN_CODECOV]="https://codecov.io/gh/$REMOTEREPO/$v/branch/$BRANCH/graph/badge.svg"
    M[BTN_OCA_CODECOV]="https://codecov.io/gh/$OCA_REMOTEREPO/$v/branch/$BRANCH/graph/badge.svg"
    if [ "$PRJNAME" == "Odoo" ]; then
      M[LNK_DOCS]="http://wiki.zeroincombenze.org/en/Odoo/$BRANCH/dev"
      M[BTN_DOCS]="http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-docs-$ver.svg"
    elif [ "$PKGNAME" == "tools" ]; then
      M[LNK_DOCS]="http://wiki.zeroincombenze.org/en/Python/opt"
      M[BTN_DOCS]="http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-docs-$PKGNAME.svg"
    elif [ "$PKGNAME" != "tools" ]; then
      M[LNK_DOCS]="http://wiki.zeroincombenze.org/en/Python/opt/$PKGNAME"
      M[BTN_DOCS]="http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-docs-$PKGNAME.svg"
    fi
    if [ "$PRJNAME" == "Odoo" ]; then
      M[LNK_HELP]="http://wiki.zeroincombenze.org/en/Odoo/$BRANCH/man/$helpname"
      M[BTN_HELP]="http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-help-$ver.svg"
    elif [ "$PKGNAME" == "tools" ]; then
      M[LNK_HELP]="http://wiki.zeroincombenze.org/en/Python/opt"
      M[BTN_HELP]="http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-help-$PKGNAME.svg"
    else
      M[LNK_HELP]="http://wiki.zeroincombenze.org/en/Python/opt/$PKGNAME/help"
      M[BTN_HELP]="http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-help-$PKGNAME.svg"
    fi
    local CHAT_HOME=$(get_cfg_value 0 "CHAT_HOME")
    M[LNK_CHAT]="$CHAT_HOME"
    M[BTN_CHAT]="https://www.shs-av.com/wp-content/chat_with_us.gif"

    TKNS[0]="^\.\.[[:space:]][|_][a-zA-Z_]+"
    REPL[0]="⌂"
    ACT[0]="REPL"
    TKNS[1]="^\.\.[[:space:]]image::.*chat_with_us"
    REPL[1]="⌂"
    ACT[1]="REPL1"
    TKNS[2]="^[[:space:]]+:[a-zA-Z_]+:"
    REPL[2]="⌂"
    ACT[2]="REPLC"
    TKNS[3]="^[^a-zA-Z_]*Build.Status.*https://travis-ci.org/"
    REPL[3]="[![Build Status]"
    ACT[3]="md_BTN_build"
    TKNS[4]="^\|build.status\|"
    REPL[4]="|build status|_"
    ACT[4]="rstBTN_build"
    TKNS[5]="^[^a-zA-Z_]*license.*https://img.shields.io/badge/licence-AGPL"
    REPL[5]="[![license agpl]"
    ACT[5]="md_BTN_license"
    TKNS[6]="^\|license.agpl\|"
    REPL[6]="|license agpl|_"
    ACT[6]="rstBTN_license"
    TKNS[7]="^[^a-zA-Z_]*Coverage.Status.*https://coveralls.io/"
    REPL[7]="[![Coverage Status]"
    ACT[7]="md_BTN_coverage"
    TKNS[8]="^\|coverage.status\|"
    REPL[8]="|coverage status|_"
    ACT[8]="rstBTN_coverage"
    TKNS[9]="^[^a-zA-Z_]*codecov.*https://codecov.io/gh/"
    REPL[9]="[![codecov]"
    ACT[9]="md_BTN_codecov"
    TKNS[10]="^\|codecov.status\|"
    REPL[10]="|codecov status|_"
    ACT[10]="rstBTN_codecov"
    TKNS[11]="^[^a-zA-Z_]*OCA_project.*https://github.com/OCA/"
    REPL[11]="[![OCA_project](http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-oca-$ver.svg)](https://github.com/OCA/$v/tree/$BRANCH)"
    ACT[11]="md_BTN_OCA"
    TKNS[12]="^\|oca.project\|"
    REPL[12]="|oca project|_"
    ACT[12]="rstBTN_OCA"
    TKNS[13]="^[^a-zA-Z_]*Code.Climate.*https://codeclimate.com/github/"
    REPL[13]="Code.Climate  https://codeclimate.com/github/"
    ACT[13]="md_BTN_climate"
    TKNS[14]="^\|code.climate\|"
    REPL[14]="|code climate|_"
    ACT[14]="rstBTN_climate"
    TKNS[15]="^[^a-zA-Z_]*Tech.Doc.*(https*://www.odoo.com/documentation/|https*://wiki.zeroincombenze.org/en/)"
    REPL[15]="[![Tech Doc]"
    ACT[15]="md_BTN_docs"
    TKNS[16]="^\|technical.doc\|"
    REPL[16]="|technical doc|_"
    ACT[16]="rstBTN_docs"
    TKNS[17]="^[^a-zA-Z_]*Help.*(https*://www.odoo.com/forum/|https*://wiki.zeroincombenze.org/)"
    REPL[17]="[![Help]"
    ACT[17]="md_BTN_help"
    TKNS[18]="^\|help.zeroincombenze\|"
    REPL[18]="|help zeroincombenze|_"
    ACT[18]="rstBTN_help"
    TKNS[19]="^[^a-zA-Z_]*(Runbot|Build).Status.*https://runbot.odoo-community.org/"
    REPL[19]="Runbot Status  https://runbot.odoo-community.org/"
    ACT[19]="md_BTN_runbot"
    TKNS[20]="^\|runbot.status\|"
    REPL[20]="|runbot status|_"
    ACT[20]="rstBTN_runbot"
    TKNS[21]="^[^a-zA-Z_]*try.it.*http(s)?://www.zeroincombenze.it"
    REPL[21]="[![try it](http://www.zeroincombenze.it/wp-content/uploads/ci-ct/prd/button-try-it-$ver.svg)](http://erp$ver.zeroincombenze.it)"
    ACT[21]="md_BTN_tryit"
    TKNS[22]="^\|try.it\|"
    REPL[22]="|try it|_"
    ACT[22]="rstBTN_tryit"
    TKNS[51]="\[//\]:.*#.*end.copyright"
    REPL[51]=""
    ACT[51]="md_END_cright"
    TKNS[52]="\[//\]:.*#.*copyright"
    REPL[52]=""
    ACT[52]="md_BEG_cright"
    TKNS[53]="\.\.\[//\]:.*#.*end.copyright"
    REPL[53]=""
    ACT[53]="rstEND_cright"
    TKNS[54]="\.\.\[//\]:.*#.*copyright"
    REPL[54]=""
    ACT[54]="rstBEG_cright"
    TKNS[55]="chat.with.us"
    REPL[55]="[![chat with us]"
    ACT[55]="md_BTN_chat"
    TKNS[56]="^\|chat.with.us\|"
    REPL[56]=""
    ACT[56]="rstBTN_chat"
    TKNS[57]="\[//\]:.*#.*end addons"
    REPL[57]=""
    ACT[57]="md_END_addons"
    TKNS[58]="\[//\]:.*#.*addons"
    REPL[58]=""
    ACT[58]="md_BEG_addons"
    TKNS[59]="\.\.\[//\]:.*#.*end addons"
    REPL[59]=""
    ACT[59]="rstEND_addons"
    TKNS[60]="\.\.\[//\]:.*#.*addons"
    REPL[60]=""
    ACT[60]="rstBEG_addons"
    TKNS[61]="^Differenze rispetto localizzazione ufficiale Odoo/OCA"
    REPL[61]=""
    ACT[61]="md_BEG_diff"
    TKNS[62]="^Coverage \|"
    REPL[62]=""
    ACT[62]="md_diff_1"
    TKNS[63]="^(Test compatibilità OCA e Odoo|Test con repository OCA e Odoo) \|"
    REPL[63]=""
    ACT[63]="md_diff_2"
    TKNS[100]="^[^a-zA-Z_]*en[^a-zA-Z_]*(https*://www.shs-av.com/wp-content/en_US.png|https://github.com/zeroincombenze/grymb/blob/master/flags/en_US.png)"
    REPL[100]=""
    ACT[100]="CHPT_lang_en"
    TKNS[101]="^[^a-zA-Z_]*it[^a-zA-Z_]*(https*://www.shs-av.com/wp-content/it_IT.png|https://github.com/zeroincombenze/grymb/blob/master/flags/it_IT.png)"
    REPL[101]=""
    ACT[101]="CHPT_lang_it"
    TKNS[102]="^======"
    REPL[102]=""
    ACT[102]="CHPT_102"
    TKNS[103]="^-----"
    REPL[103]=""
    ACT[103]="CHPT_103"
    TKNS[104]="^Installation"
    REPL[104]=""
    ACT[104]="CHPT_104"
    TKNS[105]="^Configuration"
    REPL[105]=""
    ACT[105]="CHPT_105"
    TKNS[106]="^Usage"
    REPL[106]=""
    ACT[106]="CHPT_106"
    TKNS[107]="^Known issues / Roadmap"
    REPL[107]=""
    ACT[107]="CHPT_107"
    TKNS[108]="^Bug Tracker"
    REPL[108]=""
    ACT[108]="CHPT_108"
    TKNS[109]="^Credits"
    REPL[109]=""
    ACT[109]="CHPT_109"
    TKNS[110]="^(\[!\[Odoo Community Association\]\]|\[!\[Odoo Italia Associazione\]\])"
    REPL[110]=""
    ACT[110]="CHPT_110"
    TKNS[111]="^(### |)Contributors"
    REPL[111]=""
    ACT[111]="CHPT_111"
    TKNS[112]="^(### |)Funders"
    REPL[112]=""
    ACT[112]="CHPT_112"
    TKNS[113]="^(### |)Maintainer"
    REPL[113]=""
    ACT[113]="CHPT_113"

    local ONLY_OCA="Irunbot Iclimate"
    local ONLY_ZERO="Icright IOCA Idocs Ihelp Ichat Ilang_en Ilang_it Idiff"
    local ONLY_ODOO="IOCA Itryit Iaddons"
    rm -f $fntmp
    # set -x #debug
    while IFS= read -r line r || [ -n "$line" ]; do
      # echo "$prewf/$wf/$nxtwf> line=$line" #debug
      lne1="⌂"
      lne2="⌂"
      Ibutton=0
      prewf=$nxtwf
      nxtwf=0
      for i in {1..22} {51..63} {100..113}; do
        p=${TKNS[$i]}
        if [[ $line =~ $p ]]; then
          if [ "${ACT[$i]}" == "REPL" -o "${ACT[$i]}" == "REPL1" ]; then
            if [ "${ACT[$i]}" == "REPL1" ]; then
              ignnextlines=1
            fi
            line="${REPL[$i]}"
          elif [ "${ACT[$i]}" == "REPLC" ]; then
            if [ $ignnextlines -ne 0 ]; then
              line="${REPL[$i]}"
            fi
          elif [[ "${ACT[$i]}" =~ md_BTN ]] || [[ "${ACT[$i]}" =~ rstBTN ]]; then
            if [[ "${ACT[$i]}" =~ rstBTN ]]; then
              Irst=1
            fi
            ignnextlines=0
            v="${ACT[$i]}"
            v="I${v:7}"
            Ibutton=1
            if [ ${!v} -ne 0 ]; then
              line="⌂"
            elif [[ " $ONLY_OCA " =~ [[:space:]]$v[[:space:]] ]]; then
              if [ "$2" == "zeroincombenze" -o "$2" == "zero" -o "$2" == "oia" ]; then
                line="⌂"
              fi
            elif [[ " $ONLY_ZERO " =~ [[:space:]]$v[[:space:]] ]]; then
              if [ "$2" == "oca" ]; then
                line="⌂"
              elif [ "$2" == "oia" -a "$v" == "Ichat" ]; then
                line="⌂"
                eval $v=1
              fi
            elif [[ " $ONLY_ODOO " =~ [[:space:]]$v[[:space:]] ]]; then
              if [ "$PRJNAME" != "Odoo" ]; then
                line="⌂"
              fi
            fi
            if [ "$line" != "⌂" ]; then
              if [ "$2" == "zeroincombenze" -o "$2" == "zero" -o "$2" == "oia" ]; then
                line="⌂"
              else
                eval $v=1
                line=$(build_line $v "${REPL[$i]}" "${ACT[$i]}")
              fi
            fi
          elif [[ "${ACT[$i]}" =~ CHPT_ ]]; then
            v="${ACT[$i]}"
            v="${v:5}"
            if (($v)); then
              nxtwf=$v
            else
              v=I$v
              if [ ${!v} -ne 0 ]; then
                line="⌂"
              elif [[ " $ONLY_OCA " =~ [[:space:]]$v[[:space:]] ]]; then
                if [ "$2" == "zeroincombenze" -o "$2" == "zero" -o "$2" == "oia" ]; then
                  line="⌂"
                fi
              elif [[ " $ONLY_ZERO " =~ [[:space:]]$v[[:space:]] ]]; then
                if [ "$2" == "oca" ]; then
                  line="⌂"
                fi
              elif [[ " $ONLY_ODOO " =~ [[:space:]]$v[[:space:]] ]]; then
                if [ "$PRJNAME" != "Odoo" ]; then
                  line="⌂"
                fi
              fi
              if [ "$line" != "⌂" ]; then
                eval $v=1
                Ibutton=1
                wf=2
                line=$(build_line $v "$line" "${ACT[$i]}")
              fi
            fi
          elif [ "${ACT[$i]}" == "md_BEG_cright" -o "${ACT[$i]}" == "rstBEG_cright" ]; then
            if [ $Icright -eq 0 ]; then
              Icright=2
            fi
            line="⌂"
          elif [ "${ACT[$i]}" == "md_END_cright" -o "${ACT[$i]}" == "rstEND_cright" ]; then
            if [ $Icright -eq 2 ]; then
              Icright=3
              add_copyright $fntmp $Irst $2
            fi
            line="⌂"
          elif [ "${ACT[$i]}" == "md_BEG_addons" -o "${ACT[$i]}" == "rstBEG_addons" ]; then
            # echo "> begin <$line>" #debug
            if [ $Iaddons -eq 0 ]; then
              Iaddons=2
            fi
            line="⌂"
          elif [ "${ACT[$i]}" == "md_END_addons" -o "${ACT[$i]}" == "rstEND_addons" ]; then
            if [ $Iaddons -eq 2 ]; then
              Iaddons=3
              add_addons $fntmp $Irst "$2" "$4"
            fi
            line="⌂"
          elif [ "${ACT[$i]}" == "md_BEG_diff" ]; then
            if [ $Idiff -eq 0 ]; then
              Idiff=2
            fi
          elif [ "${ACT[$i]}" == "md_diff_1" ]; then
            if [ $Idiff -eq 2 ]; then
              if [ "$BRANCH" == "7.0" ]; then
                line="Coverage |  [![codecov](${M[BTN_CODECOV]})](${M[LNK_CODECOV]}) | [![Coverage Status](${M[BTN_OCA_COVERAGE]})](${M[LNK_OCA_COVERAGE]})"
              else
                line="Coverage |  [![codecov](${M[BTN_CODECOV]})](${M[LNK_CODECOV]}) | [![codecov](${M[BTN_OCA_CODECOV]})](${M[LNK_OCA_CODECOV]})"
              fi
            fi
          elif [ "${ACT[$i]}" == "md_diff_2" ]; then
            if [ $Idiff -eq 2 ]; then
              if [ "$BRANCH" == "7.0" ]; then
                line="Test compatibilità OCA e Odoo | :x: | [Errore import decimal precision](https://github.com/OCA/OCB/issues/629)"
              else
                line="Test compatibilità OCA e Odoo | :white_check_mark: | :white_check_mark:"
              fi
            fi
          fi
          break
        elif [ -n "$line" ] && [[ "${ACT[$i]}" =~ rstBTN ]]; then
          p=${TKNS[$i]}
          p="..[[:space:]]${p:1}"
          if [[ $line =~ $p ]]; then
            ignnextlines=0
            line="${REPL[0]}"
            break
          else
            p=${TKNS[$i]}
            p="..[[:space:]]_${p:3}"
            p=${p/\\\|/:}
            if [[ $line =~ $p ]]; then
              ignnextlines=0
              line="${REPL[0]}"
              break
            fi
          fi
        fi
      done
      if [ $Ibutton -eq 0 -a $wf -eq 0 ] && [ "$2" == "zeroincombenze" -o "$2" == "zero" -o "$2" == "oia" ]; then
        lne1="⌂"
        wf=1
        for i in {1..22}; do
          p=${TKNS[$i]}
          if [[ "${ACT[$i]}" =~ md_BTN ]] || [[ "${ACT[$i]}" =~ rstBTN ]]; then
            v="${ACT[$i]}"
            v="I${v:7}"
            if [ $Irst -gt 0 ] && [[ "${ACT[$i]}" =~ md_BTN ]]; then
              :
            elif [ $Irst -eq 0 ] && [[ "${ACT[$i]}" =~ rstBTN ]]; then
              :
            elif [ "$2" == "zeroincombenze" -o "$2" == "zero" -o "$2" == "oia" ] && [[ " $ONLY_OCA " =~ [[:space:]]$v[[:space:]] ]]; then
              :
            elif [ "$2" == "oca" ] && [[ " $ONLY_ZERO " =~ [[:space:]]$v[[:space:]] ]]; then
              :
            elif [ "$PRJNAME" != "Odoo" ] && [[ " $ONLY_ODOO " =~ [[:space:]]$v[[:space:]] ]]; then
              :
            elif [ ${!v} -eq 0 ]; then
              eval $v=1
              lne1=$(build_line $v "${REPL[$i]}" "${ACT[$i]}")
              echo "$lne1">>$fntmp;
              if [ -z "$lne1" ]; then preline=0; else preline=1; fi
            fi
          fi
        done
        [ $preline -ne 0 ] && [ -n "$line" ] && preline=0 && echo "">>$fntmp
      fi
      # echo "> if [ \$Icright=$Icright -ne 2 -a $line != '⌂' ]; then" #debug
      if [ $Icright -ne 2 -a $Iaddons -ne 2 -a "$line" != "⌂" ]; then
        line=$(expand_macro "$line")
        line="$(echo "$line"|sed -e 's:OpenERP:Odoo:' -e 's:openerp\.com:odoo.com:')"
        line="$(echo "$line"|sed -e 's:formerly *Odoo:formerly OpenERP:' -e 's:formerly *odoo:formerly OpenERP:')"
        if [ -n "$line" ]; then
          # [ $wf -ge 104 ] && echo "> if [ -n \"$line\" ]; then" #debug
          if [ $wf -eq 1 ]; then
            if [ $Ilang_en -eq 0 ]; then
              echo "">>$fntmp
              echo "[![en](http://www.shs-av.com/wp-content/en_US.png)](http://wiki.zeroincombenze.org/it/Odoo/7.0/man)">>$fntmp
              echo "">>$fntmp
            fi
            Ilang_en=1
            if [ $nxtwf -ne 100 ]; then
              wf=2
            fi
          fi
          # [ $wf -ge 104 ] && echo ">   if [ \$wf=$wf -eq 2 ]; then" #debug
          if [ $wf -eq 2 ]; then
            echo "$line">>$fntmp
            if [ $Ibutton -eq 0 ] && [[ $line =~ ^[A-Za-z] ]]; then
              x=${#line}
              w="================================================================================================"
              v=${w:0:$x}
              echo "$v">>$fntmp
              wf=104
            fi
          elif [ $wf -gt 100 ] && [ $nxtwf -eq 102 -o $nxtwf -eq 103 ]; then
            # [ $wf -ge 104 ] && echo ">   elif [ \$wf=$wf -gt 100 ] && [ \$nxtwf=$nxtwf -eq 102 -o \$nxtwf -eq 103 ]; then" #debug
            :
          elif [ $wf -lt 100 -o $nxtwf -ge 104 ]; then
            # [ $wf -ge 104 ] && echo ">   elif [ \$wf=$wf -lt 100 -o \$nxtwf=$nxtwf -ge 104 ]; then" #debug
            if [ $wf -lt 104 ]; then
              wf=104
            fi
            while [ $wf -le $nxtwf ]; do
              if [ $wf -ne 110 ]; then
                w=${TKNS[$wf]}
                v=${w:1}
                if [[ "$w" =~ "###" ]]; then
                  w="$v"
                  IFS=")" read x v<<<$w
                  if [ -z "$v" ]; then v=$x; fi
                  v="### $v"
                else
                  echo "$v">>$fntmp
                  x=${#v}
                  w="-----------------------------------------------------------------------------------------------"
                  v=${w:0:$x}
                fi
                echo "$v">>$fntmp
                ((wf++))
                if [ $wf -le $nxtwf ]; then echo "">>$fntmp; fi
              else
                ((wf++))
              fi
            done
          else
            if [ $prewf -ge 104 ];then
              # echo ">  echo ''" #debug
              echo "">>$fntmp
            fi
            # [ $wf -ge 104 ] && echo ">   else" #debug
            echo "$line">>$fntmp
          fi
        else
          # [ $wf -ge 104 ] && echo "> else" #debug
          echo "$line">>$fntmp
        fi
        if [ -z "$line" ]; then preline=0; else preline=1; fi
      fi
      if [ "$lne2" != "⌂" ]; then
        echo "$lne2">>$fntmp;
        if [ -z "$lne2" ]; then preline=0; else preline=1; fi
      fi
    done < "$fn"
    for i in {51..63}; do
      p=${TKNS[$i]}
      if [ "${ACT[$i]}" == "md_END_cright" -o "${ACT[$i]}" == "rstEND_cright" ]; then
        if [ $Icright -eq 0 ]; then
          [ $preline -ne 0 ] && echo "">>$fntmp
          Icright=3
          add_copyright $fntmp $Irst $2
          preline=1
        fi
      elif [ "${ACT[$i]}" == "md_END_addons" -o "${ACT[$i]}" == "rstEND_addons" ]; then
        if [ $Iaddons -eq 0 ]; then
          [ $preline -ne 0 ] && echo "">>$fntmp
          Iaddons=3
          add_addons $fntmp $Irst "$2" "$4"
          preline=1
        fi
      elif [ $Irst -ne 0 ] && [[ "${ACT[$i]}" =~ rstBTN ]]; then
        v="${ACT[$i]}"
        v="I${v:7}"
        eval $v=1
      fi
    done
    [ $preline -ne 0 ] && preline=0 && echo "">>$fntmp
    for i in {1..22} {51..63}; do
      p=${TKNS[$i]}
      if [ $Irst -eq 0 -a $i -ge 50 ] && [[ "${ACT[$i]}" =~ md_BTN ]]; then
        v="${ACT[$i]}"
        v="I${v:7}"
        if [ ${!v} -eq 0 ]; then
          eval $v=1
          line=$(build_line $v "${REPL[$i]}" "${ACT[$i]}")
          echo "$line">>$fntmp
        fi
      elif [ $Irst -ne 0 ] && [[ "${ACT[$i]}" =~ rstBTN ]]; then
        v="${ACT[$i]}"
        v="I${v:7}"
        if [ ${!v} -eq 1 ]; then
          eval $v=2
          line=$(build_line $v "${REPL[$i]}" "${ACT[$i]}/1")
          echo "$line">>$fntmp
          line=$(build_line $v "${REPL[$i]}" "${ACT[$i]}/2")
          echo "$line">>$fntmp
        fi
      fi
    done
    if [ ${test_mode:-0} -eq 0 -a "${RPT:0:4}" != "${3:0:4}" ]; then
      if [ -n "$(diff -q $fn $fntmp)" ]; then
        # run_traced "cp -p $fn $fn.bak"
        # run_traced "mv $fntmp $fn"
        move_n_bak $fntmp $fn
      else
        rm -f $fntmp
      fi
    fi
}


cvt_file() {
# cvt_file(file oca|zero|oia travis|readme|manifest currpt ORIG)
    local f1=$1
    local sts=$STS_SUCCESS
    if [ -n "$f1" ]; then
      local f=$(basename $f1)
      local d=$(dirname $f1)
      if [[ $f1 =~ $PWD ]]; then
        local l=${#PWD}
        ((l++))
        local ft=${f1:l}
      elif [ "${f1:0:2}" == "./" ]; then
        local ft=${f1:2}
      else
        local ft=$f1
      fi
      local f1_oca=$(dirname $f1)/${f}.oca
      local f1_z0i=$(dirname $f1)/${f}.z0i
      if [ "$2" == "$4" -a $opt_force -eq 0 ]; then
        local do_proc=0
      else
        local do_proc=1
      fi
      local fntmp=$f1.tmp
      if [ "$2" == "oca" ]; then
        if [ $opt_orig -gt 0 ]; then
          if [ -f "$f1_oca" ]; then rm -f $f1_oca; fi
          run_traced "cp -p ./tmp/$ft $f1_oca"
        fi
        if [ -f $f1_oca ]; then
          move $f1 $f1_z0i
          move $f1_oca $f1
          do_proc=1
        elif [ $opt_force -ne 0 -a ! -f $f1_z0i ]; then
          if [ -f "$f1_z0i" ]; then rm -f $f1_z0i; fi
          run_traced "cp -p $f1 $f1_z0i"
          do_proc=1
        fi
        if [ "$3" == "travis" ]; then
          cat $f1|sed -e 's:^  # - TRANSIFEX="0":  - TRANSIFEX="1":'>$fntmp
          if [ -n "$(diff -q $f1 $fntmp)" ]; then
            run_traced "sed -i -e 's:^  # - TRANSIFEX=\"0\":  - TRANSIFEX=\"1\":' $f1"
          fi
          rm -f $fntmp
        fi
        if [ -f $f1_z0i ] && [ $opt_force -eq 0 -o "$3" == "manifest" ]; then
          diff -q $f1 $f1_z0i &>/dev/null
          if [ $? -eq 0 ]; then
            run_traced "rm -f $f1_z0i"
          fi
        fi
      elif [ "$2" == "zeroincombenze" -o "$2" == "zero" -o "$2" == "oia" ]; then
        if [ $opt_orig -gt 0 ]; then
          if [ -f "$f1_z0i" ]; then rm -f $f1_z0i; fi
          run_traced "cp -p ./tmp/$ft $f1_z0i"
        fi
        if [ -f $f1_z0i ]; then
          move $f1 $f1_oca
          move $f1_z0i $f1
          do_proc=1
        elif [ $opt_force -ne 0 -a ! -f $f1_oca ]; then
          if [ -f "$f1_oca" ]; then rm -f $f1_oca; fi
          run_traced "cp -p $f1 $f1_oca"
          do_proc=1
        fi
        if [ "$3" == "travis" ]; then
          local fntmp=$f1.tmp
          cat $f1|sed -e 's:^  - TRANSIFEX=\"1\":  # - TRANSIFEX=\"0\":'>$fntmp
          if [ -n "$(diff -q $f1 $fntmp)" ]; then
            run_traced "sed -i -e 's:^  - TRANSIFEX=\"1\":  # - TRANSIFEX=\"0\":' -e 's:pip install unidecode==0.04.17:pip install unidecode:' $f1"
          fi
          rm -f $fntmp
        elif [ "$3" == "readme" ] && [ ${test_mode:-0} -ne 0 -o $do_proc -gt 0 ]; then
          cvt_readme $f1 "$2" "$4" "$5"
        fi
        if [ -f $f1_oca ] && [ $opt_force -eq 0 -o "$3" == "manifest" ]; then
          diff -q $f1 $f1_oca &>/dev/null
          if [ $? -eq 0 ]; then
            run_traced "rm -f $f1_oca"
          fi
        fi
      else
        local f1=
        echo "Missed parameter! use:"
        echo "\$ please distribution PKGNAME|. oca|zero|oia"
        sts=$STS_FAILED
      fi
    fi
    return $sts
}

mvfiles () {
# mvfiles(srcpath, tgtpath, files, owner)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    local f
    if [ -d $1 -a -n "$2" ]; then
      if [ -d $2 ]; then
        cd $1
        for f in $l; do
          if [ -e $1/$f ]; then
            run_traced "mv -f $1/$f $2/$f"
            if [ $4 ]; then
              run_traced "chown $4 $2/$f"
            fi
          else
            elog "! File $1/$f not found!!"
            sts=$STS_FAILED
          fi
        done
      else
        elog "! Directory $2 not found!!"
        sts=$STS_FAILED
      fi
    else
      elog "! Directory $1 not found!!"
      sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}

create_pubblished_index() {
# create_pubblished_index(index_dir) {
    local f
    run_traced "cd $1"
    cat <<EOF >index.html
<!DOCTYPE HTML>
<html>
    <head>
        <title>Speed Test</title>
    </head>
    <body>
    <table>
EOF
    for f in *; do
      if [ "$f" != "index.html" ]; then
        echo "        <tr><td>$f</td></tr>">>index.html
      fi
    done
    echo "    </body>">>index.html
    echo "</html>">>index.html
}


do_publish() {
#do_publish PKGNAME (docs|download|pypi|svg|testpypi|tar)
    wlog "do_publish $1 $2"
    local cmd="do_publish_$2"
    sts=$STS_SUCCESS
    if [ "$(type -t $cmd)" == "function" ]; then
      eval $cmd "$@"
    else
      echo "Missing object! Use:"
      echo "> please publish PKGNAME (docs|download|pypi|svg|testpypi|tar)"
      echo "publish doc      -> publish generate docs to website (require system privileges)"
      echo "   type 'please docs' to generate docs files"
      echo "publish download -> publish tarball to download (require system privileges)"
      echo "   type 'please build' to generate tarball file"
      echo "publish pypi     -> publish package to pypi website (require system privileges)"
      echo "publish svg      -> publish test result svg file (require system privileges)"
      echo "publish tar      -> write a tarball with package files"
      sts=$STS_FAILED
    fi
    return $sts
}

do_publish_svg() {
#do_publish_svg pgkname svg (prd|dev)
    local sts=$STS_FAILED
    local HTML_SVG_DIR=$(get_cfg_value 0 "HTML_SVG_DIR")
    local DEV_SVG=$(get_cfg_value 0 "DEV_SVG")
    if [ $EUID -ne 0 ]; then
      echo "!!Error: no privilege to publish svg!!"
      return $sts
    fi
    if [ "$HOSTNAME" == "$PRD_HOST" ]; then
      local tgt="prd"
    elif [ "$HOSTNAME" == "$DEV_HOST" ]; then
      local tgt="dev"
    else
      local tgt=""
    fi
    if [ ! -d $HTML_SVG_DIR ]; then
      run_traced "mkdir -p $HTML_SVG_DIR"
      run_traced "chown apache:apache $HTML_SVG_DIR"
      if [ ! -d $HTML_SVG_DIR/$tgt ]; then
        run_traced "mkdir -p $HTML_SVG_DIR/$tgt"
        run_traced "chown apache:apache $HTML_SVG_DIR/$tgt"
      fi
    fi
    mvfiles "$DEV_SVG" "$HTML_SVG_DIR/$tgt" "*.svg" "apache:apache"
    local sts=$?
    if [ "$HOSTNAME" == "$DEV_HOST" ]; then
      scpfiles "$HTML_SVG_DIR/$tgt" "$PRD_HOST:$HTML_SVG_DIR/$tgt" "*.svg"
      local s=$?
      [ $sts -eq $STS_SUCCESS ]&&sts=$s
    fi
    return $sts
}

do_publish_docs() {
#do_publish_svg pgkname docs
    local sts=$STS_FAILED
    if [ $EUID -ne 0 ]; then
      echo "!!Error: no privilege to publish documentation!!"
      return $sts
    fi
    local HTML_DOCS_DIR=$(get_cfg_value "" "HTML_DOCS_DIR")
    if [ -d $HTML_DOCS_DIR/$1 ]; then
      run_traced "rm -fR $HTML_DOCS_DIR/$1"
    fi
    if [ ! -d $HTML_DOCS_DIR/$1 ]; then
      run_traced "mkdir -p $HTML_DOCS_DIR/$1"
      run_traced "chown apache:apache $HTML_DOCS_DIR/$1"
    fi
    mvfiles "$PRJPATH/html" "$HTML_DOCS_DIR/$1" "" "apache:apache"
    local sts=$?
    rmdir $PRJPATH/html
    if [ -d $PRJPATH/latex ]; then
      rm -fR $PRJPATH/latex
    fi
    if [ $opt_verbose -gt 0 ]; then
      echo ""
      echo -e "see \e[1mdocs.zeroincombenze.org/$1\e[0m webpage"
    fi
    return $sts
}

do_publish_download() {
#do_publish_download pgkname
    local f n s v
    local sts=$STS_FAILED
    if [ $EUID -ne 0 ]; then
      echo "!!Error: no privilege to publish download!!"
      return $sts
    fi
    local HTML_DOWNLOAD_DIR=$(get_cfg_value "" "HTML_DOWNLOAD_DIR")
    if [ "$PRJNAME" != "Odoo" ]; then
      if [ ! -d $HTML_DOWNLOAD_DIR ]; then
        run_traced "mkdir -p $HTML_DOWNLOAD_DIR"
        run_traced "chown apache:apache $HTML_DOWNLOAD_DIR"
      fi
      run_traced "cd $PKGPATH"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
      n=$(cat setup.py|grep "name *="|awk -F= '{print $2}'|grep -Eo [a-zA-Z0-9_-]+|head -n1)
      v=$(cat setup.py|grep version|grep -Eo [0-9]+\.[0-9]+\.[0-9]+|head -n1)
      f=$(ls -1 $n*$v*tar.gz)
      # f=$n*$v*tar.gz
      if [ -n "$f" -a -f "$f" ]; then
        mvfiles "$PKGPATH" "$HTML_DOWNLOAD_DIR" "$f" "apache:apache"
        sts=$?
        if [ $sts -eq $STS_SUCCESS ]; then
          run_traced "cp $HTML_DOWNLOAD_DIR/$f $HTML_DOWNLOAD_DIR/$n.tar.gz"
          run_traced "chown apache:apache $HTML_DOWNLOAD_DIR/$n.tar.gz"
          create_pubblished_index "$HTML_DOWNLOAD_DIR"
          if [ $opt_verbose -gt 0 ]; then
            echo ""
            echo -e "You can download this package typing"
            echo -e "\$ wget http://download.zeroincombenze.org/$n.tar.gz"
          fi
        fi
      else
        echo "Source $n*$v*tar.gz file non found!"
      fi
    fi
    return $sts
}

do_publish_pypi() {
#do_publish_pypi pgkname
    local sts=$STS_SUCCESS
    local rpt=pypi
    local n p s v
    if [ "$PRJNAME" != "Odoo" ]; then
      run_traced "cd $PKGPATH"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
      n=$(cat setup.py|grep "name *="|awk -F= '{print $2}'|grep -Eo [a-zA-Z0-9_-]+|head -n1)
      v=$(cat setup.py|grep version|grep -Eo [0-9]+[0-9\.]*|head -n1)
      p=$(find dist -name "$n*$v*tar.gz")
      if [ -z "$p" -o $opt_force -gt 0 ]; then
        run_traced "python setup.py build sdist"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      p=$(find dist -name "$n*$v*tar.gz")
      run_traced "twine upload $p -r $rpt"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    fi
    return $sts
}

do_publish_testpypi() {
#do_publish_testpypi pgkname
    local sts=$STS_SUCCESS
    local rpt=testpypi
    local n p s v
    if [ "$PRJNAME" != "Odoo" ]; then
      run_traced "cd $PKGPATH"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
      n=$(cat setup.py|grep "name *="|awk -F= '{print $2}'|grep -Eo [a-zA-Z0-9_-]+|head -n1)
      v=$(cat setup.py|grep version|grep -Eo [0-9]+[0-9\.]*|head -n1)
      p=$(find dist -name "$n*$v*tar.gz")
      if [ -z "$p" -o $opt_force -gt 0 ]; then
        run_traced "python setup.py build sdist"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      p=$(find dist -name "$n*$v*tar.gz")
      run_traced "twine upload $p -r $rpt"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    fi
    return $sts
}

do_register_pypi() {
#do_register_pypi pgkname
    local sts=$STS_SUCCESS
    local rpt=testpypi
    local n p s v
    if [ "$PRJNAME" != "Odoo" ]; then
      run_traced "cd $PKGPATH"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
      n=$(cat setup.py|grep "name *="|awk -F= '{print $2}'|grep -Eo [a-zA-Z0-9_-]+|head -n1)
      v=$(cat setup.py|grep version|grep -Eo [0-9]+[0-9\.]*|head -n1)
      p=$(find dist -name "$n*$v*.whl")
      if [ -z "$p" -o $opt_force -gt 0 ]; then
        run_traced "python setup.py bdist_wheel --universal"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      p=$(find dist -name "$n*$v*.whl")
      run_traced "twine register $p -r $rpt"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    fi
    return $sts
}

do_register_testpypi() {
#do_register_testpypi pgkname
    local sts=$STS_SUCCESS
    local rpt=testpypi
    local n p s v
    if [ "$PRJNAME" != "Odoo" ]; then
      run_traced "cd $PKGPATH"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
      n=$(cat setup.py|grep "name *="|awk -F= '{print $2}'|grep -Eo [a-zA-Z0-9_-]+|head -n1)
      v=$(cat setup.py|grep version|grep -Eo [0-9]+[0-9\.]*|head -n1)
      p=$(find dist -name "$n*$v*.whl")
      if [ -z "$p" -o $opt_force -gt 0 ]; then
        run_traced "python setup.py bdist_wheel --universal"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      p=$(find dist -name "$n*$v*.whl")
      run_traced "twine register $p -r $rpt"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    fi
    return $sts
}


do_annotate() {
    wlog "do_annotate"
    run_annotate_test "-T"
    sts=$?
    return $sts
}

do_autope8() {
    local opts=$(inherits_travis_opts "" "8")
    run_traced "topep8 $opts $PKGPATH"
    return $?
}

do_build() {
#do_build pgkname tar
    local sts=$STS_SUCCESS
    local rpt=pypi
    local f i l n p s v x y PKGLIST invalid PASSED
    local SETUP=./setup.sh
    local xx="$(get_cfg_value 0 filedel)"
    local yy="$(get_cfg_value 0 fileignore)"
    if [ $opt_keep -ne 0 ]; then
      xx="$xx $yy"
    else
      xx="$xx $yy tests/"
    fi
    if [ "$PRJNAME" != "Odoo" ]; then
      run_traced "cd $PKGPATH"
      # run_traced "mkdir -p tmp"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
      n=$(cat setup.py|grep "name *="|awk -F= '{print $2}'|grep -Eo [a-zA-Z0-9_-]+|head -n1)
      v=$(cat setup.py|grep version|grep -Eo [0-9]+\.[0-9]+\.[0-9]+|head -n1)
      if [ ! -f "$n*$v*tar.gz" -o $opt_force -gt 0 ]; then
        PKGLIST=$(cat setup.py|grep "# PKGLIST="|awk -F= '{print $2}')
        if [ -n "$PKGLIST" ]; then
          PKGLIST=${PKGLIST//,/ }
        else
          if [ "$PRJNAME" == "lisa" ]; then
            cp ../../clodoo/clodoo/odoorc ./
            cp ../../z0lib/z0lib/z0librc ./
          fi
          x="find . -type f"
          for f in $xx "setup.*"; do
            if [ "${f: -1}" == "/" ]; then
              x="$x -not -path '*/$f*'"
            else
              x="$x -not -name '*$f'"
            fi
          done
          eval $x >./tmp.log
          PKGLIST="$(cat ./tmp.log)"
          rm -f ./tmp.log
        fi
        invalid=
        for f in $PKGLIST; do
          if [ -f $f ]; then
            :
            #cp $f $PKGPATH/tmp
          else
            invalid=$f
          fi
        done
        if  [ -n "$invalid" ]; then
          echo "File $f not found"
          return 1
        fi
        p="$n-$v.tar.gz"
        if [ -f $p ]; then
           run_traced "rm -f $p"
        fi
        echo "# $p">$SETUP
        f=
        for i in {2..9}; do
          x=$(echo $PRJPATH|awk -F/ '{print $'$i'}')
          if [ -n "$x" ]; then
            f=$f/$x
            if [ $i -gt 3 ]; then
              echo "mkdir -p $f">>$SETUP
            fi
          fi
        done
        l=${#PKGPATH}
        f=".${PRJPATH:l}"  # subroot
        l=${#f}
        ((l++))
        PASSED=
        x="-cf"
        for f in $PKGLIST; do
          y=$(dirname ./${f:l})
          if [ "$y" != "." ]; then
            y=$(dirname ${f:l})
            if [[ " $PASSED " =~ [[:space:]]$y[[:space:]] ]]; then
              :
            else
              echo "mkdir -p $PRJPATH/$y">>$SETUP
              PASSED="$PASSED $y"
            fi
            y=$y/
          else
            y=
          fi
          run_traced "tar $x $p $f"
          x=${x/c/r}
          # if [ -f "$f" ]; then rm -f $f; fi
          echo "cp -p $f $PKGPATH/$y">>$SETUP
        done
        chmod +x $SETUP
        if [ -x $PRJPATH/setup.sh ]; then
          run_traced "cp $PRJPATH/setup.sh $SETUP"
        fi
        run_traced "tar $x $p $SETUP"
        run_traced "rm -f $SETUP"
      fi
    fi
    return $sts
}

do_check() {
    wlog "do_check \"$1\" \"$2\" \"$3\""
    local sts=$STS_FAILED
    if [ -x $TOOLS_PATH/travis_run_tests ]; then
      local opts=$(inherits_travis_opts "K" "T")
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      please_run_tests "-K"
      sts=$?
    else
      sts=127
    fi
    return $sts
}

do_coverage() {
    wlog "do_coverage \"$1\" \"$2\" \"$3\""
    run_coverage_test
    sts=$?
    return $sts
}

do_commit() {
    opts=$(inherits_travis_opts "C" "D")
    opt_dry_run=0
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}

do_diff() {
    wlog "do_diff \"$1\" \"$2\" \"$3\""
    local opt_diff=1
    local opts=$(inherits_travis_opts "" "D")
    run_traced "dist_pkg $opts $PKGNAME"
    return $?
}

do_distribution() {
# do_distribution(PKGNAME oca|zero|oia parent)
    wlog "do_distribution $1 $2 $3"
    local sts=$STS_SUCCESS
    local currpt=zero
    local ORIG=
    local f f1 x
    local PD=.
    if [ ${test_mode:-0} -ne 0 ]; then
      if [ -d res ]; then
        PD=res
      elif [ -d tests/res ]; then
        PD=tests/res
      fi
    fi
    if [ -n "$3" ]; then
      local travis_passed=1
      if [ -d $3/tmp ]; then
        ORIG=$3/tmp
      elif [ -d ~/original/$1 ]; then
        ORIG=~/original/$1
      fi
    else
      local travis_passed=0
    fi
    if [ -f .gitrepname ]; then
      currpt=$(grep "^repository" .gitrepname|awk -F= '{print $2}'|tr -d " ")
    fi
    local gitprj=$(build_pkgurl $1 $2 RUPSTREAM)
    if [ -z "$gitprj" ]; then
      gitprj=$(build_pkgurl $1 $2 RORIGIN)
    fi
    if [ $travis_passed -eq 0 ]; then
      if [ $opt_orig -gt 0 ]; then
        if [ -z "$gitprj" ]; then
          echo "git project not found!"
          sts=$STS_FAILED
        else
          run_traced "git clone $gitprj tmp -b $BRANCH --depth 1 --single-branch"
          ORIG=$(readlink -e tmp)
        fi
      else
        if [ -d ~/original ]; then rm -fR -d ~/original; fi
        if [ -n "$gitprj" ]; then
          run_traced "git clone $gitprj ~/original/$1 -b $BRANCH --depth 1 --single-branch"
          ORIG=$(readlink -e ~/original/$1)
        fi
      fi
    fi
    # echo "> if [ \$travis_passed=$travis_passed -eq 0 ]; then" #debug
    if [ $travis_passed -eq 0 ]; then
      # echo ">   cvt_gitmodule $2 $currpt" #debug
      cvt_gitmodule "$2" "$currpt"
      if [ $sts -eq $STS_SUCCESS ]; then
        f1=oca_dependencies.txt
        # echo ">   cvt_file $f1 $2 '' $currpt" #debug
        cvt_file $f1 $2 "" "$currpt" "$ORIG"
        sts=$?
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        f1=$(findpkg ".travis.yml" "$PD ..")
        if [ -n "$f1" ]; then
          # echo ">   cvt_file $f1 $2 travis $currpt" #debug
          cvt_file $f1 $2 "travis" "$currpt" "$ORIG"
          sts=$?
        fi
      fi
    fi
    local PKGS=
    # echo "> for f in \$(find $PD -type f -name __openerp__.py -o -name __manifest__.py -o -name 'README*'); do" #debug
    for f in $(find $PD -type f -name __openerp__.py -o -name __manifest__.py -o -name "README*"); do
      x=$(dirname $f)
      # echo ">   if [ $x == '.' ]; then #f=$f" #debug
      if [ "$x" == "." ]; then
        if [ ${test_mode:-0} -eq 0 -a ! -f LICENSE ]; then
          run_traced "cp ~/agpl.txt LICENSE"
        fi
        if [ $sts -ne $STS_SUCCESS ]; then
          break
        fi
        if [ $opt_orig -gt 0 -a -n "$ORIG" -a -f "ORIG/$f" ]; then
          run_traced "cp -p ORIG/$f $f"
        fi
        if [ "$f" == "./__openerp__.py" -o "$f" == "./__manifest__.py" ]; then
          f1=$(readlink -e $f)
          # echo ">   cvt_file $f1 $2 manifest $currpt" #debug
          cvt_file $f1 $2 "manifest" "$currpt" "$ORIG"
          sts=$?
          if [ $sts -ne $STS_SUCCESS ]; then
            break
          fi
        elif [ "$f" == "./README.md" -o "$f" == "./README.rst" -o "$f" == "./README" ]; then
          f1=$(readlink -e $f)
          x=$(basename $f1)
          if [ $opt_orig -gt 0 -a -n "$ORIG" -a -f "ORIG/$x" ]; then
            run_traced "cp -p ORIG/$x $f1"
          fi
          # echo ">   cvt_file $f1 $2 readme $currpt" #debug
          cvt_file $f1 $2 "readme" "$currpt" "$ORIG"
          sts=$?
          if [ $sts -ne $STS_SUCCESS ]; then
            break
          fi
        fi
        travis_passed=1
      else
        x=$(readlink -e $f)
        f1=$(dirname $x)
        if [[ $PKGS =~ $f1 ]]; then
          :
        else
          PKGS="$PKGS $f1"
        fi
      fi
    done
    local CCWD=$PWD
    # echo "> for f in $PKGS; do" #debug
    for f in $PKGS; do 
      if [ $sts -ne $STS_SUCCESS ]; then
        break
      fi
      local PKG=$(basename $f)
      cd $f
      revaluate_travis
      # echo "<<$PKG||$REPOSNAME|$PRJNAME|$PRJPATH|$PKGNAME|$PKGPATH>>" #debug
      do_distribution $PKG $2 "$CCWD"
      sts=$?
    done
    cd $CCWD
    revaluate_travis
    if [ $sts -eq $STS_SUCCESS -a -z "$3" ]; then
      if [ -f .gitignore ]; then
        if ! grep -q "\.gitrepname" .gitignore 2>/dev/null; then
          echo ".gitrepname">>.gitignore
        fi
      fi
      if [ -z "$REPOSNAME" ]; then
        local ro=$(build_pkgurl $1 $2 RORIGIN)
        local lo=$(build_pkgurl $1 $2 URL)
        if [ "$ro" != "$lo" ]; then
          if [ -n "$ro" ]; then
            run_traced "git remote remove origin"
          fi
          if [ -n "$lo" ]; then
            run_traced "git remote add origin $lo"
            run_traced "git remote set-url origin $lo"
          fi
        fi
        local ro=$(build_pkgurl $1 $2 RUPSTREAM)
        local lo=$(build_pkgurl $1 $2 UPSTREAM)
        if [ "$ro" != "$lo" ]; then
          if [ -n "$ro" ]; then
            run_traced "git remote remove upstream"
          fi
          if [ -n "$lo" ]; then
            run_traced "git remote add upstream $lo"
            run_traced "git remote set-url upstream $lo"
          fi
        fi
      fi
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -d tmp -a $opt_keep -eq 0 ]; then
        rm -fR tmp
      fi
      if [ -f .gitrepname ]; then
        if [ "$2" != "$currpt" ]; then
          run_traced "sed -i -e 's:^repository *=.*:repository=$2:' .gitrepname"
        fi
      else
        echo "repository=$2">>.gitrepname
      fi
      restore_owner
    fi
    return $sts
}

do_docs() {
    wlog "do_docs $1"
    local sts=$STS_SUCCESS
    local doxygen_conf
    doxygen_conf=.${1}_doc.conf
    if [ ! -f $doxygen_conf ]; then
      doxygen -g $doxygen_conf
      vim $doxygen_conf
    fi
    # sed -i 's/^GENERATE_LATEX *=*YES/GENERATE_LATEX         = NO/g' $doxygen_conf
    cvt_doxygenconf $doxygen_conf
    run_traced "doxygen $doxygen_conf"
    sts=$?
    if [ $opt_verbose -gt 0 ]; then
      echo ""
      echo -e "Use: \e[1m$THIS publish $1 docs\e[0m"
      echo "     to publish this documentation on docs.zeroincombenze.org/$1"
    fi
    return $sts
}

do_download_rep() {
    wlog "do_download_rep $1"
    local dom full_rep local_rep
    local ORIG=~/original
    if [ -z "$opt_branch" ]; then
      echo "Missed Odoo Version"
      exit 1
    fi
    # dom=$(parse_URL "$1" "" "+DOMAIN")
    # if [ -n "$dom" ]; then
    #   full_rep=$1
    #   local_rep=$(parse_URL "$1" "" "+NAME")
    #   # if [ "${local_rep: -4}" == ".git" ]; then
    #   #    local_rep=${local_rep:0: -4}
    #   # fi
    # else
    full_rep=$(parse_URL "$1" "git@github.com:zeroincombenze/.git" "+ALL")
    local_rep=$(parse_URL "$1" "" "+NAME")
    # fi
    [ -d $ORIG ] || mkdir -p $ORIG
    pushd $ORIG >/dev/null
    [ -d "$local_rep" ] && rm -fR $local_rep/
    run_traced "git clone $full_rep $local_rep/ -b $opt_branch --single-branch"
    popd >/dev/null
}

do_fetch() {
    opts=$(inherits_travis_opts "F" "D")
    opt_dry_run=0
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}

do_push() {
    opts=$(inherits_travis_opts "P" "D")
    opt_dry_run=0
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}

do_pythonhosted() {
    wlog "do_pythonhosted $1 $2 $3"
    sts=$STS_SUCCESS
    if [ -z "$2" ]; then
      echo "Missing URL! use:"
      echo "> please pythonhosted PKGNAME URL"
      return $STS_FAILED
    fi
    local URL=$2
    if [ "${URL: -1}" != "/" ]; then
      local URL=$URL/
    fi
    local TITLE="$3"
    local CWD=$PWD
    run_traced "cd $PKGPATH"
cat <<EOF >index.html
<!DOCTYPE HTML>
   <head>
       <meta http-equiv="refresh" content="0; $URL">
       <script type="text/javascript">
           top.location.href = "$URL"
       </script>
       <title>Redirect</title>
   </head>
   <body>
       Please wait for a moment .. <a href='$URL' $2</a>
   </body>
</html>
EOF
    run_traced "zip -j pythonhosted-$PKGNAME.zip index.html"
    if [ -f index.html ]; then
      rm -f index.html
    fi
    cd $CWD
    if [ -f $PKGPATH/pythonhosted-$PKGNAME.zip ]; then
      echo "Now you can download $PKGPATH/pythonhosted-$PKGNAME.zip in pypi webpage of project"
    fi
    return $sts
}

do_register() {
#do_register PKGNAME (pypi|testpypi)
    wlog "do_register $1 $2"
    local cmd="do_register_$2"
    sts=$STS_SUCCESS
    if [ "$(type -t $cmd)" == "function" ]; then
      eval $cmd "$@"
    else
      echo "Missing object! Use:"
      echo "> please register PKGNAME (pypi|testpypi)"
      sts=$STS_FAILED
    fi
    return $sts
}

do_replace() {
    opts=$(inherits_travis_opts "R" "D")
    opt_dry_run=0
    run_traced "dist_pkg $opts $1"
    sts=$?
    return $sts
}

do_synchro() {
    wlog "do_synchro $1 $2 \"$3\""
    local f opts
    if [ "$2" == "oca" -o "$2" == "zero-merged" ]; then
      if [ "$PRJNAME" == "Odoo" ]; then
        clean_dirs "$PKGPATH"
        run_traced "git checkout $BRANCH"
        do_distribution "$PKGNAME" "oca"
        git status
        git remote -v
        run_traced "git pull --no-edit upstream $BRANCH"
        if [ "$2" == "zero-merged" ]; then
          do_distribution "$PKGNAME" "zero"
        fi
        for f in $(find $PKGPATH -type f -not -name "*.png" -exec grep -l ">>>>" '{}' \;); do
          echo "Warning: see file $f"
        done
      fi
    elif [ "$2" == "zeroincombenze" -o "$2" == "zero" -o "$2" == "oia" ]; then
      if [ "$PRJNAME" == "Odoo" ]; then
        clean_dirs "$PKGPATH"
        run_traced "git checkout $BRANCH"
        do_distribution "$PKGNAME" "$2"
        local x=($git status -s)
        if [ -n "$x" ]; then
          if [ -n "$3" ]; then
            run_traced "git commit -am \"$3\""
          elif [ $opt_diff -ne 0 ]; then
            run_traced "git commit -am \"[SYNCHRO] Update documentation\""
          else
            run_traced "git commit -am \"[SYNCHRO] Synchronizing against OCA repository\""
          fi
        fi
        opts=
        if [ $opt_force -ne 0 ]; then
          if [ "$2" == "oia" -a $opt_dprj -gt 0 ]; then
            opts="-f --all"
          else
            opts=-f
          fi
        fi
        local ro=$(build_pkgurl $1 $2 RORIGIN)
        run_traced "git push $opts $ro"
        restore_owner
        git remote -v
        git status
      fi
    else
      echo "Missed parameter! use:"
      echo "\$ please synchro PKGNAME|. oca|zeroincombenze|zero|oia|zero-merged"
      sts=$STS_FAILED
    fi
}

do_test() {
    wlog "do_test"
    local sts=$STS_FAILED
    if [ -x $TOOLS_PATH/travis_run_tests ]; then
      local opts=$(inherits_travis_opts "T" "T")
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      please_run_tests "-T"
      sts=$?
    else
      test_sts=$STS_FAILED
      sts=$test_sts
    fi
    return $sts
}

do_travis() {
    wlog "do_travis \"$1\" \"$2\" \"$3\""
    if [ $opt_r -gt 0 ]; then
      please_run_tests "-KT"
    else
      opts=$(inherits_travis_opts "c" "E")
      if [ -n "$opts" ]; then
        travis "$opts" "$@"
      else
        travis "$@"
      fi
    fi
    sts=$?
    return $sts
}

do_version() {
    cd $PKGPATH; $DEVPATH/dist_pkg -- $PKGNAME $PRJNAME;
    if [ "$PRJNAME" != "Odoo" ]; then
      echo "Project $PRJNAME V$prjversion [$PKGNAME] answer:";
      cd $PKGPATH; PYTHONPATH=$PKGPATH python $PRJNAME;
    else
      echo "Project $PRJNAME V$BRANCH [$PKGNAME $prjversion]";
    fi;
}


OPTOPTS=(h        b          c        d        f         j        k        L         m       n           O        p         q           r     s        t         u       V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_diff opt_force opt_dprj opt_keep opt_log   opt_mis opt_dry_run opt_orig opt_dpath opt_verbose opt_r opt_srcs test_mode opt_uop opt_version opt_verbose)
OPTACTI=(1        "="        "="      1        1         1        1        "="       1       1           1        "="       0           1     "="      1         1       "*"         "+")
OPTDEFL=(1        "10.0"     ""       0        0         0        0        ""        0       0           0        ""        -1          0     ""       0         0       ""          -1)
OPTMETA=("help"   "branch"   "file"   "diff"   ""       "dprj"   "keep"   "logfile" ""      "noop"      ""       "path"    "quiet"     "rxt" "files"  "test"    "uop"   "version"   "verbose")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "branch: must be 6.1 7.0 8.0 9.0 or 10.0 (def 10.0)"\
 "configuration file (def .travis.conf)"\
 "do diff no real action (obsolete)"\
 "force copy (of commit/push) or build (of register/publish) or dup doc (of distribution/synchro)"\
 "execute tests in project dir rather in test dir/old style synchro"\
 "keep coverage statistics in annotate test/keep original repository or tests/ in publish"\
 "log file name"\
 "show missing line in report coverage"\
 "do nothing (dry-run)"\
 "pull original README (and docs) in distribution"\
 "declare local git path"\
 "silent mode"\
 "run rescricted mode (w/o parsing travis.yml file)"\
 "files to include in annotate test"\
 "test mode (implies dry-run)"\
 "check for unary operator W503 or no OCA/zero module translation"\
 "show version end exit"\
 "verbose mode")
OPTARGS=(action pkg sub1 sub2 sub3)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
HLPCMDLIST="help|annotate|autopep8|build|check|chkconfig|[if-]commit|config|coverage|diff|distribution|docs|download_rep|[if-]fetch|[if-]push|[if-]replace|publish|pythonhosted|synchro|test|travis|version|wep"
if [ $opt_help -gt 0 ]; then
  print_help "Developer shell\nAction may be on of:\n$HLPCMDLIST"\
  "(C) 2015-2017 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

opts_travis "$pkg"
CFG_init
conf_default
link_cfg $DIST_CONF $TCONF
if [ $opt_verbose -gt 1 ]; then set -x; fi
# Follow code must be executed at main level
set_cfg_def "HTML_SVG_DIR" "/var/www/html/wp-zi/wp-content/uploads/ci-ct"
set_cfg_def "DEV_SVG" "/opt/odoo/dev/svg"
set_cfg_def "HTML_DOCS_DIR" "/var/www/html/mw/html"
set_cfg_def "HTML_DOWNLOAD_DIR" "/var/www/html/mw/download"
# /End Included Block/
link_cfg $TCONF
init_travis
if [ $opt_verbose -gt 1 ]; then set -x; fi
prepare_env_travis "$action" "-r"
sts=$STS_SUCCESS
sts_bash=127
sts_flake8=127
sts_pylint=127
test_sts=127
if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "if-commit" ]; then
  opt_dry_run=1
  do_commit "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "commit" ]; then
  do_commit "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "config" ]; then
  sts=$STS_SUCCESS
  if [ "$sub1" == "global" ]; then
    cfgfn=$TCONF
  elif [ "$sub1" == "repository" ]; then
    cfgfn=$(readlink -m $PKGPATH/../conf/.local_dist_pkg.conf)
  elif [ "$sub1" == "local" ]; then
    cfgfn=$(readlink -m $PKGPATH/conf/.local_dist_pkg.conf)
  elif [ "$sub1" == "current" ]; then
    cfgfn=$DIST_CONF
  elif [ "$sub1" == "zero" -o "$sub1" == "oia" ]; then
    cfgfn=
  else
    echo "Missed parameter! use:"
    echo "\$ please config PKGNAME|. global|repository|local|current|zero|oia [del]"
      sts=$STS_FAILED
  fi
  if [ $sts -eq $STS_SUCCESS ]; then
    if [ -n "$cfgfn" ]; then
      cfgdir=$(dirname $cfgfn)
      if [ "$sub2" == "del" ]; then
        if [ -f $cfgfn ]; then
          run_traced "rm -f $cfgfn"
        fi
        if [ ! -d $cfgfn ]; then
          run_traced "rmdir $cfgdir"
        fi
      elif [ $opt_dry_run -ne 0 ]; then
        echo "vim $cfgfn"
      else
        if [ ! -d $cfgfn ]; then
          run_traced "mkdir -p $cfgdir"
        fi
        run_traced "vim $cfgfn"
      fi
    else
      r="origin_$sub1"
      x=$(git remote|grep $r)
      if [ -z "$x" ]; then
        ro=$(build_pkgurl $PKGNAME $sub1 RORIGIN)
        run_traced "git remote add $r $ro"
        run_traced "git remote set-url --add --push $r $ro"
      fi
    fi
  fi
elif [ "$action" == "coverage" ]; then
  do_coverage "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "if-fetch" ]; then
  opt_dry_run=1
  do_fetch "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "fetch" ]; then
  do_fetch "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "travis" ]; then
  do_travis "$PKGNAME" "$sub1" "$sub2"
  sts=$?
elif [ "$action" == "wep" ]; then
  if [ $opt_verbose -gt 0 ]; then
    echo "clean_dirs \"$PKGPATH\""
  fi
  clean_dirs "$PKGPATH"
else
  if [ "${action:0:3}"  == "if-" ]; then
    opt_dry_run=1
    cmd="do_${action:3}"
  else
    cmd="do_$action"
  fi
  if [ "$(type -t $cmd)" == "function" ]; then
    eval $cmd "$PKGNAME" "'$sub1'" "'$sub2'" "'$sub3'"
    sts=$?
  else
    echo "Invalid action!"
    echo "Use $THIS $HLPCMDLIST"
    sts=$STS_FAILED
  fi
fi
exit $sts
