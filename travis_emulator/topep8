#! /bin/bash
# Update source python file to pep8 standard
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com

THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/clodoo $HOME/dev" "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/travis_emulator $HOME/dev" "travis_emulator")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR

__version__=0.2.1.13
LIST_REQ=~/dev/pypi/lisa/lisa/list_requirements.py
YAML_TMPL=~/dev/pypi/maintainer-quality-tools/maintainer-quality-tools/sample_files/.travis.yml


format_yaml() {
    local fn=$1
    if [ -f $fn ]; then
      local fntmp=$fn.new
      if [ $opt_z -ne 0 ]; then
        local fntmpl=$YAML_TMPL
      else
        local fntmpl=$fn
      fi
      rm -f $fntmp
      local a f line lne p cur_sect=
      declare -A found
      f=$(readlink -e $fn)
      p=$(dirname $f)
      while IFS= read -r line || [ -n "$line" ]; do
        if [ -n "$odoo_vid" ]; then
          line=${line/\$TRAVIS_BRANCH/$odoo_fver}
        fi
        lne=$(echo $line)
        if [[ "$cur_sect" == "odoo_repo" && ! "$lne" =~ "- TESTS=... ODOO_REPO=" ]]; then
          if [ $opt_ut7 -eq 0 ]; then
            echo "  - TESTS=\"1\" ODOO_REPO=\"\$TRAVIS_REPO_SLUG\"">>$fntmp
          else
            echo "  - TESTS=\"1\" ODOO_REPO=\"zeroincombenze/OCB\"">>$fntmp
          fi
          cur_sect=
        fi
        if [ -z "$line" ]; then
          if [ "$cur_sect" == "before_install" ]; then
            if [[ ! ${found[before_install_zero]} == "t" ]]; then
              echo "  # Use Zeroincombenze(R) tools">>$fntmp
              echo "  - git clone https://github.com/zeroincombenze/tools.git \${HOME}/tools --single-branch --depth=1">>$fntmp
              echo "  - mv \${HOME}/tools/maintainer-quality-tools \${HOME}">>$fntmp
              echo "  - export PATH=\${HOME}/maintainer-quality-tools/travis:\${PATH}">>$fntmp
            fi
            cur_sect=
          elif [ "$cur_sect" == "install" ]; then
            if [[ ! ${found[exclude]} == "t" ]]; then
              echo "  - export EXCLUDE=hw_scanner,hw_escpos,document_ftp,delivery,stock_invoice_directly,claim_from_delivery">>$fntmp
            fi
            if [[ ! ${found[include]} == "t" ]]; then
              if [ $opt_ut7 -eq 0 ]; then
                if [  $odoo_ver -ge 10 ]; then
                  echo "  - export INCLUDE=\$(getaddons.py -m \${HOME}/build/\${ODOO_REPO}/odoo/addons \${HOME}/build/\${ODOO_REPO}/addons)">>$fntmp
                else
                  echo "  - export INCLUDE=\$(getaddons.py -m \${HOME}/build/\${ODOO_REPO}/openerp/addons \${HOME}/build/\${ODOO_REPO}/addons)">>$fntmp
                fi
              fi
            fi
          elif [ "$cur_sect" == "addons" ]; then
            cur_sect=
          fi
          echo "$line">>$fntmp
        # elif [[ -z "$cur_sect" && ! "$lne" =~ "# Odoo yaml template for travis-ci" ]]; then
        #   echo "# Odoo yaml file for travis-ci $__version__">>$fntmp
        # elif [[ -z "$cur_sect" && ! "$lne" =~ "# __version__=" ]]; then
        #   :
        # elif [[ -z "$cur_sect" && ! "$lne" =~ "# Odoo yaml file for travis-ci" ]]; then
        #   echo "# Odoo yaml file for travis-ci $__version__">>$fntmp
        elif [[ "$lne" =~ "- TESTS=... ODOO_REPO=.zeroincombenze/OCB." ]]; then
          found[repo_zero]="t"
          cur_sect="odoo_repo"
          if [ "$PKGNAME" != "OCB" ]; then
            echo "$line">>$fntmp
          fi
        elif [[ "$ine" =~ "- TESTS=... ODOO_REPO=.OCA/OCB." ]]; then
          found[repo_oca]="t"
          cur_sect="odoo_repo"
          if [ "$PKGNAME" != "OCB" ]; then
            echo "$line">>$fntmp
          fi
        elif [[ "$lne" =~ "- TESTS=... ODOO_REPO=.odoo/odoo." ]]; then
          found[repo_odoo]="t"
          cur_sect="odoo_repo"
          if [ "$PKGNAME" != "OCB" ]; then
            echo "$line">>$fntmp
          fi
        elif [[ "$lne" =~ "# Use Zeroincombenze(R) tools" ]]; then
          found[before_install_zero]="t"
          echo "$line">>$fntmp
        elif [[ "$lne" =~ "git clone https://github.com/zeroincombenze/tools.git" ]]; then
          found[before_install_zero]="t"
          echo "$line">>$fntmp
        elif [[ $lne =~ "- pip install urllib3[secure] --upgrade" ]]; then
          :
        elif [[ $lne =~ "- export TRAVIS_DEBUG_MODE=..." ]]; then
          :
        elif [[ "$lne" =~ "- ln -s .*/build/.*ODOO_REPO.*VERSION" ]]; then
          :
        elif [[ "$lne" =~ "- .*export DISPLAY=:99.0" ]]; then
          :
        elif [[ "$lne" =~ "- .*sh -e /etc/init.d/xvfb start" ]]; then
          :
        elif [[ "$lne" =~ "- export EXCLUDE=" ]]; then
          found[exclude]="t"
          echo "$line">>$fntmp
        elif [[ "$lne" =~ "- export INCLUDE=" ]]; then
          found[include]="t"
          echo "$line">>$fntmp
        elif [[ "$lne" =~ "- TRANSIFEX=..." ]]; then
          :
        elif [[ "$lne" =~ "- travis_install_nightly" ]]; then
          echo "# $line">>$fntmp
        elif [[ "$lne" =~ "- LINT_CHECK=..." ]]; then
          line=$(line/1/0)
          echo "$line">>$fntmp
        elif [[ "$lne" == "- pip install -r .*/maintainer-quality-tools/requirements.txt" ]]; then
          echo "# $line">>$fntmp
        elif [ "$cur_sect" == "addons" ]; then
          if [ "$lne" == "packages:" ]; then
            echo "$line">>$fntmp
            for a in $(list_requirements.py -p"$p" -tbin -q -s' ' -BT); do
              if [ "$a" != "wkhtmltopdf" ]; then
                echo "      - $a">>$fntmp
              fi
            done
          elif [ "${lne:0:2}" != "- " ]; then
            echo "$line">>$fntmp
          fi
        elif [ "$line" == "before_install:" ]; then
          cur_sect=${line:0: -1}
          echo "$line">>$fntmp
          if [ $opt_debug -ne 0 ]; then
            echo "  - export TRAVIS_DEBUG_MODE=\"1\"">>$fntmp
          else
            echo "  - export TRAVIS_DEBUG_MODE=\"0\"">>$fntmp
          fi
          echo "  - pip install urllib3[secure] --upgrade; true">>$fntmp
          if [ "$PKGNAME" == "OCB" ]; then
            echo "  - \"export DISPLAY=:99.0\"">>$fntmp
            echo "  - \"sh -e /etc/init.d/xvfb start\"">>$fntmp
          fi
        elif [ "$line" == "install:" ]; then
          cur_sect=${line:0: -1}
          echo "$line">>$fntmp
        elif [ "$line" == "env:" ]; then
          cur_sect=${line:0: -1}
          echo "$line">>$fntmp
        elif [ "$line" == "addons:" ]; then
          cur_sect=${line:0: -1}
          echo "$line">>$fntmp
        elif [ "$line" == "script:" ]; then
          cur_sect=${line:0: -1}
          echo "$line">>$fntmp
        else
          echo "$line">>$fntmp
        fi
      done < "$fntmpl"
    fi
}

format_xml() {
    local fn=$1
    local empty=0
    if [ -f $fn ]; then
      local fntmp=$fn.new
      rm -f $fntmp
      local line lne lm level o c k x nxtlm lm1 comment
      comment=0
      act=0
      nxtlm=0
      level=0
      while IFS= read -r line || [ -n "$line" ]; do
        lne=$(echo $line)
        if [ $comment -eq 0 ]; then
          line=
          lm1=$nxtlm
          lm=
          x=$((level*4))
          [ $x -eq 0 ]||eval printf -v lm '%.s\\x20' {1..$x}
        fi
        if [ "${lne:0:3}" == "-->" ]; then
          # line="$lm$lne"
          comment=0
        elif [ $comment -ne 0 ]; then
          :
        elif [ "${lne:0:6}" == "<?xml " ]; then
          level=0
          line="$lne"
        elif [ "${lne:0:9}" == "<openerp>" -o "${lne:0:10}" == "</openerp>" ]; then
          level=0
          if [  $odoo_ver -ge 10 ]; then
            line="${lne//openerp/odoo}"
          else
            line="$lne"
          fi
        elif [ "${lne:0:9}" == "<odoo>" -o "${lne:0:10}" == "</odoo>" ]; then
          level=0
          if [  $odoo_ver -lt 10 ]; then
            line="${lne//odoo/openerp}"
          else
            line="$lne"
          fi
        elif [ "${lne:0:4}" == "<!--" ]; then
          line="$lm$lne"
          if [ "${lne: -3}" != "-->" ]; then
            nxtlm=${#lm}
            # let nxtlm="$nxtlm+4"
            comment=1
          fi
        elif [ "${lne:0:10}" == "<templates" ]; then
          if [ $level -gt 0 ]; then
            ((level++))
          fi
        else
          o=$(echo $lne|grep -Eo "<[a-zA-Z0-9-]+"|wc -l)
          c=$(echo $lne|grep -Eo "</[a-zA-Z0-9-]+"|wc -l)
          k=$(echo $lne|grep -Eo "/>"|wc -l)
          let c="$c+$k"
          if [ $o -gt $c ]; then
            ((level++))
          elif [ $c -gt $o ]; then
            if [ $level -gt 0 ]; then
              ((level--))
              lm=
              x=$((level*4))
              [ $x -eq 0 ]||eval printf -v lm '%.s\\x20' {1..$x}
            fi
          fi
          if [[ $lne =~ "<record.*model=.ir.actions.act_window." ]]; then
            act=1
          elif [ $act -gt 0 ] && [[ $lne =~ "<field.*name=.type.*>ir.actions.act_window.*/field" ]]; then
            line=
            lne=
            act=0
          fi
        fi
        if [ -z "$line" ]; then
          if [ -z "$lne" ]; then
            line="$lne"
          elif [ "${lne:0:1}" == "<" ]; then
            line="$lm$lne"
            x=$(echo "$line"|grep -Eo "[[:space:]]*<[a-zA-Z0-9-]+[[:space:]]*")
            nxtlm=${#x}
          else
            lm=
            [ $lm1 -eq 0 ]||eval printf -v lm '%.s\\x20' {1..$lm1}
            line="$lm$lne"
          fi
        fi
        echo "$line">>$fntmp
        [ -z "$line" ] && empty=1 || empty=0
      done < "$fn"
    fi
    [ $empty -eq 0 ] && echo "">>$fntmp
}


FCONF=$TDIR/.$THIS.conf

# main
OPTOPTS=(h        a        A       B         b         c         d        G       i       n            o       q           u       V           v           0)
OPTDEST=(opt_help opt_aggr opt_oia opt_debug odoo_vid  opt_Camel opt_diff opt_gpl opt_imp opt_dry_run  opt_out opt_verbose opt_ut7 opt_version opt_verbose opt_z)
OPTACTI=(1        "+"      1       1         "="       1         1        1       1       1            "="     0           1       "*>"        "+"         1)
OPTDEFL=(1        0        0       0         ""        0         0        0       0       0            ""      -1          0       ""          -1          0)
OPTMETA=("help"   "aggres" "bug"   ""        "version" "camel"  "diff"   ""       ""      "do nothing" "file"  "silent"   "ut7"   "version"    "verbose"   "")
OPTHELP=("this help"\
 "enable non-whitespace changes (may issue multiple -a)"\
 "add Odoo Ialia Associazione Copyright"\
 "activate debug statements"\
 "odoo branch; may be 6.1 7.0 8.0 9.0 10.0 or 11.0"\
 "change class name to CamelCase"\
 "show diff"\
 "Write AGPL info into header"\
 "sort import statements"\
 "do nothing (dry-run)"\
 "output filename, leave source unchanged rather than source becomes .bak"\
 "silent mode"\
 "update unit test source to odoo<8.0 or create yaml old style"\
 "show version"\
 "verbose mode"\
 "create yaml file from zero")
OPTARGS=(pathname basename)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "PEP8 source python file\nfull path name maybe supplied as a single parameter\nor with two separated values (dir + basename)"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

opts_travis
CFG_init
conf_default
link_cfg $DIST_CONF $TCONF
if [ $opt_verbose -gt 1 ]; then set -x; fi
init_travis

if [ -d "$pathname" ]; then
  path=$(readlink -f $pathname)
  if [ -z "$basename" ]; then
    selfl="*.py"
  else
    selfl="$basename"
  fi
  optfnd="-type f"
else
  path=$(dirname $pathname)
  path=$(readlink -f $path)
  selfl=$(basename $pathname)
  optfnd="-maxdepth 1 -type f"
fi
if [ -n "$opt_out" ]; then
  opt_out=$(readlink -f $opt_out)
fi
odoo_fver=$(build_odoo_param FULLVER $odoo_vid)
odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
sts=1
HOMEDIR=$PWD
if [ $opt_debug -ne 0 ]; then
  OPTS=-B
else
  OPTS=
fi
if [ $opt_verbose -gt 0 ]; then
  OPTS="$OPTS -v"
else
  OPTS="$OPTS -q"
fi
if [ $opt_gpl -gt 0 ]; then
  OPTS="$OPTS -G"
fi
if [ $opt_oia -gt 0 ]; then
  OPTS="$OPTS -A"
fi
if [ $opt_ut7 -gt 0 ]; then
  OPTS="$OPTS -u"
fi
if [ -n "$odoo_vid" ]; then
  OPTS="$OPTS -b$odoo_fver"
fi
LIST="$(find $path $optfnd -name "$selfl")"
for fl in $LIST; do
  sts=0
  p=$(dirname $fl)
  f=$(basename $fl)
  if [ $opt_verbose -gt 0 ]; then
    echo "Reading $f in $p"
  fi
  cd $p
  if [ "${f: -4}" == ".xml" -o "${f: -4}" == ".xsd" ]; then
    format_xml $f
  elif [ "${f: -4}" == ".yml" ]; then
    format_yaml $f
  else
    mime=$(file -b --mime-type $f)
    if [ "$mime" == "text/x-python" -o "${f: -3}" == ".py" ]; then
      AP8OPTS="--ignore E501"
      if [ $opt_aggr -gt 0 ]; then
        x=$(printf "%${opt_aggr}.${opt_aggr}s" " "|sed y'/ /a/')
        AP8OPTS="$AP8OPTS -$x"
      fi
      if [ $opt_imp -ne 0 ]; then
        isort $f -d > $f.new
        if grep -q "Skipped [0-9]* files" $f.new; then cp $f $f.new; fi
        if [ $opt_z -ne 0 ]; then
          python $TDIR/to_pep8.py $f.new $f.tmp $OPTS
        else
          python $TDIR/topep8.py $f.new $f.tmp $OPTS
        fi
      else
        if [ $opt_z -ne 0 ]; then
          python $TDIR/to_pep8.py $f $f.tmp $OPTS
        else
          python $TDIR/topep8.py $f $f.tmp $OPTS
        fi
      fi
      autopep8 $AP8OPTS $f.tmp|sed 's/ $/\n/'>$f.new
      rm -f $f.tmp
      if [ $opt_Camel -gt 0 ]; then
        oca-autopep8 --select=CW0001 -i $f.new
      fi
      oca-autopep8 --select=CW0002 -i $f.new
      autoflake --imports=openerp,openerp.http.request,openerp.SUPERUSER_ID,openerp.addons.base.ir.ir_qweb,openerp.exceptions.ValidationError,openerp.fields,openerp.api.openerp.models,openerp.osv.fields,openerp.osv.api,telebot,lxml,werkzeug,MySQLdb.cursors,cStringIO.StringIO,werkzeug.utils,pandas.merge,pandas.DataFrame,werkzeug.wsgi.wrap_file,werkzeug.wsgi,werkzeug.wsgi.wrap_file,openerp.exceptions,openerp.tools.DEFAULT_SERVER_DATETIME_FORMAT -i $f.new
    fi
  fi
  if [ -f "$f.new" ]; then
    if [ "$(diff -q $f $f.new)" ]; then
      if [ $opt_dry_run -eq 0 ]; then
        if [ -n "$opt_out" ]; then
          mv $f.new $opt_out
          if [ $opt_diff -gt 0 ]; then
            diff $f $opt_out
          fi
        else
          cp -p $f $f.bak
          mv $f.new $f
          if [ $opt_diff -gt 0 ]; then
            diff $f.bak $f
          fi
        fi
        if [ $opt_verbose -gt 0 ]; then
          echo "File $f in $p converted"
        fi
      else
        if [ $opt_diff -gt 0 ]; then
          diff $f $f.new
        fi
        rm -f $f.new
        if [ $opt_verbose -gt 0 ]; then
          echo "File $f in $p should be converted"
        fi
      fi
    else
      rm -f $f.new
    fi
  fi
done
cd $HOMEDIR
if [ $opt_verbose -gt 0 -a $sts -gt 0 ]; then
  echo "No file found!"
fi
exit $sts
