#! /bin/bash
# Update source python file to pep8 standard
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2017 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com

THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../../z0lib . .. /etc; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
fi

__version__=0.1.14.24


format_xml() {
    local fn=$1
    if [ -f $fn ]; then
      local fntmp=$fn.new
      rm -f $fntmp
      local line lne lm level o c k x nxtlm lm1 comment
      comment=0
      act=0
      nxtlm=0
      level=0
      while IFS= read -r line || [ -n "$line" ]; do
        lne=$(echo $line)
        if [ $comment -eq 0 ]; then
          line=
          lm1=$nxtlm
          lm=
          x=$((level*4))
          [ $x -eq 0 ]||eval printf -v lm '%.s\\x20' {1..$x}
        fi
        if [ "${lne:0:3}" == "-->" ]; then
          # line="$lm$lne"
          comment=0
        elif [ $comment -ne 0 ]; then
          :
        elif [ "${lne:0:6}" == "<?xml " ]; then
          level=0
          line="$lne"
        elif [ "${lne:0:9}" == "<openerp>" -o "${lne:0:10}" == "</openerp>" ]; then
          level=0
          line="$lne"
        elif [ "${lne:0:4}" == "<!--" ]; then
          line="$lm$lne"
          if [ "${lne: -3}" != "-->" ]; then
            nxtlm=${#lm}
            # let nxtlm="$nxtlm+4"
            comment=1
          fi
        elif [ "${lne:0:10}" == "<templates" ]; then
          if [ $level -gt 0 ]; then
            ((level++))
          fi
        else
          o=$(echo $lne|grep -Eo "<[a-zA-Z0-9-]+"|wc -l)
          c=$(echo $lne|grep -Eo "</[a-zA-Z0-9-]+"|wc -l)
          k=$(echo $lne|grep -Eo "/>"|wc -l)
          let c="$c+$k"
          if [ $o -gt $c ]; then
            ((level++))
          elif [ $c -gt $o ]; then
            if [ $level -gt 0 ]; then
              ((level--))
              lm=
              x=$((level*4))
              [ $x -eq 0 ]||eval printf -v lm '%.s\\x20' {1..$x}
            fi
          fi
          if [[ lne =~ "<record.*model=.ir.actions.act_window." ]]; then
            act=1
          elif [ $act -gt 0 ] && [[ lne =~ "<field.*name=.type.*>ir.actions.act_window.*/field" ]]; then
            line=
            lne=
            act=0
          fi
        fi
        # echo "$level)$lne" #debug
        if [ -z "$line" ]; then
          if [ -z "$lne" ]; then
            line="$lne"
          elif [ "${lne:0:1}" == "<" ]; then
            line="$lm$lne"
            x=$(echo "$line"|grep -Eo "[[:space:]]*<[a-zA-Z0-9-]+[[:space:]]*")
            nxtlm=${#x}
          else
            lm=
            [ $lm1 -eq 0 ]||eval printf -v lm '%.s\\x20' {1..$lm1}
            line="$lm$lne"
          fi
        fi
        echo "$line">>$fntmp
      done < "$fn"
      # if [ "$(diff -q $fn $fntmp)" ]; then
      #   run_traced "cp -p $fn $fn.bak"
      #   run_traced "mv $fntmp $fn"
      # else
      #   rm -f $fntmp
      # fi
    fi
}


FCONF=$TDIR/.$THIS.conf

# main
OPTOPTS=(h        a        B         b         c         d        G       n            o       q           u       V           v           0)
OPTDEST=(opt_help opt_aggr opt_debug odoo_ver  opt_Camel opt_diff opt_gpl opt_dry_run  opt_out opt_verbose opt_ut7 opt_version opt_verbose opt_z)
OPTACTI=(1        "+"      1         "="       1         1        1       1            "="     0           1       "*>"        "+"         1)
OPTDEFL=(1        0        0         ""        0         0        0       0            ""      -1          0       ""          -1          0)
OPTMETA=("help"   "aggres" "bug"     "version" "camel"  "diff"   ""       "do nothing" "file"  "silent"   "ut7"   "version"    "verbose"   "")
OPTHELP=("this help"\
 "enable non-whitespace changes (may issue multiple -a)"\
 "activate debug statements"\
 "odoo branch; may be 6.1 7.0 8.0 9.0 or 10.0"\
 "change class name to CamelCase"\
 "show diff"\
 "Write AGPL info into header"\
 "do nothing (dry-run)"\
 "output filename, leave source unchanged rather than source becomes .bak"\
 "silent mode"\
 "update unit test source to odoo<8.0"\
 "show version"\
 "verbose mode"\
 "Undocumented")
OPTARGS=(pathname basename)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "PEP8 source python file\nfull path name maybe supplied as a single parameter\nor with two separated values (dir + basename)"\
  "(C) 2015-2017 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ -d "$pathname" ]; then
  path=$(readlink -f $pathname)
  if [ -z "$basename" ]; then
    selfl="*.py"
  else
    selfl="$basename"
  fi
else
  path=$(dirname $pathname)
  path=$(readlink -f $path)
  selfl=$(basename $pathname)
fi
if [ -n "$opt_out" ]; then
  opt_out=$(readlink -f $opt_out)
fi
sts=1
HOMEDIR=$PWD
if [ $opt_debug -ne 0 ]; then
  OPTS=-B
else
  OPTS=
fi
if [ $opt_verbose -gt 0 ]; then
  OPTS="$OPTS -v"
else
  OPTS="$OPTS -q"
fi
if [ $opt_gpl -gt 0 ]; then
  OPTS="$OPTS -G"
fi
if [ $opt_ut7 -gt 0 ]; then
  OPTS="$OPTS -u"
fi
if [ -n "$odoo_ver" ]; then
  OPTS="$OPTS -b$odoo_ver"
fi
for fl in $(find $path -type f -name "$selfl"); do
  sts=0
  p=$(dirname $fl)
  f=$(basename $fl)
  if [ $opt_verbose -gt 0 ]; then
    echo "Reading $f in $p"
  fi
  cd $p
  if [ "${f: -4}" == ".xml" ]; then
    format_xml $f
  else
    AP8OPTS="--ignore E501"
    if [ $opt_aggr -gt 0 ]; then
      x=$(printf "%${opt_aggr}.${opt_aggr}s" " "|sed y'/ /a/')
      AP8OPTS="$AP8OPTS -$x"
    fi
    if [ $opt_z -ne 0 ]; then
      python $TDIR/to_pep8.py $f $f.tmp $OPTS
    else
      python $TDIR/topep8.py $f $f.tmp $OPTS
    fi
    autopep8 $AP8OPTS $f.tmp|sed 's/ $/\n/'>$f.new
    rm -f $f.tmp
    if [ $opt_Camel -gt 0 ]; then
      oca-autopep8 --select=CW0001 -i $f.new
    fi
    oca-autopep8 --select=CW0002 -i $f.new
    autoflake --imports=openerp,openerp.http.request,openerp.SUPERUSER_ID,openerp.addons.base.ir.ir_qweb,openerp.exceptions.ValidationError,openerp.fields,openerp.api.openerp.models,openerp.osv.fields,openerp.osv.api,telebot,lxml,werkzeug,MySQLdb.cursors,cStringIO.StringIO,werkzeug.utils,pandas.merge,pandas.DataFrame,werkzeug.wsgi.wrap_file,werkzeug.wsgi,werkzeug.wsgi.wrap_file,openerp.exceptions,openerp.tools.DEFAULT_SERVER_DATETIME_FORMAT -i $f.new
  fi
  if [ "$(diff -q $f $f.new)" ]; then
    if [ $opt_dry_run -eq 0 ]; then
      if [ -n "$opt_out" ]; then
        mv $f.new $opt_out
        if [ $opt_diff -gt 0 ]; then
          diff $f $opt_out
        fi
      else
        cp -p $f $f.bak
        mv $f.new $f
        if [ $opt_diff -gt 0 ]; then
          diff $f.bak $f
        fi
      fi
      if [ $opt_verbose -gt 0 ]; then
        echo "File $f in $p converted"
      fi
    else
      if [ $opt_diff -gt 0 ]; then
        diff $f $f.new
      fi
      rm -f $f.new
      if [ $opt_verbose -gt 0 ]; then
        echo "File $f in $p should be converted"
      fi
    fi
  else
    rm -f $f.new
  fi
done
cd $HOMEDIR
if [ $opt_verbose -gt 0 -a $sts -gt 0 ]; then
  echo "No file found!"
fi
exit $sts
