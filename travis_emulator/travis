#! /bin/bash
# -*- coding: utf-8 -*-
#
# Travis-ci emulator
# Emulate travis-ci on local machine, to test before upgrade git project
# Deploy:
# ~/dev                          -> this script
# ~/dev/_travis                  -> default script (travis_install_pkgs, travis_runs_tests, travis_after_tests_success)
# ~/maintainer-quality-tools -> actual scripts, mainly for Odoo environment by OCA; thery replaces default scripts
# When developping travis emulator itself, deployment is:
# ~/dev/pypi/travis_em/travis_em -> this script
# ~/dev/pypi/travis_em/travis_em/_travis -> default script (travis_install_pkgs, travis_runs_tests, travis_after_tests_success)
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -f $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -f ./z0librc ]; then
. ./z0librc
elif [ -f ~/z0librc ]; then
. ~/z0librc
else
. /etc/z0librc
fi
if [ -f $TDIR/travisrc ]; then
. $TDIR/travisrc
elif [ -f $TDIR/../travisrc ]; then
. $TDIR/../travisrc
elif [ -f ./travisrc ]; then
. ./travisrc
elif [ -f ~/travisrc ]; then
. ~/travisrc
else
  echo "Library file travisrc not found!"
  exit $STS_FAILED
fi

__version__=0.1.35


process_local () {
    if [ $TOOLS_PATH/travis_run_tests ]; then
      if [ "$action" == "check" ]; then
        opts=$(inherits_travis_opts "Cnrv")
      elif [ "$action" == "test" ]; then
        opts=$(inherits_travis_opts "Rnrv")
      else
        opts=$(inherits_travis_opts "CRnrv")
      fi
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      if [ "$action" == "test" ]; then
        please_run_tests "-R"
        sts=$?
      elif [ "$action" == "check" ]; then
        please_run_tests "-C"
        sts=$?
      else
        please_run_tests "-CR"
        sts=$?
      fi
    else
      sts=127
    fi
    if [ $sts -eq $STS_SUCCESS -a "$action" != "check" -a "$action" != "test" ]; then
      run_traced $TOOLS_PATH/travis_after_tests_success
      if [ $? -ne 0 ]; then sts=$?; fi
    fi
    return $sts
}

process_yaml () {
    f1=$PRJPATH/.travis.yml
    if [ -f $f1 ]; then
      local SCRIPTS=
      local SET_GBLS="TOOLS_PATH=$TOOLS_PATH"
      local lev=0
      local ident=0
      local line=
      local ln=
      local sect=
      local i
      local a
      local b
      while IFS=\~ read -r line; do
        if [[ $line =~ ^# ]]; then
          line=
        elif [[ $line =~ ^[[:space:]]+ ]]; then
          for i in {0..10};do if [ "${line:i:1}" != " " ]; then break; fi; done
          if [ $i -gt $ident ]; then
            ((lev++))
            ident=$i
          elif [ $i -lt $ident ]; then
            ((lev-))
            ident=$i
          fi
        else
          lev=0
          ident=0
        fi
        ln=$(echo $line)
        if [ $lev -eq 0 ]; then
          IFS=: read a b <<<"$ln"
          if [ "$a" == "script" ]; then
            sect=$a
          elif [ "$a" == "env" ]; then
            sect=$a
          else
            sect=
          fi
        elif [ $lev -eq 1 ]; then
          IFS=: read a b <<<"$ln"
          if [ "$sect" == "env" ]; then
            if [ "$a" == "global" ]; then
              sect="$sect.$a"
            fi
          else
            IFS=- read a b <<<"$ln"
            if [ "$sect" == "script" ]; then
              SCRIPTS="$SCRIPTS \"$(echo $b)\""
            elif [ "$sect" == "env.global" ]; then
              if [ "${b:0:8}" == " VERSION" ]; then
                SET_GBLS="$SET_GBLS $(echo $b)"
              fi
            fi
          fi
        fi
      done < "$f1"
      sts=0
      export $SET_GBLS
      for ln in $SCRIPTS; do
        line=$(echo $ln)
        if [ $opt_verbose -gt 0 ]; then
          echo "TOOLS_PATH=$TOOLS_PATH LINT_CHECK="1" TESTS="1" $line"
        fi
        TOOLS_PATH=$TOOLS_PATH LINT_CHECK="1" TESTS="1" eval $line
      done
    else
      process_local
      sts=$?
    fi
    return $sts
}


OPTOPTS=(h        b          c        n            r     V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_dry_run  opt_r opt_version opt_verbose)
OPTACTI=(1        "="        "="      "1>"         "1"   "*>"        1)
OPTDEFL=(1        9.0        ""       0            0     ""          0)
OPTMETA=("help"   "branch"   "file"   "do nothing" "res" "version"   "verbose")
OPTHELP=("this help"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file"\
 "do nothing (dry-run)"\
 "run rescricted mode (w/o maintainer-quality-tools)"\
 "show version"\
 "verbose mode")
OPTARGS=(pkg action)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_help -gt 0 ]; then
  print_help "Travis-ci emulator for local developer environment\nAction may be: check, test, all (default), setup or chkconfig"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

if [ -z "$action" ]; then action=all; fi
opts_travis
$(init_cfg)
$(active_cfg)
conf_default
link_cfg $TCONF
init_travis
if [ $opt_verbose -gt 1 ]; then set -x; fi
prepare_env_travis "$action"
sts=$STS_SUCCESS

if [ "$action" != "check" -a "$action" != "test" -a "$action" != "all" -a "$action" != "setup" -a "$action" != "chkconfig" ]; then
  echo "Invalid action!"
  echo "action should be one of check, test, all, setup or chkconfig"
  exit $STS_FAILED
fi

if [ "$action" == "setup" ]; then
  opt_r=0
  DEF_DEVPATH=$(readlink -f ~/dev)
  if [ ! -d $DEF_DEVPATH ]; then
    run_traced mkdir -p $DEF_DEVPATH
  fi
  if [ ! -d $DEF_DEVPATH/_travis ]; then
    run_traced  mkdir -p $DEF_DEVPATH/_travis
  fi
  if [ ! -d $DEF_DEVPATH/_travis/cfg ]; then
    run_traced mkdir -p $DEF_DEVPATH/_travis/cfg
  fi
  if [ "$TDIR" != $DEF_DEVPATH ]; then
    run_traced cp $TDIR/$THIS $DEF_DEVPATH/$THIS
    for f in travis_install_pkgs travis_run_tests travis_after_tests_success; do
      run_traced cp $TDIR/_travis/$f $DEF_DEVPATH/_travis/$f
    done
  fi
  exit $STS_SUCCESS
elif [ "$action" == "chkconfig" ]; then
  do_chkconfig
  exit $STS_SUCCESS
fi

check_4_travis
sts=$STS_SUCCESS
#if [ -f $TOOLS_PATH/travis_install_pkgs ]; then
#  run_traced $TOOLS_PATH/travis_install_pkgs
#  if [ $? -ne 0 ]; then sts=$?; fi
#fi
if [ $sts -eq $STS_SUCCESS ]; then
  if [ $opt_r -gt 0 ]; then
    process_local
    sts=$?
  else
    process_yaml
    sts=$?
  fi
fi
exit $sts
