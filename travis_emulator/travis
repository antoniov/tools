#! /bin/bash
# -*- coding: utf-8 -*-
#
# Travis-ci emulator
# Emulate travis-ci on local machine, to test before upgrade git project
# Deploy:
# ~/dev                          -> this script
# ~/dev/_travis                  -> default script (travis_runs_tests, travis_after_tests_success)
# ~/maintainer-quality-tools -> actual scripts, mainly for Odoo environment by OCA; thery replaces default scripts
# When developping travis emulator itself, deployment is:
# ~/dev/pypi/travis_em/travis_em -> this script
# ~/dev/pypi/travis_em/travis_em/_travis -> default script (travis_runs_tests, travis_after_tests_success)
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in "$TDIR" "$TDIR/.." "." ".." "~" "/etc"; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg "travisrc" "$TDIR . .. $HOME/dev $HOME")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.1.76.3


store_cfg_param_value() {
#store_cfg_param_value(tid key value [opt] [section])
    local p
    if [[ $2 =~ ^pip_pkgver__ ]]; then
      if [ -z "$PIPPKGVER" ]; then
        declare -gA PIPPKGVER
      fi
      p=${2:12}
      PIPPKGVER[$p]=$3
    fi
    a_add "$1" "$2" "$3" "$4"
}

process_local() {
    wlog "=== Simulate YAML test ==="
    if [ $TOOLS_PATH/travis_run_tests ]; then
      if [ "$action" == "check" ]; then
        opts=$(inherits_travis_opts "K" "T")
      elif [ "$action" == "test" ]; then
        opts=$(inherits_travis_opts "T" "T")
      else
        opts=$(inherits_travis_opts "KT" "T")
      fi
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      sts=$?
    elif [ $opt_r -gt 0 ]; then
      if [ "$action" == "test" ]; then
        please_run_tests "-T"
        sts=$?
      elif [ "$action" == "check" ]; then
        please_run_tests "-K"
        sts=$?
      else
        please_run_tests "-KT"
        sts=$?
      fi
    else
      sts=127
    fi
    if [ $sts -eq $STS_SUCCESS -a "$action" != "check" -a "$action" != "test" ]; then
      opts=$(inherits_travis_opts "" "A")
      run_traced "$TOOLS_PATH/travis_after_tests_success $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    fi
    return $sts
}

process_yaml_init() {
    YML_sect=
    YML_sect0=
    YML_env=
    YML_global=
    YML_matrix=
    YML_packages=
    YML_install=
    YML_script=
    YML_after=
    for i in {1..9}; do
      declare YML_CMD_DIS_$i=$(get_cfg_value "" "yaml__cmd_dis__$i")
    done
    FH=$(xuname -f)
}


process_yaml_unquote() {
  lne="$(echo $1|sed -e s/\"/%%22/g -e s/\'/%%26/g -e s/\ /%%20/g)"
  echo $lne
}

process_yaml_quote() {
  lne="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g -e s/%%24/\$/g)"
  echo $lne
}

process_yaml_quote_xtl() {
  lne="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g -e s/%%24/\$/g)"
  lne=$(expand_path "$lne")
  echo $lne
}

process_yaml_xtl_pre() {
    local line
    line=$(process_yaml_quote_xtl $1)
    if [ "$action" == "check" ]; then
      line=$(echo "$line"|sed -e s/LINT_CHECK=[\"]0[\"]/LINT_CHECK=\"1\"/g)
      line=$(echo "$line"|sed -e s/BASH_CHECK=[\"]0[\"]/BASH_CHECK=\"1\"/g)
      line=$(echo "$line"|sed -e s/TESTS=[\"]1[\"]/TESTS=\"0\"/g)
    elif [ "$action" == "test" ]; then
      line=$(echo "$line"|sed -e s/LINT_CHECK=[\"]1[\"]/LINT_CHECK=\"0\"/g)
      line=$(echo "$line"|sed -e s/BASH_CHECK=[\"]1[\"]/BASH_CHECK=\"0\"/g)
      line=$(echo "$line"|sed -e s/TESTS=[\"]0[\"]/TESTS=\"1\"/g)
    fi
    echo "$line"
}

process_yaml_do() {
    # echo "[$YML_sect]" #debug
    local a b i
    if [ "${1:0:1}" == " " ]; then
      local lne="${1:1}"
    else
      local lne="$1"
    fi
    if [ "${lne:0:1}" == "\"" -a "${lne: -1}" == "\"" ]; then
      lne=$(process_yaml_unquote "${lne:1: -1}")
    else
      lne=$(process_yaml_unquote "$lne")
    fi
    if [ "$YML_sect" == "python" ]; then
      lne="#"
    elif [ "$YML_sect" == "addons.apt.packages" ]; then
      YML_packages="$YML_packages $lne"
    elif [ "$YML_sect" == "env" ]; then
      YML_env="$YML_env $lne"
    elif [ "$YML_sect" == "env.global" ]; then
      if [ "${lne:0:7}" == "secure:" ]; then
        lne="# $lne"
      else
        YML_global="$YML_global $lne"
      fi
    elif [ "$YML_sect" == "env.matrix" ]; then
      YML_matrix="$YML_matrix $lne"
    elif [ "$YML_sect" == "before_install" ]; then
      YML_before_install="$YML_before_install $lne"
    elif [ "$YML_sect" == "install" ]; then
      YML_install="$YML_install $lne"
    elif [ "$YML_sect" == "script" ]; then
      YML_script="$YML_script $lne"
    elif [ "$YML_sect" == "after_success" ]; then
      YML_after="$YML_after $lne"
    else
      local lne="$(echo $1)"
    fi
    # echo ">>> $lne" #debug
}

process_yaml_0() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect0=$a
          YML_sect="$YML_sect0"
        else
          YML_sect0=
          YML_sect=
          declare YML_$a="$(echo $b)"
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_1() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect1=$a
          YML_sect="$YML_sect0.$YML_sect1"
        else
          if [ "${YML_sect0}__$a" == "virtualenv__system_site_packages" ] && [[ "$b" =~ "true" ]]; then
            TRAVIS_ENVOPTS="$TRAVIS_ENVOPTS --system-site-packages"
          else
            YML_sect1=
            YML_sect="$YML_sect0"
            declare ${YML_sect0}__$a="$(echo $b)"
          fi
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_2() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect2=$a
          YML_sect="$YML_sect0.$YML_sect1.$YML_sect2"
        else
          YML_sect2=
          YML_sect="$YML_sect0.$$YML_sect1"
          declare ${YML_sect0}__${YML_sect1}__$a="$(echo $b)"
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_3() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -z "$a" ]; then
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_file() {
    local YML_FILE=$1
    process_yaml_init
    local lev=0
    local ident=0
    local line=
    local lne=
    local line1=
    local lne1=
    local linex=
    local a b i r
    while IFS="#" read -r line r || [ -n "$line" ]; do
      if [ "${line: -1}" != " " -a -n "$r" ]; then
        line="$line#$r"
        r=
      fi
      if [[ $line =~ ^[[:space:]]+ ]]; then
        for i in {0..10};do if [ "${line:i:1}" != " " ]; then break; fi; done
        if [ $i -gt $ident ]; then
           ((lev++))
           ident=$i
        elif [ $i -lt $ident ]; then
          ((lev--))
          ident=$i
        fi
      else
        lev=0
        ident=0
      fi
      # lne=$(echo $line)
      lne=$(echo ${line//$/%%24})
      if [ $lev -eq 0 ]; then
        process_yaml_0
      elif [ $lev -eq 1 ]; then
        process_yaml_1
      elif [ $lev -eq 2 ]; then
        process_yaml_2
      elif [ $lev -eq 3 ]; then
        process_yaml_3
      fi
    done < "$YML_FILE"
}

process_yaml_before_install() {
    wlog "===== [Before install] ====="
    local sts=$STS_SUCCESS
    local i s line lne X
    X="${PKGNAME}__"
    line=$(get_cfg_value "" "${X}yaml_init_1")
    if [ -z "$line" ]; then
      X=
    fi
    for i in {1..9}; do
      line=$(get_cfg_value "" "${X}yaml_init_$i")
      if [ -n "$line" ]; then
        process_yaml_run_cmd "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
    done
    if [ $sts -eq $STS_SUCCESS ]; then
      for lne in $YML_before_install; do
        process_yaml_run_cmd "$lne"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      for lne in $YML_packages; do
        if [ "$FH" == "RHEL" ]; then
          line="yum install $lne"
        else
          line="apt-get install $lne"
        fi
        process_yaml_run_cmd "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      for lne in $YML_env; do
        line="export $(process_yaml_quote_xtl $lne)"
        run_traced "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
      for lne in $YML_global; do
        line="export $(process_yaml_quote_xtl $lne)"
        run_traced "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
      for lne in UNBUFFER; do
        line=$(get_cfg_value "" "$lne")
        if [ -n "$line" ]; then
          line="export $lne=$line"
          run_traced "$line"
          s=$?; [ ${s-0} -ne 0 ] && sts=$s
        fi
      done
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      for i in {1..9}; do
        line=$(get_cfg_value "" "yaml_before_install_$i")
        if [ -n "$line" ]; then
          process_yaml_run_cmd "$line"
          s=$?; [ ${s-0} -ne 0 ] && sts=$s
        fi
      done
    fi
    return $sts
}

process_yaml_install() {
    wlog "===== [Install] ====="
    local sts=$STS_SUCCESS
    local i s line lne
    for lne in $YML_install; do
      process_yaml_run_cmd "$lne"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    done
    for i in {1..9}; do
      line=$(get_cfg_value "" "yaml_install_$i")
      if [ -n "$line" ]; then
        process_yaml_run_cmd "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
    done
    return $sts
}

process_yaml_before_script() {
    local sts=$STS_SUCCESS
    local line lne lne1
    line="$1"
    lne=$(process_yaml_quote $2)
    if [ "$line" != "$lne" ]; then
       wlog "===== [Before original script $lne] ====="
    else
       wlog "===== [Before script $line] ====="
    fi
    if [ -z "$line" -o "${line:0:1}" == "#" ]; then
      sts=127
    else
      for lne in $YML_global; do
        lne1="export $(process_yaml_quote_xtl $lne)"
        run_traced "$lne1"
      done
      line="export $line"
      run_traced "$line"
    fi
    return $sts
}

process_yaml_after_success() {
    local sts=$STS_SUCCESS
    local i
    local s
    local line
    local line1
    local lne
    for lne in $YML_after; do
      line=$(process_yaml_quote_xtl $lne)
      process_yaml_run_cmd "$lne"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    done
    return $sts
}

process_yaml_run_cmd() {
#process_yaml_run_cmd (cmd)
    local xcmd=$(process_yaml_quote_xtl "$1")
    local c i x s p z sts xtlcmd
    c=$xcmd
    read -r -a x<<<"$xcmd"
    if [ ${opt_virt:-0} -eq 0 -a "${x[0]}" == "sudo" ]; then
      xcmd="$(echo $xcmd|sed -e 's/sudo //g')"
      read -r -a x<<<"$xcmd"
    fi
    if [ "$FH" == "Debian" -a "${x[0]}" == "yum" ]; then
      xcmd="$(echo $xcmd|sed -e 's/yum /apt-get /g')"
      x[0]="apt-get"
    elif [ "$FH" == "RHEL" -a "${x[0]}" == "apt-get" ]; then
      xcmd="$(echo $xcmd|sed -e 's/apt-get /yum /g')"
      x[0]="yum"
    fi
    if [ "$FH" == "RHEL" -a "${x[0]}" == "yum" -a "${x[2]}" == "python-serial" ]; then
      xcmd="$(echo $xcmd|sed -e 's/python-serial/pyserial/g')"
      x[2]="pyserial"
    elif [ "$FH" == "RHEL" -a "${x[0]}" == "yum" -a "${x[2]}" == "libcups2-dev" ]; then
      xcmd="$(echo $xcmd|sed -e 's/libcups2-dev/cups-devel/g')"
      x[2]="cups-devel"
    elif [ "$FH" == "RHEL" -a "${x[0]}" == "yum" -a "${x[2]}" == "python-yaml" ]; then
      xcmd="$(echo $xcmd|sed -e 's/python-yaml/PyYAML/g')"
      x[2]="PyYAML"
    elif [ "$FH" == "RHEL" -a "${x[0]}" == "yum" -a "${x[2]}" == "python-pypdf" ]; then
      xcmd="$(echo $xcmd|sed -e 's/python-pypdf/pyPdf/g')"
      x[2]="pyPdf"
    elif [ "$FH" == "RHEL" -a "${x[0]}" == "yum" -a "${x[2]}" == "libcups2-devel" ]; then
      xcmd="$(echo $xcmd|sed -e 's/libcups2-devel/cups-devel/g')"
      x[2]="cups-devel"
    elif [ "$FH" == "RHEL" -a "${x[0]}" == "yum" -a "${x[2]}" == "ruby-sass" ]; then
      xcmd="$(echo $xcmd|sed -e 's/ruby-sass/rubygem-sass/g')"
      x[2]="rubygem-sass"
    elif [ "$FH" == "RHEL" -a "${x[0]}" == "yum" -a "${x[2]}" == "python-simplejson" ]; then
      xcmd="$(echo $xcmd|sed -e 's/python-simplejson/python2-simplejson/g')"
      x[2]="python2-simplejson"
    fi
    if [ "${x[0]}" == "yum" -a "${x[1]}" == "install" ]; then
      if [ "$FH" == "RHEL" -a "${x[2]}" == "expect-dev" ]; then
        xcmd="# $xcmd"
      elif [ "$FH" == "RHEL" -a "${x[2]}" == "antiword" ]; then
        xcmd="# $xcmd"
      elif $(rpm -q ${x[2]} &>/dev/null); then
        xcmd="# $xcmd"
      elif $(yum info ${x[2]} &>/dev/null); then
        xcmd="# $xcmd"
      else
        xcmd="false; # Warning! TODO> $xcmd"
      fi
    elif [ "${x[0]}" == "apt-get" -a "${x[1]}" == "install" ]; then
      if $(dpkg-query -s ${x[2]} &>/dev/null); then
        xcmd="# $xcmd"
      else
        xcmd="false; # Warning! TODO> $xcmd"
      fi
    elif [ "${x[0]}" == "git" -a "${x[1]}" == "clone" ]; then
      i=2
      p=${x[$i]}
      while [ "${p:0:1}" == "-" ]; do ((i++)); p=${x[$i]}; done
      if [ "$p" == "https://github.com/zeroincombenze/tools.git" ]; then
        if [ ${opt_virt:-0} -eq 0 ]; then
          xcmd="# $xcmd"
        else
          xcmd="cp -R $TRAVIS_SAVED_HOME/tools $HOME"
        fi
      elif [ "$p" == "https://github.com/OCA/maintainer-quality-tools.git" ]; then
        if [ ! -d $HOME/maintainer-quality-tools ]; then
          local MQT_UPDT="2016-00-00"
        else
          local MQT_UPDT=$(get_cfg_value "" "MQT_UPDT")
        fi
        local curtm=$(date +"%Y-%m-%d")
        if [ "$curtm" == "$MQT_UPDT" ]; then
          xcmd="# $xcmd"
        else
          if [ -d $HOME/maintainer-quality-tools/ ]; then
            run_traced "rm -fR $HOME/maintainer-quality-tools/"
          fi
          if [ "$(grep ^MQT_UPDT $TCONF)" ]; then
            sed -i "s|^MQT_UPDT *=.*|MQT_UPDT=$curtm|" $TCONF
          else
            echo "MQT_UPDT=$curtm">>$TCONF
          fi
        fi
      fi
    elif [ "${x[0]}" == "pip" -a "${x[1]}" == "install" ]; then
      if [ ${opt_virt:-0} -eq 0 ]; then
        i=2
        p=${x[$i]}
        xcmd="# pip install"
        while [ -n "$p" ]; do
          if [ "$p" == "-r" -o "$p" == "--requirement" ]; then
            ((i++))
            z=${x[$i]}
            xcmd="$xcmd -r $z"
            while IFS=# read -r p r || [ -n "$p" ]; do
              if [ -n "$p" ]; then
                if [ "${p:0:4}" == "http" ]; then
                  p=$(basename $p)
                  p=$(echo $p|grep -Eo '[a-zA-Z0-9_]*'|head -n1)
                fi
                p=$(echo "$p"|grep -Eo '[^!<=>\[]*'|head -n1)
                p=${p//\"/}
                if [ "$p" == "transifex-client" ]; then
                  xcmd="$xcmd $p"
                elif $(pip show $p &>/dev/null); then
                  xcmd="$xcmd $p"
                else
                  xcmd="false; $xcmd <$p>"
                fi
              fi
            done < $z
          elif [ "${p:0:1}" != "-" ]; then
            p=$(echo "${x[$i]}"|grep -Eo '[^!<=>]*'|head -n1)
            p=${p//\"/}
            if $(pip show $p &>/dev/null); then
              xcmd="$xcmd $p"
            else
              xcmd="false; $xcmd <$p>"
            fi
          else
            xcmd="$xcmd $p"
          fi
          ((i++))
          p=${x[$i]}
        done
      fi
    elif [ ${opt_virt:-0} -eq 0 -a "${x[0]}" == "ln" -a "${x[1]}" == "-s" -a "${x[2]}" == "/opt/odoo/build/OCA/OCB"  ]; then
      xcmd="# ln -s /opt/odoo/${VERSION} /opt/odoo/${ODOO_REPO#*/}-${VERSION}"
    elif [ ${opt_virt:-0} -eq 0 -a "${x[0]}" == "sh" ]; then
      xcmd="# $xcmd"
    else
      local xlint xtest xtfex xpkg
      if [ -z "$REPOSNAME" ]; then
        local p=$PKGPATH
      else
        local p=$(readlink -e $PRJPATH/../$REPOSNAME/)
      fi
      for i in 0 1 2 3 4 5; do
        if [[ "${x[$i]}" =~ LINT_CHECK=.1. ]]; then
          xlint=1
        elif [[ "${x[$i]}" =~ LINT_CHECK=.0. ]]; then
          xlint=0
        elif [[ "${x[$i]}" =~ TRANSIFEX=.1. ]]; then
          # xtfex=1
          xcmd="# $xcmd"
        elif [[ "${x[$i]}" =~ ODOO_REPO=.odoo/odoo. ]]; then
          xcmd="# $xcmd"
        elif [[ "${x[$i]}" =~ ODOO_REPO=.OCA/OCB. ]]; then
          if [ ${opt_virt:-0} -eq 0 ]; then
            xcmd="$(echo $xcmd|sed -e 's|OCA/OCB|local/odoo|g')"
            x[$i]=local/odoo
          fi
        elif [[ "${x[$i]}" =~ INCLUDE=..getaddons.py.*/opt/odoo/build/OCA/OCB/openerp/addons.*/opt/odoo/build/OCA/OCB/addons ]]; then
          if [ ${opt_virt:-0} -eq 0 ]; then
            xcmd="$(echo $xcmd|sed -e 's|/opt/odoo/build/OCA/OCB/|/opt/odoo/$BRANCH/|g')"
          fi
        else
          for xpkg in travis_install_nightly travis_run_tests travis_after_tests_success; do
            if [ "${x[$i]}" == "$xpkg" ]; then
              if [ "$xlint" != "1" ]; then
                if [ ${opt_virt:-0} -eq 0 ]; then
                  xtlcmd=$(get_cfg_value "" "EM_$xpkg")
                else
                  xtlcmd=$(get_cfg_value "" "RUN_$xpkg")
                fi
                xtlcmd=$(process_yaml_unquote "$xtlcmd")
                if [ -n "$xtlcmd" ]; then
                  xcmd="$(echo $xcmd|sed -e 's|'$xpkg'|'$xtlcmd'|g')"
                  xcmd=$(process_yaml_quote "$xcmd")
                elif [ -z "$p" ] && [[ "$xtlcmd" =~ \$\{ ]]; then
                  xcmd=$(process_yaml_quote "$xcmd")
                  xcmd="# $xcmd"
                fi
                xcmd="$(echo $xcmd|sed -e 's|\${1}|'$p'|g')"
              fi
            fi
          done
        fi
      done
    fi
    if [ "$c" != "$xcmd" -a "${xcmd:0:1}" != "#" ]; then
       wlog "## $c"
    fi
    run_traced "$xcmd"
    return $?
}

process_yaml() {
# process_yaml ()
    local sts=$STS_SUCCESS
    local i s p v X
    local line lne line1 lne1
    if [ "$action" == "chkconfig" ]; then
      YML_FILE=$TOOLS_PATH/chkconfig.yml
      if [ ! -f $YML_FILE ]; then
        do_chkconfig
        return $STS_SUCCESS
      fi
    else
      YML_FILE=$PRJPATH/.travis.yml
      if [ ! -f $YML_FILE ]; then
        YML_FILE=$TOOLS_PATH/travis.yml
      fi
    fi
    if [ -f $YML_FILE ]; then
      wlog "=== Process YAML file ==="
      process_yaml_file "$YML_FILE"
      sts=$STS_SUCCESS
      wlog "===== [System informations] ====="
      if [ -n "${PIPPKGVER[*]}" ]; then
        wlog "\$ PIPPKGVER=\"${!PIPPKGVER[*]}\""
      fi
      for lne in HOSTENV TCONF YML_FILE TOOLS_PATH MQT_PATH DEVPATH PRJNAME PKGNAME REPOSNAME BRANCH PRJPATH PKGPATH; do
         lne1=${!lne}
         if [ -n "$lne1" ]; then
           wlog "\$ $lne=$lne1"
         fi
      done
      wlog "===== [Initialize] ====="
      for p in ${!PIPPKGVER[*]}; do
        lne1=$(pip show $p|grep ^Version|grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)')
        if [ "${PIPPKGVER[$p]}" != "$lne1" ]; then
          wlog "## pip install $p==${PIPPKGVER[$p]}:$lne1"
          sts=1
        fi
      done
      run_traced "# pip install --upgrade --pre --no-deps git+https://github.com/OCA/pylint-odoo.git"
      if [ $sts -eq $STS_SUCCESS ]; then
        v=$(pip --version|grep -Eo [0-9]+|head -n1)
        if [ $v -ge 7 ]; then
          run_traced "alias pip=\"pip --user $USER\""
        fi
        if [ ${opt_virt:-0} -gt 0 ]; then
          create_virtual_env
        fi
        run_svr_test_init
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        process_yaml_before_install
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        process_yaml_install
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        wlog "===== [Script] ====="
        if [ -z "$YML_matrix" ]; then
          YML_matrix=":"
        fi
        for lne in $YML_matrix; do
          if [ "$lne" == ":" ]; then
            line=
          else
            line=$(process_yaml_xtl_pre "$lne")
          fi
          process_yaml_before_script "$line" "$lne"
          s=$?
          if [ $s -ne 127 -a $s -ne $STS_SUCCESS ]; then
            sts=$s
          else
            for lne in $YML_script; do
              process_yaml_run_cmd "$line $lne"
              s=$?; [ ${s-0} -ne 0 ] && sts=$s
            done
          fi
          if [ $sts -ne $STS_SUCCESS ]; then
            elog "!Script aborted by error!!"
            break
          fi
        done
      fi
      wlog "===== [End script] ====="
      run_svr_test_exit
      if [ $sts -eq $STS_SUCCESS ]; then
        process_yaml_after_success
      fi
      X="${PKGNAME}__"
      line=$(get_cfg_value "" "${X}yaml_exit_1")
      if [ -z "$line" ]; then
        X=
      fi
      for i in {1..9}; do
        line=$(get_cfg_value "" "${X}yaml_exit_$i")
        if [ -n "$line" ]; then
          process_yaml_run_cmd "$line"
          s=$?; [ ${s-0} -ne 0 ] && sts=$s
        fi
      done
      drop_virtual_env
    else
      process_local
      sts=$?
    fi
    return $sts
}

checkpid() {
    [ -f $1 ] || return 1
    local pid=`cat $1`
    [ -d /proc/$pid ] && return 0
    return 1
}


OPTOPTS=(h        b          c        H        j        m       n            q           r     V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_virt opt_dprj opt_mis opt_dry_run  opt_verbose opt_r opt_version opt_verbose)
OPTACTI=(1        "="        "="      1        1        1       "1>"         0           1     "*>"        "+")
OPTDEFL=(0        9.0        ""       -1       0        0       0            -1          0     ""          -1)
OPTMETA=("help"   "branch"   "file"   ""       "dprj"   ""      "do nothing" "verbose"   "res" "version"   "verbose")
OPTHELP=("this help"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file (def .travis.conf)"\
 "use virtualenv to run tests"\
 "execute tests in project dir rather in test dir"\
 "show missing line in report coverage"\
 "do nothing (dry-run)"\
 "silent mode"\
 "run restricted mode (w/o parsing travis.yml file)"\
 "show version"\
 "verbose mode")
OPTARGS=(pkg action sub)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_help -gt 0 ]; then
  print_help "Travis-ci emulator for local developer environment\nAction may be: check, test, all (default), setup or chkconfig"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

if [ -z "$action" ]; then action=all; fi
if [ -z $pkg ]; then pkg="."; fi
ACTIONS="check test all setup chkconfig parseyaml"
VIRTACTS="check test all"
if [[ " $ACTIONS " =~ [[:space:]]$action[[:space:]] ]]; then
  if [[ " $VIRTACTS " =~ [[:space:]]$action[[:space:]] ]]; then
    :
  else
    opt_virt=0
  fi
else
  echo "Invalid action!"
  echo "action should be one of $ACTIONS"
  exit $STS_FAILED
fi
opts_travis
CFG_init
conf_default
link_cfg $TCONF

if [ $opt_verbose -gt 1 ]; then set -x; fi
if [ "$action" == "parseyaml" ]; then
  process_yaml_file "$sub"
  echo "env:"
  for lne in $YML_env; do
    line="  - $(process_yaml_quote_xtl $lne)"
    echo "$line"
  done
  echo "  global:"
  for lne in $YML_global; do
    line="  - $(process_yaml_quote_xtl $lne)"
    echo "$line"
  done
  echo "  matrix:"
  for lne in $YML_matrix; do
    line="  - $(process_yaml_quote_xtl $lne)"
    echo "$line"
  done
  sts=$STS_SUCCESS
  exit $sts
fi
if [ "$action" == "setup" ]; then
  opt_r=0
  DEF_DEVPATH=$(readlink -f ~/dev)
  if [ ! -d $DEF_DEVPATH ]; then
    run_traced mkdir -p $DEF_DEVPATH
  fi
  if [ ! -d $DEF_DEVPATH/_travis ]; then
    run_traced  mkdir -p $DEF_DEVPATH/_travis
  fi
  if [ ! -d $DEF_DEVPATH/_travis/cfg ]; then
    run_traced mkdir -p $DEF_DEVPATH/_travis/cfg
  fi
  if [ "$TDIR" != "$DEF_DEVPATH" ]; then
    run_traced cp $TDIR/$THIS $DEF_DEVPATH/$THIS
    # for f in travis_install_pkgs travis_run_tests travis_after_tests_success; do
    for f in travis_run_tests travis_after_tests_success; do
      run_traced cp $TDIR/_travis/$f $DEF_DEVPATH/_travis/$f
    done
  fi
  exit $STS_SUCCESS
fi

sts=$STS_SUCCESS
init_travis
prepare_env_travis "$action"
check_4_travis
PIDFILE=
if [ $sts -eq $STS_SUCCESS ]; then
  if [ ${opt_virt:-0} -eq 0 ]; then
    PIDFILE=$(get_cfg_value "" "PIDFILE")
    checkpid "$PIDFILE"
    sts=$?
    if [ $sts -eq 0 ]; then
      echo "Another instance of travis emulator is running"
      exit $sts
    fi
    echo $$>$PIDFILE
  fi
  if [ $opt_r -gt 0 ]; then
    process_local
    sts=$?
  else
    process_yaml
    sts=$?
  fi
  if [ -n "$PIDFILE" ]; then
    rm -f $PIDFILE
  fi
fi
exit $sts
