#! /bin/bash
# -*- coding: utf-8 -*-
#
# Travis-ci emulator
# Emulate travis-ci on local machine, to test before upgrade git project
#
# Tree directory: see README of MQT for furthermore info
#   ~/tools                             stable environment
#       ./travis_emulator               stable travis emulator
#       ./maintainer-quality-tools      copied to $HOME when running test
#           ./_travis                   TOOLS_PATH (script like travis_runs_tests, travis_after_tests_success)
#           travis.yml                  YML_FILE: default travis.yml file (-r or missed in tested dir)
#               ./cfg                   pylint & flake8 conf files (-r switch) -> FLAKE8_CONFIG_DIR
#           ./travis                    MQT_PATH
#               ./cfg                   pylint & flake8 conf files -> FLAKE8_CONFIG_DIR
#       ./clodoo                        tool to build environment
#       ./lisa                          tool to build environment
#   ~/dev                               alternate stable environment -> TOOLS_PATH
#       ./clodoo                        alternate tool to build environment
#       ./lisa                          alternate tool to build environment
#   ~/dev/pypi/                         development environment (-M switch)
#       ./travis_emulator
#           ./travis_emulator           development travis emulator
#       ./maintainer-quality-tools
#           ./maintainer-quality-tools  copied to $HOME when running test
#               ./_travis               TOOLS_PATH  (-M switch)
#               travis.yml              YML_FILE: default travis.yml file (-M and -r or missed in tested dir)
#                   ./cfg               pylint & flake8 conf files (-r switch) -> FLAKE8_CONFIG_DIR
#               ./travis                MQT_PATH (-M switch)
#                   ./cfg               pylint & flake8 conf files -> FLAKE8_CONFIG_DIR
#       ./clodoo
#           ./clodoo                    tool to build environment (-M switch)
#       ./lisa
#           ./lisa                      tool to build environment (-M switch)
#
# Yaml file process steps:
#  1.Initialize from local .travis.conf (not in travis-ci.org)
#  2.Install packages from <apt addons>
#  3.Install packages from cache
#  4.Execute global from <env global>
#  5.Execute code from <before_install>
#  6.Execute matrix initialization
#  7.Execute code from <install>
#  8.Execute matrix code from <before_script>
#  9.Execute matrix code from <script>
# 10.Execute code from <before_cache> (not emulated)
# 11.Execute code from <after_success> (emulated) o <after_failure> (not emulated)
# 12.Execute code from <before_deploy> (not emulated)
# 13.Execute code from <deploy> (not emulated)
# 14.Execute code from <after_deploy> (not emulated)
# 15.Execute code from <after_script> (not emulated)
# 16.Wep from local .travis.conf (not in travis-ci.org)
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../.. $TDIR/../../z0lib $TDIR/../../z0lib/z0lib $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $HOME/tools/clodoo $HOME/dev ${PYPATH//:/ } . .." "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. $HOME/tools/travis_emulator $HOME/dev ${PYPATH//:/ } . .." "travis_emulator")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.2.33


store_cfg_param_value() {
#store_cfg_param_value(tid key value [opt] [section])
    local p
    if [[ $2 =~ ^pip_pkgver__ ]]; then
      if [ -z "$PIPPKGVER" ]; then
        declare -gA PIPPKGVER
      fi
      p=${2:12}
      PIPPKGVER[$p]=$3
    fi
    a_add "$1" "$2" "$3" "$4"
}

process_local() {
    wlog "=== Simulate YAML test ==="
    if [ -f $TOOLS_PATH/travis_run_tests ]; then
      if [[ $action =~ (force-lint|lint) ]]; then
        opts=$(inherits_travis_opts "K" "T")
      elif [[ $action =~ (force-test|test) ]]; then
        opts=$(inherits_travis_opts "T" "T")
      else
        opts=$(inherits_travis_opts "KT" "T")
      fi
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      sts=$?
    elif [ $opt_r -gt 0 ]; then
      if [[ $action =~ (force-test|test) ]]; then
        please_run_tests "-T"
        sts=$?
      elif [[ $action =~ (force-lint|lint) ]]; then
        please_run_tests "-K"
        sts=$?
      else
        please_run_tests "-KT"
        sts=$?
      fi
    else
      sts=127
    fi
    if [ $sts -eq $STS_SUCCESS ] && [[ $action =~ (force-lint|lint|force-test|test) ]]; then
      opts=$(inherits_travis_opts "" "A")
      run_traced "$TOOLS_PATH/travis_after_tests_success $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    fi
    return $sts
}

process_yaml_init() {
    YML_sect=
    YML_sect0=
    YML_env=
    YML_global=
    YML_matrix=
    YML_packages=
    YML_install=
    YML_before_script=
    YML_script=
    YML_after=
    YML_pid=$$
    if [[ "$REMOTEREPO" == "oca" ]]; then
      YML_repo=OCA/OCB
    elif [[ "$REMOTEREPO" == "odoo" ]]; then
      YML_repo=odoo/odoo
    else
      YML_repo=
    fi
    export TRAVIS_PULL_REQUEST="false"
    export MQT_TEMPLATE_DB="openerp_template$YML_pid"
    export MQT_TEST_DB="openerp_test$YML_pid"
    python_matrix=
    if [ $opt_dbgmnt -ne 0 ]; then
      export YML_lisa=$HOME/dev/pypi/lisa/lisa/lisa
      export YML_mgrodoo=$HOME/dev/pypi/clodoo/clodoo/manage_odoo
      export TRAVIS_PDB="True"
    fi
    export TRAVIS_DEBUG_MODE="${opt_dlvl:-1}"
    ODOO_TNLBOT="${opt_tnl:-0}"
    if [ $opt_full -ne 0 ]; then
      export SYSTEM_SITE_PACKAGES="${opt_syspkg:-false}"
    else
      export SYSTEM_SITE_PACKAGES="${opt_syspkg:-true}"
    fi
    LINT_CHECK_LEVEL="${opt_llvl^^}"
    for i in {1..9}; do
      declare YML_CMD_DIS_$i=$(get_cfg_value "" "yaml__cmd_dis__$i")
    done
    FH=$(xuname -f)
}

process_yaml_unquote() {
  lne="$(echo $1|sed -e s/\"/%%22/g -e s/\'/%%26/g -e s/\ /%%20/g)"
  echo $lne
}

process_yaml_quote() {
  lne="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g -e s/%%24/\$/g)"
  echo $lne
}

process_yaml_quote_xtl() {
  lne="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g -e s/%%24/\$/g)"
  lne=$(expand_path "$lne")
  echo $lne
}

process_yaml_do() {
    local a b i lne
    if [ "${1:0:1}" == " " ]; then
      local line="${1:1}"
    else
      local line="$1"
    fi
    if [[ "$line" =~ LINT_CHECK=... ]]; then
      if [[ $action =~ (force-lint|lint) ]]; then
        line=$(echo "$line"|sed -e s/LINT_CHECK=[\"']0[\"']/LINT_CHECK=\"1\"/g)
      elif [[ $action =~ (force-test|test) ]]; then
        line=$(echo "$line"|sed -e s/LINT_CHECK=[\"']1[\"']/LINT_CHECK=\"0\"/g)
      fi
    fi
    if [[ "$line" =~ BASH_CHECK=... ]]; then
      if [[ $action =~ (force-lint|lint) ]]; then
        line=$(echo "$line"|sed -e s/BASH_CHECK=[\"']0[\"']/BASH_CHECK=\"1\"/g)
      elif [[ $action =~ (force-test|test) ]]; then
        line=$(echo "$line"|sed -e s/BASH_CHECK=[\"']1[\"']/BASH_CHECK=\"0\"/g)
      fi
    fi
    if [[ "$line" =~ TESTS=... ]]; then
      if [[ $action =~ (force-lint|lint) ]]; then
        line=$(echo "$line"|sed -e s/TESTS=[\"']1[\"']/TESTS=\"0\"/g)
      elif [[ $action =~ (force-test|test) ]]; then
        line=$(echo "$line"|sed -e s/TESTS=[\"']0[\"']/TESTS=\"1\"/g)
      fi
    fi
    if [[ "$line" =~ TRAVIS_DEBUG_MODE= ]] && [ -n "$opt_dlvl" ]; then
      line=$(echo "$line"|sed -e "s/TRAVIS_DEBUG_MODE=[A-Za-z0-9_\"']\+/TRAVIS_DEBUG_MODE=\"$opt_dlvl\"/")
    fi
    if [[ "$line" =~ ODOO_TNLBOT= ]] && [ -n "$opt_tnl" ]; then
      line=$(echo "$line"|sed -e "s/ODOO_TNLBOT=[A-Za-z0-9_\"']\+/ODOO_TNLBOT=\"$opt_tnl\"/")
    fi
    if [[ "$line" =~ LINT_CHECK_LEVEL= ]] && [ -n "$opt_llvl" ]; then
      line=$(echo "$line"|sed -e "s/LINT_CHECK_LEVEL=[A-Za-z0-9_\"']\+/LINT_CHECK_LEVEL=\"${opt_llvl^^}\"/")
    fi
    if [[ "${line:0:1}" == "(" && "${line: -1}" == ")" ]]; then
      lne=$(process_yaml_unquote "${line:1: -1}")
    elif [[ "${line:0:1}" == "\"" && "${line: -1}" == "\"" ]]; then
      line=${line//\\\"/\"}
      lne=$(process_yaml_unquote "${line:1: -1}")
    else
      lne=$(process_yaml_unquote "$line")
    fi
    if [ "$YML_sect" == "python" ]; then
      python_matrix="$python_matrix $lne"
      lne="#"
    elif [ "$YML_sect" == "addons.apt.packages" ]; then
      YML_packages="$YML_packages $lne"
    elif [ "$YML_sect" == "env" ]; then
      YML_env="$YML_env $lne"
    elif [ "$YML_sect" == "env.global" ]; then
      if [ "${lne:0:7}" == "secure:" ]; then
        lne="# $lne"
      else
        YML_global="$YML_global $lne"
        [[ "$line" =~ TRAVIS_DEBUG_MODE= ]] && eval $(process_yaml_quote $lne)
      fi
    elif [ "$YML_sect" == "env.matrix" ]; then
      YML_matrix="$YML_matrix $lne"
      if [[ "$line" =~ ODOO_REPO=.?$REMOTEREPO/ ]]; then
        [ $REMOTEREPO == "odoo" ] && YML_repo=$REMOTEREPO/odoo || YML_repo=$REMOTEREPO/OCB
      elif [[ "$line" =~ ODOO_REPO=.?odoo/odoo && -z "$YML_repo" ]]; then
        YML_repo=odoo/odoo
      elif [[ "$line" =~ ODOO_REPO=.?OCA/OCB  && -z "$YML_repo" ]]; then
        YML_repo=OCA/OCB
      elif [[ "$line" =~ ODOO_REPO=.?zeroincombenze/OCB && $REMOTEREPO == "local" ]]; then
        YML_repo=zeroincombenze/OCB
      fi
    elif [ "$YML_sect" == "before_install" ]; then
      YML_before_install="$YML_before_install $lne"
    elif [ "$YML_sect" == "install" ]; then
      YML_install="$YML_install $lne"
    elif [ "$YML_sect" == "before_script" ]; then
      YML_before_script="$YML_before_script $lne"
    elif [ "$YML_sect" == "script" ]; then
      YML_script="$YML_script $lne"
    elif [ "$YML_sect" == "after_success" ]; then
      YML_after="$YML_after $lne"
    else
      lne="$(echo $1)"
    fi
}

process_yaml_0() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect0=$a
          YML_sect="$YML_sect0"
        else
          YML_sect0=
          YML_sect=
          declare YML_$a="$(echo $b)"
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_1() {
    local val
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect1=$a
          YML_sect="$YML_sect0.$YML_sect1"
        else
          if [[ "${YML_sect0}__$a" == "virtualenv__system_site_packages" ]]; then
            [[ -z "$opt_syspkg" ]] && export SYSTEM_SITE_PACKAGES=$(echo $b)
            [[ "$SYSTEM_SITE_PACKAGES" == "true" ]] && TRAVIS_ENVOPTS="$TRAVIS_ENVOPTS --system-site-packages"
          else
            YML_sect1=
            YML_sect="$YML_sect0"
            declare ${YML_sect0}__$a="$(echo $b)"
          fi
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_2() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect2=$a
          YML_sect="$YML_sect0.$YML_sect1.$YML_sect2"
        else
          YML_sect2=
          YML_sect="$YML_sect0.$$YML_sect1"
          declare ${YML_sect0}__${YML_sect1}__$a="$(echo $b)"
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_3() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -z "$a" ]; then
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_file() {
    local YML_FILE=$1
    process_yaml_init
    local lev=0
    local ident=0
    local line=
    local lne=
    local line1=
    local lne1=
    local linex=
    local a b i r
    while IFS="#" read -r line r || [ -n "$line" ]; do
      if [ -n "$line" -a "${line: -1}" != " " -a -n "$r" ]; then
        line="$line#$r"
        r=
      fi
      if [[ $line =~ ^[[:space:]]+ ]]; then
        for i in {0..10};do if [ "${line:i:1}" != " " ]; then break; fi; done
        if [ $i -gt $ident ]; then
           ((lev++))
           ident=$i
        elif [ $i -lt $ident ]; then
          ((lev--))
          ident=$i
        fi
      else
        lev=0
        ident=0
      fi
      lne=$(echo ${line//$/%%24})
      if [ $lev -eq 0 ]; then
        process_yaml_0
      elif [ $lev -eq 1 ]; then
        process_yaml_1
      elif [ $lev -eq 2 ]; then
        process_yaml_2
      elif [ $lev -eq 3 ]; then
        process_yaml_3
      fi
    done < "$YML_FILE"
}

process_yaml_initialize() {
    local sts=$STS_SUCCESS
    local i s line lne X
    wlog "\e[${PS_HDR2_COLOR}m===== [Initialize] =====\e[${PS_TXT_COLOR}m"
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "\e[${PS_HDR3_COLOR}m------ [[initialize] from .travis.conf] ------\e[${PS_TXT_COLOR}m"
    fi
    for i in {1..9}; do
      line=$(get_cfg_value "" "yaml_init_$i")
      if [ -n "$line" ]; then
        process_yaml_run_cmd "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
    done
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "\e[${PS_HDR3_COLOR}m------ [[initialize.packages] from .travis.conf] ------\e[${PS_TXT_COLOR}m"
    fi
    X="${PKGNAME}__"
    line=$(get_cfg_value "" "${X}yaml_init_1")
    if [ -n "$line" ]; then
      for i in {1..9}; do
        line=$(get_cfg_value "" "${X}yaml_init_$i")
        if [ -n "$line" ]; then
          process_yaml_run_cmd "$line"
          s=$?; [ ${s-0} -ne 0 ] && sts=$s
        fi
      done
    fi
    return $sts
}

process_yaml_exit() {
    local sts=$STS_SUCCESS
    local i line lne X
    wlog "\e[${PS_HDR2_COLOR}m===== [Ending] =====\e[${PS_TXT_COLOR}m"
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "\e[${PS_HDR3_COLOR}m------ [[exit.packages] from .travis.conf] ------\e[${PS_TXT_COLOR}m"
    fi
    X="${PKGNAME}__"
    line=$(get_cfg_value "" "${X}yaml_exit_1")
    if [ -n "$line" ]; then
      for i in {1..9}; do
        line=$(get_cfg_value "" "${X}yaml_exit_$i")
        if [ -n "$line" ]; then
          process_yaml_run_cmd "$line"
        fi
      done
    fi
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "\e[${PS_HDR3_COLOR}m------ [[exit] from .travis.conf] ------\e[${PS_TXT_COLOR}m"
    fi
    for i in {1..9}; do
      line=$(get_cfg_value "" "yaml_exit_$i")
      if [ -n "$line" ]; then
        process_yaml_run_cmd "$line"
      fi
    done
    return $sts
}

process_yaml_global() {
    [ "$PWD" != "$TRAVIS_BUILD_DIR" ] && run_traced "cd $TRAVIS_BUILD_DIR"
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "\e[${PS_HDR3_COLOR}m------ [[env.global] in .travis.yml] ------\e[${PS_TXT_COLOR}m"
    fi
    for lne in $YML_global; do
      line="export $(process_yaml_quote_xtl $lne)"
      run_traced "$line"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    done
    return $sts
}

process_yaml_before_install() {
    wlog "\e[${PS_HDR2_COLOR}m===== [Before install] =====\e[${PS_TXT_COLOR}m"
    local sts=$STS_SUCCESS
    local i s line lne X
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
        wlog "\e[${PS_HDR3_COLOR}m------ [[addons.packages] in .travis.yml] ------\e[${PS_TXT_COLOR}m"
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
        for lne in $YML_packages; do
            if [ "$FH" == "RHEL" ]; then
                if [[ "$lne" == "build-essential" ]]; then
                    lne="redhat-rpm-config"
                elif [[ "$lne" == "python-dev" ]]; then
                    lne="python-devel"
                elif [[ "$lne" == "libxml2-dev" ]]; then
                    lne="libxml2-devel"
                elif [[ "$lne" == "libxslt1-dev" ]]; then
                    lne="libxslt-devel"
                elif [[ "$lne" == "zlib1g-dev" ]]; then
                    lne="zlib-devel"
                elif [[ "$lne" == "libffi-dev" ]]; then
                    lne="libffi-devel"
                elif [[ "$lne" == "libssl-dev" ]]; then
                    lne="openssl-devel"
                fi
                line="yum install $lne"
            else
                line="apt-get install $lne"
            fi
            process_yaml_run_cmd "$line"
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
            [ $s -ne 0 ] && echo "Internal error! Statement failed! <<<"
        done
    fi
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
        wlog "\e[${PS_HDR3_COLOR}m------ [[before_install] in .travis.yml] ------\e[${PS_TXT_COLOR}m"
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
        for lne in $YML_before_install; do
            process_yaml_run_cmd "$lne"
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
            [ $s -ne 0 ] && echo "Internal error! Statement failed! <<<"
        done
    fi
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
        wlog "\e[${PS_HDR3_COLOR}m------ [[env] in .travis.yml] ------\e[${PS_TXT_COLOR}m"
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
        for lne in $YML_env; do
            line="export $(process_yaml_quote_xtl $lne)"
            run_traced "$line"
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
        done
    fi
    return $sts
}

process_yaml_install() {
# process_yaml_install(init)
    local sts=$STS_SUCCESS
    local i s line line1 lne
    [ -n "$1" ] && line1="export $(process_yaml_quote_xtl $1)"
    wlog "\e[${PS_HDR2_COLOR}m===== [Install $line1] =====\e[${PS_TXT_COLOR}m"
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "\e[${PS_HDR3_COLOR}m------ [[install] in .travis.yml] ------\e[${PS_TXT_COLOR}m"
    fi
    run_traced "$line1"
    for lne in $YML_install; do
      process_yaml_run_cmd "$lne"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    done
    return $sts
}

process_yaml_before_script() {
# process_yaml_before_script(init)
    local sts=$STS_SUCCESS
    local line1 lne
    line1=$(process_yaml_quote $1)
    wlog "\e[${PS_HDR2_COLOR}m===== [Before script $line1] =====\e[${PS_TXT_COLOR}m"
    if [ -z "$line1" -o "${line1:0:1}" == "#" ]; then
      sts=127
    else
      for lne in $YML_before_script; do
        process_yaml_run_cmd "$lne" "$line1"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
    fi
    return $sts
}

process_yaml_after_success() {
    local sts=$STS_SUCCESS
    local i
    local s
    local line
    local line1
    local lne
    for lne in $YML_after; do
      line=$(process_yaml_quote_xtl $lne)
      process_yaml_run_cmd "$line"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    done
    return $sts
}

process_yaml_run_cmd() {
#process_yaml_run_cmd (cmd init)
    local xcmd=$(process_yaml_quote_xtl "$1")
    local ix ix1 ix2 c i x s p pp tk z sts xtlcmd
    local xlint xtest xtfex xpkg xcd
    if [ -n "$2" ]; then
      local line1="$(process_yaml_quote_xtl $2) "
    else
      local line1
    fi
    c=$xcmd
    if [ "$FH" == "RHEL" ]; then
      if [[ $xcmd =~ which[[:space:]]nodejs ]]; then
        xcmd=$(echo "$xcmd"|sed -e s/nodejs/node/g)
      fi
    fi
    read -r -a x<<<"$xcmd"
    ix=0
    if [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "sudo" ]; then
      xcmd="$(echo $xcmd|sed -e 's/sudo //g')"
      # read -r -a x<<<"$xcmd"
      ((ix++))
    fi
    if [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "if" ]; then
      ((ix++))
      while [ -n "${x[$ix]}" ]; do
        if [ "${x[$ix]}" == "then" ]; then break; fi
        ((ix++))
      done
      ((ix++))
    fi
    ix1=$ix
    ((ix1++))
    ix2=$ix1
    ((ix2++))
    ix3=$ix2
    ((ix3++))
    if [ "$FH" == "Debian" -a "${x[$ix]}" == "yum" ]; then
      xcmd="$(echo $xcmd|sed -e 's/yum /apt-get /g')"
      x[$ix]="apt-get"
    elif [ "$FH" == "RHEL" -a "${x[$ix]}" == "apt-get" ]; then
      xcmd="$(echo $xcmd|sed -e 's/apt-get /yum /g')"
      x[$ix]="yum"
    fi
    if [ "${x[$ix]}" == "yum" -o "${x[$ix]}" == "apt-get" ]; then
      pp="python-serial libcups2-dev cups-devel unixodbc unixODBC unixodbc-dev unixODBC-dev unixODBC-devel"
      pp="$pp python-mysqldb MYSQL-python python-yaml pyyaml pyYAML PyYAML python-pypdf pypdf pyPdf"
      pp="$pp ruby-sass rubygem-sass python-simplejson python2-simplejson expect-dev antiword"
      if [[ $pp =~ ${x[$ix2]} ]]; then
        xcmd="$(echo $xcmd|sed -e 's/yum/$YML_lisa/g')"
        xcmd="$(echo $xcmd|sed -e 's/apt-get/$YML_lisa/g')"
        x[$ix]=$YML_lisa
      fi
    fi
    if [ "${x[$ix]}" == "$YML_lisa" -a "${x[$ix1]}" == "install" ]; then
      if $($YML_lisa status ${x[$ix2]} &>/dev/null); then
        xcmd="# $xcmd"
      else
        xcmd="false; # Warning! TODO> $xcmd"
      fi
    elif [ "${x[$ix]}" == "yum" -a "${x[$ix1]}" == "install" ]; then
      if $(rpm -q ${x[$ix2]} &>/dev/null); then
        xcmd="# $xcmd"
      elif $(yum info ${x[$ix2]} &>/dev/null); then
        xcmd="# $xcmd"
      else
        xcmd="false; # Warning! TODO> $xcmd"
      fi
    elif [ "${x[$ix]}" == "apt-get" -a "${x[$ix1]}" == "install" ]; then
      if $(dpkg-query -s ${x[$ix2]} &>/dev/null); then
        xcmd="# $xcmd"
      else
        xcmd="false; # Warning! TODO> $xcmd"
      fi
    elif [ "${x[$ix]}" == "git" -a "${x[$ix1]}" == "clone" ]; then
      ix=$ix2
      tk=${x[$ix]}
      while [ "${tk:0:1}" == "-" ]; do ((ix++)); tk=${x[$ix]}; done
      if [ "$TRAVIS" != "true" -a "${x[$ix]}" == "https://github.com/zeroincombenze/tools.git" ]; then
          xcmd="$(echo $xcmd|sed -e 's/git clone/git_clone/g')"
      # elif [ "${x[$ix]}" == "https://github.com/OCA/maintainer-quality-tools.git" ]; then
      #   if [ ${opt_virt:-0} -eq 0 ]; then
      #     if [ -d $HOME/maintainer-quality-tools/ -a ! -L $HOME/maintainer-quality-tools/ ]; then
      #       :
      #     elif [ -f $HOME/maintainer-quality-tools/ ]; then
      #       run_traced "rm -f $HOME/maintainer-quality-tools"
      #     fi
      #     if [ ! -L $HOME/maintainer-quality-tools/ ]; then
      #       if [ -d $HOME/tools/maintainer-quality-tools/ ]; then
      #         xcmd="ln -s $HOME/tools/maintainer-quality-tools/ $HOME"
      #       elif [ -d $HOME/pypi/maintainer-quality-tools/maintainer-quality-tools/ ]; then
      #         xcmd="ln -s $HOME/pypi/maintainer-quality-tools/maintainer-quality-tools/ $HOME"
      #       else
      #         xcmd="false"
      #       fi
      #     fi
      #   fi
      fi
    elif [ "${x[$ix]}" == "pip" -a "${x[$ix1]}" == "install" ]; then
      if [ ${opt_virt:-0} -eq 0 ]; then
        ix=$ix2
        tk=${x[$ix]}
        xcmd="# ${x[$ix]} ${x[$ix1]}"
        while [ -n "${x[$ix]}" ]; do
          if [ "${x[$ix]}" == "-r" -o "${x[$ix]}" == "--requirement" ]; then
            ((ix++))
            pp=${x[$ix]}
            xcmd="$xcmd -r $pp"
            while IFS="#" read -r tk r || [ -n "$tk" ]; do
              if [ -n "$tk" ]; then
                if [ "${tk:0:4}" == "http" ]; then
                  p=$(basename $tk)
                  tk=$(echo $p|grep -Eo '[a-zA-Z0-9_]*'|head -n1)
                fi
                p=$(echo "$tk"|grep -Eo '[^!<=>;\[]*'|head -n1)
                p=${p//\"/}
                p=$(echo $p)
                if [ "$p" == "transifex-client" ]; then
                  xcmd="$xcmd $p"
                elif $(pip show $p &>/dev/null); then
                  xcmd="$xcmd $p"
                else
                  xcmd="false; $xcmd <$p>"
                fi
              fi
            done < $pp
          elif [ "${tk:0:1}" != "-" ]; then
            p=$(echo "${x[$ix]}"|grep -Eo '[^!<=>;]*'|head -n1)
            p=${p//\"/}
            if $(pip show $p &>/dev/null); then
              xcmd="$xcmd $p"
            else
              xcmd="false; $xcmd <$p>"
            fi
            if [ "${tk: -1}" == ";" ]; then break; fi
          else
            xcmd="$xcmd $p"
          fi
          ((ix++))
          tk=${x[$ix]}
        done
      elif [[ ! "$SYSTEM_SITE_PACKAGES" == "true" ]]; then
        if ! $(echo $xcmd|grep -q "\--user"); then
          xcmd=${xcmd/pip install/pip install --user --no-warn-conflicts}
        fi
      else
        if ! $(echo $xcmd|grep -q "\--no-warn-conflicts"); then
          xcmd=${xcmd/pip install/pip install --no-warn-conflicts}
        fi
      fi
    elif [ "${x[$ix]}" == "mv" -a "${x[$ix1]}" == "${HOME}/tools/maintainer-quality-tools" ]; then
      xcmd=${xcmd/cp/mv}
    elif [ "${x[$ix]}" == "rvm" -a "${x[$ix1]}" == "install" ]; then
      xcmd="# $xcmd"
    elif [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "ln" -a "${x[$ix1]}" == "-s" -a "${x[$ix2]:0:16}" == "/opt/odoo/build/" ]; then
      xcmd="# $xcmd"
    elif [ "${x[$ix]}" == "sh" -a "${x[$ix2]}" == "/etc/init.d/xvfb" ]; then
      xcmd="# $xcmd"
    elif [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "sh" ]; then
      xcmd="# $xcmd"
    elif [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "fi" ]; then
      :
    else
      if [ -z "$REPOSNAME" ]; then
        pp=$PKGPATH
      else
        pp=$(readlink -e $PRJPATH/../$REPOSNAME/)
      fi
      while [ -n "${x[$ix]}" ]; do
        if [[ "${x[$ix]}" =~ cd ]]; then
          xcd=1
        elif [[ "${x[$ix]}" =~ LINT_CHECK=.1. ]]; then
          xlint=1
        elif [[ "${x[$ix]}" =~ LINT_CHECK=.0. ]]; then
          xlint=0
        elif [[ "${x[$ix]}" =~ TRANSIFEX=.1. ]]; then
          xcmd="# $xcmd"
        elif [[ "${x[$ix]}" =~ TESTS=.1. ]]; then
          xtest=1
        elif [[ "${x[$ix]}" =~ MQT_TEMPLATE_DB= ]]; then
          xcmd=$(echo $xcmd|sed -e "s|${x[$ix]}|${x[$ix]}$YML_pid|g")
        elif [[ "${x[$ix]}" =~ MQT_TEST_DB= ]]; then
          xcmd=$(echo $xcmd|sed -e "s|${x[$ix]}|${x[$ix]}$YML_pid|g")
        elif [[ "${x[$ix]}" =~ ODOO_REPO=.$YML_repo. ]]; then
          if [ ${opt_virt:-0} -eq 0 ]; then
            xcmd=$(echo $xcmd|sed -e "s|$YML_repo|local/odoo|g")
            x[$ix]=$(echo x[$ix]|sed -e "s|$YML_repo|local/odoo|g")
          fi
        elif [[ "${x[$ix]}" =~ INCLUDE=..getaddons.py.*/opt/odoo/build/.*/OCB/openerp/addons.*/opt/odoo/build/.*/OCB/addons ]]; then
          if [ ${opt_virt:-0} -eq 0 ]; then
            xcmd="$(echo $xcmd|sed -e 's|/opt/odoo/build/.*/OCB/|/opt/odoo/$BRANCH/|g')"
          fi
        elif [ "${x[$ix]}" == "\${OPTS}" ]; then
          xcmd="$(echo $xcmd|sed -e 's|${OPTS}|'$OPTS'|g')"
          x[$ix]=$OPTS
        else
          for xpkg in travis_install_nightly travis_after_tests_success; do
            if [ "${x[$ix]}" == "$xpkg" ]; then
              xtlcmd="$xpkg"
              if [ "$xlint" != "1" -o "$xtest" == "1" ] && [ "$xcd" != "1" -a $opt_force -eq 0 ]; then
                if [ ${opt_virt:-0} -eq 0 ]; then
                  xtlcmd=$(get_cfg_value "" "EM_$xpkg")
                else
                  xtlcmd=$(get_cfg_value "" "RUN_$xpkg")
                fi
                if [ -n "$xtlcmd" ]; then
                  xtlcmd=$(process_yaml_unquote "$xtlcmd")
                  xcmd="$(echo $xcmd|sed -e 's|'$xpkg'|'$xtlcmd'|g')"
                  xcmd=$(process_yaml_quote "$xcmd")
                elif [ -z "${x[$ix]}" ] && [[ "$xtlcmd" =~ \$\{ ]]; then
                  xcmd=$(process_yaml_quote "$xcmd")
                  xcmd="# $xcmd"
                fi
              fi
            fi
          done
        fi
      ((ix++));
      done
    fi
    if [ "$action" == "parseyaml" ]; then
       if [ "$c" != "$xcmd" -a "${xcmd:0:1}" != "#" ]; then
         echo "\e[${PS_NOP_COLOR}m## $c\e[${PS_TXT_COLOR}m"
       fi
       echo "$xcmd"
    else
      if [ "$c" != "$xcmd" -a "${xcmd:0:1}" != "#" ]; then
         wlog "\e[${PS_NOP_COLOR}m## $c\e[${PS_TXT_COLOR}m"
      fi
      run_traced "$line1$xcmd"
    fi
    return $?
}

process_yaml() {
# process_yaml ()
    local sts=$STS_SUCCESS
    local i s p v X
    local line lne line1 lne1
    export PS_TXT_COLOR=$(get_cfg_value "" "PS_TXT_COLOR")
    export PS_RUN_COLOR=$(get_cfg_value "" "PS_RUN_COLOR")
    export PS_NOP_COLOR=$(get_cfg_value "" "PS_NOP_COLOR")
    export PS_HDR1_COLOR=$(get_cfg_value "" "PS_HDR1_COLOR")
    export PS_HDR2_COLOR=$(get_cfg_value "" "PS_HDR2_COLOR")
    export PS_HDR3_COLOR=$(get_cfg_value "" "PS_HDR3_COLOR")
    if [ "$action" == "chkconfig" ]; then
        YML_FILE=$TOOLS_PATH/chkconfig.yml
        if [ ! -f $YML_FILE ]; then
            do_chkconfig
            return $STS_SUCCESS
        fi
    else
        YML_FILE=$opt_fyaml
        if [ ! -f $YML_FILE ]; then
            YML_FILE=$PRJPATH/$opt_fyaml
        fi
        if [ ! -f $YML_FILE -a $opt_py3 -eq 0 ]; then
            YML_FILE=$TOOLS_PATH/travis.yml
        fi
        if [ ! -f $YML_FILE -a $opt_py3 -ne 0 ]; then
            YML_FILE=$TOOLS_PATH/travis3.yml
        fi
    fi
    if [ ! -d "$MQT_PATH" ]; then
        echo "Zeroincombenze(R) tools not found!"
        return 1
    fi
    if [ $opt_py3 -ne 0 ]; then
        PYTHON=python3
        PYTHON_BIN=$(readlink -e $(which python3))
        PYTHON_VERSION=$(python3 --version 2>&1|grep -Eo "[0-9]+\.[0-9]+")
        PIP=pip3
    else
        PYTHON=python
        PYTHON_BIN=$(readlink -e $(which python))
        PYTHON_VERSION=$(python --version 2>&1|grep -Eo "[0-9]+\.[0-9]+")
        PIP=pip
    fi
    if [ -f $YML_FILE ]; then
        echo -e "\e[0;30;107m$(printf '%-80.80s' ' ')\e[0m"
        wlog "\e[${PS_HDR1_COLOR}m$(printf '%-80.80s' '=== Process YAML file ===')\e[${PS_TXT_COLOR}m"
        TRAVIS_CWD=$PWD
        process_yaml_file "$YML_FILE"
        unset PYTHONPATH
        sts=$STS_SUCCESS
        wlog "\e[${PS_HDR2_COLOR}m===== [System informations] =====\e[${PS_TXT_COLOR}m"
        TODAY=$(date "+%Y-%m-%d %H:%M:%S")
        for lne in TODAY TCONF YML_FILE YML_lisa YML_mgrodoo YML_repo MQT_DEF_PATH MQT_PATH TOOLS_PATH PRJNAME PKGNAME REPOSNAME BRANCH PRJPATH PKGPATH PATH TRAVIS_REPO_SLUG TRAVIS_CWD TRAVIS_PDB; do
            lne1=${!lne}
            if [[ -n "$lne1" || $lne =~ PATH ]]; then
                wlog "\$ $lne=$lne1"
            fi
        done
        if [ $sts -eq $STS_SUCCESS ]; then
            process_yaml_initialize
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
        fi
        if [ $sts -eq $STS_SUCCESS ]; then
            if [ -z "$python_matrix" ]; then
                export python_matrix="$PYTHON_VERSION"
            fi
            for TRAVIS_PYTHON_VERSION in $python_matrix; do
                wlog "\e[${PS_HDR1_COLOR}m===== [Build python $TRAVIS_PYTHON_VERSION] =====\e[${PS_TXT_COLOR}m"
                CURPYVER=$(echo $TRAVIS_PYTHON_VERSION|grep -Eo [0-9]|head -n1)
                if [ "$CURPYVER" == "2" ]; then
                    PYTHON=python
                    PYTHON_VERSION=$(python --version 2>&1|grep -Eo "[0-9]+\.[0-9]+")
                else
                    PYTHON=python3
                    PYTHON_VERSION=$(python3 --version 2>&1|grep -Eo "[0-9]+\.[0-9]+")
                fi
                if [ "$PYTHON_VERSION" != "$TRAVIS_PYTHON_VERSION" ]; then
                    wlog "\e[${PS_HDR1_COLOR}mWarning: Required version $TRAVIS_PYTHON_VERSION of python is replaced by $PYTHON_VERSION\e[${PS_TXT_COLOR}m"
                    TRAVIS_PYTHON_VERSION="$PYTHON_VERSION"
                fi
                export TRAVIS_PYTHON_VERSION
                for lne in PYTHONPATH TRAVIS_PYTHON_VERSION; do
                    lne1=${!lne}
                    if [[ -n "$lne1" || $lne =~ PATH ]]; then
                        wlog "\$ $lne=$lne1"
                    fi
                done
                # CURPYVER=$(echo $TRAVIS_PYTHON_VERSION|grep -Eo [0-9]|head -n1)
                # [ "$CURPYVER" != "3" ] && PYTHON=python || PYTHON=python3
                # eval $PYTHON --version
                if [[ ! $TRAVIS_DEBUG_MODE =~ ^[01] ]]; then
                    if [ $opt_py3 -ne 0 ]; then
                        echo -e "import sys\nprint('sys.path=%s' % sys.path)\n"|python3
                    else
                        echo -e "import sys\nprint 'sys.path=%s' % sys.path\n"|python
                    fi
                fi
                if [ -z "$YML_matrix" ]; then
                    YML_matrix=":"
                fi
                for lne in $YML_matrix; do
                    if [ "$lne" == ":" ]; then
                        line1=
                        lne1=
                    else
                        line1="$lne"
                        lne1=$(process_yaml_quote "$lne")
                    fi
                    if [[ "$lne1" =~ ODOO_REPO=.[A-Za-z]+ ]]; then
                        if [[ ! "$lne1" =~ ODOO_REPO=.$YML_repo. ]]; then
                            wlog "\e[${PS_HDR3_COLOR}mMatrix skipped due invalid repo\e[${PS_TXT_COLOR}m"
                            continue
                        fi
                    elif [[ "$action" == "lint" && ! "$lne1" =~ LINT=.1. ]]; then
                        wlog "\e[${PS_HDR3_COLOR}mMatrix skipped because does not match the lint action\e[${PS_TXT_COLOR}m"
                        continue
                    elif [[ "$action" == "test" && ! "$lne1" =~ TESTS=.1. ]]; then
                        wlog "\e[${PS_HDR3_COLOR}mMatrix skipped because does not match the test action\e[${PS_TXT_COLOR}m"
                        continue
                    fi
                    wlog "\e[${PS_HDR1_COLOR}m===== [Build job $lne1] =====\e[${PS_TXT_COLOR}m"
                    create_virtual_env
                    for p in PATH TRAVIS TRAVIS_BUILD_DIR TRAVIS_HOME TRAVIS_BRANCH HOME_BRANCH PYPI_CACHED SYSTEM_SITE_PACKAGES; do
                        X=${!p}
                        if [[ -n "$X" || $p =~ PATH ]]; then
                            wlog "\$ $p=$X"
                        fi
                    done
                    # wash_virtual_env
                    process_yaml_global
                    if [ $sts -eq $STS_SUCCESS ]; then
                        process_yaml_before_install
                        s=$?; [ ${s-0} -ne 0 ] && sts=$s
                    fi
                    if [ $sts -eq $STS_SUCCESS ]; then
                        process_yaml_install "$line1"
                        s=$?; [ ${s-0} -ne 0 ] && sts=$s
                    fi
                    if [ $sts -eq $STS_SUCCESS ]; then
                        process_yaml_before_script "$line1"
                        s=$?; [ ${s-0} -ne 0 ] && sts=$s
                    fi
                    if [ $sts -eq $STS_SUCCESS ]; then
                        wlog "\e[${PS_HDR2_COLOR}m===== [Script matrix $lne1] =====\e[${PS_TXT_COLOR}m"
                        for lne in $YML_script; do
                            process_yaml_run_cmd "$lne"
                            s=$?; [ ${s-0} -ne 0 ] && sts=$s
                            if [ $sts -ne $STS_SUCCESS ]; then
                                elog "!Script aborted by error!!"
                                break
                            fi
                        done
                    fi
                    if [ $sts -eq $STS_SUCCESS ]; then
                        wlog "\e[${PS_HDR2_COLOR}m===== [After success] =====\e[${PS_TXT_COLOR}m"
                        process_yaml_after_success
                    fi
                    if [ "$TRAVIS_DEBUG_MODE" == "9" ]; then
                        read -p "Press RET to continue ..."
                    fi
                    if [ $sts -eq $STS_SUCCESS ]; then
                        process_yaml_exit
                    fi
                    drop_virtual_env
                done
            done
        fi
    else
      process_local
      sts=$?
    fi
    echo -e "\e[0m"
    return $sts
}

process_yaml_echo() {
# process_yaml_echo(lev, line)
    local lev=$1
    ((lev++))
    local lm="            "
    lm=${lm:0:$lev}
    local lne="$2"
    if [ $opt_dprj -ne 0 ]; then
      echo -n "$lm- "
      process_yaml_run_cmd "$lne"
    else
      local line="- $(process_yaml_quote_xtl $lne)"
      echo "$lm$line"
    fi
}

checkpid() {
    [ -f $1 ] || return 1
    local pid=$(cat $1)
    [ -d /proc/$pid ] && return 0
    return 1
}


OPTOPTS=(h        B         C         c        D        E         F        f         j        k        L        l              M          m       n            O         p        q           r     S            V           v           X       Y             3)
OPTDEST=(opt_help opt_debug opt_cache opt_conf opt_dlvl opt_keepE opt_full opt_force opt_dprj opt_keep opt_llvl opt_logdir     opt_dbgmnt opt_mis opt_dry_run  opt_org   opt_pyth opt_verbose opt_r  opt_syspkg  opt_version opt_verbose opt_tnl opt_fyaml    opt_py3)
OPTACTI=(1        1         0         "="      "="      1         1        1         1        1        "="      "="            1          1       "1>"         "="       1        0           1     "="          "*>"        "+"         "="     "="           1)
OPTDEFL=(0        0         1         ""       ""       0         0        0         0        0        ""       "~/travis_log" 0          0       0            "local"   0        -1          0     ""           ""          -1          ""      ".travis.yml" 0)
OPTMETA=("help"   "version" ""        "file"   "number" ""        ""       ""        "dprj"   ""       "number" "dir"          ""         ""      "do nothing" "git-org" ""       "verbose"   "res" "false|true" "version"   "verbose"   "0|1"   "file"        "")
OPTHELP=("this help"\
 "debug mode: do not create log"\
 "do not use stored PYPI"\
 "configuration file (def .travis.conf)"\
 "travis_debug_mode: may be 0,1,2 or 9 (def yaml dependents)"\
 "save virtual environment as ~/VME/VME{version}"\
 "run final travis with full features"\
 "force yaml to run w/o cmd subst"\
 "execute tests in project dir rather in test dir (or expand macro if parseyaml)"\
 "keep DB and virtual environment after tests"\
 "lint_check_level: may be minimal,reduced,average,nearby,oca; def value from .travis.yml"\
 "log directory (def=~/travis_log)"\
 "use local MQT"\
 "show missing line in report coverage"\
 "do nothing (dry-run)"\
 "git organization, i.e. oca or zeroincombenze"\
 "prefer python test over bash test when avaiable"\
 "silent mode"\
 "run restricted mode (def parsing travis.yml file)"\
 "use python system packages (def yaml dependents)"\
 "show version"\
 "verbose mode"\
 "enable translation test (def yaml dependents)"\
 "file yaml to process (def .travis.yml)"\
 "use python3")
OPTARGS=(action sub sub2)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_help -gt 0 ]; then
  print_help "Travis-ci emulator for local developer environment\nAction may be: [force-]lint, [force-]test, emulate (default), (new|chk|cp|mv|merge)_vm, chkconfig or parseyaml"\
  "© 2015-2020 by zeroincombenze®\nhttps://zeroincombenze-tools.readthedocs.io/\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

export PYTHONWARNINGS="ignore"
[[ -z "$action" ]] && action=emulate
ACTIONS="(force-lint|lint|force-test|test|emulate|chkconfig|parseyaml)"
VIRTACTS="(force-lint|lint|force-test|test|emulate)"
opt_virt=1
if [[ $action =~ $ACTIONS ]]; then
    [[ ! $action =~ $VIRTACTS ]] && opt_virt=0
else
    echo "Invalid action!"
    echo "action should be one of $ACTIONS"
    exit $STS_FAILED
fi
opts_travis
CFG_init
conf_default
link_cfg $DIST_CONF $TCONF
if [ $opt_verbose -gt 1 ]; then set -x; fi
init_travis

if [ "$action" == "parseyaml" ]; then
    # init_travis
    prepare_env_travis "$action"
    check_4_travis
    if [ -z "$sub" ]; then
        sub=$PRJPATH/.travis.yml
        if [ ! -f $sub ]; then
            sub=$TOOLS_PATH/travis.yml
        fi
    fi
    process_yaml_file "$sub"
    echo "addons:"
    echo "  apt:"
    echo "    packages:"
    for lne in $YML_packages; do
        process_yaml_echo 3 "$lne"
    done
    echo "env:"
    for lne in $YML_env; do
        process_yaml_echo 1 "$lne"
    done
    echo "  global:"
    for lne in $YML_global; do
        process_yaml_echo 1 "$lne"
    done
    echo "before_install:"
    for lne in $YML_before_install; do
        process_yaml_echo 1 "$lne"
    done
    echo "  matrix:"
    for lne in $YML_matrix; do
        process_yaml_echo 1 "$lne"
    done
    echo "install:"
    for lne in $YML_install; do
        process_yaml_echo 1 "$lne"
    done
    echo "before_script:"
    for lne in $YML_before_script; do
        process_yaml_echo 1 "$lne"
    done
    echo "script:"
    for lne in $YML_script; do
        process_yaml_echo 1 "$lne"
    done
    echo "after_success:"
    for lne in $YML_after; do
        process_yaml_echo 1 "$lne"
    done
    sts=$STS_SUCCESS
    exit $sts
fi

if [[ $PWD == $HOME ]]; then
    echo "Cannot execute travis-ci from home directory!"
    exit 1
fi

sts=$STS_SUCCESS
prepare_env_travis "$action"
echo -e "\e[0;30;107m$(printf '%-80.80s' ' ')\e[0m"
if [ $sts -eq $STS_SUCCESS ]; then
  if [ $opt_r -gt 0 ]; then
    process_local
    sts=$?
  else
    [ "${opt_logdir:0:1}" == "~" ] && opt_logdir=$HOME/${opt_logdir:1}
    mkdir -p $opt_logdir
    [ $opt_full -ne 0 ] && clean_dirs "$PRJPATH"
    [ $opt_full -ne 0 -a "$PKGNAME" != "OCB" ] && set_executable
    if [ $opt_debug -ne 0 ]; then
      process_yaml
      sts=2
    else
      [ -f $opt_logdir/${PKGNAME}_${BRANCH}.log ] && rm -f $opt_logdir/${PKGNAME}_${BRANCH}.log
      process_yaml 2>&1 | tee -a $opt_logdir/${PKGNAME}_${BRANCH}.log
      sts=$?
    fi
  fi
fi
exit $sts
