#! /bin/bash
# -*- coding: utf-8 -*-
#
# Travis-ci emulator
# Emulate travis-ci on local machine, to test before upgrade git project
# Deploy:
# ~/dev                          -> this script
# ~/dev/_travis                  -> default script (travis_runs_tests, travis_after_tests_success)
# ~/maintainer-quality-tools -> actual scripts, mainly for Odoo environment by OCA; their replace default scripts
# When developping travis emulator itself, deployment is:
# ~/dev/pypi/travis_em/travis_em -> this script
# ~/dev/pypi/travis_em/travis_em/_travis -> default script (travis_runs_tests, travis_after_tests_success)
#
# Yaml file process steps:
#  1.Initialize from local .travis.conf (not in travis-ci.org)
#  2.Install packages from <apt addons>
#  3.Install packages from cache
#  4.Execute code from <before_install>
#  5.Execute global from <env global>
#  6.Execute matrix initialization
#  7.Execute code from <install>
#  8.Execute matrix code from <before_script>
#  9.Execute matrix code from <script>
# 10.Execute code from <before_cache> (not emulated)
# 11.Execute code from <after_success> (emulated) o <after_failure> (not emulated)
# 12.Execute code from <before_deploy> (not emulated)
# 13.Execute code from <deploy> (not emulated)
# 14.Execute code from <after_deploy> (not emulated)
# 15.Execute code from <after_script> (not emulated)
# 16.Wep from local .travis.conf (not in travis-ci.org)
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/clodoo $HOME/dev" "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/travis_emulator $HOME/dev" "travis_emulator")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.1.12


store_cfg_param_value() {
#store_cfg_param_value(tid key value [opt] [section])
    local p
    if [[ $2 =~ ^pip_pkgver__ ]]; then
      if [ -z "$PIPPKGVER" ]; then
        declare -gA PIPPKGVER
      fi
      p=${2:12}
      PIPPKGVER[$p]=$3
    fi
    a_add "$1" "$2" "$3" "$4"
}

process_local() {
    wlog "=== Simulate YAML test ==="
    if [ -f $TOOLS_PATH/travis_run_tests ]; then
      if [ "$action" == "check" ]; then
        opts=$(inherits_travis_opts "K" "T")
      elif [ "$action" == "test" ]; then
        opts=$(inherits_travis_opts "T" "T")
      else
        opts=$(inherits_travis_opts "KT" "T")
      fi
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      sts=$?
    elif [ $opt_r -gt 0 ]; then
      if [ "$action" == "test" ]; then
        please_run_tests "-T"
        sts=$?
      elif [ "$action" == "check" ]; then
        please_run_tests "-K"
        sts=$?
      else
        please_run_tests "-KT"
        sts=$?
      fi
    else
      sts=127
    fi
    if [ $sts -eq $STS_SUCCESS -a "$action" != "check" -a "$action" != "test" ]; then
      opts=$(inherits_travis_opts "" "A")
      run_traced "$TOOLS_PATH/travis_after_tests_success $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    fi
    return $sts
}

process_yaml_init() {
    YML_sect=
    YML_sect0=
    YML_env=
    YML_global=
    YML_matrix=
    YML_packages=
    YML_install=
    YML_before_script=
    YML_script=
    YML_after=
    YML_repo=
    export TRAVIS_PYTHON_VERSION=2.7
    if [ $opt_dbgmnt -ne 0 ]; then
      export YML_lisa=$HOME/dev/pypi/lisa/lisa/lisa
      export YML_mgrodoo=$HOME/dev/pypi/clodoo/clodoo/manage_odoo
    elif [ -f $HOME/tools/lisa/lisa ]; then
      export YML_lisa=$HOME/tools/lisa/lisa
      export YML_mgrodoo=$HOME/tools/clodoo/manage_odoo
    else
      export YML_lisa=lisa
      export YML_mgrodoo=manage_odoo
    fi
    TRAVIS_DEBUG_MODE="${opt_dlvl:-0}"
    for i in {1..9}; do
      declare YML_CMD_DIS_$i=$(get_cfg_value "" "yaml__cmd_dis__$i")
    done
    FH=$(xuname -f)
}

process_yaml_unquote() {
  lne="$(echo $1|sed -e s/\"/%%22/g -e s/\'/%%26/g -e s/\ /%%20/g)"
  echo $lne
}

process_yaml_quote() {
  lne="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g -e s/%%24/\$/g)"
  echo $lne
}

process_yaml_quote_xtl() {
  lne="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g -e s/%%24/\$/g)"
  lne=$(expand_path "$lne")
  echo $lne
}

process_yaml_do() {
    local a b i
    if [ "${1:0:1}" == " " ]; then
      local line="${1:1}"
    else
      local line="$1"
    fi
    if [[ "$line" =~ LINT_CHECK=... ]]; then
      if [ "$action" == "check" ]; then
        line=$(echo "$line"|sed -e s/LINT_CHECK=[\"]0[\"]/LINT_CHECK=\"1\"/g)
      elif [ "$action" == "test" ]; then
        line=$(echo "$line"|sed -e s/LINT_CHECK=[\"]1[\"]/LINT_CHECK=\"0\"/g)
      fi
    elif [[ "$line" =~ BASH_CHECK=... ]]; then
      if [ "$action" == "check" ]; then
        line=$(echo "$line"|sed -e s/BASH_CHECK=[\"]0[\"]/BASH_CHECK=\"1\"/g)
      elif [ "$action" == "test" ]; then
        line=$(echo "$line"|sed -e s/BASH_CHECK=[\"]1[\"]/BASH_CHECK=\"0\"/g)
      fi
    elif [[ "$line" =~ TESTS=... ]]; then
      if [ "$action" == "check" ]; then
        line=$(echo "$line"|sed -e s/TESTS=[\"]1[\"]/TESTS=\"0\"/g)
      elif [ "$action" == "test" ]; then
        line=$(echo "$line"|sed -e s/TESTS=[\"]0[\"]/TESTS=\"1\"/g)
      fi
    fi
    if [[ "${line:0:1}" == "(" && "${line: -1}" == ")" ]]; then
      local lne=$(process_yaml_unquote "${line:1: -1}")
    elif [[ "${line:0:1}" == "\"" && "${line: -1}" == "\"" ]]; then
      line=${line//\\\"/\"}
      local lne=$(process_yaml_unquote "${line:1: -1}")
    else
      local lne=$(process_yaml_unquote "$line")
    fi
    if [ "$YML_sect" == "python" ]; then
      export TRAVIS_PYTHON_VERSION=$lne
      lne="#"
    elif [ "$YML_sect" == "addons.apt.packages" ]; then
      YML_packages="$YML_packages $lne"
    elif [ "$YML_sect" == "env" ]; then
      YML_env="$YML_env $lne"
    elif [ "$YML_sect" == "env.global" ]; then
      if [ "${lne:0:7}" == "secure:" ]; then
        lne="# $lne"
      else
        YML_global="$YML_global $lne"
      fi
    elif [ "$YML_sect" == "env.matrix" ]; then
      YML_matrix="$YML_matrix $lne"
      if [[ "$line" =~ ODOO_REPO=.?$REMOTEREPO/ ]]; then
        [ $REMOTEREPO == "odoo" ] && YML_repo=$REMOTEREPO/odoo || YML_repo=$REMOTEREPO/OCB
      elif [[ "$line" =~ ODOO_REPO=.?odoo/odoo && -z "$YML_repo" ]]; then
        YML_repo=odoo/odoo
      elif [[ "$line" =~ ODOO_REPO=.?OCA/OCB  && -z "$YML_repo" ]]; then
        YML_repo=OCA/OCB
      elif [[ "$line" =~ ODOO_REPO=.?zeroincombenze/OCB && $REMOTEREPO == "local" ]]; then
        YML_repo=zeroincombenze/OCB
      fi
    elif [ "$YML_sect" == "before_install" ]; then
      if [[ $line =~ TRAVIS_DEBUG_MODE= ]]; then
        if [ -n "$opt_dlvl" ]; then
          line="TRAVIS_DEBUG_MODE=\"$opt_dlvl\""
          lne=$(process_yaml_unquote "$line")
        fi
        [ -n "$line" ] && export $line
      fi
      YML_before_install="$YML_before_install $lne"
    elif [ "$YML_sect" == "install" ]; then
      YML_install="$YML_install $lne"
    elif [ "$YML_sect" == "before_script" ]; then
      YML_before_script="$YML_before_script $lne"
    elif [ "$YML_sect" == "script" ]; then
      YML_script="$YML_script $lne"
    elif [ "$YML_sect" == "after_success" ]; then
      YML_after="$YML_after $lne"
    else
      local lne="$(echo $1)"
    fi
}

process_yaml_0() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect0=$a
          YML_sect="$YML_sect0"
        else
          YML_sect0=
          YML_sect=
          declare YML_$a="$(echo $b)"
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_1() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect1=$a
          YML_sect="$YML_sect0.$YML_sect1"
        else
          if [ "${YML_sect0}__$a" == "virtualenv__system_site_packages" ] && [[ "$b" =~ "true" ]]; then
            TRAVIS_ENVOPTS="$TRAVIS_ENVOPTS --system-site-packages"
          else
            YML_sect1=
            YML_sect="$YML_sect0"
            declare ${YML_sect0}__$a="$(echo $b)"
          fi
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_2() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect2=$a
          YML_sect="$YML_sect0.$YML_sect1.$YML_sect2"
        else
          YML_sect2=
          YML_sect="$YML_sect0.$$YML_sect1"
          declare ${YML_sect0}__${YML_sect1}__$a="$(echo $b)"
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_3() {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -z "$a" ]; then
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_file() {
    local YML_FILE=$1
    process_yaml_init
    local lev=0
    local ident=0
    local line=
    local lne=
    local line1=
    local lne1=
    local linex=
    local a b i r
    while IFS="#" read -r line r || [ -n "$line" ]; do
      if [ -n "$line" -a "${line: -1}" != " " -a -n "$r" ]; then
        line="$line#$r"
        r=
      fi
      if [[ $line =~ ^[[:space:]]+ ]]; then
        for i in {0..10};do if [ "${line:i:1}" != " " ]; then break; fi; done
        if [ $i -gt $ident ]; then
           ((lev++))
           ident=$i
        elif [ $i -lt $ident ]; then
          ((lev--))
          ident=$i
        fi
      else
        lev=0
        ident=0
      fi
      lne=$(echo ${line//$/%%24})
      if [ $lev -eq 0 ]; then
        process_yaml_0
      elif [ $lev -eq 1 ]; then
        process_yaml_1
      elif [ $lev -eq 2 ]; then
        process_yaml_2
      elif [ $lev -eq 3 ]; then
        process_yaml_3
      fi
    done < "$YML_FILE"
}

process_yaml_initialize() {
    local sts=$STS_SUCCESS
    local i s line lne X
    wlog "===== [Initialize] ====="
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[initialize] from .travis.conf] ------"
    fi
    for i in {1..9}; do
      line=$(get_cfg_value "" "yaml_init_$i")
      if [ -n "$line" ]; then
        process_yaml_run_cmd "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
    done
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[initialize.packages] from .travis.conf] ------"
    fi
    X="${PKGNAME}__"
    line=$(get_cfg_value "" "${X}yaml_init_1")
    if [ -n "$line" ]; then
      for i in {1..9}; do
        line=$(get_cfg_value "" "${X}yaml_init_$i")
        if [ -n "$line" ]; then
          process_yaml_run_cmd "$line"
          s=$?; [ ${s-0} -ne 0 ] && sts=$s
        fi
      done
    fi
    return $sts
}

process_yaml_exit() {
    local sts=$STS_SUCCESS
    local i line lne X
    wlog "===== [Ending] ====="
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[exit.packages] from .travis.conf] ------"
    fi
    X="${PKGNAME}__"
    line=$(get_cfg_value "" "${X}yaml_exit_1")
    if [ -n "$line" ]; then
      for i in {1..9}; do
        line=$(get_cfg_value "" "${X}yaml_exit_$i")
        if [ -n "$line" ]; then
          process_yaml_run_cmd "$line"
        fi
      done
    fi
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[exit] from .travis.conf] ------"
    fi
    for i in {1..9}; do
      line=$(get_cfg_value "" "yaml_exit_$i")
      if [ -n "$line" ]; then
        process_yaml_run_cmd "$line"
      fi
    done
    return $sts
}

process_yaml_before_install() {
    wlog "===== [Before install] ====="
    local sts=$STS_SUCCESS
    local i s line lne X
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[addons.packages] in .travis.yml] ------"
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      for lne in $YML_packages; do
        if [ "$FH" == "RHEL" ]; then
          line="yum install $lne"
        else
          line="apt-get install $lne"
        fi
        process_yaml_run_cmd "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
    fi
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[before_install] in .travis.yml] ------"
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      for lne in $YML_before_install; do
        process_yaml_run_cmd "$lne"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
    fi
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[env] in .travis.yml] ------"
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      for lne in $YML_env; do
        line="export $(process_yaml_quote_xtl $lne)"
        run_traced "$line"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
    fi
    return $sts
}

process_yaml_install() {
# process_yaml_install(init)
    local sts=$STS_SUCCESS
    local i s line line1 lne
    [ -n "$1" ] && line1="export $(process_yaml_quote_xtl $1)"
    wlog "===== [Install $line1] ====="
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[env.global] in .travis.yml] ------"
    fi
    for lne in $YML_global; do
      line="export $(process_yaml_quote_xtl $lne)"
      run_traced "$line"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    done
    if [ "$TRAVIS_DEBUG_MODE" != "0" ]; then
      wlog "------ [[install] in .travis.yml] ------"
    fi
    run_traced "$line1"
    for lne in $YML_install; do
      process_yaml_run_cmd "$lne"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    done
    return $sts
}

process_yaml_before_script() {
# process_yaml_before_script(init)
    local sts=$STS_SUCCESS
    local line1 lne
    line1=$(process_yaml_quote $1)
    wlog "===== [Before script $line1] ====="
    if [ -z "$line1" -o "${line1:0:1}" == "#" ]; then
      sts=127
    else
      for lne in $YML_before_script; do
        process_yaml_run_cmd "$lne" "$line1"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
    fi
    return $sts
}

process_yaml_after_success() {
    local sts=$STS_SUCCESS
    local i
    local s
    local line
    local line1
    local lne
    for lne in $YML_after; do
      line=$(process_yaml_quote_xtl $lne)
      process_yaml_run_cmd "$line"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    done
    return $sts
}

process_yaml_run_cmd() {
#process_yaml_run_cmd (cmd init)
    local xcmd=$(process_yaml_quote_xtl "$1")
    local ix ix1 ix2 c i x s p pp tk z sts xtlcmd
    local xlint xtest xtfex xpkg xcd
    if [ -n "$2" ]; then
      local line1="$(process_yaml_quote_xtl $2) "
    else
      local line1
    fi
    c=$xcmd
    if [ "$FH" == "RHEL" ]; then
      if [[ $xcmd =~ which[[:space:]]nodejs ]]; then
        xcmd=$(echo "$xcmd"|sed -e s/nodejs/node/g)
      fi
    fi
    read -r -a x<<<"$xcmd"
    ix=0
    if [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "sudo" ]; then
      xcmd="$(echo $xcmd|sed -e 's/sudo //g')"
      # read -r -a x<<<"$xcmd"
      ((ix++))
    fi
    if [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "if" ]; then
      ((ix++))
      while [ -n "${x[$ix]}" ]; do
        if [ "${x[$ix]}" == "then" ]; then break; fi
        ((ix++))
      done
      ((ix++))
    fi
    ix1=$ix
    ((ix1++))
    ix2=$ix1
    ((ix2++))
    ix3=$ix2
    ((ix3++))
    if [ "$FH" == "Debian" -a "${x[$ix]}" == "yum" ]; then
      xcmd="$(echo $xcmd|sed -e 's/yum /apt-get /g')"
      x[$ix]="apt-get"
    elif [ "$FH" == "RHEL" -a "${x[$ix]}" == "apt-get" ]; then
      xcmd="$(echo $xcmd|sed -e 's/apt-get /yum /g')"
      x[$ix]="yum"
    fi
    if [ "${x[$ix]}" == "yum" -o "${x[$ix]}" == "apt-get" ]; then
      pp="python-serial libcups2-dev cups-devel unixodbc unixODBC unixodbc-dev unixODBC-dev unixODBC-devel"
      pp="$pp python-mysqldb MYSQL-python python-yaml pyyaml pyYAML PyYAML python-pypdf pypdf pyPdf"
      pp="$pp ruby-sass rubygem-sass python-simplejson python2-simplejson expect-dev antiword"
      if [[ $pp =~ ${x[$ix2]} ]]; then
        xcmd="$(echo $xcmd|sed -e 's/yum/$YML_lisa/g')"
        xcmd="$(echo $xcmd|sed -e 's/apt-get/$YML_lisa/g')"
        x[$ix]=$YML_lisa
      fi
    fi
    if [ "${x[$ix]}" == "$YML_lisa" -a "${x[$ix1]}" == "install" ]; then
      if $($YML_lisa status ${x[$ix2]} &>/dev/null); then
        xcmd="# $xcmd"
      else
        xcmd="false; # Warning! TODO> $xcmd"
      fi
    elif [ "${x[$ix]}" == "yum" -a "${x[$ix1]}" == "install" ]; then
      if $(rpm -q ${x[$ix2]} &>/dev/null); then
        xcmd="# $xcmd"
      elif $(yum info ${x[$ix2]} &>/dev/null); then
        xcmd="# $xcmd"
      else
        xcmd="false; # Warning! TODO> $xcmd"
      fi
    elif [ "${x[$ix]}" == "apt-get" -a "${x[$ix1]}" == "install" ]; then
      if $(dpkg-query -s ${x[$ix2]} &>/dev/null); then
        xcmd="# $xcmd"
      else
        xcmd="false; # Warning! TODO> $xcmd"
      fi
    elif [ "${x[$ix]}" == "git" -a "${x[$ix1]}" == "clone" ]; then
      ix=$ix2
      tk=${x[$ix]}
      while [ "${tk:0:1}" == "-" ]; do ((ix++)); tk=${x[$ix]}; done
      if [ "${x[$ix]}" == "https://github.com/zeroincombenze/tools.git" ]; then
        if [ "$USER" == "travis" ]; then
          xcmd="ln -s /opt/odoo/tools $HOME"
        else
          xcmd="ln -s $TRAVIS_SAVED_HOME/tools $HOME"
        fi
      elif [ "${x[$ix]}" == "https://github.com/OCA/maintainer-quality-tools.git" ]; then
        if [ ${opt_virt:-0} -eq 0 ]; then
          if [ -d $HOME/maintainer-quality-tools/ -a ! -L $HOME/maintainer-quality-tools/ ]; then
            :
            # run_traced "rm -fR $HOME/maintainer-quality-tools/"
          elif [ -f $HOME/maintainer-quality-tools/ ]; then
            run_traced "rm -f $HOME/maintainer-quality-tools"
          fi
          if [ ! -L $HOME/maintainer-quality-tools/ ]; then
            if [ -d $HOME/tools/maintainer-quality-tools/ ]; then
              xcmd="ln -s $HOME/tools/maintainer-quality-tools/ $HOME"
            elif [ -d $HOME/pypi/maintainer-quality-tools/maintainer-quality-tools/ ]; then
              xcmd="ln -s $HOME/pypi/maintainer-quality-tools/maintainer-quality-tools/ $HOME"
            else
              xcmd="false"
            fi
          fi
        fi
      fi
    elif [ "${x[$ix]}" == "pip" -a "${x[$ix1]}" == "install" ]; then
      if [ ${opt_virt:-0} -eq 0 ]; then
        ix=$ix2
        tk=${x[$ix]}
        xcmd="# ${x[$ix]} ${x[$ix1]}"
        while [ -n "${x[$ix]}" ]; do
          if [ "${x[$ix]}" == "-r" -o "${x[$ix]}" == "--requirement" ]; then
            ((ix++))
            pp=${x[$ix]}
            xcmd="$xcmd -r $pp"
            while IFS=# read -r tk r || [ -n "$tk" ]; do
              if [ -n "$tk" ]; then
                if [ "${tk:0:4}" == "http" ]; then
                  p=$(basename $tk)
                  tk=$(echo $p|grep -Eo '[a-zA-Z0-9_]*'|head -n1)
                fi
                p=$(echo "$tk"|grep -Eo '[^!<=>;\[]*'|head -n1)
                p=${p//\"/}
                p=$(echo $p)
                if [ "$p" == "transifex-client" ]; then
                  xcmd="$xcmd $p"
                elif $(pip show $p &>/dev/null); then
                  xcmd="$xcmd $p"
                else
                  xcmd="false; $xcmd <$p>"
                fi
              fi
            done < $pp
          elif [ "${tk:0:1}" != "-" ]; then
            p=$(echo "${x[$ix]}"|grep -Eo '[^!<=>;]*'|head -n1)
            p=${p//\"/}
            if $(pip show $p &>/dev/null); then
              xcmd="$xcmd $p"
            else
              xcmd="false; $xcmd <$p>"
            fi
            if [ "${tk: -1}" == ";" ]; then break; fi
          else
            xcmd="$xcmd $p"
          fi
          ((ix++))
          tk=${x[$ix]}
        done
      else
        if ! $(echo $xcmd|grep -q "\--user"); then
          xcmd=${xcmd/pip install/pip install --user}
        fi
      fi
    elif [ "${x[$ix]}" == "mv" -a "${x[$ix1]}" == "${HOME}/tools/maintainer-quality-tools" ]; then
      if [ $opt_dbgmnt -ne 0 ]; then
        local TRAVIS_MQT_PATH=$(get_cfg_value "" "MQT_DEF_DEVPATH")
      else
        local TRAVIS_MQT_PATH=$(get_cfg_value "" "MQT_DEF_PATH")
      fi
      TRAVIS_MQT_PATH=$(readlink -e $TRAVIS_MQT_PATH/..)
      xcmd="${x[$ix]} $TRAVIS_MQT_PATH ${HOME}/"
      xcmd=${xcmd/mv /cp -R }
    elif [ "${x[$ix]}" == "rvm" -a "${x[$ix1]}" == "install" ]; then
      xcmd="# $xcmd"
    elif [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "ln" -a "${x[$ix1]}" == "-s" -a "${x[$ix2]:0:16}" == "/opt/odoo/build/" ]; then
      xcmd="# $xcmd"
    elif [ "${x[$ix]}" == "sh" -a "${x[$ix2]}" == "/etc/init.d/xvfb" ]; then
      xcmd="# $xcmd"
    elif [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "sh" ]; then
      xcmd="# $xcmd"
    elif [ ${opt_virt:-0} -eq 0 -a "${x[$ix]}" == "fi" ]; then
      :
    else
      if [ -z "$REPOSNAME" ]; then
        pp=$PKGPATH
      else
        pp=$(readlink -e $PRJPATH/../$REPOSNAME/)
      fi
      while [ -n "${x[$ix]}" ]; do
        if [[ "${x[$ix]}" =~ cd ]]; then
          xcd=1
        elif [[ "${x[$ix]}" =~ LINT_CHECK=.1. ]]; then
          xlint=1
        elif [[ "${x[$ix]}" =~ LINT_CHECK=.0. ]]; then
          xlint=0
        elif [[ "${x[$ix]}" =~ TRANSIFEX=.1. ]]; then
          xcmd="# $xcmd"
        elif [[ "${x[$ix]}" =~ TESTS=.1. ]]; then
          xtest=1
        elif [[ "${x[$ix]}" =~ ODOO_REPO=.$YML_repo. ]]; then
          if [ ${opt_virt:-0} -eq 0 ]; then
            xcmd=$(echo $xcmd|sed -e "s|$YML_repo|local/odoo|g")
            x[$ix]=$(echo x[$ix]|sed -e "s|$YML_repo|local/odoo|g")
          fi
        elif [[ "${x[$ix]}" =~ INCLUDE=..getaddons.py.*/opt/odoo/build/.*/OCB/openerp/addons.*/opt/odoo/build/.*/OCB/addons ]]; then
          if [ ${opt_virt:-0} -eq 0 ]; then
            xcmd="$(echo $xcmd|sed -e 's|/opt/odoo/build/.*/OCB/|/opt/odoo/$BRANCH/|g')"
          fi
        elif [ "${x[$ix]}" == "\${OPTS}" ]; then
          xcmd="$(echo $xcmd|sed -e 's|${OPTS}|'$OPTS'|g')"
          x[$ix]=$OPTS
        else
          for xpkg in travis_install_nightly travis_run_tests travis_after_tests_success; do
            if [ "${x[$ix]}" == "$xpkg" ]; then
              xtlcmd="$xpkg"
              if [ "$xlint" != "1" -o "$xtest" == "1" ] && [ "$xcd" != "1" -a $opt_force -eq 0 ]; then
                if [ ${opt_virt:-0} -eq 0 ]; then
                  xtlcmd=$(get_cfg_value "" "EM_$xpkg")
                else
                  xtlcmd=$(get_cfg_value "" "RUN_$xpkg")
                fi
                if [ -n "$xtlcmd" ]; then
                  xtlcmd=$(process_yaml_unquote "$xtlcmd")
                  xcmd="$(echo $xcmd|sed -e 's|'$xpkg'|'$xtlcmd'|g')"
                  xcmd=$(process_yaml_quote "$xcmd")
                elif [ -z "${x[$ix]}" ] && [[ "$xtlcmd" =~ \$\{ ]]; then
                  xcmd=$(process_yaml_quote "$xcmd")
                  xcmd="# $xcmd"
                fi
              fi
            fi
          done
        fi
      ((ix++));
      done
    fi
    if [ "$action" == "parseyaml" ]; then
       if [ "$c" != "$xcmd" -a "${xcmd:0:1}" != "#" ]; then
         echo "## $c"
       fi
       echo "$xcmd"
    else
      if [ "$c" != "$xcmd" -a "${xcmd:0:1}" != "#" ]; then
         wlog "## $c"
      fi
      run_traced "$line1$xcmd"
    fi
    return $?
}

process_yaml() {
# process_yaml ()
    local sts=$STS_SUCCESS
    local i s p v X
    local line lne line1 lne1
    if [ "$action" == "chkconfig" ]; then
      YML_FILE=$TOOLS_PATH/chkconfig.yml
      if [ ! -f $YML_FILE ]; then
        do_chkconfig
        return $STS_SUCCESS
      fi
    else
      YML_FILE=$PRJPATH/.travis.yml
      if [ ! -f $YML_FILE ]; then
        YML_FILE=$TOOLS_PATH/travis.yml
      fi
    fi
    if [ -f $YML_FILE ]; then
      wlog "=== Process YAML file ==="
      process_yaml_file "$YML_FILE"
      sts=$STS_SUCCESS
      create_virtual_env
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
      wlog "===== [System informations] ====="
      # update-alternatives --set python /usr/bin/python$TRAVIS_PYTHON_VERSION
      # if [ ${opt_virt:-0} -eq 0 -a -f /usr/bin/python$TRAVIS_PYTHON_VERSION ]; then
      #   alias python=/usr/bin/python$TRAVIS_PYTHON_VERSION
      #   alias pip=/usr/bin/pip$TRAVIS_PYTHON_VERSION
      # else
      #   wlog "Unsupported pythone version $TRAVIS_PYTHON_VERSION"
      # fi
      for lne in TCONF YML_FILE YML_lisa YML_mgrodoo YML_repo MQT_DEF_PATH MQT_PATH DEVPATH TOOLS_PATH PRJNAME PKGNAME REPOSNAME BRANCH PRJPATH PKGPATH TRAVIS TRAVIS_BUILD_DIR TRAVIS_HOME TRAVIS_PYTHON_VERSION TRAVIS_REPO_SLUG TRAVIS_BRANCH HOME_BRANCH TRAVIS_CWD; do
         lne1=${!lne}
         if [ -n "$lne1" ]; then
           wlog "\$ $lne=$lne1"
         fi
      done
      if [ $sts -eq $STS_SUCCESS ]; then
        process_yaml_initialize
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        process_yaml_before_install
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        if [ -z "$YML_matrix" ]; then
          YML_matrix=":"
        fi
        for lne in $YML_matrix; do
          if [ "$lne" == ":" ]; then
            line1=
            lne1=
          else
            line1="$lne"
            lne1=$(process_yaml_quote "$lne")
          fi
          if [[ "$lne1" =~ ODOO_REPO=.[A-Za-z]+ ]]; then
            if [[ ! "$lne1" =~ ODOO_REPO=.$YML_repo. ]]; then
              continue
            fi
          fi
          if [ $sts -eq $STS_SUCCESS ]; then
            run_traced "cd $TRAVIS_BUILD_DIR"
            process_yaml_install "$line1"
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
          fi
          if [ $sts -eq $STS_SUCCESS ]; then
            process_yaml_before_script "$line1"
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
          fi
          if [ $sts -eq $STS_SUCCESS ]; then
            wlog "===== [Script matrix $lne1] ====="
            for lne in $YML_script; do
              process_yaml_run_cmd "$lne"
              s=$?; [ ${s-0} -ne 0 ] && sts=$s
              if [ $sts -ne $STS_SUCCESS ]; then
                elog "!Script aborted by error!!"
                break
              fi
            done
          fi
        done
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        wlog "===== [After success] ====="
        process_yaml_after_success
      fi
      if [ "$TRAVIS_DEBUG_MODE" == "2" ]; then
        read -p "Press RET to continue ..."
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        process_yaml_exit
      fi
      drop_virtual_env
    else
      process_local
      sts=$?
    fi
    return $sts
}

process_yaml_echo() {
# process_yaml_echo(lev, line)
    local lev=$1
    ((lev++))
    local lm="            "
    lm=${lm:0:$lev}
    local lne="$2"
    if [ $opt_dprj -ne 0 ]; then
      echo -n "$lm- "
      process_yaml_run_cmd "$lne"
    else
      local line="- $(process_yaml_quote_xtl $lne)"
      echo "$lm$line"
    fi
}

checkpid() {
    [ -f $1 ] || return 1
    local pid=$(cat $1)
    [ -d /proc/$pid ] && return 0
    return 1
}


OPTOPTS=(h        b          c        D        f         j        k        l              M          m       n            O         p        q           r     V           v           w        W)
OPTDEST=(opt_help opt_branch opt_conf opt_dlvl opt_force opt_dprj opt_keep opt_logdir     opt_dbgmnt opt_mis opt_dry_run  opt_org   opt_pyth opt_verbose opt_r opt_version opt_verbose opt_wait opt_virt)
OPTACTI=(1        "="        "="      "="      1         1        1        "="            1          1       "1>"         "="       1        0           1     "*>"        "+"         1        0)
OPTDEFL=(0        10.0       ""       ""       0         0        0        "~/travis_log" 0          0       0            "local"   0        -1          0     ""          -1          0        1)
OPTMETA=("help"   "branch"   "file"   ""        "dprj"   ""       "dir"          ""         ""      "do nothing" "git-org" ""       "verbose"   "res" "version"   "verbose"   ""       "")
OPTHELP=("this help"\
 "branch: must be 6.1 7.0 8.0 9.0 10.0 or 11.0 (def 10.0)"\
 "configuration file (def .travis.conf)"\
 "travis_debug_mode: may be 0,1,2; w/o value from .travis.yml"\
 "force yaml to run w/o cmd subst"\
 "execute tests in project dir rather in test dir (or expand macro if parseyaml)"\
 "keep DB after tests"\
 "log directory (def=~/travis_log)"\
 "use local MQT"\
 "show missing line in report coverage"\
 "do nothing (dry-run)"\
 "git organization, i.e. oca or zeroincombenze"\
 "prefer python test over bash test when avaiable"\
 "silent mode"\
 "run restricted mode (w/o parsing travis.yml file)"\
 "show version"\
 "verbose mode"\
 "wait for another instance running"\
 "do not use virtualenv to run tests")
OPTARGS=(action sub)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_help -gt 0 ]; then
  print_help "Travis-ci emulator for local developer environment\nAction may be: check, test, emulate (default), setup, chkconfig or parseyaml"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

[ -z "$action" ] && action=emulate
ACTIONS="check test emulate setup chkconfig parseyaml"
VIRTACTS="check test emulate"
if [[ " $ACTIONS " =~ [[:space:]]$action[[:space:]] ]]; then
  if [[ " $VIRTACTS " =~ [[:space:]]$action[[:space:]] ]]; then
    :
  else
    opt_virt=0
  fi
else
  echo "Invalid action!"
  echo "action should be one of $ACTIONS"
  exit $STS_FAILED
fi
opts_travis "$opt_org"
CFG_init
conf_default
link_cfg $DIST_CONF $TCONF
if [ $opt_verbose -gt 1 ]; then set -x; fi
init_travis

if [ "$action" == "parseyaml" ]; then
  init_travis
  prepare_env_travis "$action"
  check_4_travis
  if [ -z "$sub" ]; then
    sub=$PRJPATH/.travis.yml
    if [ ! -f $sub ]; then
      sub=$TOOLS_PATH/travis.yml
    fi
  fi
  process_yaml_file "$sub"
  echo "addons:"
  echo "  apt:"
  echo "    packages:"
  for lne in $YML_packages; do
    process_yaml_echo 3 "$lne"
  done
  echo "before_install:"
  for lne in $YML_before_install; do
    process_yaml_echo 1 "$lne"
  done
  echo "env:"
  for lne in $YML_env; do
    process_yaml_echo 1 "$lne"
  done
  echo "  global:"
  for lne in $YML_global; do
    process_yaml_echo 1 "$lne"
  done
  echo "  matrix:"
  for lne in $YML_matrix; do
    process_yaml_echo 1 "$lne"
  done
  echo "install:"
  for lne in $YML_install; do
    process_yaml_echo 1 "$lne"
  done
  echo "before_script:"
  for lne in $YML_before_script; do
    process_yaml_echo 1 "$lne"
  done
  echo "script:"
  for lne in $YML_script; do
    process_yaml_echo 1 "$lne"
  done
  echo "after_success:"
  for lne in $YML_after; do
    process_yaml_echo 1 "$lne"
  done
  sts=$STS_SUCCESS
  exit $sts
fi
if [ "$action" == "setup" ]; then
  opt_r=0
  DEF_DEVPATH=$(readlink -f ~/dev)
  if [ ! -d $DEF_DEVPATH ]; then
    run_traced mkdir -p $DEF_DEVPATH
  fi
  if [ ! -d $DEF_DEVPATH/_travis ]; then
    run_traced  mkdir -p $DEF_DEVPATH/_travis
  fi
  if [ ! -d $DEF_DEVPATH/_travis/cfg ]; then
    run_traced mkdir -p $DEF_DEVPATH/_travis/cfg
  fi
  if [ "$TDIR" != "$DEF_DEVPATH" ]; then
    run_traced cp $TDIR/$THIS $DEF_DEVPATH/$THIS
    # for f in travis_install_pkgs travis_run_tests travis_after_tests_success; do
    for f in travis_run_tests travis_after_tests_success; do
      run_traced cp $TDIR/_travis/$f $DEF_DEVPATH/_travis/$f
    done
  fi
  exit $STS_SUCCESS
fi

sts=$STS_SUCCESS
init_travis
prepare_env_travis "$action"
check_4_travis
PIDFILE=
if [ $sts -eq $STS_SUCCESS ]; then
  if [ ${opt_virt:-0} -eq 0 ]; then
    PIDFILE=$(get_cfg_value "" "PIDFILE")
    PIDFILE=$(expand_path "$PIDFILE")
    if [ $opt_wait -ne 0 ]; then
      ctr=1440
    else
      ctr=1
    fi
    while [ $ctr -gt 0 ]; do
      checkpid "$PIDFILE"
      sts=$?
      if [ $sts -eq 0 ]; then
        echo "Another instance of travis emulator is running"
        ((ctr--))
        if [ $ctr -eq 0 ]; then
          exit $sts
        fi
        sleep 60
      else
        break
      fi
    done
    echo $$>$PIDFILE
  fi
  if [ $opt_r -gt 0 ]; then
    process_local
    sts=$?
  else
    [ "${opt_logdir:0:1}" == "~" ] && opt_logdir=$HOME/${opt_logdir:1}
    mkdir -p $opt_logdir
    [ -f $opt_logdir/${PKGNAME}_${BRANCH}.log ] && rm -f $opt_logdir/${PKGNAME}_${BRANCH}.log
    process_yaml 2>&1 | tee -a $opt_logdir/${PKGNAME}_${BRANCH}.log
    sts=$?
  fi
  if [ -n "$PIDFILE" ]; then
    rm -f $PIDFILE
  fi
fi
exit $sts
