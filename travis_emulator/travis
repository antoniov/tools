#! /bin/bash
# -*- coding: utf-8 -*-
#
# Travis-ci emulator
# Emulate travis-ci on local machine, to test before upgrade git project
# Deploy:
# ~/dev                          -> this script
# ~/dev/_travis                  -> default script (travis_install_pkgs, travis_runs_tests, travis_after_tests_success)
# ~/maintainer-quality-tools -> actual scripts, mainly for Odoo environment by OCA; thery replaces default scripts
# When developping travis emulator itself, deployment is:
# ~/dev/pypi/travis_em/travis_em -> this script
# ~/dev/pypi/travis_em/travis_em/_travis -> default script (travis_install_pkgs, travis_runs_tests, travis_after_tests_success)
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in "$TDIR" "$TDIR/.." "." ".." "~" "/etc"; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg "travisrc" "$TDIR . .. $HOME/dev $HOME" "_travis")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.1.62.3


# run_cmd () {
#     if [ "$(echo :$SHELLOPTS:|grep :xtrace: 2>/dev/null)" ]; then set +x; local SET_X="set -x"; else local SET_X=; fi
#     local xcmd="$1"
#     local sts=$STS_SUCCESS
#     local t=$(type -t $xcmd|head -n1)
#     local x
#     local s
#     read -r -a x<<<"$xcmd"
#     local k="${x[0]}"
#     if [ "$t" == "file" ]; then
#       grep -q "^.ELF" $k
#       s=$?
#       if [ $s -eq $STS_SUCCESS ]; then
#         t="bin"
#       fi
#     fi
#     if [ ${opt_dry_run:-0} -eq 0 ]; then
#       if [ ${opt_verbose:-0} -gt 1 ]; then
#         echo "\$ $xcmd"
#       fi
#       if [ "$t" == "file" ]; then
#         eval "$xcmd"
#         sts=$?
#       else
#         eval "$xcmd"
#         sts=$?
#       fi
#     fi
#     $SET_X
#     return $sts
# }

process_local () {
    if [ $TOOLS_PATH/travis_run_tests ]; then
      if [ "$action" == "check" ]; then
        opts=$(inherits_travis_opts "Knrv")
      elif [ "$action" == "test" ]; then
        opts=$(inherits_travis_opts "Tnrv")
      else
        opts=$(inherits_travis_opts "KTnrv")
      fi
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      sts=$?
    elif [ $opt_r -gt 0 ]; then
      if [ "$action" == "test" ]; then
        please_run_tests "-T"
        sts=$?
      elif [ "$action" == "check" ]; then
        please_run_tests "-K"
        sts=$?
      else
        please_run_tests "-KT"
        sts=$?
      fi
    else
      sts=127
    fi
    if [ $sts -eq $STS_SUCCESS -a "$action" != "check" -a "$action" != "test" ]; then
      opts=$(inherits_travis_opts "jnqv")
      run_traced "$TOOLS_PATH/travis_after_tests_success $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    fi
    return $sts
}

process_yaml_init () {
    YML_sect=
    YML_sect0=
    YML_env=
    YML_global=
    YML_matrix=
    YML_packages=
    YML_install=
    YML_script=
    YML_after=
    for i in {1..9}; do
      declare YML_CMD_DIS_$i=$(get_cfg_value "" "yaml__cmd_dis__$i")
    done
    FH=$(xuname -f)
}


process_yaml_unquote () {
  lne="$(echo $1|sed -e s/\"/%%22/g -e s/\'/%%26/g -e s/\ /%%20/g)"
  echo $lne
}

process_yaml_quote () {
  lne="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g)"
  echo $lne
}

process_yaml_quote_xtl () {
  lne="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g)"
  if [[ $lne =~ ODOO_REPO=[\"]*OCA/OCB ]]; then
   lne="$(echo $lne|sed -e s:OCA/OCB:local/odoo:g)"
  elif [[ $lne =~ yum[[:space:]]+install[[:space:]]+expect-dev ]]; then
   lne="# $lne"
  elif [[ $lne =~ yum[[:space:]]+install[[:space:]]+python-lxml ]]; then
   lne="# $lne"
  elif [[ $lne =~ yum[[:space:]]+install[[:space:]]+python-simplejson ]]; then
   lne="# $lne"
  elif [[ $lne =~ yum[[:space:]]+install[[:space:]]+python-serial ]]; then
   lne="# $lne"
  elif [[ $lne =~ yum[[:space:]]+install[[:space:]]+python-yaml ]]; then
   lne="# $lne"
  elif [[ $lne =~ git[[:space:]]+clone[[:space:]]+.*https://github.com/OCA/maintainer-quality-tools.git ]]; then
    if [ ! -d $HOME/maintainer-quality-tools ]; then
      dow=3
    else
      dow=$(date +%w)
    fi
    if [ $opt_dry_run -ne 0 -o $dow -ne 3 ]; then
     lne="# $lne"
    else
      if [ ! -d $HOME/maintainer-quality-tools ]; then
        local MQT_UPDT="2016-00-00"
      else
        local MQT_UPDT=$(get_cfg_value "" "MQT_UPDT")
      fi
      local curtm=$(date +"%Y-%m-%d")
      if [ "$curtm" == "$MQT_UPDT" ]; then
        lne="# $lne"
      else
        if [ -d $HOME/maintainer-quality-tools/ ]; then
          wlog "\$ rm -fR $HOME/maintainer-quality-tools/"
          rm -fR $HOME/maintainer-quality-tools/
        fi
        if [ "$(grep ^MQT_UPDT $TCONF)" ]; then
          sed -i "s|^MQT_UPDT *=.*|MQT_UPDT=$curtm|" $TCONF
        else
          echo "MQT_UPDT=$curtm">>$TCONF
        fi
      fi
    fi
  elif [[ $lne =~ git[[:space:]]+clone[[:space:]]+.*https://github.com/zeroincombenze/tools.git ]]; then
   lne="# $lne"
  # elif [[ $lne =~ PATH=\$\{*HOME\}/maintainer-quality-tools/travis ]]; then
  #  lne="# $lne"
  elif [[ $lne =~ PATH=\$\{*HOME\}/tools/travis_emulator/_travis ]]; then
    if [ "$PRJNAME" == "travis_emulator" ]; then
      lne="export PATH=${HOME}/dev/pypi/travis_emulator/travis_emulator/_travis:${PATH}"
    fi
    # lne="# $lne"
  elif [[ $lne =~ travis_install_nightly ]]; then
   lne="# $lne"
  # elif [[ $lne =~ travis_run_tests ]]; then # debug
  #   lne="read #lne"
  fi
  lne=$(expand_path "$lne")
  echo $lne
}


process_yaml_do () {
    # echo "[$YML_sect]" #debug
    local lne=
    if [ "$YML_sect" == "python" ]; then
      lne="#"
    elif [ "$YML_sect" == "addons.apt.packages" ]; then
      if [ "$FH" == "RHEL" ]; then
        lne="yum install $(echo $1)"
      else
        lne="apt-get install $(echo $1)"
      fi
      lne=$(process_yaml_unquote "$lne")
      YML_packages="$YML_packages $lne"
    elif [ "$YML_sect" == "env" ]; then
      lne=$(process_yaml_unquote "$1")
      YML_env="$YML_env $lne"
    elif [ "$YML_sect" == "env.global" ]; then
      lne=$(process_yaml_unquote "$1")
      if [ "${lne:0:7}" == "secure:" ]; then
        lne="# $lne"
      else
        YML_global="$YML_global $lne"
      fi
    elif [ "$YML_sect" == "env.matrix" ]; then
      lne=$(process_yaml_unquote "$1")
      YML_matrix="$YML_matrix $lne"
    elif [ "$YML_sect" == "install" ]; then
      lne=$(process_yaml_unquote "$1")
      YML_install="$YML_install $lne"
    elif [ "$YML_sect" == "script" ]; then
      lne=$(process_yaml_unquote "$1")
      YML_script="$YML_script $lne"
    elif [ "$YML_sect" == "after_success" ]; then
      lne=$(process_yaml_unquote "$1")
      YML_after="$YML_after $lne"
    else
      local lne="$(echo $1)"
    fi
    # echo ">>> $lne" #debug
}

process_yaml_0 () {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect0=$a
          YML_sect="$YML_sect0"
        else
          YML_sect0=
          YML_sect=
          declare YML_$a="$(echo $b)"
          #echo ">YML_$a=$(echo $b)" #debug
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_1 () {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect1=$a
          YML_sect="$YML_sect0.$YML_sect1"
        else
          YML_sect1=
          YML_sect="$YML_sect0"
          declare ${YML_sect0}__$a="$(echo $b)"
          #echo ">${YML_sect0}__$a=$(echo $b)" #debug
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_2 () {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$lne"
        if [ -z "$b" ]; then
          YML_sect2=$a
          YML_sect="$YML_sect0.$YML_sect1.$YML_sect2"
        else
          YML_sect2=
          YML_sect="$YML_sect0.$$YML_sect1"
          declare ${YML_sect0}__${YML_sect1}__$a="$(echo $b)"
          #echo ">${YML_sect0}__${YML_sect1}__$a=$(echo $b)" #debug
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_3 () {
    if [ -n "$lne" ]; then
      IFS=- read a b <<<"$lne"
      if [ -z "$a" ]; then
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_file () {
    local f1=$1
    process_yaml_init
    local lev=0
    local ident=0
    local line=
    local lne=
    local line1=
    local lne1=
    local linex=
    local a b i r
    # while IFS=\~ read -r line; do
    while IFS="#" read -r line r; do
      # if [[ $line =~ ^[[:space:]]*# ]]; then
      #   line=
      # elif [[ $line =~ ^[[:space:]]+ ]]; then
      if [[ $line =~ ^[[:space:]]+ ]]; then
        for i in {0..10};do if [ "${line:i:1}" != " " ]; then break; fi; done
        if [ $i -gt $ident ]; then
           ((lev++))
           ident=$i
        elif [ $i -lt $ident ]; then
          ((lev-))
          ident=$i
        fi
      else
        lev=0
        ident=0
      fi
      lne=$(echo $line)
      if [ $lev -eq 0 ]; then
        process_yaml_0
      elif [ $lev -eq 1 ]; then
        process_yaml_1
      elif [ $lev -eq 2 ]; then
        process_yaml_2
      elif [ $lev -eq 3 ]; then
        process_yaml_3
      fi
    done < "$f1"
}

process_yaml_before_install () {
    wlog "===== [Before install] ====="
    local sts=$STS_SUCCESS
    local i
    local s
    local line
    local lne
    for i in {1..9}; do
      line=$(get_cfg_value "" "yaml_init_$i")
      if [ -n "$line" ]; then
        wlog "\$ $line"
        eval $(process_yaml_quote $lne)
        s=$?
        if [ $s -ne $STS_SUCCESS ]; then sts=$s; fi
      fi
    done
    for lne in $YML_packages; do
      line=$(process_yaml_quote_xtl $lne)
      wlog "\$ $line"
      eval $(process_yaml_quote_xtl $lne)
      s=$?
      if [ $s -ne $STS_SUCCESS ]; then sts=$s; fi
    done
    for lne in $YML_global; do
      line="export $(process_yaml_quote_xtl $lne)"
      wlog "\$ $line"
      eval $line
    done
    for lne in UNBUFFER; do
      line=$(get_cfg_value "" "$lne")
      if [ -n "$line" ]; then
        wlog "\$ export $lne=$line"
        export $lne=$line
      fi
    done
    for i in {1..9}; do
      line=$(get_cfg_value "" "yaml_before_install_$i")
      if [ -n "$line" ]; then
        wlog "\$ $line"
        eval $(process_yaml_quote $lne)
        s=$?
        if [ $s -ne $STS_SUCCESS ]; then sts=$s; fi
      fi
    done
    return $sts
}

process_yaml_install () {
    wlog "===== [Install] ====="
    local sts=$STS_SUCCESS
    local i s line lne
    for lne in $YML_install; do
      line=$(process_yaml_quote_xtl $lne)
      wlog "\$ $line"
      eval $(process_yaml_quote_xtl $lne)
      s=$?
      if [ $s -ne $STS_SUCCESS ]; then sts=$s; fi
    done
    for i in {1..9}; do
      line=$(get_cfg_value "" "yaml_install_$i")
      if [ -n "$line" ]; then
        wlog "\$ $line"
        eval $(process_yaml_quote $lne)
        s=$?
        if [ $s -ne $STS_SUCCESS ]; then sts=$s; fi
      fi
    done
    return $sts
}

process_yaml_before_script () {
    local sts=$STS_SUCCESS
    local i
    local s
    local line
    local line1
    local lne
    line=$(process_yaml_quote_xtl $1)
    wlog "===== [Before script $line ] ====="
    if [ "$action" == "check" ]; then
      if [[ $line =~ LINT_CHECK=[\"]*0 ]]; then
        line="# $line"
      elif [[ $line =~ TESTS=[\"]*1 ]]; then
        line="# $line"
      fi
    elif [ "$action" == "test" ]; then
      if [[ $line =~ LINT_CHECK=[\"]*1 ]]; then
        line="# $line"
      elif [[ $line =~ TESTS=[\"]*0 ]]; then
        line="# $line"
      fi
    else
      true
    fi
    if [[ $line =~ TRANSIFEX=[\"]*1 ]]; then
      line="# $line"
    elif [[ $line =~ ODOO_REPO=[\"]*odoo/odoo ]]; then
      line="# $line"
    fi
    if [ -z "$line" -o "${line:0:1}" == "#" ]; then
      sts=127
    else
      for lne in $YML_global; do
        line1="export $(process_yaml_quote_xtl $lne)"
        wlog "\$ $line1"
        eval $line1
      done
      line="export $line"
      wlog "\$ $line"
      eval $line
    fi
    return $sts
}

process_yaml_after_success () {
    local sts=$STS_SUCCESS
    local i
    local s
    local line
    local line1
    local lne
    for lne in $YML_after; do
      line=$(process_yaml_quote_xtl $lne)
      wlog "\$ $line"
      eval $line
      s=$?
      if [ $s -ne $STS_SUCCESS ]; then sts=$s; fi
    done
    return $sts
}

process_yaml () {
    local sts=$STS_SUCCESS
    local i s
    local line lne line1 lne1
    f1=$PRJPATH/.travis.yml
    if [ ! -f $f1 ]; then
      f1=$TOOLS_PATH/travis.yml
    fi
    if [ -f $f1 ]; then
      process_yaml_file "$f1"
      sts=$STS_SUCCESS
      wlog "===== [System informations] ====="
      wlog "# Execution environment: $TRAVIS_ENV"
      if [ ${opt_virt:-0} -gt 0 ]; then
        wlog "\$ virtualenv $TRAVIS_ENVOPTS $TRAVIS_ENVDIR"
        create_virtual_env
      fi
      for lne in HOSTENV TOOLS_PATH MQT_PATH DEVPATH PRJNAME pkgname REPOSNAME BRANCH PRJPATH PKGPATH; do
         lne1=${!lne}
         if [ -n "$lne1" ]; then
           wlog "\$ $lne=$lne1"
         fi
      done
      wlog "===== [Initialize] ====="
      run_svr_test_init
      process_yaml_before_install
      process_yaml_install
      wlog "===== [Script] ====="
      for lne in $YML_matrix; do
        process_yaml_before_script $lne
        s=$?
        if [ $s -ne 127 -a $s -ne $STS_SUCCESS ]; then
          sts=$s
        else
          line=$(process_yaml_quote_xtl $lne)
          for lne1 in $YML_script; do
            line1=$(process_yaml_quote_xtl $lne1)
            wlog "\$ $line $line1"
            eval $line $line1
            s=$?
            if [ $s -ne $STS_SUCCESS ]; then sts=$s; fi
          done
        fi
        if [ $sts -ne $STS_SUCCESS ]; then
          elog "!Script aborted by error!!"
          break
        fi
      done
      wlog "===== [End script] ====="
      run_svr_test_exit
      if [ $sts -eq $STS_SUCCESS ]; then
        process_yaml_after_success
      fi
      drop_virtual_env
    else
      process_local
      sts=$?
    fi
    return $sts
}


OPTOPTS=(h        b          c        H        j        m       n            q           r     V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_virt opt_dprj opt_mis opt_dry_run  opt_verbose opt_r opt_version opt_verbose)
OPTACTI=(1        "="        "="      1        1        1       "1>"         0           1     "*>"        "+")
OPTDEFL=(0        9.0        ""       -1       0        0       0            -1          0     ""          -1)
OPTMETA=("help"   "branch"   "file"   ""       "dprj"   ""      "do nothing" "verbose"   "res" "version"   "verbose")
OPTHELP=("this help"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file (def .travis.conf)"\
 "use virtualenv to run tests"\
 "execute tests in project dir rather in test dir"\
 "show missing line in report coverage"\
 "do nothing (dry-run)"\
 "silent mode"\
 "run restricted mode (w/o parsing travis.yml file)"\
 "show version"\
 "verbose mode")
OPTARGS=(pkg action)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_help -gt 0 ]; then
  print_help "Travis-ci emulator for local developer environment\nAction may be: check, test, all (default), setup or chkconfig"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

if [ -z "$action" ]; then action=all; fi
if [ -z $pkg ]; then pkg="."; fi
# if [ "$action" != "check" -a "$action" != "test" -a "$action" != "all" -a "$action" != "setup" -a "$action" != "chkconfig" ]; then
ACTIONS="check test all setup chkconfig"
VIRTACTS="check test all"
if [[ " $ACTIONS " =~ [[:space:]]$action[[:space:]] ]]; then
  if [[ " $VIRTACTS " =~ [[:space:]]$action[[:space:]] ]]; then
    :
  else
    opt_virt=0
  fi
else
  echo "Invalid action!"
  echo "action should be one of $ACTIONS"
  exit $STS_FAILED
fi
opts_travis
CFG_init
conf_default
link_cfg $TCONF

init_travis
prepare_env_travis "$action"
sts=$STS_SUCCESS
if [ $opt_verbose -gt 1 ]; then set -x; fi

if [ "$action" == "setup" ]; then
  opt_r=0
  DEF_DEVPATH=$(readlink -f ~/dev)
  if [ ! -d $DEF_DEVPATH ]; then
    run_traced mkdir -p $DEF_DEVPATH
  fi
  if [ ! -d $DEF_DEVPATH/_travis ]; then
    run_traced  mkdir -p $DEF_DEVPATH/_travis
  fi
  if [ ! -d $DEF_DEVPATH/_travis/cfg ]; then
    run_traced mkdir -p $DEF_DEVPATH/_travis/cfg
  fi
  if [ "$TDIR" != "$DEF_DEVPATH" ]; then
    run_traced cp $TDIR/$THIS $DEF_DEVPATH/$THIS
    for f in travis_install_pkgs travis_run_tests travis_after_tests_success; do
      run_traced cp $TDIR/_travis/$f $DEF_DEVPATH/_travis/$f
    done
  fi
  exit $STS_SUCCESS
elif [ "$action" == "chkconfig" ]; then
  do_chkconfig
  exit $STS_SUCCESS
fi

check_4_travis
sts=$STS_SUCCESS
if [ $sts -eq $STS_SUCCESS ]; then
  if [ $opt_r -gt 0 ]; then
    wlog "=== Simulate YAML test ==="
    process_local
    sts=$?
  else
    wlog "=== Process YAML file ==="
    process_yaml
    sts=$?
  fi
fi
exit $sts
