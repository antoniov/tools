#! /bin/bash
# -*- coding: utf-8 -*-
#
# Travis-ci emulator
# Emulate travis-ci on local machine, to test before upgrade git project
# Deploy:
# ~/dev                          -> this script
# ~/dev/_travis                  -> default script (travis_install_pkgs, travis_runs_tests, travis_after_tests_success)
# ~/maintainer-quality-tools -> actual scripts, mainly for Odoo environment by OCA; thery replaces default scripts
# When developping travis emulator itself, deployment is:
# ~/dev/pypi/travis_em/travis_em -> this script
# ~/dev/pypi/travis_em/travis_em/_travis -> default script (travis_install_pkgs, travis_runs_tests, travis_after_tests_success)
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -f $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -f ./z0librc ]; then
. ./z0librc
elif [ -f ~/z0librc ]; then
. ~/z0librc
else
. /etc/z0librc
fi
if [ -f $TDIR/travisrc ]; then
. $TDIR/travisrc
elif [ -f $TDIR/../travisrc ]; then
. $TDIR/../travisrc
elif [ -f ./travisrc ]; then
. ./travisrc
elif [ -f ~/travisrc ]; then
. ~/travisrc
else
  echo "Library file travisrc not found!"
  exit $STS_FAILED
fi

__version__=0.1.37


process_local () {
    if [ $TOOLS_PATH/travis_run_tests ]; then
      if [ "$action" == "check" ]; then
        opts=$(inherits_travis_opts "Cnrv")
      elif [ "$action" == "test" ]; then
        opts=$(inherits_travis_opts "Rnrv")
      else
        opts=$(inherits_travis_opts "CRnrv")
      fi
      run_traced "TOOLS_PATH=$TOOLS_PATH $TOOLS_PATH/travis_run_tests $opts"
      if [ $? -ne 0 ]; then sts=$?; fi
    elif [ $opt_r -gt 0 ]; then
      if [ "$action" == "test" ]; then
        please_run_tests "-R"
        sts=$?
      elif [ "$action" == "check" ]; then
        please_run_tests "-C"
        sts=$?
      else
        please_run_tests "-CR"
        sts=$?
      fi
    else
      sts=127
    fi
    if [ $sts -eq $STS_SUCCESS -a "$action" != "check" -a "$action" != "test" ]; then
      run_traced $TOOLS_PATH/travis_after_tests_success
      if [ $? -ne 0 ]; then sts=$?; fi
    fi
    return $sts
}

process_yaml_init () {
    YML_sect=
    YML_sect0=
    YML_env=
    YML_global=
    YML_matrix=
    YML_addons=
    YML_install=
    YML_script=
    YML_after=
    for i in {1..9}; do
      declare YML_CMD_DIS_$i=$(get_cfg_value "" "yaml__cmd_dis__$i")
    done
    FH=$(xuname -f)
}


process_yaml_unquote () {
  ln="$(echo $1|sed -e s/\"/%%22/g -e s/\'/%%26/g -e s/\ /%%20/g)"
  echo $ln
}

process_yaml_quote () {
  ln="$(echo $1|sed -e s/%%22/\"/g -e s/%%26/\'/g -e s/%%20/\ /g)"
  echo $ln
}

process_yaml_do () {
    # echo "[$YML_sect]" #debug
    local ln=
    if [ "$YML_sect" == "python" ]; then
      ln="#"
    elif [ "$YML_sect" == "addons.apt.packages" ]; then
      if [ "$FH" == "RHEL" ]; then
        ln="# yum install $(echo $1)"
      else
        ln="# apt-get install $(echo $1)"
      fi
      ln=$(process_yaml_unquote "$ln")
      YML_addons="$YML_addons $ln"
    elif [ "$YML_sect" == "env" ]; then
      ln=$(process_yaml_unquote "$1")
      YML_env="$YML_env $ln"
    elif [ "$YML_sect" == "env.global" ]; then
      ln=$(process_yaml_unquote "$1")
      if [ "${ln:0:7}" == "secure:" ]; then
        ln="# $ln"
      else
        YML_global="$YML_global $ln"
      fi
    elif [ "$YML_sect" == "env.matrix" ]; then
      ln=$(process_yaml_unquote "$1")
      YML_matrix="$YML_matrix $ln"
    elif [ "$YML_sect" == "install" ]; then
      ln=$(process_yaml_unquote "$1")
      YML_install="$YML_install #$ln"
    elif [ "$YML_sect" == "script" ]; then
      ln=$(process_yaml_unquote "$1")
      YML_script="$YML_script $ln"
    elif [ "$YML_sect" == "after_success" ]; then
      ln=$(process_yaml_unquote "$1")
      YML_after="$YML_after $ln"
    else
      local ln="$(echo $1)"
    fi
    # echo ">>> $ln" #debug
}

process_yaml_0 () {
    if [ -n "$ln" ]; then
      IFS=- read a b <<<"$ln"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$ln"
        if [ -z "$b" ]; then
          YML_sect0=$a
          YML_sect="$YML_sect0"
        else
          YML_sect0=
          YML_sect=
          declare YML_$a="$(echo $b)"
          #echo ">YML_$a=$(echo $b)" #debug
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_1 () {
    if [ -n "$ln" ]; then
      IFS=- read a b <<<"$ln"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$ln"
        if [ -z "$b" ]; then
          YML_sect1=$a
          YML_sect="$YML_sect0.$YML_sect1"
        else
          YML_sect1=
          YML_sect="$YML_sect0"
          declare ${YML_sect0}__$a="$(echo $b)"
          #echo ">${YML_sect0}__$a=$(echo $b)" #debug
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_2 () {
    if [ -n "$ln" ]; then
      IFS=- read a b <<<"$ln"
      if [ -n "$a" ]; then
        IFS=: read a b <<<"$ln"
        if [ -z "$b" ]; then
          YML_sect2=$a
          YML_sect="$YML_sect0.$YML_sect1.$YML_sect2"
        else
          YML_sect2=
          YML_sect="$YML_sect0.$$YML_sect1"
          declare ${YML_sect0}__${YML_sect1}__$a="$(echo $b)"
          #echo ">${YML_sect0}__${YML_sect1}__$a=$(echo $b)" #debug
        fi
      else
        process_yaml_do "$b"
      fi
    fi
}

process_yaml_3 () {
    if [ -n "$ln" ]; then
      IFS=- read a b <<<"$ln"
      if [ -z "$a" ]; then
        process_yaml_do "$b"
      fi
    fi
}

process_yaml () {
    f1=$PRJPATH/.travis.yml
    if [ -f $f1 ]; then
      process_yaml_init
      local lev=0
      local ident=0
      local line=
      local ln=
      local line1=
      local ln1=
      local linex=
      local i
      local a
      local b
      while IFS=\~ read -r line; do
        if [[ $line =~ ^# ]]; then
          line=
        elif [[ $line =~ ^[[:space:]]+ ]]; then
          for i in {0..10};do if [ "${line:i:1}" != " " ]; then break; fi; done
          if [ $i -gt $ident ]; then
            ((lev++))
            ident=$i
          elif [ $i -lt $ident ]; then
            ((lev-))
            ident=$i
          fi
        else
          lev=0
          ident=0
        fi
        ln=$(echo $line)
        if [ $lev -eq 0 ]; then
          process_yaml_0
        elif [ $lev -eq 1 ]; then
          process_yaml_1
        elif [ $lev -eq 2 ]; then
          process_yaml_2
        elif [ $lev -eq 3 ]; then
          process_yaml_3
        fi
      done < "$f1"
      sts=0
      for ln in $YML_addons; do
        line=$(process_yaml_quote $ln)
        wlog "--> $line"
        eval $(process_yaml_quote $ln)
      done
      for ln in $YML_install; do
        line=$(process_yaml_quote $ln)
        wlog "--> $line"
        eval $(process_yaml_quote $ln)
      done
      for ln in UNBUFFER; do
        line=$(get_cfg_value "" "$ln")
        if [ -n "$line" ]; then
          wlog "--> export $ln=$line"
          export export $ln=$line
        fi
      done
      for ln in $YML_env; do
        line=$(process_yaml_quote $ln)
        wlog "--> $line"
        eval $line
      done
      run_svr_test_init
      for ln in $YML_matrix; do
        line=$(process_yaml_quote $ln)
        if [ "$action" == "check" ]; then
          if [[ $line =~ LINT_CHECK=[\"]*0 ]]; then
            line="# $line"
          elif [[ $line =~ TESTS=[\"]*1 ]]; then
            line="# $line"
          fi
        elif [ "$action" == "test" ]; then
          if [[ $line =~ LINT_CHECK=[\"]*1 ]]; then
            line="# $line"
          elif [[ $line =~ TESTS=[\"]*0 ]]; then
            line="# $line"
          fi
        else
          true
        fi
        if [[ $line =~ TRANSIFEX=[\"]*1 ]]; then
          line="# $line"
        elif [[ $line =~ ODOO_REPO=[\"]*odoo/odoo ]]; then
          line="# $line"
        elif [[ $line =~ ODOO_REPO=[\"]*OCA/OCB ]]; then
          line="$(echo $line|sed -e s:OCA/OCB:local/odoo:g)"
        fi
        if [ "${line:0:1}" != "#" ]; then
          for ln1 in $YML_global; do
            line1="export $(process_yaml_quote $ln1)"
            wlog "--> $line1"
            eval $line1
          done
          for ln1 in $YML_script; do
            line1=$(process_yaml_quote $ln1)
            wlog "--> $line $line1"
            eval $line $line1
            a=$?
            if [ $a -eq $STS_SUCCESS ]; then
              linex="export $(process_yaml_quote $ln)"
              wlog "--> $linex"
              eval $linex
            else
              sts=$a
            fi
          done
        else
          wlog "--> $line"
        fi
        if [ $sts -ne $STS_SUCCESS ]; then
          break
        fi
      done
      run_svr_test_exit
      if [ $sts -eq $STS_SUCCESS ]; then
        for ln in $YML_after; do
          line=$(process_yaml_quote $ln)
          wlog "--> $line"
          eval $line
        done
      fi
    else
      process_local
      sts=$?
    fi
    return $sts
}


OPTOPTS=(h        b          c        j        n            r     V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_dprj opt_dry_run  opt_r opt_version opt_verbose)
OPTACTI=(1        "="        "="      1        "1>"         "1"   "*>"        1)
OPTDEFL=(0        9.0        ""       0        0            0     ""          0)
OPTMETA=("help"   "branch"   "file"   "dprj"   "do nothing" "res" "version"   "verbose")
OPTHELP=("this help"\
 "branch: must be 7.0 or 8.0 or 9.0 (def 9.0)"\
 "configuration file"\
 "execute test from project dir (not in test dir)"\
 "do nothing (dry-run)"\
 "run rescricted mode (w/o maintainer-quality-tools)"\
 "show version"\
 "verbose mode")
OPTARGS=(pkg action)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_help -gt 0 ]; then
  print_help "Travis-ci emulator for local developer environment\nAction may be: check, test, all (default), setup or chkconfig"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

if [ -z "$action" ]; then action=all; fi
if [ -z $pkg ]; then pkg="."; fi
opts_travis
$(init_cfg)
$(active_cfg)
conf_default
link_cfg $TCONF
init_travis
if [ $opt_verbose -gt 1 ]; then set -x; fi
prepare_env_travis "$action"
sts=$STS_SUCCESS

if [ "$action" != "check" -a "$action" != "test" -a "$action" != "all" -a "$action" != "setup" -a "$action" != "chkconfig" ]; then
  echo "Invalid action!"
  echo "action should be one of check, test, all, setup or chkconfig"
  exit $STS_FAILED
fi

if [ "$action" == "setup" ]; then
  opt_r=0
  DEF_DEVPATH=$(readlink -f ~/dev)
  if [ ! -d $DEF_DEVPATH ]; then
    run_traced mkdir -p $DEF_DEVPATH
  fi
  if [ ! -d $DEF_DEVPATH/_travis ]; then
    run_traced  mkdir -p $DEF_DEVPATH/_travis
  fi
  if [ ! -d $DEF_DEVPATH/_travis/cfg ]; then
    run_traced mkdir -p $DEF_DEVPATH/_travis/cfg
  fi
  if [ "$TDIR" != $DEF_DEVPATH ]; then
    run_traced cp $TDIR/$THIS $DEF_DEVPATH/$THIS
    for f in travis_install_pkgs travis_run_tests travis_after_tests_success; do
      run_traced cp $TDIR/_travis/$f $DEF_DEVPATH/_travis/$f
    done
  fi
  exit $STS_SUCCESS
elif [ "$action" == "chkconfig" ]; then
  do_chkconfig
  exit $STS_SUCCESS
fi

check_4_travis
sts=$STS_SUCCESS
#if [ -f $TOOLS_PATH/travis_install_pkgs ]; then
#  run_traced $TOOLS_PATH/travis_install_pkgs
#  if [ $? -ne 0 ]; then sts=$?; fi
#fi
if [ $sts -eq $STS_SUCCESS ]; then
  if [ $opt_r -gt 0 ]; then
    wlog "=== Simulate YAML test ==="
    process_local
    sts=$?
  else
    wlog "=== Process YAML file ==="
    process_yaml
    sts=$?
  fi
fi
exit $sts
