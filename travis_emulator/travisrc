#! /bin/bash
# -*- coding: utf-8 -*-
#
# Common file for travis emulator scripts
#__version__=0.1.45

MAKEF=/opt/odoo/dev/Makefile
DIST_CONF=./conf/.local_dist_pkg.conf
XRGI="^(.*\/|)conf\/.*sample$"
XXXX=".pyc .log .bak .out .tmp .conf build/ dist/ conf/ .cover/ .coverage/ .git/ ~"


init_travis () {
    if [ $opt_dry_run -gt 0 ]; then
      opts_dry_run=-n
    else
      opts_dry_run=
    fi
    if [ ${opt_upd:-0} -gt 0 ]; then
      opts_upd=-u
    else
      opts_upd=
    fi
    ODOO_SETUP=$(get_cfg_value "" "ODOO_SETUP")
    if [ "$ODOO_SETUP" -a -f $ODOO_SETUP ]; then
      SETUP="$ODOO_SETUP";
      REPOSNAME=$(basename $(readlink -e ..))
      if [ "$REPOSNAME" == "odoo" -o "$REPOSNAME" == "openerp" ]; then
        REPOSNAME=
      fi
    elif [ "$ODOO_SETUP" -a "$(basename $(readlink -e ../))" == "openerp" ]; then
      SETUP="$ODOO_SETUP";
      REPOSNAME=$(basename $(readlink -e ../..))
    elif [ -f $PKGPATH/setup.py ]; then
      SETUP="$PKGPATH/setup.py";
      REPOSNAME=$(basename $PKGPATH)
    else
       SETUP="$ODOO_SETUP";
       REPOSNAME=
    fi
    if [ "$SETUP" == "$ODOO_SETUP" ]; then
      if [ -z "$PRJNAME" ]; then
        PRJNAME="Odoo"
      fi
      if [ -f $ODOO_SETUP ]; then
        prjversion=$(grep "'version' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"', \r\n")
        prjdesc=$(grep "'name' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"',\r\n")
      else
        prjversion=""
        prjdesc="Unrecognized Odoo module"
      fi
    else
      if [ "$SETUP" -a -f $SETUP ]; then
        if [ -z "$PRJNAME" ]; then
          PRJNAME=$(grep "[^a-zA-Z0-9_]name *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
        fi
        prjversion=$(grep "[^a-zA-Z0-9_]version *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
        if [ "$prjversion" == "version" ]; then
          prjversion=""
        fi
        prjdesc=$(grep "[^a-zA-Z0-9_]description *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"',\r\n")
        if [ "$prjdesc" == "description" ]; then
          prjdesc="Unrecognized Odoo module"
        fi
      fi
    fi
    if [ "$PRJNAME" == "odoo" ]; then
      PRJNAME=Odoo
    fi
    if [ "$PRJNAME" == "Odoo" ]; then
      if [ -z "$prjversion" ]; then
        prjversion=$(if $(echo "$PWD/"|grep "/v9/\|9.0/">/dev/null); then echo "9.0"; elif $(echo "$PWD/"|grep "/v8/\|8.0/">/dev/null); then echo "8.0"; else echo "7.0"; fi)
      fi
    fi
}


conf_default () {
    set_cfg_def "loglevel" "0"
    set_cfg_def "ODOO_SETUP" "__openerp__.py"
}


expand_path () {
# expand_path (path)
# return:path
    echo "$1"|sed -e s:\${pkgpath}:$PKGPATH:g -e s:\${pkgname}:$pkgname:g -e s:\${prjname}:$PRJNAME:g -e s:\${reposname}:$REPOSNAME:g
}


set_pkgpath () {
# set_pkgpath (pkgname)
# return:pkgpath
    PKGPATH="$1"
    if [ -z "$PKGPATH" ]; then
      PKGPATH=$PWD
    fi
    if [ "${PKGPATH:0:1}" != "." -a "${PKGPATH:0:1}" != "/" ]; then
      local x=$(readlink -e ../$PKGPATH)
      if [ "$x" ]; then
        if [ "$(basename $x)" == "$PKGPATH" ]; then
          PKGPATH=$x
        fi
      fi
    else
      PKGPATH=$(readlink -e $PKGPATH)
    fi
    local x="$(readlink -e $PKGPATH/..)"
    if [ "$x" ]; then
      local d=
      for d in tests build dist conf .cover .coverage; do
        if [ "$(basename $PKGPATH)" == "$d" ]; then
          PKGPATH="$x"
          local x="$(readlink -e $PKGPATH/..)"
          break
        fi
      done
    fi
    if [ "$x" ]; then
      if [ "$(basename $x)" == "$(basename $PKGPATH)" -a -f "$x/setup.py" ]; then
        PKGPATH="$x"
      fi
    fi
    echo "$PKGPATH"
}

install_dev () {
    if [ "$USER" == "openerp" -o "$USER" == "odoo" ]; then
      local yod=$(date +%Y)
      if [ ! -d ~/dev ]; then
        mkdir -p ~/dev
      fi
      if [ ! -d ~/dev/pypi ]; then
        mkdir -p ~/dev/pypi
      fi
      if [ ! -d ~/dev/_travis ]; then
        mkdir -p ~/dev/_travis
      fi
      if [ ! -d ~/tools ]; then
        mkdir -p ~/tools
      fi
      if [ ! -d ~/tools/travis_emulator ]; then
        mkdir -p ~/tools/travis_emulator
      fi
      if [ ! -d ~/7.0 ]; then
        mkdir -p ~/7.0
      fi
      if [ ! -d ~/8.0 ]; then
        mkdir -p ~/8.0
      fi
      if [ ! -d ~/7.0/zeroincombenze ]; then
        mkdir -p ~/7.0/zeroincombenze
        touch -d $yod-01-01 ~/7.0/zeroincombenze/__openerp__.py
      fi
      if [ ! -d ~/7.0/zeroincombenze/l10n_it_bbone ]; then
        mkdir -p ~/7.0/zeroincombenze/l10n_it_bbone
        touch -d $yod-01-01 ~/7.0/zeroincombenze/l10n_it_bbone/__openerp__.py
      fi
      if [ ! -d ~/7.0/zeroincombenze/l10n_it_bbone/conf ]; then
        mkdir -p ~/7.0/zeroincombenze/l10n_it_bbone/conf
      fi
      if [ ! -d ~/7.0/zeroincombenze/l10n_it_fiscal ]; then
        mkdir -p ~/7.0/zeroincombenze/l10n_it_fiscal
        touch -d $yod-01-01 ~/7.0/zeroincombenze/__openerp__.py
      fi
      if [ ! -d ~/7.0/zeroincombenze/l10n_it_fiscal/data ]; then
        mkdir -p ~/7.0/zeroincombenze/l10n_it_fiscal/data
      fi
      if [ ! -d ~/7.0/zeroincombenze/l10n_it_fiscal/conf ]; then
        mkdir -p ~/7.0/zeroincombenze/l10n_it_fiscal/conf
      fi
    fi
}


update_dev () {
    XDPATH=$(echo "$(dirname $MAKEF)")
    ME_BOS="test_nightly .test_nightly.conf.sample"
    if [ "$1" == "travis_emulator" ]; then
      RFLIST="autopep8_W503.py beauty .dist_pkg.conf dist_pkg please please.man prjdiff topep8 travis travisrc vfcp vfdiff wok_doc wok_doc.py"
      RDLIST="_travis/"
    elif [ "$1" == "z0lib" ]; then
      # set -x #debug
      RFLIST="Makefile z0testrc"
      RDLIST=""
    else
      RFLIST=""
      RDLIST=""
    fi
    xvalid=1
    if [ -n "$RFLIST" ]; then
      for x in $RFLIST; do
        if [ ! -f $PKGPATH/$pkgname/$x ]; then
          xvalid=0
        fi
      done
    fi
    if [ $xvalid -eq 0 ]; then
       echo "Invalid package $1!"
       exit 1
    fi
    if [ -z "$opt_sts" -o "$opt_cpush" != "-w" ]; then
      for x in $RFLIST; do
        if [ -f $PKGPATH/$pkgname/$x ]; then
          if [ ${opt_diff:-0} -gt 0 ]; then
            if [ "$(diff -rq $XLDF $PKGPATH/$pkgname/$x $XDPATH/$x)" ]; then
              if [ ${opt_verbose:-0} -gt 0 ]; then echo "> diff -rq $XLDF $PKGPATH/$pkgname/$x $XDPATH/$x"; fi
              diff -rq $XLDF $PKGPATH/$pkgname/$x $XDPATH/$x
            fi
          elif [ ${opt_fetch:-0} -gt 0 ]; then
            if [ ${opt_verbose:-0} -gt 0 ]; then echo "> $opt_dry_run||cp $XDPATH/$x $PKGPATH/$pkgname/$x"; fi
            (($opt_dry_run))||cp $XDPATH/$x $PKGPATH/$pkgname/$x
          else
            if [ $opt_verbose -gt 0 ]; then echo "> $opt_dry_run||cp $PKGPATH/$pkgname/$x $XDPATH/$x"; fi
            (($opt_dry_run))||cp $PKGPATH/$pkgname/$x $XDPATH/$x
          fi
        fi
      done
      if [ -n "$RDLIST" ]; then
        for x in $RDLIST; do
          if [ ${opt_diff:-0} -gt 0 ]; then
             diff -rq $XLDF $PKGPATH/$pkgname/$x $XDPATH/$x
          elif [ ${opt_fetch:-0} -eq 0 ]; then
             if [ $opt_verbose -gt 0 ]; then echo "> $opt_dry_run||cp -R $PKGPATH/$pkgname/$x $XDPATH/$x"; fi
             (($opt_dry_run))||cp -R $PKGPATH/$pkgname/$x $XDPATH/$x
          fi
        done
      fi
      if [ -n "$ME_BOS" ]; then
        for x in $ME_BOS cronow; do
          if [ -f $PKGPATH/$pkgname/$x ]; then
            if [ ${opt_diff:-0} -gt 0 ]; then
              if [ "$(diff -rq $XLDF $PKGPATH/$pkgname/$x ~/bin/$x)" ]; then
                if [ ${opt_verbose:-0} -gt 0 ]; then echo "> diff -rq $XLDF $PKGPATH/$pkgname/$x ~/bin/$x"; fi
                diff -rq $XLDF $PKGPATH/$pkgname/$x ~/bin/$x
              fi
            elif [ ${opt_fetch:-0} -gt 0 ]; then
              true
            else
              if [ $opt_verbose -gt 0 ]; then echo "> $opt_dry_run||cp $PKGPATH/$pkgname/$x ~/bin/$x"; fi
              (($opt_dry_run))||cp $PKGPATH/$pkgname/$x ~/bin/$x
            fi
          fi
        done
      fi
      # set +x #debug
      MAKEF=$PKGPATH/$pkgname/Makefile
    fi
}

a_append () {
# a_append (key, values)::DEFPRM,DEFVAL
# return:
# key=="--new" && value=="" -> clean dictionary
    if [ "$1" == "--new" -a -z "$2" ]; then
      unset DEFPRM[*]
      unset DEFVAL[*]
      return
    fi
    if [ "$1" ]; then
      local l=${#DEFPRM[*]}
      DEFPRM[l]="$1"
      DEFVAL[l]="$2"
    fi
}


a_search () {
# a_search (key)::DEFPRM,DEFVAL
# return:value,sts
    local jy=0
    local p=""
    local sts=0
    while ((jy<${#DEFPRM[*]})); do
      if [ "${DEFPRM[jy]:0:1}" == "^" ]; then
        if [[ "$1" =~ ${DEFPRM[jy]} ]]; then
          p="${DEFVAL[jy]}"
          sts=1
          break
        fi
      elif [[ "$1" == "${DEFPRM[jy]}" ]]; then
         p="${DEFVAL[jy]}"
         sts=1
         break
      fi
      ((jy++))
    done
    echo "$p"
    return $sts
}


matches1of () {
# matches1of (filename, exclist)
# return:true/false
    local x=
    sts=1
    for x in $2; do
      if [[ "$1" =~ $x ]]; then
        sts=0
        break
      fi
    done
    return $sts
}


robocopy_init () {
# robocopy_init (prjname, pkgname)::DIST_CONF,TCONF,opt_fetch,opt_verbose
# return:
    a_append "--new"
    a_append "^.*\.egg-info$" ""
    if [ "$1" == "Odoo" ]; then
      a_append "^.*" "/"
    else
      a_append "Makefile" "/"
      a_append "setup.py" ""
      a_append "$2" "/"
      a_append "conf" "/"
      if [ ${opt_fetch:-0} -eq 0 ]; then
         a_append "README.rst" "/"
         a_append "README.md" "/"
      fi
      a_append "^.*" ""
    fi
    if [ "$DIST_CONF" ]; then
      local xx=$(grep "^ignore *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"'\r\n")
      local yy=$(grep "^ignorediff *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"'\r\n")
    fi
    if [ -z "$xx" -a "$TCONF" ]; then
      local xx=$(grep "^ignore *=" $TCONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"'\r\n")
      local yy=$(grep "^ignorediff *=" $TCONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"'\r\n")
    fi
    if [ -z "$xx" ]; then
      # TODO: addons
      local xx=".pyc .log .bak .out .conf build/ dist/ conf/ filestore/ .cover/ .coverage/ .git/ ~"
      local yy=".po .pot"
    fi
    XRGX=
    XLFS=
    XLDF=
    for x in $xx; do
      local x1="${x:0:1}"
      local l=
      let l=${#x}-1
      local x9="${x:l:1}"
      if [ "$x9" == "/" ]; then
         XRGX="$XRGX ^(.*\\/|)$x"
         XLFS="$XLFS --exclude=$x"
      elif [ "$x1" == "." -o "$x" == "~" ]; then
         XRGX="$XRGX ^.*\\$x\$"
         XLFS="$XLFS --exclude=*$x"
      else
         XRGX="$XRGX $x"
         XLFS="$XLFS --exclude=*$x*"
      fi
      XLDF="$XLDF -x '*$x'"
    done
    XXDF=
    for x in $yy; do
      local x1="${x:0:1}"
      local l=
      let l=${#x}-1
      local x9="${x:l:1}"
      if [ "$x9" == "/" ]; then
         XXDF="$XXDF ^(.*\\/|)$x"
      elif [ "$x1" == "." -o "$x" == "~" ]; then
         XXDF="$XXDF ^.*\\$x\$"
      else
         XXDF="$XXDF $x"
      fi
    done
}


robocopy () {
# robocopy (srcfname, tgtpath, sshopt)::opt_dry_run,opts_dry_run,opt_verbose,XRGX,XRGI,XLFS
# return:
    if [ -d "$1" ]; then
      local t="d"
      local ff=$1/
    else
      local t="f"
      local ff=$1
    fi
    local fn=$(basename $1)
    if $(matches1of "$ff" "$XRGI"); then
      local v=$(a_search "$fn")
    elif $(matches1of "$ff" "$XRGX"); then
      local v=
    else
      local v=$(a_search "$fn")
    fi
    if [ "${v:0:1}" == "/" ]; then
      if [ "$v" == "/" -a "$t" == "d" ]; then
        if [ "${3:0:3}" == "ssh" ]; then
          if [ ${opt_verbose:-0} -gt 0 ]; then
            local optrsync="-abvzhe"
          else
            local optrsync="-abzhe"
          fi
          local optssh="$3"
          echo "rsync $opts_dry_run $optrsync \"$optssh\" $opts_upd --del --copy-links $XLFS $ff $2$v"
          rsync $opts_dry_run $optrsync "$optssh" $opts_upd --del --copy-links $XLFS $ff $2$v
        else
          if [ ${opt_verbose:-0} -gt 0 ]; then
            local optrsync="-abv"
          else
            local optrsync="-ab"
          fi
          local optssh=""
          echo "rsync $opts_dry_run $optrsync $opts_upd --del --copy-links $XLFS $ff $2$v"
          rsync $opts_dry_run $optrsync $opts_upd --del --copy-links $XLFS $ff $2$v
        fi
      else
        if [ "${3:0:3}" == "ssh" ]; then
          local optssh="${3:3}"
          echo "(($opt_dry_run))||scp -Bp $optssh $ff $2"
          (($opt_dry_run))||scp -Bp $optssh $ff $2
        else
          if [ ! -d "$2" ]; then
            local v=
          fi
          diff -q $ff $2$v &>/dev/null
          if [ $? -ne 0 ]; then
            echo "$opt_dry_run||cp -L $ff $2$v"
            (($opt_dry_run))||cp -L $ff $2$v
          fi
        fi
      fi
    fi
}

clean_dirs () {
# clean_dirs (directory)::
# return:
    for x in $XXXX;do
      if [ "$x" != ".conf" ]; then
        if [ $opt_dry_run -gt 0 ]; then
          find $1 -nowarn -name "*$x" -exec echo "1||rm '{}'" \;
        else
          find $1 -nowarn -name "*$x" -exec rm -f '{}' \;
        fi
      fi
    done
}