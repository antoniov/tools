#! /bin/bash
# -*- coding: utf-8 -*-
#
# Common file for travis emulator scripts
#__version__=0.1.68.8

MAKEF=/opt/odoo/dev/Makefile
DIST_CONF=./conf/.local_dist_pkg.conf
XRGI="^(.*\/|)conf\/.*sample$"
XXXX=".pyc .log .bak .out .tmp .conf .tracehis .tracehistory ,cover .coverage build/ dist/ conf/ .cover/ .coverage/ .git/ ~"


opts_travis() {
    if [ -n "$opt_conf" -a -f "$opt_conf" ]; then
      TCONF=$opt_conf
    else
      TCONF=$TDIR/.travis.conf
    fi
    if [ -n "$pkg" ]; then
      if [ ${pkg:0:6} == "local/" ]; then
        PKGPATH=${pkg:6}
        repository="local/"
      elif [ ${pkg:0:5} == "odoo/" -o ${pkg:0:5} == "ODOO/" ]; then
        PKGPATH=${pkg:5}
        repository="ODOO/"
      elif [ ${pkg:0:4} == "oca/" -o ${pkg:0:4} == "OCA/" ]; then
        PKGPATH=${pkg:4}
        repository="OCA/"
      else
        PKGPATH=$pkg
        repository="local/"
      fi
      if [ -z "$PKGPATH" ]; then
        PKGPATH=$PWD
      fi
    else
      PKGPATH=$PWD
      repository="local/"
    fi
    PKGPATH=$(set_pkgpath "$PKGPATH")
    PKGNAME=$(basename $PKGPATH)
    if [ "$DEV_ENVIRONMENT" == "$THIS" ]; then
      test_mode=1
    fi
    if [ ${test_mode:-0} -gt 0 ]; then
      opt_dry_run=1
    fi
    local x=$(A=${PWD#*/*/}; echo ${A%%/*})
    if [ "$x" == "travis" ]; then
      HOSTENV=travis
    else
      HOSTENV=local
    fi
}

inherits_travis_opts() {
# inherits_travis_opts(opts_enables)
  local opts=
  if [ -z "$1" ]; then
    local e=nv
  else
    local e=$1
  fi
  if [ $(echo $TOOLS_PATH|grep -v "/maintainer-quality-tools/"  2>/dev/null) ]; then
    if [[ $e =~ B ]]; then
      opts="${opts}B"
    fi
    if [[ $e =~ C ]]; then
      opts="${opts}C"
    fi
    if [[ $e =~ F ]]; then
      opts="${opts}F"
    fi
    if [[ $e =~ K ]]; then
      opts="${opts}K"
    fi
    if [[ $e =~ P ]]; then
      opts="${opts}P"
    fi
    if [[ $e =~ m ]]; then
      opts="${opts}m"
    fi
    if [[ $e =~ R ]]; then
      opts="${opts}R"
    fi
    if [[ $e =~ P ]]; then
      opts="${opts}P"
    fi
    if [[ $e =~ T ]]; then
      opts="${opts}T"
    fi
    if [[ $e =~ d ]]; then
      if [ ${opt_diff:-0} -gt 0 ]; then
        opts="${opts}d"
      fi
    fi
    if [[ $e =~ j ]]; then
      if [ ${opt_dprj:-0} -gt 0 ]; then
        opts="${opts}j"
      fi
    fi
    if [[ $e =~ n ]]; then
      if [ ${opt_dry_run:-0} -gt 0 ]; then
        opts="${opts}n"
      fi
    fi
    if [[ $e =~ q ]]; then
      if [ ${opt_verbose:-0} -eq 0 ]; then
        opts="${opts}q"
      fi
    fi
    if [[ $e =~ r ]]; then
      if [ ${opt_r:-0} -gt 0 ]; then
        opts="${opts}r"
      fi
    fi
    if [[ $e =~ u ]]; then
      if [ ${opt_uop:-0} -gt 0 ]; then
        opts="${opts}u"
      fi
    fi
    if [[ $e =~ v ]]; then
      if [ ${opt_verbose:-0} -gt 0 ]; then
        opts="${opts}v"
      fi
    fi
    if [[ $e =~ c ]]; then
      if [ -n "$opt_conf" ]; then
        opts="${opts}c$TCONF"
      fi
    fi
  else
    if [[ $e =~ [BK] ]]; then
      export BASH_CHECK="1"
    fi
    if [[ $e =~ [PK] ]]; then
      export LINT_CHECK="1"
    fi
    if [[ $e =~ T ]]; then
      export TEST_CHECK="1"
    fi
    if [[ $e =~ n ]]; then
      if [ ${opt_dry_run:-0} -gt 0 ]; then
        export MQT_DRY_RUN="1"
      fi
    fi
    if [[ $e =~ q ]]; then
      if [ ${opt_verbose:-0} -eq 0 ]; then
        export MQT_VERBOSE_MODE="0"
      fi
    fi
    if [[ $e =~ v ]]; then
      if [ ${opt_verbose:-0} -gt 0 ]; then
        export MQT_VERBOSE_MODE="1"
      fi
    fi
  fi
  if [ -n "$opts" ]; then
    opts="-${opts}"
  fi
  echo "$opts"
}

init_travis() {
    TRAVIS_ENV=$(get_cfg_value "" "Environment")
    TRAVIS_ENVOPTS=
    if [ ${opt_virt:-0} -eq -1 ]; then
      if [ "$TRAVIS_ENV" == "virtualenv" ]; then
        opt_virt=1
      else
        opt_virt=0
      fi
    elif [ ${opt_virt:-0} -eq 1 -a "$TRAVIS_ENV" == "bash" ]; then
      TRAVIS_ENV=virtualenv
    fi
    if [ ${opt_virt:-0} -gt 0 ]; then
      if [ "$TRAVIS_ENV" == "virtualenv" ]; then
        TRAVIS_ENVOPTS=$(get_cfg_value "" "virtualenv_opts")
      fi
    fi
    if [ ${opt_dry_run:-0} -gt 0 ]; then
      opts_dry_run=-n
    else
      opts_dry_run=
    fi
    if [ ${opt_upd:-0} -gt 0 ]; then
      opts_upd=-u
    else
      opts_upd=
    fi
    if [ ${opt_verbose:-0} -eq -1 ]; then
      opt_verbose=$(get_cfg_value "" "loglevel")
    fi
    if [ ${opt_verbose:-0} -eq -1 ]; then
      if [[ -t 0 || -p /dev/stdin ]]; then
        opt_verbose=0
      else
        opt_verbose=1
      fi
    fi
    if [ ${opt_verbose:-0} -ne 0 ]; then
      opts_verbose=-v
      export FLOG_ECHO=echo
    else
      opts_verbose=
      export FLOG_ECHO=
    fi
    local ODOO_SETUPS=$(get_cfg_value "" "ODOO_SETUPS")
    local ODOO_SETUPS=${ODOO_SETUPS//,/ }
    SETUP=
    for ODOO_SETUP in $ODOO_SETUPS; do
      if [ -f $ODOO_SETUP ]; then
        SETUP="$ODOO_SETUP";
        REPOSNAME=$(basename $(readlink -e ..))
        if [ "$REPOSNAME" == "odoo" -o "$REPOSNAME" == "openerp" ]; then
          REPOSNAME=
        fi
        break
      elif [ "$(basename $(readlink -e ../))" == "openerp" ]; then
        SETUP="$ODOO_SETUP";
        REPOSNAME=$(basename $(readlink -e ../..))
        break
      fi
    done
    if [ -z "$SETUP" ]; then
      ODOO_SETUP="__openerp__.py"
      if [ -f $PKGPATH/setup.py ]; then
        SETUP="$PKGPATH/setup.py";
        REPOSNAME=$(basename $PKGPATH)
      else
        SETUP=$ODOO_SETUP
        REPOSNAME=
      fi
    fi
    if [ "$SETUP" == "$ODOO_SETUP" ]; then
      if [ -z "$PRJNAME" ]; then
        PRJNAME="Odoo"
      fi
      if [ -f $SETUP ]; then
        prjversion=$(grep "'version' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"', \r\n")
        prjdesc=$(grep "'name' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"',\r\n")
      else
        prjversion=""
        prjdesc="Unrecognized Odoo module"
      fi
    else
      if [ -n "$SETUP" -a -f $SETUP ]; then
        if [ -z "$PRJNAME" ]; then
          PRJNAME=$(grep "[^a-zA-Z0-9_]name *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
        fi
        prjversion=$(grep "[^a-zA-Z0-9_]version *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
        if [ "$prjversion" == "version" ]; then
          prjversion=""
        fi
        prjdesc=$(grep "[^a-zA-Z0-9_]description *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"',\r\n")
        if [ "$prjdesc" == "description" ]; then
          prjdesc="Unrecognized package"
        fi
      fi
    fi
    if [ "$PRJNAME" == "odoo" ]; then
      PRJNAME=Odoo
    fi
    if [ "$PRJNAME" == "Odoo" ]; then
      local npm_curpfx=$(npm config get prefix)
      NPM_CONFIG_PREFIX=$(get_cfg_value "" "NPM_CONFIG_PREFIX")
      if [ "$npm_curpfx" != "$NPM_CONFIG_PREFIX" ]; then
        mkdir -p $NPM_CONFIG_PREFIX
        npm config set prefix $NPM_CONFIG_PREFIX
      fi
      BRANCH=$(if $(echo "$PWD/"|grep "/v10/\|10.0/">/dev/null); then echo "10.0"; elif $(echo "$PWD/"|grep "/v9/\|9.0/">/dev/null); then echo "9.0"; elif $(echo "$PWD/"|grep "/v8/\|8.0/">/dev/null); then echo "8.0"; else echo "7.0"; fi)
      if [ -z "$prjversion" ]; then
        prjversion="$BRANCH"
      else
        local v l
        local x=1
        for v in 10.0 9.0 8.0 7.0; do
          l=${#v}
          if [ ${prjversion:0:l} == "$v" -a $prjversion != "$v" ]; then
            x=0
          fi
        done
        if [ $x -gt 0 ]; then
          prjversion="$BRANCH.$prjversion"
        fi
      fi
      if [ -f $ODOO_SETUP ]; then
        PRJPATH=$(readlink -f $PKGPATH/..)
      else
        PRJPATH=$PKGPATH
      fi
    else
      PRJPATH=$PKGPATH/$PRJNAME
    fi
    if [ -z "$TOOLS_PATH" ]; then
      if [ -d $TDIR/_travis -a ${opt_r:-0} -gt 0 ]; then
        TOOLS_PATH=$TDIR/_travis
      elif [ -d $HOME/dev/_travis -a ${opt_r:-0} -gt 0 ]; then
        TOOLS_PATH=$HOME/dev/_travis
      elif [ -d $TDIR/_travis -a "$PRJNAME" != "Odoo" ]; then
        TOOLS_PATH=$TDIR/_travis
      elif [ -d $HOME/dev/_travis -a "$PRJNAME" != "Odoo" ]; then
        TOOLS_PATH=$HOME/dev/_travis
      elif [ -d $HOME/dev/maintainer-quality-tools/travis ]; then
        TOOLS_PATH=$HOME/dev/maintainer-quality-tools/travis
      elif [ -d $HOME/maintainer-quality-tools/travis ]; then
        TOOLS_PATH=$HOME/maintainer-quality-tools/travis
      elif [ -d /opt/odoo/maintainer-quality-tools/travis ]; then
        TOOLS_PATH=/opt/odoo/maintainer-quality-tools/travis
      else
        unset -v TOOLS_PATH
      fi
      if [ "$PRJNAME" == "Odoo" ]; then
        if [ -d $HOME/dev/maintainer-quality-tools/travis ]; then
          MQT_PATH=$HOME/dev/maintainer-quality-tools/travis
        elif [ -d $HOME/maintainer-quality-tools/travis ]; then
          MQT_PATH=$HOME/maintainer-quality-tools/travis
        elif [ -d /opt/odoo/maintainer-quality-tools/travis ]; then
          MQT_PATH=/opt/odoo/maintainer-quality-tools/travis
        else
          unset -v MQT_PATH
        fi
      else
        unset -v MQT_PATH
      fi
    fi
}

create_virtual_env() {
    if [ ${opt_virt:-0} -gt 0 ]; then
      local HOME_BRANCH=$HOME/$BRANCH
      PKGPATH=$(set_pkgpath "")
      local TRAVIS_CWD=$PWD
      TRAVIS_HOME=$HOME/VENV_$$
      run_traced "virtualenv -q $TRAVIS_ENVOPTS $TRAVIS_HOME"
      cd $TRAVIS_HOME
      source bin/activate
      if [ -z "$repository" ]; then
        TRAVIS_WORK_DIR=local/$REPOSNAME
      else
        TRAVIS_WORK_DIR=$repository
      fi
      TRAVIS_BUILD_DIR="$TRAVIS_HOME/${TRAVIS_WORK_DIR%%/*}"
      run_traced "mkdir -p $TRAVIS_BUILD_DIR"
      TRAVIS_SAVED_HOME=$HOME
      export HOME=$TRAVIS_HOME
      run_traced "cp -R $TRAVIS_CWD $TRAVIS_BUILD_DIR"
      # run_traced "mkdir -p $TRAVIS_BUILD_DIR/odoo"
      # local fn
      # for fn in addons odoo odoo.py openerp openerp-server openerp-wsgi.py; do
      #   if [ -d $HOME_BRANCH/$fn ]; then
      #     run_traced "cp -R $HOME_BRANCH/$fn $TRAVIS_BUILD_DIR/odoo"
      #   elif [ -f $HOME_BRANCH/$fn ]; then
      #     run_traced "cp $HOME_BRANCH/$fn $TRAVIS_BUILD_DIR/odoo"
      #   fi
      # done
      # run_traced "export REPO_CACHED=$TRAVIS_BUILD_DIR"
      run_traced "export REPO_CACHED=$HOME_BRANCH"
      run_traced "cd $HOME"
      FH=$(xuname -f)
      if [ "$FH" == "RHEL" ]; then
        local NODEJS=$(which node)
        if [ -n "$NODEJS" ]; then
          run_traced "ln -s $NODEJS $TRAVIS_HOME/bin/nodejs"
        fi
      fi
    fi
}

drop_virtual_env() {
    if [ ${opt_virt:-0} -gt 0 ]; then
      cd $TRAVIS_HOME
      deactivate
      cd $TRAVIS_CWD
      rm -fR $TRAVIS_HOME
      export HOME=$TRAVIS_SAVED_HOME
    fi
}

prepare_env_travis() {
    local action="$1"
    if [ ${opt_r:-0} -gt 0 ]; then
      if [ $(echo :$PATH:|grep -v ":$TOOLS_PATH:"  2>/dev/null) ]; then
        run_traced "export PATH=$TOOLS_PATH:$PATH"
      fi
    elif [ "$2" == "-r" ]; then
      if [ $(echo :$PATH:|grep -v ":$TOOLS_PATH:"  2>/dev/null) ]; then
        run_traced "export PATH=$TOOLS_PATH:$PATH"
      fi
    fi
    if [ $(echo :$PATH:|grep -v ":$DEVPATH:"  2>/dev/null) ]; then
      run_traced "export PATH=$DEVPATH:$PATH"
    fi
    NPM_CONFIG_PREFIX=$(get_cfg_value "" "NPM_CONFIG_PREFIX")
    export NPM_CONFIG_PREFIX=$NPM_CONFIG_PREFIX
    export FLAKE8_CONFIG_DIR=$TOOLS_PATH/cfg
    export BRANCH
    export VERSION=$BRANCH
    export TRAVIS_BUILD_DIR=$PKGPATH
    # export VERBOSE_MODE=$opt_verbose
    if [ "$action" == "check" ]; then
      export LINT_CHECK=1
    elif [ "$action" == "test" ]; then
      export LINT_CHECK=0
    elif [ "$PRJNAME" != "Odoo" ]; then
      export LINT_CHECK=1
    else
      unset -v LINT_CHECK
    fi
    repository=$repository${PRJNAME,,}
    if [ "$PRJNAME" == "Odoo" ]; then
      export ODOO_REPO=$repository
    fi
    if [ -n "$opt_dpath" ]; then
      LGITPATH="$opt_dpath"
    else
      if [ -n "$REPOSNAME" ]; then
        LGITPATH=$(get_cfg_value "" "${REPOSNAME}_distpath")
      else
        LGITPATH=
      fi
      if [ -z "$LGITPATH" ]; then
        LGITPATH=$(get_cfg_value "" "${PRJNAME}_distpath")
      fi
      if [ -z "$LGITPATH" ]; then
        LGITPATH=$(get_cfg_value "" "distpath")
      fi
    fi
    export LGITPATH=$(expand_path "$LGITPATH")
    if [ -x $TDIR/travis ]; then
      export DEVPATH=$TDIR
    else
      export DEVPATH=$(readlink -f ~/dev)
    fi
    export TOOLS_PATH
    export MQT_PATH
    export ODOO_SETUP
    export REPOSNAME
    export PRJNAME
    export PRJPATH
    export PKGPATH
    export PKGNAME
    export HOSTENV
    export LGITPATH
}

check_4_travis() {
    if [ ! -d $PKGPATH ]; then
      echo "Invalid package path $PKGPATH"
      exit $STS_FAILED
    elif [ "$PRJNAME" != "Odoo" ]; then
      if [ ! -d $PKGPATH/$PKGNAME ]; then
        echo "Invalid package path $PKGPATH/$PKGNAME"
        exit $STS_FAILED
      fi
    fi
}

do_chkconfig() {
    echo "Project name   = \"$PRJNAME\""
    echo "Tools path     = \"$TOOLS_PATH\" -r=\"$DEVPATH\""
    echo "Hosted         = \"$HOSTENV\""
    echo "Branch         = \"$BRANCH\""
    echo "Package name   = \"$PKGNAME\" in \"$REPOSNAME\""
    echo "Version        = \"$prjversion\""
    echo "Setup file     = \"$SETUP\""
    echo "Project path   = \"$PRJPATH\""
    echo "Package path   = \"$PKGPATH\""
    echo "Local git path = \"$LGITPATH\""
    echo "Config file    = \"$TCONF\""
}

conf_default() {
    set_cfg_def "loglevel" "1"
    set_cfg_def "DEV_HOST" "shsdev16"
    set_cfg_def "PRD_HOST" "shsprd14"
    set_cfg_def "PIDFILE" "/var/run/travis_emulator/travis_emulator.pid"
    set_cfg_def "ODOO_SETUP" "__openerp__.py" #TODO: remove early
    set_cfg_def "ODOO_SETUPS" "__manifest__.py __openerp__.py"
    set_cfg_def "ODOO_DEFCONF" ".odoorc"
    set_cfg_def "ODOO_LOGFILE" "False"
    set_cfg_def "RUN_travis_install_nightly" "travis_install_nightly"
    set_cfg_def "dbtemplate" "openerp_template"
    set_cfg_def "dbname" "openerp_test"
    set_cfg_def "UNBUFFER" "0"
    set_cfg_def "MQT_UPDT" "2016-01-01"
    set_cfg_def "ME_BOS" "test_nightly .test_nightly.conf.sample"
    set_cfg_def "RFLIST__travis_emulator" "autopep8_W503.py beauty dist_pkg please please.man please.py prjdiff replica.sh topep8 travis travisrc vfcp vfdiff wok_doc wok_doc.py"
    set_cfg_def "RDLIST__travis_emulator" "_travis/"
    set_cfg_def "RFLIST__z0lib" "Makefile z0testrc"
    set_cfg_def "RFLIST__clodoo" "clodoo.py clodoocore.py clodoolib.py"
    set_cfg_def "RFLIST__z0tester" "z0testercode.py"
    if [ "$HOSTNAME" == "$DEV_HOST" ]; then
      set_cfg_def "pip_pkgver__reportlab" "3.2.0"
      set_cfg_def "upgrade_dow" "3"
    else
      set_cfg_def "pip_pkgver__reportlab" "3.1.44"
      set_cfg_def "upgrade_dow" "4"
    fi
    set_cfg_def "Environment" "bash"
    set_cfg_def "virtualenv_opts" "--no-pip --no-setuptools --no-wheel"
    set_cfg_def "NPM_CONFIG_PREFIX" "$HOME/.npm-global"
    set_cfg_def "fileignore" ".pyc .log .bak .out .tmp .conf .tracehis .tracehistory ,cover .coverage build/ dist/ conf/ filestore/ .cover/ .coverage/ .git/ ~ test*.pdf tmp tmp.*"
    set_cfg_def "filediffignore" ".po .pot"
}


expand_path() {
# expand_path (path)
# return:path
    local x=$(echo "$1"|sed -e s:\${pkgpath}:$PKGPATH:g -e s:\${pkgname}:$PKGNAME:g -e s:\${prjname}:$PRJNAME:g -e s:\${reposname}:$REPOSNAME:g -e s:\${version}:$BRANCH:g -e s:\${TRAVIS_BUILD_DIR}:$TRAVIS_BUILD_DIR:g -e s:\${HOME}:$HOME:g)
    echo $x|sed -e s\|\${PATH}\|$PATH\|g
}


set_pkgpath() {
# set_pkgpath (PKGNAME)
# return:pkgpath
    PKGPATH="$1"
    if [ -z "$PKGPATH" ]; then
      PKGPATH=$PWD
    fi
    if [ "${PKGPATH:0:1}" != "." -a "${PKGPATH:0:1}" != "/" ]; then
      local x=$(readlink -e ../$PKGPATH)
      if [ "$x" ]; then
        if [ "$(basename $x)" == "$PKGPATH" ]; then
          PKGPATH=$x
        fi
      fi
    else
      PKGPATH=$(readlink -e $PKGPATH)
    fi
    local x="$(readlink -e $PKGPATH/..)"
    if [ "$x" ]; then
      local d=
      for d in tests build dist conf .cover .coverage; do
        if [ "$(basename $PKGPATH)" == "$d" ]; then
          PKGPATH="$x"
          local x="$(readlink -e $PKGPATH/..)"
          break
        fi
      done
    fi
    if [ "$x" ]; then
      if [ "$(basename $x)" == "$(basename $PKGPATH)" -a -f "$x/setup.py" ]; then
        PKGPATH="$x"
      fi
    fi
    echo "$PKGPATH"
}

install_dev() {
    if [ "$USER" == "openerp" -o "$USER" == "odoo" ]; then
      local yod=$(date +%Y)
      if [ ! -d ~/dev ]; then
        mkdir -p ~/dev
      fi
      if [ ! -d ~/dev/pypi ]; then
        mkdir -p ~/dev/pypi
      fi
      if [ ! -d ~/dev/_travis ]; then
        mkdir -p ~/dev/_travis
      fi
      if [ ! -d ~/tools ]; then
        mkdir -p ~/tools
      fi
      if [ ! -d ~/tools/travis_emulator ]; then
        mkdir -p ~/tools/travis_emulator
      fi
      if [ ! -d ~/7.0 ]; then
        mkdir -p ~/7.0
      fi
      if [ ! -d ~/8.0 ]; then
        mkdir -p ~/8.0
      fi
    fi
}


update_dev() {
    XDPATH=$(echo "$(dirname $MAKEF)")
    ME_BOS=$(get_cfg_value "" "ME_BOS")
    RFLIST=$(get_cfg_value "" "RFLIST__$1")
    RDLIST=$(get_cfg_value "" "RDLIST__$1")
    local xvalid=1
    local v1=
    local v2=
    if [ -n "$RFLIST" ]; then
      for x in $RFLIST; do
        if [ ! -f $PKGPATH/$PKGNAME/$x ]; then
          xvalid=0
        fi
      done
    fi
    if [ $xvalid -eq 0 ]; then
       echo "Invalid package $1!"
       exit $STS_FAILED
    fi
    if [ -z "$opt_sts" -o "$opt_cpush" != "-w" ]; then
      for x in $RFLIST; do
        if [ -f $PKGPATH/$PKGNAME/$x ]; then
          if [ ${opt_diff:-0} -gt 0 ]; then
            if [ "$(diff -rq $XLDF $PKGPATH/$PKGNAME/$x $XDPATH/$x)" ]; then
              if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ diff -rq $XLDF $PKGPATH/$PKGNAME/$x $XDPATH/$x"; fi
              diff -rq $XLDF $PKGPATH/$PKGNAME/$x $XDPATH/$x
            fi
          elif [ ${opt_fetch:-0} -gt 0 ]; then
            if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ ${opt_dry_run:-0}||cp $XDPATH/$x $PKGPATH/$PKGNAME/$x"; fi
            ((${opt_dry_run:-0}))||cp $opts_verbose $XDPATH/$x $PKGPATH/$PKGNAME/$x
          else
            diff -q $PKGPATH/$PKGNAME/$x $XDPATH/$x &>/dev/null
            if [ $? -ne 0 ]; then
              # if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ ${opt_dry_run:-0}||cp $PKGPATH/$PKGNAME/$x $XDPATH/$x"; fi
              # ((${opt_dry_run:-0}))||cp $opts_verbose $PKGPATH/$PKGNAME/$x $XDPATH/$x
              run_traced "cp $opts_verbose $PKGPATH/$PKGNAME/$x $XDPATH/$x"
              if [ -x $PKGPATH/$PKGNAME/$x ]; then
                v1=$($PKGPATH/$PKGNAME/$x -V)
                v2=$($XDPATH/$x -V)
                if [ "$v1" != "$v2" ]; then
                  echo "!Copy of $x FAILED !!!"
                fi
              fi
            fi
          fi
        fi
      done
      if [ -n "$RDLIST" ]; then
        for x in $RDLIST; do
          if [ ${opt_diff:-0} -gt 0 ]; then
             diff -rq $XLDF $PKGPATH/$PKGNAME/$x $XDPATH/$x
          elif [ ${opt_fetch:-0} -eq 0 ]; then
             diff -rq $PKGPATH/$PKGNAME/$x $XDPATH/$x &>/dev/null
             if [ $? -ne 0 ]; then
               if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ ${opt_dry_run:-0}||cp -R $PKGPATH/$PKGNAME/$x $XDPATH/"; fi
               ((${opt_dry_run:-0}))||cp -R $PKGPATH/$PKGNAME/$x $XDPATH/
             fi
          fi
        done
      fi
      if [ -n "$ME_BOS" ]; then
        for x in $ME_BOS cronow replica.sh; do
          if [ -f $PKGPATH/$PKGNAME/$x ]; then
            if [ ${opt_diff:-0} -gt 0 ]; then
              if [ "$(diff -rq $XLDF $PKGPATH/$PKGNAME/$x ~/bin/$x)" ]; then
                if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ diff -rq $XLDF $PKGPATH/$PKGNAME/$x ~/bin/$x"; fi
                diff -rq $XLDF $PKGPATH/$PKGNAME/$x ~/bin/$x
              fi
            elif [ ${opt_fetch:-0} -gt 0 ]; then
              true
            else
              if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ ${opt_dry_run:-0}||cp $PKGPATH/$PKGNAME/$x ~/bin/$x"; fi
              ((${opt_dry_run:-0}))||cp $PKGPATH/$PKGNAME/$x ~/bin/$x
            fi
          fi
        done
      fi
      MAKEF=$PKGPATH/$PKGNAME/Makefile
    fi
}

a_append() {
# a_append (key, values)::DEFPRM,DEFVAL
# return:
# key=="--new" && value=="" -> clean dictionary
    if [ "$1" == "--new" -a -z "$2" ]; then
      unset DEFPRM[*]
      unset DEFVAL[*]
      return
    fi
    if [ "$1" ]; then
      local l=${#DEFPRM[*]}
      DEFPRM[l]="$1"
      DEFVAL[l]="$2"
    fi
}


a_search() {
# a_search (key)::DEFPRM,DEFVAL
# return:value,sts
    local jy=0
    local p=""
    local sts=0
    while ((jy<${#DEFPRM[*]})); do
      if [ "${DEFPRM[jy]:0:1}" == "^" ]; then
        if [[ "$1" =~ ${DEFPRM[jy]} ]]; then
          p="${DEFVAL[jy]}"
          sts=1
          break
        fi
      elif [[ "$1" == "${DEFPRM[jy]}" ]]; then
         p="${DEFVAL[jy]}"
         sts=1
         break
      fi
      ((jy++))
    done
    echo "$p"
    return $sts
}


matches1of() {
# matches1of (filename, exclist)
# return:true/false
    local x=
    sts=1
    for x in $2; do
      if [[ "$1" =~ $x ]]; then
        sts=0
        break
      fi
    done
    return $sts
}


robocopy_init() {
# robocopy_init (prjname, PKGNAME)::DIST_CONF,TCONF,opt_fetch,opt_verbose
# return:
    a_append "--new"
    a_append "^.*\.egg-info$" ""
    if [ "$1" == "Odoo" ]; then
      a_append "^.*" "/"
    else
      a_append "Makefile" "/"
      a_append "setup.py" ""
      if [ "$1" != "travis_emulator" ]; then
        a_append "_travis" ""
      fi
      a_append "$2" "/"
      a_append "conf" "/"
      if [ ${opt_fetch:-0} -eq 0 ]; then
         a_append "README.rst" "/"
         a_append "README.md" "/"
      fi
      a_append "^.*" ""
    fi
    if [ "$DIST_CONF" ]; then
      local xx=$(grep "^ignore *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"'\r\n")
      local yy=$(grep "^ignorediff *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"'\r\n")
    fi
    if [ -z "$xx" -a "$TCONF" ]; then
      local xx=$(grep "^ignore *=" $TCONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"'\r\n")
      local yy=$(grep "^ignorediff *=" $TCONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"'\r\n")
    fi
    if [ -z "$xx" ]; then
      # TODO: addons
      local xx=".pyc .log .bak .out .tmp .conf .tracehis .tracehistory ,cover .coverage build/ dist/ conf/ filestore/ .cover/ .coverage/ .git/ ~"
      local yy=".po .pot"
    fi
    XRGX=
    XLFS=
    XLDF=
    for x in $xx; do
      local x1="${x:0:1}"
      local l=
      let l=${#x}-1
      local x9="${x:l:1}"
      if [ "$x9" == "/" ]; then
         XRGX="$XRGX ^(.*\\/|)$x"
         XLFS="$XLFS --exclude=$x"
      elif [ "$x1" == "." -o "$x1" == "," -o "$x" == "~" ]; then
         XRGX="$XRGX ^.*\\$x\$"
         XLFS="$XLFS --exclude=*$x"
      else
         XRGX="$XRGX $x"
         XLFS="$XLFS --exclude=*$x*"
      fi
      XLDF="$XLDF -x '*$x'"
    done
    XXDF=
    for x in $yy; do
      local x1="${x:0:1}"
      local l=
      let l=${#x}-1
      local x9="${x:l:1}"
      if [ "$x9" == "/" ]; then
         XXDF="$XXDF ^(.*\\/|)$x"
      elif [ "$x1" == "." -o "$x" == "~" ]; then
         XXDF="$XXDF ^.*\\$x\$"
      else
         XXDF="$XXDF $x"
      fi
    done
}


robocopy() {
# robocopy (srcfname, tgtpath, sshopt)::opt_dry_run,opts_dry_run,opt_verbose,XRGX,XRGI,XLFS
# return:
    if [ -d "$1" ]; then
      local t="d"
      local ff=$1/
    else
      local t="f"
      local ff=$1
    fi
    local fn=$(basename $1)
    if $(matches1of "$ff" "$XRGI"); then
      local v=$(a_search "$fn")
    elif $(matches1of "$ff" "$XRGX"); then
      local v=
    else
      local v=$(a_search "$fn")
    fi
    if [ "${v:0:1}" == "/" ]; then
      if [ "$v" == "/" -a "$t" == "d" ]; then
        if [ "${3:0:3}" == "ssh" ]; then
          if [ ${opt_verbose:-0} -gt 0 ]; then
            local optrsync="-abvzhe"
          else
            local optrsync="-abzhe"
          fi
          local optssh="$3"
          echo "\$ rsync $opts_dry_run $optrsync \"$optssh\" $opts_upd --del --copy-links $XLFS $ff $2$v"
          rsync $opts_dry_run $optrsync "$optssh" $opts_upd --del --copy-links $XLFS $ff $2$v
        else
          if [ ${opt_verbose:-0} -gt 0 ]; then
            local optrsync="-abv"
          else
            local optrsync="-ab"
          fi
          local optssh=""
          echo "\$ rsync $opts_dry_run $optrsync $opts_upd --del --copy-links $XLFS $ff $2$v"
          rsync $opts_dry_run $optrsync $opts_upd --del --copy-links $XLFS $ff $2$v
        fi
      else
        if [ "${3:0:3}" == "ssh" ]; then
          local optssh="${3:3}"
          echo "((${opt_dry_run:-0}))||scp -Bp $optssh $ff $2"
          ((${opt_dry_run:-0}))||scp -Bp $optssh $ff $2
        else
          if [ ! -d "$2" ]; then
            local v=
          fi
          diff -q $ff $2$v &>/dev/null
          if [ $? -ne 0 ]; then
            echo "${opt_dry_run:-0}||cp -L $ff $2$v"
            ((${opt_dry_run:-0}))||cp -L $ff $2$v
          fi
        fi
      fi
    fi
}

clean_dirs() {
# clean_dirs (directory)::
# return:
    if [ ${opt_verbose:-0} -gt 0 ]; then
      local o="-print "
    else
      local o=
    fi
    XXXX=$(get_cfg_value "" "fileignore")
    for x in $XXXX;do
      if [ "$x" != ".conf" ]; then
        if [ ${opt_dry_run:-0} -gt 0 ]; then
          echo "> find $1 -nowarn -name \"*$x\" -exec rm -f"
          find $1 -nowarn -name "*$x" -exec echo "1||rm '{}'" \;
        else
          find $1 -nowarn -name "*$x" $o-exec rm -f '{}' \;
        fi
      fi
    done
    if [ -f .gitignore ]; then
      if [ -z "$(grep "stdout.log" .gitignore 2>/dev/null)" ]; then
        echo "stdout.log">>.gitignore
      fi
      if [ -z "$(grep "oca__*" .gitignore 2>/dev/null)" ]; then
        echo "oca__*">>.gitignore
      fi
      if [ -z "$(grep "z0i__*" .gitignore 2>/dev/null)" ]; then
        echo "z0i__*">>.gitignore
      fi
    fi
}


please_test_bash() {
    echo "======== Testing test_bash   ========"
    sts=$STS_SUCCESS
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      local f
      for f in $(find . -type f|tr "\n" " "); do
        if [ "$(head $f -n1|grep ^\#\![[:space:]]*/bin/bash 2>/dev/null)" ]; then
          if [ ${opt_verbose:-0} -gt 0 ]; then
            elog "$ bash -n $f"
          fi
          bash -n $f
          local s=$?
          if [ $sts -eq $STS_SUCCESS ]; then
            if [ "$(grep ^[[:space:]]*set[[:space:]]*-x $f 2>/dev/null)" ]; then
              echo "Invalid statement 'set -x' in $f"
              sts=$STS_FAILED
            fi
          else
            sts=$STS_FAILED
          fi
        fi
      done
    else
      sts=$STS_SUCCESS
    fi
    return $sts
}

please_test_flake8() {
    echo "======== Testing test_flake8 ========"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      FLAKE8_CONFIG_DIR="$TOOLS_PATH/cfg"
      run_traced "flake8 . --config=${FLAKE8_CONFIG_DIR}/travis_run_flake8__init__.cfg"
      local status1=$?
      run_traced "flake8 . --config=${FLAKE8_CONFIG_DIR}/travis_run_flake8.cfg"
      local status2=$?
      sts=$((${status1} || ${status2}))
    else
      sts=$STS_SUCCESS
    fi
    return $sts
}

please_test_pylint() {
    echo "======== Testing test_pylint ========"
    sts=$STS_SUCCESS
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      TRAVIS_BUILD_DIR=$PKGPATH
      MODULES_TO_TEST=$TRAVIS_BUILD_DIR
      if [ "$PRJNAME" == "travis_emulator" -a -d $PRJPATH/cfg ]; then
        PYLINT_CONFIG_DIR="$PRJPATH/cfg"
      else
        PYLINT_CONFIG_DIR="$TOOLS_PATH/cfg"
      fi
      if [ "$PRJNAME" == "Odoo" ]; then
        pylint_rcfile=${PYLINT_CONFIG_DIR}/travis_run_pylint.cfg
      else
        pylint_rcfile=${PYLINT_CONFIG_DIR}/travis_run_pylint_PYPI.cfg
      fi
      if [ ${opt_verbose:-0} -gt 0 ]; then
        echo "export PYTHONPATH=${PYTHONPATH}:${MODULES_TO_TEST}"
      fi
      export PYTHONPATH=${PYTHONPATH}:${MODULES_TO_TEST}
      # if [ "$PRJNAME" == "Odoo" ]; then
      #   touch $MODULES_TO_TEST/__init__.py
      # fi
      IFS="/" read -a REPO <<< "${ODOO_REPO}"
      export PATH=${PATH}:${PWD}/../${REPO[1]}-${VERSION}/openerp
      #run pylint command
      run_traced "pylint --rcfile=$pylint_rcfile ${MODULES_TO_TEST}"
      sts=$?
    fi
    return $sts
}

do_summary() {
# do_summary(bash,flake8,pylint,test)
    local RED="\033[1;31m"
    local GREEN="\033[1;32m"
    local CLEAR="\033[0;m"
    echo "+======================================="
    echo "|  Tests summary:"
    echo "|---------------------------------------"
    if [ "$PRJNAME" == "Odoo" ]; then
      local des=("" "test_bash" "test_flake8" "test_pylint" "test_server.py")
    else
      local des=("" "test_bash" "test_flake8" "test_pylint" "regression_test")
    fi
    for i in {1..4};do
      if [ -n "${!i}" ]; then
        local x=$(printf "%-20.20s" "${des[$i]}")
        if [ ${!i} -eq $STS_SUCCESS ]; then
          echo -e "| $x        ${GREEN}Success${CLEAR}"
        elif [ ${!i} -ne 127 ]; then
          echo -e "| $x        ${RED}FAIL${CLEAR}"
        fi
      fi
    done
    echo "+======================================="
}


ant_rm_trap() {
    # wlog "... recover $1"
    local f1=$(readlink -f $1)
    if [ -f $f1 ]; then
      local lne=$(head -n1 $f1)
      if [ -n "$lne" -a "${lne:0:5}" == "trap " ]; then
        echo "... recover $f1"
        tail -n+2 $f1>$f1.tmp
        mv -f $f1.tmp $f1
      fi
    fi
}

ant_add_trap() {
    echo "... analyzing $1"
    local f1=$(readlink -f $1)
    if [ -f $f1 ]; then
      ant_rm_trap "$f1"
      echo "trap \"echo [\$LINENO] \$0:\$BASH_COMMAND>>$FHIST\" DEBUG">$f1.sh
      local line=
      while IFS=\~ read -r line; do
        echo "$line">>$f1.sh
        if [ "${line:0:1}" == "." ]; then
          local fn="${line:2}"
          local p="$(dirname $fn)"
          if [ "$p" == "." ]; then
            if [ "$(echo " $FL_2_TEST "|grep -v [[:space:]]$fn[[:space:]] 2>/dev/null)" ]; then
              FL_2_TEST="$FL_2_TEST $fn"
            fi
          fi
        fi
      done < "$f1"
      rm -f $FHIST
      chmod +x $f1.sh
      mv -f $f1.sh $f1
    fi
}

ant_erase() {
    local fn
    for fn in $(find . -type f -executable); do
      if [[ $fn =~ \.[a-zA-Z0-9_]{1,3} ]]; then
        if [ ${fn: -3} == ".sh" ]; then
          ant_rm_trap $fn
        fi
      else
        ant_rm_trap $fn
      fi
    done
}

coverage() {
    if [ -z "$COVERAGE" ]; then
      COVERAGE=$(which coverage)
    fi
    if [ "$1" == "erase" ]; then
      mkdir -p $PRJPATH/cover
      find . -name "*.tracehistory" -delete
      find . -name "*,cover" -delete
      find . -name ".coverage" -delete
      ant_erase
    fi
    eval $COVERAGE "$@"
    return $?
}

run_regression_test() {
    echo "======== Running regression_test ========"
    cd $PRJPATH
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ $(echo :$PYTHONPATH:|grep -v ":$PKGPATH:"  2>/dev/null) ]; then
        run_traced "export PYTHONPATH=${PYTHONPATH}:$PKGPATH"
      fi
      if [ -f ./tests/all_tests ]; then
        if [ ${opt_dprj:-0} -gt 0 ]; then
          ./tests/all_tests
        else
          cd ./tests; ./all_tests
        fi
        sts=$?
      elif [ -f ./tests/test_$PRJNAME.py ]; then
        if [ ${opt_dprj:-0} -gt 0 ]; then
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "DEV_ENVIRONMENT=$PRJNAME python ./tests/test_$PRJNAME.py"
          fi
          DEV_ENVIRONMENT=$PRJNAME python ./tests/test_$PRJNAME.py
        else
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "cd ./tests; DEV_ENVIRONMENT=$PRJNAME python test_$PRJNAME.py"
          fi
          cd ./tests; DEV_ENVIRONMENT=$PRJNAME python test_$PRJNAME.py
        fi
        sts=$?
      else
        elog "!????? Module test for $PRJNAME not found!??????"
        sts=$STS_FAILED
      fi
    else
      sts=$STS_SUCCESS
    fi
    return $sts
}

run_coverage_test() {
    cd $PRJPATH
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ "$PRJNAME" != "Odoo" ]; then
        if [ ${opt_verbose:-0} -gt 0 ]; then
          echo "export COVERAGE_FILE=$(readlink -f ./.coverage)"
        fi
        export COVERAGE_FILE=$(readlink -f ./.coverage)
        if [ -f ./__main__.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run --source $PRJNAME __main__.py"
          fi
          DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run --source $PRJNAME __main__.py
          if [ ${opt_mis:-0} -gt 0 ]; then
            coverage report -m
          else
            coverage report
          fi
          sts=$STS_SUCCESS
        elif [ -f ./tests/test_$PRJNAME.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)"
          fi
          export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)
          if [ ${opt_dprj:-0} -gt 0 ]; then
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a ./tests/test_$PRJNAME.py"
            fi
            DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a ./tests/test_$PRJNAME.py
          else
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a --rcfile=$COVERAGE_PROCESS_START test_$PRJNAME.py"
            fi
            cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a --rcfile=$COVERAGE_PROCESS_START test_$PRJNAME.py
          fi
          if [ ${opt_mis:-0} -gt 0 ]; then
            coverage report -m
          else
            coverage report
          fi
          sts=$STS_SUCCESS
        else
          sts=$STS_FAILED
        fi
      else
        sts=$STS_SUCCESS
      fi
    else
      sts=$STS_SUCCESS
    fi
    return $sts
}

run_annotate_test() {
    cd $PRJPATH
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ "$PRJNAME" != "Odoo" ]; then
        if [ ${opt_verbose:-0} -gt 0 ]; then
          echo "export COVERAGE_FILE=$(readlink -f ./.coverage)"
        fi
        export COVERAGE_FILE=$(readlink -f ./.coverage)
        if [ -f ./__main__.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover ./*.py"
          fi
          DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover ./*.py
          dir $PRJPATH/cover/
          # coverage report
          sts=$STS_SUCCESS
        elif [ -f ./tests/test_$PRJNAME.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)"
          fi
          export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)
          if [ ${opt_dprj:-0} -gt 0 ]; then
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover ./tests/test_$PRJNAME.py"
            fi
            DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover ./tests/test_$PRJNAME.py
          else
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover --rcfile=$COVERAGE_PROCESS_START --rcfile=$COVERAGE_PROCESS_START test_$PRJNAME.py"
            fi
            cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover test_$PRJNAME.py
          fi
          dir $PRJPATH/cover/
          # coverage report
          sts=$STS_SUCCESS
        else
          sts=$STS_FAILED
        fi
      else
        sts=$STS_SUCCESS
      fi
    else
      sts=$STS_SUCCESS
    fi
    return $sts
}

cp_n_upd_conf() {
    local confn=$1
    if [ "$VERSION" == "v7" ]; then
      local odoo_ver=7
      local pfx="openerp"
      local pfx2=
      local sfx="/server"
    else
      local odoo_ver=$(echo $VERSION|grep -Eo [0-9]*|head -n1)
      local pfx="odoo$odoo_ver"
      local pfx2=odoo
      local sfx=
    fi
    if [ "$odoo_ver" == "10" ]; then
      local tgt=$(get_cfg_value "" "ODOO_DEFCONF")
      tgt=$(basename $tgt)
      if [ "$tgt" == ".openerp_serverrc" ]; then
        local atgt=~/.odoorc
      else
        local atgt=~/.openerp_serverrc
      fi
      tgt=~/$tgt
    else
      local tgt=~/.openerp_serverrc
      local atgt=~/.odoorc
    fi
    if [ -z "$confn" ] || [ ! -f $confn ]; then
      local confn=/etc/odoo/${pfx}-server.conf
      if [ ! -f $confn ]; then
        confn=/etc/odoo/${pfx}.conf
      fi
      if [ ! -f $confn ]; then
        confn=/etc/odoo/${pfx2}-server.conf
      fi
      if [ ! -f $confn ]; then
        confn=/etc/odoo/${pfx2}.conf
      fi
    fi
    if [ ! -f $confn ]; then
      echo "File $confn not found!"
      exit 1
    fi
    if [ -f $atgt ]; then
      rm -f $atgt
    fi
    if [ -f $tgt ]; then
      rm -f $tgt
    fi
    wlog "$ cp $confn $tgt"
    touch $tgt
    local ODOO_LOGFILE=$(get_cfg_value "" "ODOO_LOGFILE")
    while IFS=\| read -r line; do
      if [[ $line =~ ^data_dir[[:space:]]*=[[:space:]]*.*Odoo$odoo_ver ]]; then
        line=$(echo "$line"|sed -e "s:Odoo$odoo_ver:Odoo-test:")
      elif [[ $line =~ ^logfile[[:space:]]*=[[:space:]]*.* ]]; then
        line=$(echo "logfile = $ODOO_LOGFILE")
      elif [[ $line =~ ^pidfile[[:space:]]*=[[:space:]]*.*odoo$odoo_ver ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^xmlrpc_port[[:space:]]*=[[:space:]][0-9]* ]]; then
        line="xmlrpc_port = 8079"
      elif [[ $line =~ ^NAME=.*odoo$odoo_ver.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo$odoo_ver-server.conf.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*$confn.* ]]; then
        line=$(echo "$line"|sed -e "s:$confn:odoo-test:")
      elif [[ $line =~ .*odoo$odoo_ver-server.pid.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo$odoo_ver-server.log.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      fi
      echo "$line">>$tgt
    done < "$confn"
}

clone_1_dependence() {
    local n sts
    sts=0
    if [ -n "$1" ]; then
      n=$(basename $1)
      if [ -d $1 ]; then
        if [ "$n" != "__unported__" ]; then
          if [ ! -d $HOME/dependencies/$n ]; then
            run_traced "ln -s $1 $HOME/dependencies/"
            sts=$?
          else
            wlog "Module $1 already cloned!"
          fi
        fi
      fi
    fi
    return $sts
}

clone_core_dependencies() {
    local line
    local p d s sts
    local CORE_MODULES=""
    local oetpath=$(readlink -e $PRJPATH/..)
    sts=0
    for line in $CORE_MODULES; do
      d=$(find $oetpath -type d -name "$line")
      if [ -n "$d" ]; then
        if [ -n "$REPOSNAME" ]; then
          for p in $d/*; do
            clone_1_dependence "$p"
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
          done
        else
          clone_1_dependence "$d"
          s=$?; [ ${s-0} -ne 0 ] && sts=$s
        fi
      else
        elog "!????? Module $line not found!??????"
        sts=2
      fi
    done
    if [ -n "$REPOSNAME" ]; then
      clone_1_dependence "$oetpath/addons"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    fi
    return $sts
}

clone_oca_dependencies() {
    local f1=$1
    local line p d r s sts
    local oetpath=$(readlink -e $PRJPATH/..)
    sts=0
    if [ -f "$f1" ]; then
      # while IFS=\~ read -r line; do
      while IFS="#" read -r line r; do
        if [[ $line =~ ^[[:space:]]*$ ]]; then
          :
        else
        # if [ -n "$line" -a "${line:0:1}" != "#" ]; then
          d=$(find $oetpath -maxdepth 1 -type d -name "$line")
          if [ -n "$d" ]; then
            if [ -n "$REPOSNAME" ]; then
              for p in $d/*; do
                clone_1_dependence "$p"
                s=$?; [ ${s-0} -ne 0 ] && sts=$s
              done
            else
              clone_1_dependence "$d"
              s=$?; [ ${s-0} -ne 0 ] && sts=$s
            fi
          else
            elog "!????? Module $line not found!??????"
            sts=2
          fi
        fi
      done < "$f1"
    fi
    return $sts
}

clone_dependencies() {
    local p s sts
    if [ ! -d $HOME/dependencies ]; then
      run_traced "mkdir $HOME/dependencies"
    fi
    sts=0
    if [ -n "$REPOSNAME" ]; then
      run_traced "export INCLUDE=$PKGNAME"
      local oetpath=$(readlink -e $PRJPATH/..)
      for p in $oetpath/*; do
        clone_1_dependence "$p"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
      p=$(readlink -e $oetpath/openerp)
      if [ -n "$p" ]; then
        clone_1_dependence "$p"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      p=$(readlink -e $oetpath/$REPOSNAME/)
      if [ -n "$p" ]; then
         clone_oca_dependencies "$p/oca_dependencies.txt"
         s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      clone_core_dependencies
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    else
      run_traced "export INCLUDE="
      clone_oca_dependencies "$PKGPATH/oca_dependencies.txt"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    fi
    return $sts
}

run_svr_test_rm_ln() {
    if [ ${opt_virt:-0} -eq 0 ]; then
      local n=$(get_cfg_value "" "dbtemplate")
    else
      local n=$(get_cfg_value "" "dbtemplate")_$$
    fi
    run_traced "dropdb --if-exists $n"
    if [ ${opt_virt:-0} -eq 0 ]; then
      local n=$(get_cfg_value "" "dbname")
    else
      local n=$(get_cfg_value "" "dbname")_$$
    fi
    run_traced "dropdb --if-exists $n"
    run_unvirt "if [ -d $HOME/dependencies ]; then rm -fR $HOME/dependencies; fi"
    run_unvirt "if [ -L $HOME/dependencies ]; then rm -f $HOME/dependencies; fi"
    if [ "${PRJPATH:0:13}" == "/opt/odoo/v7/" ]; then
      run_unvirt "if [ -f $HOME/${ODOO_REPO#*/}-$VERSION/openerp-server ]; then rm -f $HOME/${ODOO_REPO#*/}-$VERSION/openerp-server; fi"
    fi
    run_unvirt "if [ -L $HOME/$PKGNAME-$VERSION ]; then rm -f $HOME/$PKGNAME-$VERSION; fi"
    run_unvirt "if [ -L $HOME/${ODOO_REPO#*/}-$VERSION ]; then rm -f $HOME/${ODOO_REPO#*/}-$VERSION; fi"
}


run_unvirt() {
#run_unvirt (cmd)
    if [ ${opt_virt:-0} -eq 0 ]; then
      run_traced "$1"
    else
      :
    fi
    return $?
}

run_svr_test_init() {
    local i
    local CMD
    run_traced "coverage erase"
    sts=0
    if [ "$PRJNAME" == "Odoo" ]; then
      run_svr_test_rm_ln
      cp_n_upd_conf
      clone_dependencies
      sts=$?
      local x=$(readlink -e $PRJPATH/..)
      run_unvirt "ln -s $x $HOME/${ODOO_REPO#*/}-$VERSION"
      run_unvirt "ln -s $PKGPATH $HOME/$PKGNAME-$VERSION"
      if [ "${PRJPATH:0:13}" == "/opt/odoo/v7/" ]; then
        cat <<EOF >$x/openerp-server
#!/usr/bin/env python
import os
import subprocess
import sys
if __name__ == "__main__":
    sys.path.insert(0,'/opt/odoo/v7/server')
    import openerp
    openerp.cli.main()
EOF
        chmod +x $x/openerp-server
      fi
    fi
    return $sts
}

run_svr_test_exit() {
    if [ "$PRJNAME" == "Odoo" ]; then
      run_svr_test_rm_ln
    fi
}

run_server_test() {
  echo "======== Running server_test ========"
  run_svr_test_init
  run_svr_test_exit
  sts=$STS_FAILED
  return $sts
}

please_run_tests() {
    sts=$STS_SUCCESS
    if [[ $1 =~ [BK] ]]; then
      please_test_bash
      sts_bash=$?
    else
      sts_bash=127
    fi
    if [[ $1 =~ [LK] ]]; then
      cd $TOOLS_PATH
      please_test_flake8
      sts_flake8=$?
      please_test_pylint
      sts_pylint=$?
      if [ $sts_bash -ne 127 ]; then
        sts=$(($sts_bash || $sts_flake8 || $sts_pylint))
      else
        sts=$(($sts_flake8 || $sts_pylint))
      fi
    else
      if [ $sts_bash -ne 127 ]; then
        sts=$sts_bash
      else
        sts=$STS_SUCCESS
      fi
    fi
    if [[ $1 =~ T ]]; then
      if [ "$PRJNAME" == "Odoo" ]; then
        run_server_test
      else
        run_regression_test
      fi
      test_sts=$?
      if [ $test_sts -ne $STS_SUCCESS ]; then
        sts=$test_sts
      fi
    fi
    do_summary "$sts_bash" "$sts_flake8" "$sts_pylint" "$test_sts"
    if [ $sts -eq $STS_SUCCESS ]; then
      run_coverage_test
    fi
    return $sts
}
