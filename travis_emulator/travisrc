#! /bin/bash
# -*- coding: utf-8 -*-
#
# Common file for travis emulator scripts
#__version__=0.1.8

ODOO_SETUP=__openerp__.py
MAKEF=/opt/odoo/dev/Makefile
DIST_CONF=./conf/.friends.conf
XRGX="^.*\.pyc$ ^.*\.log$ ^.*\.bak$ ^.*\.out$ ^.*\.conf$ ^(.*\/|)build\/ ^(.*\/|)dist\/ ^(.*\/|)conf\/ ^(.*\/|)\.cover\/ ^(.*\/|)\.coverage\/ ^(.*\/|)\.git\/ ^.*~$"
XRGI="^(.*\/|)conf\/.*sample$"
XXXX=".pyc .log .bak .out .conf build/ dist/ conf/ .cover/ .coverage/ .git/ ~"
XLFS=
for x in $XXXX;do
  XLFS="$XLFS --exclude *$x"
done
XLDF=
for x in $XXXX;do
  XLDF="$XLDF -x *$x"
done


set_pkgpath () {
# set_pkgpath (pkgname)
# return:pkgpath
    PKGPATH=$1
    if [ -z "$PKGPATH" ]; then
      PKGPATH=$PWD
    elif [ "${PKGPATH:0:1}" != "." -a "${PKGPATH:0:1}" != "/" ]; then
      local oPKGPATH="$PKGPATH"
      local x=$(readlink -e ../$PKGPATH)
      if [ "$x" -a "$(basename $x)" == "$PKGPATH" ]; then
        PKGPATH=$x
        local x=$(readlink -e $PKGPATH/..)
        if [ "$x" -a "$(basename $x)" == "$oPKGPATH" ]; then
          PKGPATH=$x
        fi
      fi
    fi
    echo $PKGPATH
}


a_append () {
# a_append (key, values)::DEFPRM,DEFVAL
# return:
# key=="--new" && value=="" -> clean dictionary
    if [ "$1" == "--new" -a -z "$2" ]; then
      unset DEFPRM[*]
      unset DEFVAL[*]
      return
    fi
    if [ "$1" ]; then
      local l=${#DEFPRM[*]}
      DEFPRM[l]="$1"
      DEFVAL[l]="$2"
    fi
}


a_search () {
# a_search (key)::DEFPRM,DEFVAL
# return:value,sts
    local jy=0
    local p=""
    local sts=0
    while ((jy<${#DEFPRM[*]})); do
      if [ "${DEFPRM[jy]:0:1}" == "^" ]; then
        if [[ "$1" =~ ${DEFPRM[jy]} ]]; then
          p="${DEFVAL[jy]}"
          sts=1
          break
        fi
      elif [[ "$1" == "${DEFPRM[jy]}" ]]; then
         p="${DEFVAL[jy]}"
         sts=1
         break
      fi
      ((jy++))
    done
    echo "$p"
    return $sts
}


matches1of () {
# matches1of (filename, exclist)
# return:true/false
    local x=
    sts=1
    for x in $2; do
      if [[ "$1" =~ $x ]]; then
        sts=0
        break
      fi
    done
    return $sts
}


robocopy_init () {
# robocopy_init (prjname, pkgname)::opt_fetch
# return:
    a_append "--new"
    a_append "^.*\.egg-info$" ""
    if [ "$1" == "Odoo" ]; then
      a_append "^.*" "/"
    else
      a_append "Makefile" "/"
      a_append "setup.py" ""
      a_append "$2" "/"
      a_append "conf" "/"
      if [ $opt_fetch -eq 0 ]; then
      #   a_append "README.rst" "/$2/README.rst"
      #   a_append "README.md" "/$2/README.md"
         a_append "README.rst" "/"
         a_append "README.md" "/"
      fi
      a_append "^.*" ""
    fi
}

robocopy () {
# robocopy (srcfname, tgtpath, sshopt)::opt_dry_run,opts_dry_run,XRGX,XRGI,XLFS
# return:
    if [ -d "$1" ]; then
      local t="d"
      local ff=$1/
    else
      local t="f"
      local ff=$1
    fi
    local fn=$(basename $1)
    if $(matches1of "$ff" "$XRGI"); then
      local v=$(a_search "$fn")
    elif $(matches1of "$ff" "$XRGX"); then
      local v=
    else
      local v=$(a_search "$fn")
    fi
    if [ "${v:0:1}" == "/" ]; then
      if [ "$v" == "/" -a "$t" == "d" ]; then
        if [ "${3:0:3}" == "ssh" ]; then
          local optrsync="-abvzhe"
          local optssh="$3"
          if [ "$v" == "/" ]; then
            v=/$fn/
          else
            v=$v/$fn/
          fi
          echo "rsync $opts_dry_run $optrsync \"$optssh\" --del --copy-links $XLFS $ff $2$v"
          rsync $opts_dry_run $optrsync "$optssh" --del --copy-links $XLFS $ff $2$v
        else
          local optrsync="-ab"
          local optssh=""
          echo "rsync $opts_dry_run $optrsync --del --copy-links $XLFS $ff $2$v"
          rsync $opts_dry_run $optrsync --del --copy-links $XLFS $ff $2$v
        fi
      else
        if [ "${3:0:3}" == "ssh" ]; then
          local optssh="${3:3}"
          echo "(($opt_dry_run))||scp -Bp $optssh $ff $2"
          (($opt_dry_run))||scp -Bp $optssh $ff $2
        else
          if [ ! -d "$2" ]; then
            local v=
          fi
          echo "$opt_dry_run||cp -L $ff $2$v"
          (($opt_dry_run))||cp -L $ff $2$v
        fi
      fi
    fi
}

clean_dirs () {
# clean_dirs (directory)::
# return:
    if [ $opt_dry_run -gt 0 ]; then
      for x in $XXXX;do
        find $1 -nowarn -type f -name "*$x" -exec echo "1||rm '{}'" \;
      done
    else
      for x in $XXXX;do
        find $1 -nowarn -type f -name "*$x" -exec rm -f '{}' \;
      done
    fi
}