#
# Common file for travis emulator scripts
# 
#__version__=0.2.2.3


MAKEF=/opt/odoo/dev/Makefile
# DIST_CONF=./conf/.local_dist_pkg.conf
XRGI="^(.*\/|)conf\/.*sample$"

PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../../z0lib ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $HOME/tools/clodoo $HOME/dev ${PYPATH//:/ } . .." "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR

opts_travis() {
#opts_travis(git-org/pkgname)
    local x
    REMOTEREPO=
    PRJNAME=
    PRJPATH=
    PKGNAME=
    PKGPATH=
    if [ -n "$1" ]; then
      IFS="/" read REMOTEREPO x <<< "$1"
    fi
    [ -z "$REMOTEREPO" ] && REMOTEREPO="local"
    build_pypi_param ALL $1
    export TRAVIS_REPO_SLUG=$REMOTEREPO/$PKGNAME
    if [ -n "$opt_conf" -a -f "$opt_conf" ]; then
      TCONF=$opt_conf
    else
      TCONF=$TDIR/.travis.conf
    fi
    DIST_CONF=$(readlink -f $PKGPATH/conf/.local_dist_pkg.conf)
    if [ -z "$DIST_CONF" ]; then
      DIST_CONF=$(readlink -f $PKGPATH/../conf/.local_dist_pkg.conf)
    fi
    if [ "$DEV_ENVIRONMENT" == "$THIS" ]; then
      test_mode=1
    fi
    if [ ${test_mode:-0} -gt 0 ]; then
      opt_dry_run=1
    fi
}

inherits_travis_opts() {
# inherits_travis_opts(opts_enables app)
# app: After_test,Distribution,Emulator,Nightly,Please,Test,pep8
    local opts=
    local opts2=
    local o
    if [ -z "$1" ]; then
      local e=
    else
      local e=$1
    fi
    declare -A A
    A[A]="jnqv"
    A[D]="CcDdFfnOoPqRv"
    A[E]="cdjmnqrv"
    A[N]="CKnOR"
    A[P]="cdfjmnOqruv"
    A[T]="cKPpqrTv"
    A[8]="dnquv"
    if [ -n "$2" ]; then
      for o in C c d F f K j m n O o P p q R r T u v; do
        if [[ ${A[$2]} =~ $o ]]; then
          if [ "$o" == "C" -a "$opt_cpush" == "-$o" ]; then
            opts="${opts}$o"
          elif [ "$o" == "d" -a ${opt_diff:-0} -gt 0 ]; then
            opts="${opts}$o"
          elif [ "$o" == "F" -a "$opt_cpush" == "-$o" ]; then
            opts="${opts}$o"
          elif [ "$o" == "f" -a ${opt_force:-0} -gt 0 ]; then
            opts="${opts}$o"
          elif [ "$o" == "j" -a ${opt_dprj:-0} -gt 0 ]; then
            opts="${opts}$o"
          elif [ "$o" == "n" -a ${opt_dry_run:-0} -gt 0 ]; then
            opts="${opts}$o"
          elif [ "$o" == "o" ]; then
            if [ -n "$opt_ids" ]; then
              opts2="-o$opt_ids"
            fi
          elif [ "$o" == "P" -a "$opt_cpush" == "-$o" ]; then
            opts="${opts}$o"
          elif [ "$o" == "p" -a "${opt_pyth:-0}" -gt 0 ]; then
            opts="${opts}$o"
          elif [ "$o" == "q" -a ${opt_verbose:-1} -eq 0 ]; then
            opts="${opts}$o"
          elif [ "$o" == "R" -a "$opt_cpush" == "-$o" ]; then
            opts="${opts}$o"
          elif [ "$o" == "r" -a ${opt_r:-0} -eq 1 ]; then
            opts="${opts}$o"
          elif [ "$o" == "u" -a ${opt_uop:-0} -eq 1 ]; then
            opts="${opts}$o"
          elif [ "$o" == "v" -a ${opt_verbose:-0} -gt 0 ]; then
            opts="${opts}$o"
          elif [[ $e =~ $o ]]; then
            opts="${opts}$o"
          fi
        fi
      done
    fi

    if [ "$2" == "T" ]; then
      if [[ $e =~ [BK] ]]; then
        export BASH_CHECK="1"
      fi
      if [[ $e =~ [PK] ]]; then
        export LINT_CHECK="1"
      fi
      if [[ $e =~ T ]]; then
        export TEST_CHECK="1"
      fi
      if [[ $e =~ n ]]; then
        if [ ${opt_dry_run:-0} -gt 0 ]; then
          export MQT_DRY_RUN="1"
        fi
      fi
      if [[ $e =~ q ]]; then
        if [ ${opt_verbose:-0} -eq 0 ]; then
          export MQT_VERBOSE_MODE="0"
        fi
      fi
      if [[ $e =~ v ]]; then
        if [ ${opt_verbose:-0} -gt 0 ]; then
          export MQT_VERBOSE_MODE="1"
        fi
      fi
    fi
    if [ -n "$opts" ]; then
      opts="-${opts}"
    fi
    if [ -n "$opts2" ]; then
      opts="${opts} ${opts2}"
    fi
    echo "$opts"
}

build_pypi_param() {
# build_pypi_param(ALL|MANIFEST|PKGNAME|PKGPATH|PRJNAME|PRJPATH|REPOS|SETUP vid)
    local ODOO_SETUPS=$(get_cfg_value "" "ODOO_SETUPS")
    [ -z "$ODOO_SETUPS" ] && ODOO_SETUPS="__openerp__.py,__manifest__.py"
    local ODOO_SETUPS=${ODOO_SETUPS//,/ }
    local _SETUP _PKGPATH _PKGNAME _PRJPATH _PRJNAME _REPOS ODOO_SETUP INV_MODS
    local r w x="$PWD"
    [ -n "$2" -a "$2" != "local" ] && x=$2
    if [[ ! "$x" =~ (^\.$|^\.\.$|(\./|\.\./|~/|/)) ]]; then
      x=$(readlink -e $HOME/pypi/$2/$2)
    fi
    r=
    for ODOO_SETUP in $ODOO_SETUPS; do
      r="$r -o -name $ODOO_SETUP"
    done
    w=$(find $x -maxdepth 2 -not -path '*tests*' ${r:3}|head -n1)
    if [ -n "$w" ]; then
      _PRJNAME="Odoo"
      _REPOS=$(basename $x)
      _PKGPATH=$x
      _PKGNAME=$_REPOS
    fi
    INV_MODS="$(build_odoo_param INVALID_MODNAMES_RE)"
    while [[ ( -z "$_SETUP" || -z "$_PRJPATH" || -z "$_PKGPATH" ) && -n "$x" ]]; do
      r=$(basename $x)
      if [[ ! $r =~ $INV_MODS ]]; then
        [ -z "$_PRJPATH" ] && _PRJPATH=$x
        [ -z "$_PRJNAME" ] && _PRJNAME=$(basename $x)
        if [[ -z "$_SETUP" && -f "$x/setup.py" && ( ! -f "$x/../setup.py" || ! $(basename $(dirname $x)) == $(basename $x) ) ]]; then
          _SETUP="$x/setup.py"
          [ -z "$_PKGPATH" ] && _PKGPATH=$x
          [ -z "$_PKGNAME" ] && _PKGNAME=$(basename $x)
          if [[ ! "$_PRJNAME" == "Odoo" ]]; then
            [ "$x" != "/" ] && _REPOS=$(basename $(dirname $x)) || _REPOS=
          fi
          break
        elif [ -d $x/odoo -a -f $x/odoo_bin ]; then
          _PRJNAME="Odoo"
          break
        elif [ -d $x/openerp -a -f $x/openerp-server ]; then
          _PRJNAME="Odoo"
          break
        elif [ -d $x/server -a -f $x/server/openerp-server ]; then
          _PRJNAME="Odoo"
          break
        elif [ -z "$_SETUP" ]; then
          for ODOO_SETUP in $ODOO_SETUPS; do
            if [ -f $x/$ODOO_SETUP ]; then
              _PRJNAME="Odoo"
              _PRJPATH=
              _SETUP="$x/$ODOO_SETUP";
              _REPOS=
              if [ -z "$_PKGPATH" ]; then
                _PKGPATH=$x
                _PKGNAME=$(basename $x)
              fi
              break
            fi
          done
        elif [ -z "$_REPOS" ]; then
          _REPOS=$(basename $x)
        fi
      fi
      [ "$x" != "/" ] && x=$(readlink -e $x/..) || x=
    done
    if [ -n "$_SETUP" -a -f "$_SETUP" ]; then
      x=$(basename $_SETUP)
      r=
      [ "$x" == "setup.py" ] && r=$(grep "[^a-zA-Z0-9_]name *=" $_SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
      [ -n "$r" ] && _PRJNAME="$r"
    fi
    if [ "$_PRJNAME" == "odoo" -o "$_PRJNAME" == "openerp" ]; then
      _PRJNAME=Odoo
    fi
    if [[ "$_PRJNAME" == "Odoo" ]]; then
      if [[ $_PKGNAME =~ ^(v|V|odoo|ODOO|ocb|OCB|oca|oia)?-?(11\.0|10\.0|9\.0|8\.0|7\.0|6\.1|11|10|9|8|7|6) ]]; then
        _PKGNAME="OCB"
        _REPOS="OCB"
      fi
      [[ -z "$_PKGNAME" ]] && _PKGNAME="OCB"
      [[ -z "$_PKGNAME" ]] && _REPOS="OCB"
      [[ -z "$_PKGPATH" ]] && _PKGPATH="$_PRJPATH"
    fi
    if [ "$1" == "ALL" ]; then
      SETUP=$_SETUP
      [ -n "$SETUP" ] && MANIFEST=$(basename $SETUP) || MANIFEST=
      PKGPATH=$_PKGPATH
      PKGNAME=$_PKGNAME
      PRJPATH=$_PRJPATH
      PRJNAME=$_PRJNAME
      REPOS=$_REPOS
    elif [ "$1" == "PKGPATH" ]; then
      echo "$_PKGPATH"
    fi
}

init_travis() {
    local r x
    TRAVIS_ENV=$(get_cfg_value "" "Environment")
    TRAVIS_ENVOPTS=
    if [ ${opt_virt:-0} -eq -1 ]; then
      if [ "$TRAVIS_ENV" == "virtualenv" ]; then
        opt_virt=1
      else
        opt_virt=0
      fi
    elif [ ${opt_virt:-0} -eq 1 -a "$TRAVIS_ENV" == "bash" ]; then
      TRAVIS_ENV=virtualenv
    fi
    if [ ${opt_virt:-0} -gt 0 ]; then
      if [ "$TRAVIS_ENV" == "virtualenv" ]; then
        TRAVIS_ENVOPTS=$(get_cfg_value "" "virtualenv_opts")
      fi
    fi
    ## DEPRECATED, TODO: inherits_travis_opts()
    if [ ${opt_dry_run:-0} -gt 0 ]; then
      opts_dry_run=-n
    else
      opts_dry_run=
    fi
    ## DEPRECATED, TODO: inherits_travis_opts()
    if [ ${opt_upd:-0} -gt 0 ]; then
      opts_upd=-u
    else
      opts_upd=
    fi
    local x=$(get_cfg_value "" "loglevel")
    if [ ${x:-1} -ne -1 ]; then
      opt_verbose=$x
    fi
    if [ ${opt_verbose:-0} -eq -1 ]; then
      if [[ -t 0 || -p /dev/stdin ]]; then
        opt_verbose=0
      else
        opt_verbose=1
      fi
    fi
    if [ ${opt_verbose:-0} -ne 0 ]; then
      opts_verbose=-v
      export FLOG_ECHO=echo
    else
      opts_verbose=
      export FLOG_ECHO=
    fi
    if [[ -z "$PKGPATH" || -z "$PRJPATH" ]]; then
      build_pypi_param ALL
    fi
    if [ "$PRJNAME" == "Odoo" ]; then
      local npm_curpfx=$(npm config get prefix)
      NPM_CONFIG_PREFIX=$(get_cfg_value "" "NPM_CONFIG_PREFIX")
      if [ "$npm_curpfx" != "$NPM_CONFIG_PREFIX" ]; then
        mkdir -p $NPM_CONFIG_PREFIX
        npm config set prefix $NPM_CONFIG_PREFIX
      fi
      # PKGNAME=$(build_odoo_param PKGNAME ".")
      REPOSNAME=$(build_odoo_param REPOS ".")
      BRANCH=$(build_odoo_param FULLVER ".")
      # PRJPATH=$(build_odoo_param HOME '.')
      SETUP=$MANIFEST
    fi
    if [ ${opt_dbgmnt:-0} -ne 0 ]; then
      local MQT_DEF_PATH=$(get_cfg_value "" "MQT_DEF_DEVPATH")
    else
      local MQT_DEF_PATH=$(get_cfg_value "" "MQT_DEF_PATH")
    fi
    if [ ! -d "$MQT_DEF_PATH" ]; then
      if [ -d $TDIR/../travis ]; then
        MQT_DEF_PATH=$(readlink -e $TDIR/../travis)
      elif [ -d $TDIR/../../travis ]; then
        MQT_DEF_PATH=$(readlink -e $TDIR/../../travis)
      fi
    fi
    if [ -z "$MQT_PATH" ]; then
      if [ ${opt_dbgmnt:-0} -ne 0 -a -d "$MQT_DEF_PATH" ]; then
        MQT_PATH=$MQT_DEF_PATH
      elif [ -d $HOME/maintainer-quality-tools/travis ]; then
        MQT_PATH=$HOME/maintainer-quality-tools/travis
      elif [ -d /opt/odoo/maintainer-quality-tools/travis ]; then
        MQT_PATH=/opt/odoo/maintainer-quality-tools/travis
      elif [ -d $HOME/tools/maintainer-quality-tools/travis ]; then
        MQT_PATH=$HOME/tools/maintainer-quality-tools/travis
      else
        MQT_PATH=$MQT_DEF_PATH
      fi
    fi
    if [ -z "$TOOLS_PATH" ]; then
      if [ -d $TDIR/_travis ]; then
        TOOLS_PATH=$TDIR/_travis
      elif [ ${opt_dbgmnt:-0} -ne 0 -a -d "$MQT_DEF_PATH" ]; then
        TOOLS_PATH=$MQT_DEF_PATH
      elif [ -d $HOME/dev/_travis ]; then
        TOOLS_PATH=$HOME/dev/_travis
      elif [ -d $HOME/tools/maintainer-quality-tools/_travis ]; then
        TOOLS_PATH=$HOME/tools/maintainer-quality-tools/_travis
      else
        TOOLS_PATH=$(find $HOME -type d -name _travis|head -n1)
      fi
    fi
}

revaluate_travis() {
    PRJNAME=
    REPOSNAME=
    PRJPATH=
    PGKNAME=
    PKGPATH=
    init_travis
}

drop_test_db() {
    if [ "$PRJNAME" == "Odoo" ]; then
      local u=$(get_cfg_value "" "dbuser")
      local dbtemplate=${MQT_TEMPLATE_DB:-openerp_template}
      pg_db_active -wa $dbtemplate; dropdb $dbtemplate --if-exists &>/dev/null
      local database=${MQT_TEST_DB:-openerp_test}
      pg_db_active -wa $database; dropdb $database --if-exists &>/dev/null
    fi
}

custom_env() {
# custom_env(VENV pyver)
    cd $1
    sed -i -e 's:VIRTUAL_ENV=.*:VIRTUAL_ENV="\$(readlink -f \$(dirname \$(readlink -f \$BASH_SOURCE))/..)":g' $PWD/bin/activate
    if $(grep -q "^export HOME=" $PWD/bin/activate); then
      sed -i -e 's|^export HOME=.*|export HOME="\$VIRTUAL_ENV"|g' $PWD/bin/activate
      sed -i -e "s|^#.*/bin/python|#\!$PWD/bin/python|g" $PWD/bin/python-config
    else
      sed -ri "/deactivate *\(\) *\{/a\    export HOME=\$(grep \$USER /etc/passwd|awk -F: '{print \$6}')" $PWD/bin/activate
      [ "$SYSTEM_SITE_PACKAGES" != "true" -a -n "$2" ] && echo "[ -f /usr/bin/pip$2 -a ! -f \$VIRTUAL_ENV/bin/pip ] && ln -s /usr/bin/pip$2 \$VIRTUAL_ENV/bin/pip">>$PWD/bin/activate
      echo "for f in \$VIRTUAL_ENV/bin/*;do">>$PWD/bin/activate
      echo "    [ -x \$f ] && sed -i -e \"s|^#\!.*/bin/python|#\!\$VIRTUAL_ENV/bin/python|\" \$f">>$PWD/bin/activate
      echo "done">>$PWD/bin/activate
      echo "export HOME=\"\$VIRTUAL_ENV\"">>$PWD/bin/activate
      [[ "$SYSTEM_SITE_PACKAGES" == "true" ]] && echo "[ -d $HOME/tools ] && export PYTHONPATH=$HOME/tools">>$PWD/bin/activate
      sed -i -e "s:^#\!*/bin/python:#!$PWD/bin/python:g" $PWD/bin/python-config
    fi
    # if $(grep -qv \"-f...VIRTUAL_ENV/bin/pip.*sed\" $PWD/bin/activate); then
    #   echo "[ -f $VIRTUAL_ENV/bin/pip ] && sed -i -e \"s|#\!.*python2.7|#\!\$VIRTUAL_ENV/bin/python2.7|\" \$VIRTUAL_ENV/bin/pip">>$PWD/bin/activate
    # fi
    sed -i -e 's|PATH="\$VIRTUAL_ENV/bin:\$PATH"|PATH="\$VIRTUAL_ENV/.local/bin:\$VIRTUAL_ENV/bin:\$PATH"|g' $PWD/bin/activate
    if [[ "$SYSTEM_SITE_PACKAGES" == "true" ]]; then
      if [[ -d $PWD/.local/lib/python$2/site-packages ]]; then
        echo -e "import site\nsite.addsitedir('$PWD/.local/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib64/python$2/site-packages')\n">$PWD/lib/python$2/site-packages/sitecustomize.py
      else
        echo -e "import site\nsite.addsitedir('/usr/lib/python$2/site-packages')\nsite.addsitedir('/usr/lib64/python$2/site-packages')\n">$PWD/lib/python$2/site-packages/sitecustomize.py
      fi
    elif [[ -d $PWD/.local/lib/python$2/site-packages ]]; then
      echo -e "import site\nsite.addsitedir('$PWD/.local/lib/python$2/site-packages')\n">$PWD/lib/python$2/site-packages/sitecustomize.py
    fi
}

emulate_git_clone_OCB() {
# emulate_git_clone_OCB(src tgt)
    local d f
    # cat ~/8.0/.gitmodules|grep "^[[:space:]]*path[[:space:]]*="|awk -F= '{print $2}'|tr -d " "
    run_traced "mkdir -p $2/"
    valid="addons babel.cfg bin CONTRIBUTING.md COPYRIGHT debian doc gen_translations.sh gunicorn.conf.py LICENSE logging.json Makefile MANIFEST.in npybabel.py odoo odoo.py odoo-bin openerp openerp-cron-worker openerp-gevent openerp-server openerp-web openerp-web.cfg openerp-wsgi.py README.md requirements.txt server setup setup.cfg setup.py win32"
    for d in $1/*; do
      f=$(basename $d)
      if [[ " $valid " =~ " $f " ]]; then
        if [ -d $1/$f ]; then
          run_traced "cp -R $1/$f/ $2/"
        else
          run_traced "cp $1/$f $2"
        fi
      fi
    done
}

git_clone() {
# emulate git clone
    local d x
    while [[ -n "$1" && "${1:0:1}" == "-" ]]; do
      shift
    done
    if [[ "$1" == "https://github.com/zeroincombenze/tools.git" ]]; then
      if [[ -n "$2" ]]; then
        d=$(readlink -m $2/..)
      else
        d="./"
      fi
      run_traced "cp -R $TRAVIS_SAVED_HOME/tools $d"
      if [[ -n "$YML_lisa" ]]; then
        x=$(dirname $YML_lisa)
        run_traced "rsync -a $x/ $HOME/tools/lisa/"
      fi
      if [[ -n "$YML_mgrodoo" ]]; then
        x=$(dirname $YML_mgrodoo)
        run_traced "rsync -a $x/ $HOME/tools/clodoo/"
      fi
      if [ $opt_dbgmnt -ne 0 ]; then
        run_traced "rsync -a $TRAVIS_SAVED_HOME/dev/pypi/maintainer-quality-tools/maintainer-quality-tools/travis/ $HOME/tools/maintainer-quality-tools/travis/"
      fi
    fi
}

create_virtual_env() {
    local f p x
    local TRAVIS_CWD=$PWD
    local HOME_BRANCH=$HOME/$BRANCH
    export TRAVIS_BRANCH=$BRANCH
    local CURPYVER=$(python --version 2>&1|grep -Eo "[0-9]+\.[0-9]+")
    local sts=0
    drop_test_db
    export TRAVIS_SAVED_HOME=$HOME
    export TRAVIS_HOME=$(readlink -f $HOME/VENV_$$)
    if [ "$TRAVIS_SAVED_HOME" == "/home/travis" ]; then
      export TRAVIS=true
    elif [ $opt_full -ne 0 ]; then
      export TRAVIS=emulate
    else
      export TRAVIS=false
    fi
    SET_GLOBAL_PYVER=$(get_cfg_value "" "SET_GLOBAL_PYVER")
    if [ ${SET_GLOBAL_PYVER:-0} -ne 0 -a "$TRAVIS_PYTHON_VERSION" != "$CURPYVER" ]; then
      sudo update-alternatives --set python /usr/bin/python$TRAVIS_PYTHON_VERSION
    fi
    TRAVIS_ENVOPTS="$TRAVIS_ENVOPTS -p /usr/bin/python$TRAVIS_PYTHON_VERSION"
    if [ ${opt_virt:-0} -eq 0 ]; then
      mkdir -p $TRAVIS_HOME
      cd $TRAVIS_HOME
      export TRAVIS=false
      export HOME=$TRAVIS_HOME
    else
      hash -r
      unset PYTHONPATH
      echo "\$ virtualenv -q $TRAVIS_ENVOPTS $TRAVIS_HOME"
      virtualenv -q $TRAVIS_ENVOPTS $TRAVIS_HOME
      sts=$?
      [ $sts -ne 0 ] && return
      if [ ${opt_cache:-0} -ne 0 -a -d "$TRAVIS_SAVED_HOME/VME/VME${VERSION}" ]; then
        echo "# .. loading stored packages from VME${VERSION} ..."
        for d in bin include lib lib64 .local; do
          if [ -d "$TRAVIS_SAVED_HOME/VME/VME${VERSION}/$d" ]; then
            [ -d "$TRAVIS_HOME/$d" ] && rm -fR $TRAVIS_HOME/$d
            cp -R $TRAVIS_SAVED_HOME/VME/VME${VERSION}/$d $TRAVIS_HOME/
          fi
        done
      fi
      custom_env "$TRAVIS_HOME" "$TRAVIS_PYTHON_VERSION"
      source bin/activate
      # FIX
      pip install flake8
      if [ -d $HOME/lib/python2.7/site-packages/ ]; then
        export PYPI_CACHED=$HOME/lib/python2.7/site-packages/
      fi
      # export PYPI_CACHED=
    fi
    mkdir -p $TRAVIS_HOME/build
    mkdir -p $TRAVIS_HOME/build/${TRAVIS_REPO_SLUG%%/*}
    export TRAVIS_BUILD_DIR="$TRAVIS_HOME/build/$TRAVIS_REPO_SLUG"
    if [ "$PKGNAME" == "OCB" ]; then
      emulate_git_clone_OCB $TRAVIS_CWD $TRAVIS_BUILD_DIR
    else
      mkdir -p $TRAVIS_BUILD_DIR
      x=$(readlink -f $TRAVIS_BUILD_DIR/..)
      run_traced "cp -R $TRAVIS_CWD/ $x/"
      if [ ${opt_dbgmnt:-0} -ne 0 -a "$TRAVIS_REPO_SLUG" == "local/tools" ]; then
        for p in clodoo lisa maintainer-quality-tools travis_emulator z0lib zerobug; do
          run_traced "rsync -a $TRAVIS_SAVED_HOME/dev/pypi/$p/$p/ $TRAVIS_BUILD_DIR/$p/"
        done
        run_traced "cp $TRAVIS_SAVED_HOME/dev/pypi/tools/install_tools.sh $TRAVIS_BUILD_DIR/"
      fi
    fi
    # run_traced "export REPO_CACHED=$TRAVIS_BUILD_DIR"
    run_traced "cd $TRAVIS_BUILD_DIR"
}

drop_virtual_env() {
    if [ ${opt_virt:-0} -gt 0 ]; then
      deactivate
    fi
    if [ ${opt_virt:-0} -gt 0 -a ${opt_keepE:-0} -ne 0 -a "$SYSTEM_SITE_PACKAGES" != "true" ]; then
      [ -d "$TRAVIS_SAVED_HOME/VME/VME${VERSION}" ] && rm -fR $TRAVIS_SAVED_HOME/VME/VME${VERSION}
      mkdir -p $TRAVIS_SAVED_HOME/VME/VME${VERSION}
      for d in bin include lib lib64 .local; do
        if [ -d "$TRAVIS_HOME/$d" ]; then
          [ -d "$TRAVIS_SAVED_HOME/VME/VME${VERSION}/$d" ] && run_traced "rm -fR $TRAVIS_SAVED_HOME/VME/VME${VERSION}/$d"
          run_traced "cp -R $TRAVIS_HOME/$d $TRAVIS_SAVED_HOME/VME/VME${VERSION}/"
        fi
      done
      custom_env "$TRAVIS_SAVED_HOME/VME/VME${VERSION}" "$TRAVIS_PYTHON_VERSION"
    fi
    cd
    if [ ${opt_keep:-0} -eq 0 ]; then
      drop_test_db
      rm -fR $TRAVIS_HOME
    fi
}

wash_virtual_env() {
    local d f
    for d in $TRAVIS_HOME/*; do
      f=$(basename $d)
      if [[ ! " build bin include lib lib64 .local " =~ " $f " ]]; then
        if [ -L $d ]; then
          run_traced "rm $d"
        elif [ -d $d ]; then
          run_traced "rm -fR $d"
        elif [ -f $d ]; then
          run_traced "rm $d"
        fi
      fi
    done
    hash -r
}

prepare_env_travis() {
    local action="$1"
    local v x
    if [[ $action =~ (lint|test|emulate|test|coverage) ]]; then
      if [ -n "$TOOLS_PATH" ]; then
        if [ ${opt_r:-0} -gt 0 ]; then
          if [[ ! :$PATH: =~ :$TOOLS_PATH: ]]; then
            run_traced "export PATH=$TOOLS_PATH:$PATH"
          fi
        elif [ "$2" == "-r" ]; then
          if [[ ! :$PATH: =~ :$TOOLS_PATH: ]]; then
            run_traced "export PATH=$TOOLS_PATH:$PATH"
          fi
        fi
      fi
    fi
    NPM_CONFIG_PREFIX=$(get_cfg_value "" "NPM_CONFIG_PREFIX")
    export NPM_CONFIG_PREFIX=$NPM_CONFIG_PREFIX
    if [ "$PRJNAME" == "travis_emulator" -a -d $PRJPATH/_travis/cfg ]; then
      export FLAKE8_CONFIG_DIR=$PRJPATH/_travis/cfg
    elif [ -d $PRJPATH/cfg ]; then
      export FLAKE8_CONFIG_DIR=$PRJPATH/cfg
    elif [ -d $MQT_PATH/cfg ]; then
      export FLAKE8_CONFIG_DIR=$MQT_PATH/cfg
    else
      export FLAKE8_CONFIG_DIR=$TOOLS_PATH/cfg
    fi
    export BRANCH
    export VERSION=$BRANCH
    if [ "$action" == "lint" ]; then
      export LINT_CHECK=1
    elif [ "$action" == "test" ]; then
      export LINT_CHECK=0
    # elif [ "$PRJNAME" != "Odoo" ]; then
    #   export LINT_CHECK=1
    # else
    #   unset -v LINT_CHECK
    fi
    if [ "$PRJNAME" == "Odoo" ]; then
      export ODOO_REPO=$REMOTEREPO/${PRJNAME,,}
    fi
    if [ -n "$opt_dpath" ]; then
      LGITPATH="$opt_dpath"
    elif [ "$PRJNAME" == "Odoo" ]; then
      if [ -n "$opt_branch" ]; then
        x=$(build_odoo_param PKGNAME ".")
        LGITPATH=$(build_odoo_param HOME "$opt_branch" "$REPOSNAME")
        [ -n "$x" ] && LGITPATH="$LGITPATH/$x"
      fi
    else
      if [ -n "$REPOSNAME" ]; then
        LGITPATH=$(get_cfg_value "" "${REPOSNAME}_distpath")
      else
        LGITPATH=
      fi
      if [ -z "$LGITPATH" ]; then
        LGITPATH=$(get_cfg_value "" "${PRJNAME}_distpath")
      fi
      if [ -z "$LGITPATH" ]; then
        LGITPATH=$(get_cfg_value "" "distpath")
      fi
    fi
    if [ -n "$LGITPATH" ]; then
      if [ "$PRJNAME" == "Odoo" ]; then
        export LGITPATH=$(expand_path "$LGITPATH")
      else
        local x="$(readlink -e $PWD/..)"
        local y=$(dirname $LGITPATH)
        if [ "$PWD" == "$y" -o "$x" == "$y" ]; then
          export LGITPATH=$y
        else
          export LGITPATH=$(expand_path "$LGITPATH")
        fi
      fi
      if [ "$LGITPATH" == "$PWD" ]; then
        LGITPATH=
      fi
    fi
    # if [ -x $TDIR/travis ]; then
    #   export TRAVIS_RUNDIR=$TDIR
    # else
    #   export TRAVIS_RUNDIR=$(readlink -f ~/dev)
    # fi
    export TOOLS_PATH
    export MQT_PATH
    export ODOO_SETUP
    export REPOSNAME
    export PRJNAME
    export PRJPATH
    export PKGPATH
    export PKGNAME
    export LGITPATH
}

check_4_travis() {
    if [ ! -d "$PRJPATH" ]; then
      echo "Invalid project path $PRJPATH"
      exit $STS_FAILED
    elif [ ! -d "$PKGPATH" ]; then
      echo "Invalid package path $PKGPATH"
      exit $STS_FAILED
    fi
}

do_chkconfig() {
    echo "Project name   = \"$PRJNAME\""
    echo "Tools path     = \"$TOOLS_PATH\""
    echo "Branch         = \"$BRANCH\""
    echo "Package name   = \"$PKGNAME\" in \"$REPOSNAME\""
    echo "Version        = \"$prjversion\""
    echo "Setup file     = \"$SETUP\""
    echo "Project path   = \"$PRJPATH\""
    echo "Package path   = \"$PKGPATH\""
    echo "Local git path = \"$LGITPATH\""
    echo "Config file    = \"$TCONF\""
}

conf_default() {
# Parameter "EM" prefixed foer EMulation, "RUN" for virtual env
    set_cfg_def "loglevel" "-1"
    if [ -n "$HOSTNAME_DEV" ]; then
      set_cfg_def "DEV_HOST" "$HOSTNAME_DEV"
    else
      set_cfg_def "DEV_HOST" "shsde[a-z][0-9]*"
    fi
    if [ -n "$HOSTNAME_PRD" ]; then
      set_cfg_def "DEV_HOST" "$HOSTNAME_PRD"
    else
      set_cfg_def "PRD_HOST" "shsprd[0-9]*"
    fi
    set_cfg_def "CHAT_HOME" "https://tawk.to/85d4f6e06e68dd4e358797643fe5ee67540e408b"
    set_cfg_def "SET_GLOBAL_PYVER" "0"
    # set_cfg_def "PIDFILE" "/var/run/travis_emulator/travis_emulator.pid"
    # set_cfg_def "ODOO_SETUP" "__openerp__.py" #TODO: remove early
    set_cfg_def "ODOO_SETUPS" "__manifest__.py __openerp__.py __odoo__.py __terp__.py"
    set_cfg_def "ODOO_DEFCONF" ".odoorc"
    set_cfg_def "ODOO_LOGFILE" "False"
    set_cfg_def "RUN_travis_install_nightly" "travis_install_nightly"
    set_cfg_def "RUN_travis_run_tests" "travis_run_tests"
    set_cfg_def "RUN_travis_after_tests_success" "travis_after_tests_success"
    # set_cfg_def "EM_travis_install_nightly" "clone_oca_dependencies \${1}/oca_dependencies.txt"
    set_cfg_def "EM_travis_install_nightly" "emulate_install_nightly \${1}/oca_dependencies.txt"
    # set_cfg_def "EM_travis_run_tests" "true"
    set_cfg_def "EM_travis_after_tests_success" "init_travis; run_coverage_test"
    set_cfg_def "dbtemplate" "openerp_template"
    set_cfg_def "dbname" "openerp_test"
    set_cfg_def "dbuser" "postgres"
    set_cfg_def "UNBUFFER" "0"
    set_cfg_def "MQT_UPDT" "2017-01-01"
    set_cfg_def "ME_BOS" "test_nightly .test_nightly.conf.sample"
    set_cfg_def "RFLIST__travis_emulator" "autopep8_W503.py beauty dist_pkg please please.man please.py prjdiff replica.sh topep8 travis travisrc vfcp vfdiff wok_doc wok_doc.py"
    set_cfg_def "RDLIST__travis_emulator" "_travis/"
    set_cfg_def "RFLIST__z0lib" "Makefile"
    set_cfg_def "RFLIST__zerobug" "z0testrc"
    set_cfg_def "RFLIST__clodoo" "clodoo.py clodoocore.py clodoolib.py"
    set_cfg_def "RFLIST__z0tester" "z0testercode.py"
    if [ "$HOSTNAME" == "$DEV_HOST" ]; then
      set_cfg_def "pip_pkgver__reportlab" "3.2.0"
      set_cfg_def "upgrade_dow" "3"
    else
      set_cfg_def "pip_pkgver__reportlab" "3.1.44"
      set_cfg_def "upgrade_dow" "4"
    fi
    set_cfg_def "Environment" "bash"
    # set_cfg_def "virtualenv_opts" "--no-pip --no-setuptools --no-wheel"
    set_cfg_def "virtualenv_opts" ""
    set_cfg_def "NPM_CONFIG_PREFIX" "$HOME/.npm-global"
    set_cfg_def "filedel" ".log .bak .out .tmp .tracehis .tracehistory ,cover .coverage .cover/ .coverage/ ~ test*.pdf tmp tmp.* npm-debug.log.*"
    set_cfg_def "fileignore" ".pyc .conf build/ dist/ conf/ filestore/ .git/ docs/ html/ latex/ .gz __old_* .gitrepname"
    set_cfg_def "filediffignore" ".po .pot LICENSE README README.md README.rst README.md.oca README.rst.oca README.md.z0i README.rst.z0i README.md.oia README.rst.oia .travis.yml.oca .travis.yml.z0i .travis.yml.oia"
    set_cfg_def "shellcheck_exclude" "1001,1083,2001,2002,2004,2034,2037,2044,2045,2046,2051,2062,2063,2076,2086,2088,2091,2116,2119,2126,2129"
    set_cfg_def "MQT_DEF_DEVPATH" "$HOME/dev/pypi/maintainer-quality-tools/maintainer-quality-tools/travis"
    set_cfg_def "MQT_DEF_PATH" "$HOME/tools/maintainer-quality-tools/travis"
}


expand_path() {
# expand_path (path)
# return:path
    local x=$(echo "$1"|sed -e "s|\${pkgpath}|$PKGPATH|g" -e "s|\${pkgname}|$PKGNAME|g" -e "s|\${prjname}|$PRJNAME|g" -e "s|\${reposname}|$REPOSNAME|g" -e "s|\${version}|$BRANCH|g" -e "s|\${TRAVIS_BUILD_DIR}|$TRAVIS_BUILD_DIR|g" -e "s|\${ODOO_REPO}|$ODOO_REPO|g" -e "s|\${odoo_vid}|$opt_branch|g" -e "s|\${HOME}|$HOME|g")
    echo $x|sed -e s\|\${PATH}\|$PATH\|g
}


set_pkgpath() {
# set_pkgpath (PKGNAME)
# return:pkgpath
    echo $(build_pypi_param PKGPATH $1)
}

set_pkgname() {
#set_pkgname(PKGPATH)
    PKGNAME=$(basename $1)
    if [[ $PKGNAME =~ ^(v|V|odoo|ODOO|ocb|OCB|oca|oia)?-?(11\.0|10\.0|9\.0|8\.0|7\.0|6\.1|11|10|9|8|7|6) ]]; then
      PKGNAME=OCB
    fi
}

install_dev() {
    if [ "$USER" == "openerp" -o "$USER" == "odoo" ]; then
      local yod=$(date +%Y)
      if [ ! -d ~/dev ]; then
        mkdir -p ~/dev
      fi
      if [ ! -d ~/dev/pypi ]; then
        mkdir -p ~/dev/pypi
      fi
      if [ ! -d ~/dev/_travis ]; then
        mkdir -p ~/dev/_travis
      fi
      if [ ! -d ~/tools ]; then
        mkdir -p ~/tools
      fi
      if [ ! -d ~/tools/travis_emulator ]; then
        mkdir -p ~/tools/travis_emulator
      fi
    fi
}

update_dev() {
    XDPATH=$(dirname $MAKEF)
    ME_BOS=$(get_cfg_value "" "ME_BOS")
    RFLIST=$(get_cfg_value "" "RFLIST__$1")
    RDLIST=$(get_cfg_value "" "RDLIST__$1")
    local xvalid=1
    local v1= v2= x
    if [ -n "$RFLIST" ]; then
      for x in $RFLIST; do
        if [ ! -f $PKGPATH/$PKGNAME/$x ]; then
          xvalid=0
          break
        fi
      done
    fi
    if [ $xvalid -eq 0 ]; then
       echo "Invalid package $1: file $x not found!"
       exit $STS_FAILED
    fi
    if [ -z "$opt_sts" -o "$opt_cpush" != "-w" ]; then
      for x in $RFLIST; do
        if [ -f $PKGPATH/$PKGNAME/$x ]; then
          if [ ${opt_diff:-0} -gt 0 ]; then
            if [ "$(diff -rq $XLDF $PKGPATH/$PKGNAME/$x $XDPATH/$x)" ]; then
              if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ diff -rq $XLDF $PKGPATH/$PKGNAME/$x $XDPATH/$x"; fi
              diff -rq $XLDF $PKGPATH/$PKGNAME/$x $XDPATH/$x
            fi
          elif [ ${opt_fetch:-0} -gt 0 ]; then
            if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ ${opt_dry_run:-0}||cp $XDPATH/$x $PKGPATH/$PKGNAME/$x"; fi
            ((${opt_dry_run:-0}))||cp $opts_verbose $XDPATH/$x $PKGPATH/$PKGNAME/$x
          else
            diff -q $PKGPATH/$PKGNAME/$x $XDPATH/$x &>/dev/null
            if [ $? -ne 0 ]; then
              run_traced "cp $PKGPATH/$PKGNAME/$x $XDPATH/$x"
              if [ -x $PKGPATH/$PKGNAME/$x ]; then
                v1=$($PKGPATH/$PKGNAME/$x -V)
                v2=$($XDPATH/$x -V)
                if [ "$v1" != "$v2" ]; then
                  echo "!Copy of $x FAILED !!!"
                fi
              fi
            fi
          fi
        fi
        if [ "$x" == "z0librc" ]; then
          if [ -z "$opt_dpath" ]; then
            XLGITPATH=$(readlink -e $LGITPATH/../travis_emulator)
            run_traced "cp $PKGPATH/$PKGNAME/$x $XLGITPATH/$x"
          fi
        fi
      done
      if [ -n "$RDLIST" ]; then
        for x in $RDLIST; do
          if [ ${opt_diff:-0} -gt 0 ]; then
             diff -rq $XLDF $PKGPATH/$PKGNAME/$x $XDPATH/$x
          elif [ ${opt_fetch:-0} -eq 0 ]; then
             diff -rq $PKGPATH/$PKGNAME/$x $XDPATH/$x &>/dev/null
             if [ $? -ne 0 ]; then
               run_traced "cp -R $PKGPATH/$PKGNAME/$x $XDPATH/"
             fi
          fi
        done
      fi
      if [ -n "$ME_BOS" ]; then
        for x in $ME_BOS cronow replica.sh; do
          if [ -f $PKGPATH/$PKGNAME/$x ]; then
            if [ ${opt_diff:-0} -gt 0 ]; then
              if [ "$(diff -rq $XLDF $PKGPATH/$PKGNAME/$x ~/bin/$x)" ]; then
                if [ ${opt_verbose:-0} -gt 0 ]; then echo "\$ diff -rq $XLDF $PKGPATH/$PKGNAME/$x ~/bin/$x"; fi
                diff -rq $XLDF $PKGPATH/$PKGNAME/$x ~/bin/$x
              fi
            elif [ ${opt_fetch:-0} -gt 0 ]; then
              :
            else
              run_traced "cp $PKGPATH/$PKGNAME/$x ~/bin/$x"
            fi
          fi
        done
      fi
      MAKEF=$PKGPATH/$PKGNAME/Makefile
    fi
}

a_append() {
# a_append (key, values)::DEFPRM,DEFVAL
# return:
# key=="--new" && value=="" -> clean dictionary
    if [ "$1" == "--new" -a -z "$2" ]; then
      unset DEFPRM[*]
      unset DEFVAL[*]
      return
    fi
    if [ "$1" ]; then
      local l=${#DEFPRM[*]}
      DEFPRM[l]="$1"
      DEFVAL[l]="$2"
    fi
}


a_search() {
# a_search (key)::DEFPRM,DEFVAL
# return:value,sts
    local jy=0
    local p=""
    local sts=0
    while ((jy<${#DEFPRM[*]})); do
      if [ "${DEFPRM[jy]:0:1}" == "^" ]; then
        if [[ "$1" =~ ${DEFPRM[jy]} ]]; then
          p="${DEFVAL[jy]}"
          sts=1
          break
        fi
      elif [[ "$1" == "${DEFPRM[jy]}" ]]; then
         p="${DEFVAL[jy]}"
         sts=1
         break
      fi
      ((jy++))
    done
    echo "$p"
    return $sts
}


matches1of() {
# matches1of (filename, exclist)
# return:true/false
    local x=
    sts=1
    for x in $2; do
      if [[ "$1" =~ $x ]]; then
        sts=0
        break
      fi
    done
    return $sts
}


robocopy_init() {
# robocopy_init (prjname, PKGNAME)::DIST_CONF,TCONF,opt_fetch,opt_verbose
# return:
    a_append "--new"
    a_append "^.*\.egg-info$" ""
    if [ "$1" == "Odoo" ]; then
      a_append "^.*" "/"
    else
      a_append "Makefile" "/"
      a_append "setup.py" ""
      if [ "$1" != "travis_emulator" ]; then
        a_append "_travis" ""
      fi
      if [ "$2" == "OCB" ]; then
        local p=$(echo $PWD|grep -Eo "(v7|6.1|7.0|8.0|9.0|10.0|11.0|12.0)"|head -n1)
        if [ -n "$p" ]; then
          a_append "$p" "/"
        fi
      else
        a_append "$2" "/"
      fi
      a_append "conf" "/"
      if [ ${opt_fetch:-0} -eq 0 ]; then
         a_append "README.rst" "/"
         a_append "README.md" "/"
      fi
      a_append "^.*" ""
    fi
    local xx="$(get_cfg_value 0 ignore)"
    local yy="$(get_cfg_value 0 ignorediff)"
    if [ -z "$xx" ]; then
      # TODO: addons
      # local xx=".pyc .log .bak .out .tmp .conf .tracehis .tracehistory ,cover .coverage build/ dist/ conf/ filestore/ .cover/ .coverage/ .git/ ~"
      # local yy=".po .pot"
      local xx="$(get_cfg_value 0 filedel)"
      local yy="$(get_cfg_value 0 fileignore)"
      local xx="$xx $yy"
      local yy="$(get_cfg_value 0 filediffignore)"
    fi
    XRGX=
    XLFS=
    XLDF=
    for x in $xx; do
      local x1="${x:0:1}"
      local l=
      let l=${#x}-1
      local x9="${x:l:1}"
      if [ "$x9" == "/" ]; then
         XRGX="$XRGX ^(.*\\/|)$x"
         XLFS="$XLFS --exclude=$x"
      elif [ "$x1" == "." -o "$x1" == "," -o "$x" == "~" ]; then
         XRGX="$XRGX ^.*\\$x\$"
         XLFS="$XLFS --exclude=*$x"
      else
         XRGX="$XRGX $x"
         XLFS="$XLFS --exclude=*$x*"
      fi
      XLDF="$XLDF -x '*$x'"
    done
    XXDF=
    for x in $yy; do
      local x1="${x:0:1}"
      local l=
      let l=${#x}-1
      local x9="${x:l:1}"
      if [ "$x9" == "/" ]; then
         XXDF="$XXDF ^(.*\\/|)$x"
      elif [ "$x1" == "." -o "$x" == "~" ]; then
         XXDF="$XXDF ^.*\\$x\$"
      else
         XXDF="$XXDF $x"
      fi
    done
}


robocopy() {
# robocopy (srcfname, tgtpath, sshopt)::opt_dry_run,opts_dry_run,opt_verbose,XRGX,XRGI,XLFS
# return:
    if [ -d "$1" ]; then
      local t="d"
      local ff=$1/
    else
      local t="f"
      local ff=$1
    fi
    local fn=$(basename $1)
    if $(matches1of "$ff" "$XRGI"); then
      local v=$(a_search "$fn")
    elif $(matches1of "$ff" "$XRGX"); then
      local v=
    else
      local v=$(a_search "$fn")
    fi
    if [ "${v:0:1}" == "/" ]; then
      if [ "$v" == "/" -a "$t" == "d" ]; then
        if [ "${3:0:3}" == "ssh" ]; then
          if [ ${opt_verbose:-0} -gt 0 ]; then
            local optrsync="-abvzhe"
          else
            local optrsync="-abzhe"
          fi
          local optssh="$3"
          run_traced "rsync $opts_dry_run $optrsync \"$optssh\" $opts_upd --del --copy-links $XLFS $ff $2$v"
        else
          if [ ${opt_verbose:-0} -gt 0 ]; then
            local optrsync="-abv"
          else
            local optrsync="-ab"
          fi
          local optssh=""
          run_traced "rsync $opts_dry_run $optrsync $opts_upd --del --copy-links $XLFS $ff $2$v"
        fi
      else
        if [ "${3:0:3}" == "ssh" ]; then
          local optssh="${3:3}"
          run_traced "scp -Bp $optssh $ff $2"
        else
          if [ ! -d "$2" ]; then
            local v=
          fi
          diff -q $ff $2$v &>/dev/null
          if [ $? -ne 0 ]; then
            run_traced "cp -L $ff $2$v"
          fi
        fi
      fi
    fi
}

clean_dirs() {
# clean_dirs (directory)::
# return:
    local cmd d excl f o p XXXX x
    [ -n "$1" ] && d=$1 || d="."
    if [ ${opt_verbose:-0} -gt 0 ]; then
      p="-print "
    else
      p=
    fi
    XXXX=$(get_cfg_value "" "filedel")
    if [ "$PWD" == "/opt/odoo/tools" ]; then
      XXXX="$XXXX *_doc.txt setup.sh pythonhosted-*.zip __old_* __new_*"
    fi
    if [ -f ".gitmodules" ]; then
      excl=$(cat .gitmodules |grep path|awk -F= '{print $2}'|tr -d "\n"|tr " " "|")
    else
      excl=""
    fi
    excl="(.git|lib|git|__to_remove|.local|.npm|tmp|.gem|node_modules|.cache$excl)"
    cmd="find"
    for f in $d/*; do
      if [ -d $f ]; then
        if [ -n "$excl" ]; then
          if [[ ! $f =~ $excl ]]; then
            cmd="$cmd $f"
          fi
        else
          cmd="$cmd $f"
        fi
      else
        cmd="$cmd $f"
      fi
    done
    o="-nowarn \("
    for x in $XXXX;do
      if [ "$x" != ".conf" ]; then
        cmd="$cmd $o -name '*$x'"
        o="-o"
      fi
    done
    run_traced "$cmd \) -exec rm -f '{}' \;"
    if [ -f .gitignore ]; then
      if [ -z "$(grep "stdout.log" .gitignore 2>/dev/null)" ]; then
        echo "stdout.log">>.gitignore
      fi
      if [ -z "$(grep "*.oca" .gitignore 2>/dev/null)" ]; then
        echo "*.oca">>.gitignore
      fi
      if [ -z "$(grep "*.z0i" .gitignore 2>/dev/null)" ]; then
        echo "*.z0i">>.gitignore
      fi
    fi
}

do_summary() {
# do_summary(bash,flake8,pylint,test)
    local RED="\033[1;31m"
    local GREEN="\033[1;32m"
    local CLEAR="\033[0;m"
    echo "+======================================="
    echo "|  Tests summary:"
    echo "|---------------------------------------"
    if [ "$PRJNAME" == "Odoo" ]; then
      local des=("" "test_bash" "test_flake8" "test_pylint" "test_server.py")
    else
      local des=("" "test_bash" "test_flake8" "test_pylint" "regression_test")
    fi
    for i in {1..4};do
      if [ -n "${!i}" ]; then
        local x=$(printf "%-20.20s" "${des[$i]}")
        if [ ${!i} -eq $STS_SUCCESS ]; then
          echo -e "| $x        ${GREEN}Success${CLEAR}"
        elif [ ${!i} -ne 127 ]; then
          echo -e "| $x        ${RED}FAIL${CLEAR}"
        fi
      fi
    done
    echo "+======================================="
}


ant_rm_trap() {
    # wlog "... recover $1"
    local f1=$(readlink -f $1)
    if [ -n "$f1" -a -f "$f1" ]; then
      local lne=$(head -n1 $f1)
      if [ -n "$lne" -a "${lne:0:5}" == "trap " ]; then
        echo "... recover $f1"
        tail -n+2 $f1>$f1.tmp
        mv -f $f1.tmp $f1
      fi
    fi
}

ant_add_trap() {
    echo "... analyzing $1"
    local f1=$(readlink -f $1)
    if [ -n "$f1" -a -f "$f1" ]; then
      ant_rm_trap "$f1"
      echo "trap \"echo [\$LINENO] \$BASH_SOURCE:\$BASH_COMMAND>>$FHIST\" DEBUG">$f1.sh
      local line=
      while IFS=\~ read -r line || [ -n "$line" ]; do
        echo "$line">>$f1.sh
        if [ "${line:0:1}" == "." ]; then
          local fn="${line:2}"
          local p="$(dirname $fn)"
          if [ "$p" == "." ]; then
            if [ "$(echo " $FL_2_TEST "|grep -v [[:space:]]$fn[[:space:]] 2>/dev/null)" ]; then
              FL_2_TEST="$FL_2_TEST $fn"
            fi
          fi
        fi
      done < "$f1"
      rm -f $FHIST
      chmod +x $f1.sh
      mv -f $f1.sh $f1
    fi
}

ant_erase() {
    local fn
    for fn in $(find . -type f -executable); do
      if [[ $fn =~ \.[a-zA-Z0-9_]{1,3} ]]; then
        if [ ${fn: -3} == ".sh" ]; then
          ant_rm_trap $fn
        fi
      else
        ant_rm_trap $fn
      fi
    done
}

set_executable() {
  local b cmd excl f x
  if [ ${opt_dry_run: -0} -eq 0 ]; then
    if [ -f ".gitmodules" ]; then
      excl=$(cat .gitmodules |grep path|awk -F= '{print $2}'|tr -d "\n"|tr " " "|")
    else
      excl=""
    fi
    excl="(.git|lib|git|__to_remove|.local|.npm|tmp|.gem|node_modules|.cache$excl)"
    cmd=""
    for f in $PKGPATH/*; do
      b=$(basename $f)
      if [ -d $f ]; then
        if [ -n "$excl" ]; then
          if [[ ! $b =~ $excl ]]; then
            cmd="$cmd $f"
          fi
        else
          cmd="$cmd $f"
        fi
      else
        cmd="$cmd $f"
      fi
    done
    cmd="find $cmd -type f"
    run_traced "$cmd -not -name '*.sh' -a -not -name openerp-server -a -not -name odoo-bin -executable -exec chmod -x '{}' \;"
    run_traced "$cmd -name '*.sh\' -exec chmod +x '{}' \;"
    run_traced "$cmd -not -path '*/__old_*' -a -not -path '*/VME*' -type f -not -name '*.js' -exec grep -El '#. *(/bin/bash|/usr/bin/env )' '{}' \;|xargs -I{} chmod +x {}"
  fi
}

coverage() {
    if [ -z "$COVERAGE" ]; then
      COVERAGE=$(which coverage 2>/dev/null)
    fi
    if [ "$1" == "erase" ]; then
      mkdir -p $PRJPATH/cover
      find . -name "*.tracehistory" -delete
      find . -name "*,cover" -delete
      find . -name ".coverage" -delete
      ant_erase
    fi
    if [ -n "$COVERAGE" ]; then
      eval $COVERAGE "$@"
    else
      :
    fi
    return $?
}

run_coverage_test() {
# run_coverage_test pkglist
    if [ -n "$1" ]; then
      coverage_combine_n_report $1
    else
      run_coverage_1_test
    fi
    return $?
}

coverage_combine_n_report() {
# coverage_combine_n_report pkglist
    cd $PRJPATH
    local COVRF=.coverage
    if [ -f ./$COVRF ]; then
      rm -f ./$COVRF
    fi
    local pkglist=${1//,/ }
    for p in $pkglist; do
      if [ -f $p/$COVRF ]; then
        if [ -f ./$COVRF ]; then
          run_traced "coverage combine ./$COVRF $p/$COVRF"
        else
          run_traced "cp $p/$COVRF ./$COVRF"
        fi
      fi
    done
    coverage report
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -n "$COVERALLS_REPO_TOKEN" ]; then
        COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN coveralls
        sts=$STS_SUCCESS
      fi
    fi
    return $sts
}

run_coverage_1_test() {
    cd $PRJPATH
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ "$PRJNAME" != "Odoo" ]; then
        if [ ${opt_verbose:-0} -gt 0 ]; then
          echo "export COVERAGE_FILE=$(readlink -f ./.coverage)"
        fi
        export COVERAGE_FILE=$(readlink -f ./.coverage)
        if [ -f ./__main__.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run --source $PRJNAME __main__.py"
          fi
          DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run --source $PRJNAME __main__.py
          if [ ${opt_mis:-0} -gt 0 ]; then
            coverage report -m
          else
            coverage report
          fi
          sts=$?
        elif [ -f ./tests/test_$PRJNAME.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)"
          fi
          export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)
          if [ ${opt_dprj:-0} -gt 0 ]; then
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a ./tests/test_$PRJNAME.py"
            fi
            DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a ./tests/test_$PRJNAME.py
          else
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a --rcfile=$COVERAGE_PROCESS_START test_$PRJNAME.py"
            fi
            cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage run -a --rcfile=$COVERAGE_PROCESS_START test_$PRJNAME.py
          fi
          if [ ${opt_mis:-0} -gt 0 ]; then
            coverage report -m
          else
            coverage report
          fi
          sts=$?
        else
          sts=$STS_FAILED
        fi
        if [ $sts -eq $STS_SUCCESS ]; then
          if [ -n "$COVERALLS_REPO_TOKEN" ]; then
            COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN coveralls
            sts=$STS_SUCCESS
          fi
        fi
      else
        if [ ${opt_mis:-0} -gt 0 ]; then
          coverage report -m
        else
          coverage report
        fi
        sts=$?
      fi
    else
      sts=$STS_SUCCESS
    fi
    return $sts
}

run_annotate_test() {
    cd $PRJPATH
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ "$PRJNAME" != "Odoo" ]; then
        if [ ${opt_verbose:-0} -gt 0 ]; then
          echo "export COVERAGE_FILE=$(readlink -f ./.coverage)"
        fi
        export COVERAGE_FILE=$(readlink -f ./.coverage)
        if [ -f ./__main__.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover ./*.py"
          fi
          DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover ./*.py
          dir $PRJPATH/cover/
          # coverage report
          sts=$STS_SUCCESS
        elif [ -f ./tests/test_$PRJNAME.py ]; then
          coverage erase
          if [ ${opt_verbose:-0} -gt 0 ]; then
            echo "export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)"
          fi
          export COVERAGE_PROCESS_START=$(readlink -f ./.coveragerc)
          if [ ${opt_dprj:-0} -gt 0 ]; then
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover ./tests/test_$PRJNAME.py"
            fi
            DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover ./tests/test_$PRJNAME.py
          else
            if [ ${opt_verbose:-0} -gt 0 ]; then
              echo "cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover --rcfile=$COVERAGE_PROCESS_START --rcfile=$COVERAGE_PROCESS_START test_$PRJNAME.py"
            fi
            cd ./tests; DEV_ENVIRONMENT=$PRJNAME PYTHONPATH=$PYTHONPATH:$PKGPATH coverage annotate -d $PRJPATH/cover test_$PRJNAME.py
          fi
          dir $PRJPATH/cover/
          # coverage report
          sts=$STS_SUCCESS
        else
          sts=$STS_FAILED
        fi
      else
        sts=$STS_SUCCESS
      fi
    else
      sts=$STS_SUCCESS
    fi
    return $sts
}

cp_n_upd_conf() {
    local confn=$1
    if [ "$VERSION" == "v7" ]; then
      local odoo_ver=7
      local pfx="openerp"
      local pfx2=
      local sfx="/server"
    else
      local odoo_ver=$(echo $VERSION|grep -Eo '[0-9]*'|head -n1)
      local pfx="odoo$odoo_ver"
      local pfx2=odoo
      local sfx=
    fi
    if [ "$odoo_ver" == "10" ]; then
      local tgt=$(get_cfg_value "" "ODOO_DEFCONF")
      tgt=$(basename $tgt)
      if [ "$tgt" == ".openerp_serverrc" ]; then
        local atgt=~/.odoorc
      else
        local atgt=~/.openerp_serverrc
      fi
      tgt=~/$tgt
    else
      local tgt=~/.openerp_serverrc
      local atgt=~/.odoorc
    fi
    if [ -z "$confn" ] || [ ! -f $confn ]; then
      local confn=/etc/odoo/${pfx}-server.conf
      if [ ! -f $confn ]; then
        confn=/etc/odoo/${pfx}.conf
      fi
      if [ ! -f $confn ]; then
        confn=/etc/odoo/${pfx2}-server.conf
      fi
      if [ ! -f $confn ]; then
        confn=/etc/odoo/${pfx2}.conf
      fi
    fi
    if [ ! -f $confn ]; then
      echo "File $confn not found!"
      exit 1
    fi
    if [ -f $atgt ]; then
      rm -f $atgt
    fi
    if [ -f $tgt ]; then
      rm -f $tgt
    fi
    wlog "$ cp $confn $tgt"
    touch $tgt
    local ODOO_LOGFILE=$(get_cfg_value "" "ODOO_LOGFILE")
    while IFS=\| read -r line || [ -n "$line" ]; do
      if [[ $line =~ ^data_dir[[:space:]]*=[[:space:]]*.*Odoo$odoo_ver ]]; then
        line=$(echo "$line"|sed -e "s:Odoo$odoo_ver:Odoo-test:")
      elif [[ $line =~ ^logfile[[:space:]]*=[[:space:]]*.* ]]; then
        line=$(echo "logfile = $ODOO_LOGFILE")
      elif [[ $line =~ ^pidfile[[:space:]]*=[[:space:]]*.*odoo$odoo_ver ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^xmlrpc_port[[:space:]]*=[[:space:]][0-9A-Za-z]+ ]]; then
        line="xmlrpc_port = $((18060+$odoo_ver))"
      elif [[ $line =~ ^NAME=.*odoo$odoo_ver.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo$odoo_ver-server.conf.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*$confn.* ]]; then
        line=$(echo "$line"|sed -e "s:$confn:odoo-test:")
      elif [[ $line =~ .*odoo$odoo_ver-server.pid.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ .*odoo$odoo_ver-server.log.* ]]; then
        line=$(echo "$line"|sed -e "s:odoo$odoo_ver:odoo-test:")
      elif [[ $line =~ ^server_wide_modules[[:space:]]*=[[:space:]] ]]; then
        line="server_wide_modules = web"
      fi
      echo "$line">>$tgt
    done < "$confn"
}

emulate_install_nightly() {
    run_traced "# pip install --upgrade --pre --no-deps git+https://github.com/OCA/pylint-odoo.git"
    clone_oca_dependencies $1
}

clone_1_dependence() {
    local n sts
    sts=0
    if [ -n "$1" ]; then
      if [ -d $1 ]; then
        n=$(basename $1)
        if [ "$n" != "__unported__" ]; then
          if [ ! -d $HOME/dependencies/$n ]; then
            run_traced "ln -s $1 $HOME/dependencies/"
            sts=$?
          else
            wlog "Module $1 already cloned!"
          fi
        fi
      fi
    fi
    return $sts
}

clone_core_dependencies() {
    local line
    local p d s sts
    local CORE_MODULES=""
    local oetpath=$(readlink -e $PRJPATH/..)
    sts=0
    for line in $CORE_MODULES; do
      d=$(find $oetpath -type d -name "$line")
      if [ -n "$d" ]; then
        if [ -n "$REPOSNAME" ]; then
          for p in $d/*; do
            clone_1_dependence "$p"
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
          done
        else
          clone_1_dependence "$d"
          s=$?; [ ${s-0} -ne 0 ] && sts=$s
        fi
      else
        elog "!????? Module $line not found!??????"
        sts=2
      fi
    done
    if [ -n "$REPOSNAME" ]; then
      clone_1_dependence "$oetpath/addons"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    fi
    return $sts
}

clone_oca_dependencies() {
    local f1=$1
    local line p d r s sts
    local oetpath=$(readlink -e $PRJPATH/..)
    sts=0
    if [ -f "$f1" ]; then
      while IFS="#" read -r line r || [ -n "$line" ]; do
        if [[ $line =~ ^[[:space:]]*$ ]]; then
          :
        else
          d="$line"
          IFS=" " read line r <<<"$d"
          d=$(find $oetpath -maxdepth 1 -type d -name "$line")
          if [ -n "$d" ]; then
            if [ -n "$REPOSNAME" ]; then
              for p in $d/*; do
                clone_1_dependence "$p"
                s=$?; [ ${s-0} -ne 0 ] && sts=$s
              done
            else
              clone_1_dependence "$d"
              s=$?; [ ${s-0} -ne 0 ] && sts=$s
            fi
          else
            elog "!????? Module $line not found!??????"
            sts=2
          fi
        fi
      done < "$f1"
    fi
    return $sts
}

clone_dependencies() {
    local p s sts
    if [ ! -d $HOME/dependencies ]; then
      run_traced "mkdir $HOME/dependencies"
    fi
    sts=0
    if [ -n "$REPOSNAME" ]; then
      run_traced "export INCLUDE=$PKGNAME"
      local oetpath=$(readlink -e $PRJPATH/..)
      for p in $oetpath/*; do
        clone_1_dependence "$p"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      done
      p=$(readlink -e $oetpath/odoo)
      if [ -n "$p" ]; then
        clone_1_dependence "$p"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      p=$(readlink -e $oetpath/openerp)
      if [ -n "$p" ]; then
        clone_1_dependence "$p"
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
      clone_core_dependencies
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    else
      run_traced "export INCLUDE="
    fi
    return $sts
}

run_svr_test_rm_ln() {
#run_svr_test_rm_ln(wep|)
    drop_test_db
    run_unvirt "if [ -d $HOME/dependencies ]; then rm -fR $HOME/dependencies; fi"
    run_unvirt "if [ -L $HOME/dependencies ]; then rm -f $HOME/dependencies; fi"
    if [ "${PRJPATH:0:13}" == "/opt/odoo/v7/" ]; then
      run_unvirt "if [ -f $HOME/${ODOO_REPO#*/}-$VERSION/openerp-server ]; then rm -f $HOME/${ODOO_REPO#*/}-$VERSION/openerp-server; fi"
    fi
    run_unvirt "if [ -L $HOME/$PKGNAME-$VERSION ]; then rm -f $HOME/$PKGNAME-$VERSION; fi"
    run_unvirt "if [ -L $HOME/${ODOO_REPO#*/}-$VERSION ]; then rm -f $HOME/${ODOO_REPO#*/}-$VERSION; fi"
    if [ "$2" != "wep" -o ${opt_keep:-0} -ne 0 ]; then
      run_unvirt "if [ -L $HOME/odoo-$VERSION ]; then rm -f $HOME/${ODOO_REPO#*/}-$VERSION; fi"
    fi
    if [ -f stdout.log ]; then
      chmod +rw stdout.log
    fi
    # some version of local travis added some bug; here workaround |TODO solve actual trouble
    for d in ~/*; do
      if [ -L $d ] && [ "$2" == "wep" -o "$d" != "/opt/odoo/maintainer-quality-tools" ]; then
        run_traced "rm -f $d"
      elif [ -d $d ] && [ "$2" == "wep" -o "$d" == "/opt/odoo/maintainer-quality-tools" ]; then
        run_traced "rm -fR $d"
      fi
    done
    for d in account-financial-tools bank-payment dependencies l10n-italy LibrERP partner-contact reporting-engine web webkit-tools;do
      if [ -d ~/$d ]; then
        run_traced "rm -fR ~/$d"
      fi
    done
    if [ -L ~/7.0/openerp/addons/decimal_precision ]; then
      run_traced "rm -f ~/7.0/openerp/addons/decimal_precision"
    fi
}


run_unvirt() {
#run_unvirt (cmd)
    if [ ${opt_virt:-0} -eq 0 ]; then
      run_traced "$1"
    else
      :
    fi
    return $?
}

run_svr_test_exit() {
    if [ "$PRJNAME" == "Odoo" ]; then
      run_svr_test_rm_ln wep
    fi
}

run_server_test() {
  echo "======== Running server_test ========"
  run_svr_test_init
  run_svr_test_exit
  sts=$STS_FAILED
  return $sts
}

please_run_tests() {
    sts=$STS_SUCCESS
    if [[ $1 =~ [BK] ]]; then
      please_test_bash
      sts_bash=$?
    else
      sts_bash=127
    fi
    if [[ $1 =~ [LK] ]]; then
      cd $TOOLS_PATH
      please_test_flake8
      sts_flake8=$?
      please_test_pylint
      sts_pylint=$?
      if [ $sts_bash -ne 127 ]; then
        sts=$(($sts_bash || $sts_flake8 || $sts_pylint))
      else
        sts=$(($sts_flake8 || $sts_pylint))
      fi
    else
      if [ $sts_bash -ne 127 ]; then
        sts=$sts_bash
      else
        sts=$STS_SUCCESS
      fi
    fi
    if [[ $1 =~ T ]]; then
      if [ "$PRJNAME" == "Odoo" ]; then
        run_server_test
      else
        run_regression_test
      fi
      test_sts=$?
      if [ $test_sts -ne $STS_SUCCESS ]; then
        sts=$test_sts
      fi
    fi
    do_summary "$sts_bash" "$sts_flake8" "$sts_pylint" "$test_sts"
    if [ $sts -eq $STS_SUCCESS ]; then
      run_coverage_test
    fi
    return $sts
}
