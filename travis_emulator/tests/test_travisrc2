#! /bin/bash
# -*- coding: utf-8 -*-
# Regression tests on travis emulator
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../.. $TDIR/../../z0lib $TDIR/../../z0lib/z0lib $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)
Z0TLIBDIR=$(findpkg z0testrc "$TDIR $TDIR/.. $HOME/tools/zerobug $HOME/dev ${PYPATH//:/ } . .." "zerobug")
if [ -z "$Z0TLIBDIR" ]; then
  echo "Library file z0testrc not found!"
  exit 2
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)

__version__=1.0.0.4


save_testenv() {
#save_testenv(cwd)
    local p
    for p in opt_dry_run pkg opt_verbose opt_r opt_conf opt_virt; do
        eval SAVE_$p=${!p}
    done
    LCLTEST_CWD=$PWD
    if [ -z "$1" ]; then
        cd $LCL_OE_PKGPATH
    elif [ "$1" == "0" ]; then
        cd $LCL_OE_ROOT
    elif [ "$1" == "2" ]; then
        cd $LCL_OE_PKGPATH2
    elif [ "$1" == "P" ]; then
        cd $LCL_PY_PRJPATH
    fi
}

restore_testenv() {
    local p x
    for p in opt_dry_run pkg opt_verbose opt_r opt_conf opt_virt; do
        x=saved_$p
        eval $p=${!x}
        eval SAVE_$p=
    done
    cd $LCLTEST_CWD
}

result_testenv() {
#result_testenv(cwd)
    # ODOO setup
    local p x
    for p in opt_dry_run pkg opt_verbose opt_r opt_conf opt_virt; do
      eval tested_$p=${!p}
    done
    restore_testenv
    save_testenv $1
}

Z0BUG_setup() {
    if [[ -d /home/odoo ]]; then
        LCL_ROOT=/home/odoo
    else
        LCL_ROOT=/opt/odoo
    fi
    local VERSION=9.0
    local ODOO_REPO=local/odoo
    LCL_OE_PRJNAME="Odoo"
    LCL_OE_REPOS=l10n_italy
    LCL_OE_PKGNAME=l10n_it_base
    LCL_OE_ROOT=~/dev/odoo/$VERSION
    LCL_OE_PRJPATH=$LCL_OE_ROOT/$LCL_OE_REPOS
    LCL_OE_PKGPATH=$LCL_OE_PRJPATH/$LCL_OE_PKGNAME
    LCL_OE_PKGPATH2=$LCL_OE_PRJPATH/__unported__/$LCL_OE_PKGNAME
    mkdir -p ~/maintainer-quality-tools
    mkdir -p $LCL_OE_ROOT
    mkdir -p $LCL_OE_ROOT/openerp
    touch $LCL_OE_ROOT/openerp-server
    mkdir -p $LCL_OE_PRJPATH
    mkdir -p $LCL_OE_PKGPATH
    mkdir -p $LCL_OE_PKGPATH2
    touch $LCL_OE_PKGPATH/__openerp__.py
    touch $LCL_OE_PKGPATH2/__openerp__.py
    mkdir -p $LCL_OE_PRJPATH/conf
    touch $LCL_OE_PRJPATH/conf/.local_dist_pkg.conf
    LCL_OE_SETUP=__openerp__.py
    if [ ! -f /etc/odoo/odoo9-server.conf ]; then
      LCLTEST_ODOO9_SERVER=/etc/odoo/odoo9-server.conf
      touch $LCLTEST_ODOO9_SERVER
    fi
    if [ -d ~/$VERSION/dependencies ]; then rm -fR ~/$VERSION/dependencies; fi
    if [ -L ~/$VERSION/dependencies ]; then rm -f ~/$VERSION/dependencies; fi

    FOUT=$TESTDIR/test_lib.out
    FTEST=$TESTDIR/test_lib.test
    cat<<'EOF' >$FTEST
> if [ -d $LCL_ROOT/dependencies ]; then rm -fR $LCL_ROOT/dependencies; fi
> if [ -L $LCL_ROOT/dependencies ]; then rm -f $LCL_ROOT/dependencies; fi
> if [ -L $LCL_ROOT/l10n_it_base-9.0 ]; then rm -f $LCL_ROOT/l10n_it_base-9.0; fi
> if [ -L $LCL_ROOT/odoo-9.0 ]; then rm -f $LCL_ROOT/odoo-9.0; fi
> if [ -L $LCL_ROOT/odoo-9.0 ]; then rm -f $LCL_ROOT/odoo-9.0; fi
> rm -fR $LCL_ROOT/maintainer-quality-tools
$ cp /etc/odoo/odoo9-server.conf $LCL_ROOT/.openerp_serverrc
> mkdir $LCL_ROOT/dependencies
> export INCLUDE=l10n_it_base
> ln -s $LCL_ROOT/dev/odoo/9.0/l10n_italy $LCL_ROOT/dependencies/
> ln -s $LCL_ROOT/dev/odoo/9.0/openerp $LCL_ROOT/dependencies/
> ln -s $LCL_ROOT/dev/odoo/9.0/openerp $LCL_ROOT/dependencies/
> ln -s $LCL_ROOT/dev/odoo/9.0 $LCL_ROOT/odoo-9.0
> ln -s $LCL_ROOT/dev/odoo/9.0/l10n_italy/l10n_it_base $LCL_ROOT/l10n_it_base-9.0

EOF
    # if [ -L ~/maintainer-quality-tools ]; then
    #   rm -f ~/maintainer-quality-tools
    # elif [ -d ~/maintainer-quality-tools/ ]; then
    #   rm -fR ~/maintainer-quality-tools/
    # elif [ -f ~/maintainer-quality-tools ]; then
    #   rm -f ~/maintainer-quality-tools
    # fi
    # LCLTEST_MQT_PATH=
    # if [ ! -L ~/maintainer-quality-tools ]; then
    #   if [ -d ~/tools/maintainer-quality-tools/ ]; then
    #     ln -s ~/tools/maintainer-quality-tools/ ~/
    #     LCLTEST_MQT_PATH=$HOME/maintainer-quality-tools/travis
    #   elif [ -d ~/pypi/maintainer-quality-tools/maintainer-quality-tools/ ]; then
    #     ln -s ~/pypi/maintainer-quality-tools/maintainer-quality-tools/ ~/
    #     LCLTEST_MQT_PATH=$HOME/maintainer-quality-tools/travis
    #   elif [ -d $HOME/tools/maintainer-quality-tools/travis/ ]; then
    #     LCLTEST_MQT_PATH=$HOME/tools/maintainer-quality-tools/travis
    #   else
    #     false
    #   fi
    # fi
    # PYPI setup
    LCL_PY_PRJNAME="example"
    LCL_PY_PKGNAME=$LCL_PY_PRJNAME
    LCL_PY_REPOS="pypi"
    LCL_PY_ROOT=~/dev/test/pypi
    LCL_PY_SETUP=setup.py
    mkdir -p ~/dev/test
    mkdir -p ~/dev/test/pypi
    mkdir -p ~/dev/test/pypi/$LCL_PY_PRJNAME
    mkdir -p ~/dev/test/pypi/$LCL_PY_PRJNAME/$LCL_PY_PRJNAME
    LCL_PY_PKGPATH=$LCL_PY_ROOT/$LCL_PY_PRJNAME
    LCL_PY_PRJPATH=$LCL_PY_PKGPATH/$LCL_PY_PRJNAME
    mkdir -p $LCL_PY_PKGPATH/conf
    touch $LCL_PY_PKGPATH/conf/.local_dist_pkg.conf
    touch $LCL_PY_PKGPATH/setup.py
}

Z0BUG_teardown() {
    rm -fR ~/dev/test
    rm -f ~/maintainer-quality-tools
    rm -fR $LCL_OE_PKGPATH2
    rm -fR $LCL_OE_PKGPATH
    rm -fR $LCL_OE_PRJPATH
    rm -fR $LCL_OE_ROOT
    if [ -n "$LCLTEST_ODOO9_SERVER" ]; then
      rm -f $LCLTEST_ODOO9_SERVER
    fi
    if [ -f $FOUT ]; then rm -f $FOUT; fi
    if [ -f $FTEST ]; then rm -f $FTEST; fi
}


test_01() {
    save_testenv
    local s sts res opts
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      result_testenv
    fi
    # test_result "opts_travis OE (travis.conf)" "$TDIR/.travis.conf" "$TCONF"
    # s=$?; [ ${s-0} -ne 0 ] && sts=$s
    # test_result "opts_travis OE (local conf)" "$LCL_OE_PRJPATH/conf/.local_dist_pkg.conf" "$DIST_CONF"
    # s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (REMOTEREPO)" "local" "$REMOTEREPO"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (PKGPATH)" "$LCL_OE_PKGPATH" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (PKGNAME)" "$LCL_OE_PKGNAME" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (PRJPATH)" "$LCL_OE_PRJPATH" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (PRJNAME)" "$LCL_OE_PRJNAME" "$PRJNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (REPOSNAME)" "$LCL_OE_REPOS" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (SETUP)" "$LCL_OE_PKGPATH/$LCL_OE_SETUP" "$SETUP"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (MANIFEST)" "$LCL_OE_SETUP" "$MANIFEST"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    restore_testenv
    return $sts
}

test_02() {
    save_testenv "P"
    local s sts res opts
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      result_testenv
    fi
    # test_result "opts_travis PY (travis.conf)" "$TDIR/.travis.conf" "$TCONF"
    # s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (local conf)" "$LCL_PY_PKGPATH/conf/.local_dist_pkg.conf" "$DIST_CONF"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (REMOTEREPO)" "local" "$REMOTEREPO"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (PKGPATH)" "$LCL_PY_PKGPATH" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (PKGNAME)" "$LCL_PY_PKGNAME" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (PRJPATH)" "$LCL_PY_PRJPATH" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (PRJNAME)" "$LCL_PY_PRJNAME" "$PRJNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (REPOSNAME)" "$LCL_PY_REPOS" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (SETUP)" "$LCL_PY_PKGPATH/$LCL_PY_SETUP" "$SETUP"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis PY (MANIFEST)" "$LCL_PY_SETUP" "$MANIFEST"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    restore_testenv
    return $sts
}

test_03() {
    save_testenv
    local s sts RES opts
    opt_conf=
    sts=0
    opts_travis ""
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      PRJNAME=
      CFG_init
      conf_default
      init_travis
      result_testenv
    fi
    test_result "init_travis.dry_run" "" "$opts_dry_run"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.verbose" "-v" "$opts_verbose"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.FLOG_ECHO" "echo" "$FLOG_ECHO"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    check_4_travis
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      opts=$(inherits_travis_opts "v" "D")
      result_testenv
    fi
    test_result "init_travis opts" "-v" "$opts"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      MQT_VERBOSE_MODE=
      inherits_travis_opts "v" "T" >/dev/null
      result_testenv
    fi
    test_result "init_travis \$MQT_VERBOSE_MODE" "1" "$MQT_VERBOSE_MODE"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      opt_dprj=0
      RES=$(inherits_travis_opts "-rjPKT" "T")
      result_testenv
    fi
    test_result "inherit opts T" "-KPrTv" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=-1
      opt_dprj=1
      RES=$(inherits_travis_opts "-vn" "A")
      result_testenv
    fi
    test_result "inherit opts A" "-jnv" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_cpush="-C"
      opt_diff=1
      RES=$(inherits_travis_opts "-n" "D")
      result_testenv
    fi
    test_result "inherit opts D" "-Cdnq" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_cpush="-P"
      opt_diff=0
      opt_force=1
      RES=$(inherits_travis_opts "-nd" "D")
      result_testenv
    fi
    test_result "inherit opts D" "-dfnPq" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_cpush="-R"
      opt_diff=0
      opt_force=0
      RES=$(inherits_travis_opts "-n" "D")
      result_testenv
    fi
    test_result "inherit opts D" "-nqR" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_cpush="-F"
      opt_diff=0
      opt_force=0
      RES=$(inherits_travis_opts "-nf" "D")
      result_testenv
    fi
    test_result "inherit opts D" "-Ffnq" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=-1
      opt_r=1
      RES=$(inherits_travis_opts "-nmjb" "E")
      result_testenv
    fi
    test_result "inherit opts E" "-jmnr" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=-1
      opt_r=0
      RES=$(inherits_travis_opts "-nmjb" "E")
      result_testenv
    fi
    test_result "inherit opts E" "-jmn" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_cpush=
      RES=$(inherits_travis_opts "-RnKCO" "N")
      result_testenv
    fi
    test_result "inherit opts N" "-CKnOR" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      opt_diff=1
      RES=$(inherits_travis_opts "-upOnLjb" "P")
      result_testenv
    fi
    test_result "inherit opts P" "-djnOuv" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_diff=0
      opt_uop=1
      RES=$(inherits_travis_opts "-n" "8")
      result_testenv
    fi
    test_result "inherit opts 8" "-nqu" "$RES"
    restore_testenv
    return $sts
}

test_04() {
    save_testenv
    local s sts res opts
    export opt_conf=$TESTDIR/test_travis.conf
    [ -f $opt_conf ] && rm -f $opt_conf
    touch $opt_conf
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      result_testenv
    fi
    # tested_opt_conf from result_testenv
    test_result "opts_travis OE (opt_conf)" "$tested_opt_conf" "$TCONF"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "opts_travis OE (TRAVIS_REPO_SLUG)" "$REMOTEREPO/$PKGNAME" "$TRAVIS_REPO_SLUG"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s

    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_virt=1
      opt_verbose=2
      opts_travis ""
      CFG_init
      conf_default
      init_travis
      result_testenv
    fi
    test_result "opts_travis OE (virtualenv_opts)" "" "$TRAVIS_ENVOPTS"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s

    restore_testenv
    return $sts
}

test_05() {
    save_testenv
    local s sts res opts
    opt_conf=
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=2
      opt_r=1
      TOOLS_PATH=
      PRJNAME=
      opts_travis ""
      CFG_init
      conf_default
      init_travis
      result_testenv
    fi
    # if [ -d $TDIR/_travis ]; then
    #   test_result "init_travis \$TOOLS_PATH" "$RUNDIR/_travis" "$TOOLS_PATH"
    # elif [ -d $HOME/build/local/travis_emulator/_travis ]; then
    #   test_result "init_travis \$TOOLS_PATH" "$HOME/build/local/travis_emulator/_travis" "$TOOLS_PATH"
    # else
    #   test_result "init_travis \$TOOLS_PATH" "$LCL_ROOT/dev/_travis" "$TOOLS_PATH"
    # fi
    # s=$?; [ ${s-0} -ne 0 ] && sts=$s
    # FIX: temporarly disabled
    # test_result "init_travis \$MQT_PATH" "$LCLTEST_MQT_PATH" "$MQT_PATH"
    # s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      MQT_VERBOSE_MODE=
      inherits_travis_opts "v" "T" >/dev/null
      result_testenv
    fi
    test_result "init_travis \$MQT_VERBOSE_MODE" "1" "$MQT_VERBOSE_MODE"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    # BRANCH=9.0
    # if [ -d ~/9.0 ]; then
    #   if [ ${opt_dry_run:-0} -eq 0 ]; then
    #     opt_verbose=1
    #     opt_dry_run=1
    #     prepare_env_travis
    #     run_svr_test_init > $FOUT
    #     result_testenv
    #   fi
    #   test_result "run_svr_test_init" "$FOUT" "$FTEST" "diff -qEbB"
    #   s=$?; [ ${s-0} -ne 0 ] && sts=$s
    # else
    #   VERSION=9.0
    # fi
    restore_testenv
    return $sts
}

test_06() {
    save_testenv "0"
    local s sts res opts
    opt_conf=
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      PRJNAME=
      opts_travis ""
      CFG_init
      conf_default
      init_travis
      result_testenv "0"
    fi
    test_result "init_travis OE OCB (PKGPATH)" "$LCL_OE_ROOT" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis OE OCB (REPOSNAME)" "OCB" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis OE OCB (PKGNAME)" "OCB" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis OE OCB (PRJPATH)" "$LCL_OE_ROOT" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    check_4_travis
    test_result "init_travis OE OCB (PKGPATH)" "$LCL_OE_ROOT" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    restore_testenv "0"
    return $sts
}

test_07() {
    save_testenv
    local s sts res opts
    opt_conf=
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      PRJNAME=
      opts_travis ""
      CFG_init
      conf_default
      init_travis
      result_testenv
    fi
    test_result "travis.pkgpath (RPS)" "$LCL_OE_PKGPATH" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.pkgpath (RPS)" "$LCL_OE_PKGPATH" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.reposname (RPS)" "$LCL_OE_REPOS" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjname (RPS)" "$LCL_OE_PKGNAME" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjpath (RPS)" "$LCL_OE_PRJPATH" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
     test_result "init_travis.prjname" "$LCL_OE_PRJNAME" "$PRJNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      result_testenv "0"
      revaluate_travis
      FLOG_ECHO=echo   # revaluate_travis update FLOG_ECHO and disable test output
      result_testenv "0"
    fi
    test_result "travis.pkgpath (OCB)" "$LCL_OE_ROOT" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.reposname (OCB)" "OCB" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjname (OCB)" "OCB" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjpath (OCB)" "$LCL_OE_ROOT" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      result_testenv "2"
      revaluate_travis
      FLOG_ECHO=echo   # revaluate_travis update FLOG_ECHO and disable test output
      result_testenv "2"
    fi
    test_result "travis.pkgpath (unported)" "$LCL_OE_PKGPATH2" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.reposname (unported)" "$LCL_OE_REPOS" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjname (unported)" "$LCL_OE_PKGNAME" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjpath (unported)" "$LCL_OE_PRJPATH" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    restore_testenv
    return $sts
}

Z0BUG_init
parseoptest -l$TESTDIR/test_travis_em.log "$@" "-JO"
sts=$?
if [ $sts -ne 127 ]; then
  exit $sts
fi
if [ ${opt_oeLib:-0} -ne 0 ]; then
  ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $HOME/tools/clodoo $HOME/dev ${PYPATH//:/ } . .." "clodoo")
  if [ -z "$ODOOLIBDIR" ]; then
    echo "Library file odoorc not found!"
    exit 2
  fi
  . $ODOOLIBDIR
fi
if [ ${opt_tjLib:-0} -ne 0 ]; then
  TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. $HOME/tools/travis_emulator $HOME/dev ${PYPATH//:/ } . .." "travis_emulator")
  if [ -z "$TRAVISLIBDIR" ]; then
    echo "Library file travisrc not found!"
    exit 2
  fi
  . $TRAVISLIBDIR
fi


UT1_LIST=""
UT_LIST=""
Z0BUG_setup
if [ "$(type -t Z0BUG_setup)" == "function" ]; then Z0BUG_setup; fi
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
if [ "$(type -t Z0BUG_teardown)" == "function" ]; then Z0BUG_teardown; fi
exit $sts
