#! /bin/bash
# -*- coding: utf-8 -*-
# Regression tests on travis emulator
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../../z0lib ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. $TDIR/../travis_emulator $TDIR/../../travis_emulator . .. $HOME/dev")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)
Z0TLIBDIR=$(findpkg z0testrc "$TDIR $TDIR/.. $TDIR/../zerobug $TDIR/../../zerobug  . .. $HOME/dev")
if [ -z "$Z0TLIBDIR" ]; then
  echo "Library file z0testrc not found!"
  exit 2
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)

__version__=0.2.0


save_testenv() {
#save_testenv(cwd)
    local p
    for p in opt_dry_run pkg opt_verbose opt_r opt_conf; do
      eval SAVE_$p=${!p}
    done
    LCLTEST_CWD=$PWD
    if [ -z "$1" ]; then
      cd $LCLTEST_TMPDIR
    elif [ "$1" == "0" ]; then
      cd $LCLTEST_TMPDIR0
    elif [ "$1" == "2" ]; then
      cd $LCLTEST_TMPDIR2
    fi
}

restore_testenv() {
    local p x
    for p in opt_dry_run pkg opt_verbose opt_r opt_conf; do
      x=saved_$p
      eval $p=${!x}
      eval SAVE_$p=
    done
    cd $LCLTEST_CWD
}

result_testenv() {
#result_testenv(cwd)
    local p x
    for p in opt_dry_run pkg opt_verbose opt_r opt_conf; do
      eval tested_$p=${!p}
    done
    restore_testenv
    save_testenv $1
}

Z0BUG_setup() {
    local VERSION=9.0
    local ODOO_REPO=local/odoo
    LCLTEST_PRJNAME="Odoo"
    LCLTEST_REPOSNAME=l10n_italy
    LCLTEST_PKGNAME=l10n_it_base
    LCLTEST_TMPDIR0=~/dev/odoo/$VERSION
    LCLTEST_PRJPATH=$LCLTEST_TMPDIR0/$LCLTEST_REPOSNAME
    LCLTEST_TMPDIR=$LCLTEST_PRJPATH/$LCLTEST_PKGNAME
    LCLTEST_TMPDIR2=$LCLTEST_PRJPATH/__unported__/$LCLTEST_PKGNAME
    mkdir -p /opt/odoo/maintainer-quality-tools
    mkdir -p $LCLTEST_TMPDIR0
    mkdir -p $LCLTEST_PRJPATH
    mkdir -p $LCLTEST_TMPDIR
    mkdir -p $LCLTEST_TMPDIR2
    touch $LCLTEST_TMPDIR/__openerp__.py
    touch $LCLTEST_TMPDIR2/__openerp__.py
    LCLTEST_SETUP=__openerp__.py
    if [ -d ~/tools/maintainer-quality-tools/travis ]; then
      LCLTEST_MQT_PATH=$(readlink -f ~/tools/maintainer-quality-tools/travis)
    else
      LCLTEST_MQT_PATH=$(readlink -f ~/dev/pypi/maintainer-quality-tools/maintainer-quality-tools/travis)
    fi
    if [ ! -f /etc/odoo/odoo9-server.conf ]; then
      LCLTEST_ODOO9_SERVER=/etc/odoo/odoo9-server.conf
      touch $LCLTEST_ODOO9_SERVER
    fi
    if [ -d ~/$VERSION/dependencies ]; then rm -fR ~/$VERSION/dependencies; fi
    if [ -L ~/$VERSION/dependencies ]; then rm -f ~/$VERSION/dependencies; fi

    FOUT=$TESTDIR/test_lib.out
    FTEST=$TESTDIR/test_lib.test
    cat<<'EOF' >$FTEST
> pg_db_active -a openerp_template; dropdb -Upostgres --if-exists openerp_template
> pg_db_active -a openerp_test; dropdb -Upostgres --if-exists openerp_test
> if [ -d /opt/odoo/dependencies ]; then rm -fR /opt/odoo/dependencies; fi
> if [ -L /opt/odoo/dependencies ]; then rm -f /opt/odoo/dependencies; fi
> if [ -L /opt/odoo/l10n_it_base-9.0 ]; then rm -f /opt/odoo/l10n_it_base-9.0; fi
> if [ -L /opt/odoo/odoo-9.0 ]; then rm -f /opt/odoo/odoo-9.0; fi
> if [ -L /opt/odoo/odoo-9.0 ]; then rm -f /opt/odoo/odoo-9.0; fi
> rm -fR /opt/odoo/maintainer-quality-tools
$ cp /etc/odoo/odoo9-server.conf /opt/odoo/.openerp_serverrc
> mkdir /opt/odoo/dependencies
> export INCLUDE=l10n_it_base
> ln -s /opt/odoo/dev/odoo/9.0/l10n_italy /opt/odoo/dependencies/
> ln -s /opt/odoo/dev/odoo/9.0 /opt/odoo/odoo-9.0
> ln -s /opt/odoo/dev/odoo/9.0/l10n_italy/l10n_it_base /opt/odoo/l10n_it_base-9.0
EOF
    if [ -L ~/maintainer-quality-tools ]; then
      rm -f ~/maintainer-quality-tools
    elif [ -d ~/maintainer-quality-tools/ ]; then
      rm -fR ~/maintainer-quality-tools/
    elif [ -f ~/maintainer-quality-tools ]; then
      rm -f ~/maintainer-quality-tools
    fi
    if [ ! -L ~/maintainer-quality-tools ]; then
      if [ -d ~/tools/maintainer-quality-tools/ ]; then
        ln -s ~/tools/maintainer-quality-tools/ ~/
      elif [ -d ~/pypi/maintainer-quality-tools/maintainer-quality-tools/ ]; then
        ln -s ~/pypi/maintainer-quality-tools/maintainer-quality-tools/ ~/
      else
        false
      fi
    fi
}

Z0BUG_teardown() {
    rm -f ~/maintainer-quality-tools
    rm -fR $LCLTEST_TMPDIR2
    rm -fR $LCLTEST_TMPDIR
    rm -fR $LCLTEST_PRJPATH
    rm -fR $LCLTEST_TMPDIR0
    if [ -n "$LCLTEST_ODOO9_SERVER" ]; then
      rm -f $LCLTEST_ODOO9_SERVER
    fi
    if [ -f $FOUT ]; then rm -f $FOUT; fi
    if [ -f $FTEST ]; then rm -f $FTEST; fi
}


test_01() {
    save_testenv
    local s sts res opts
    opt_conf=
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      result_testenv
    fi
    res=$TDIR/.travis.conf
    test_result "travis.conf" "$res" "$TCONF"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.pkgpath" "$LCLTEST_TMPDIR" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.pkgpath" "$LCLTEST_PKGNAME" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.repository" "local/" "$REMOTEREPO"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    restore_testenv
    return $sts
}

test_02() {
    save_testenv
    local s sts RES opts
    opt_conf=
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      opt_verbose=1
      PRJNAME=
      CFG_init
      conf_default
      # link_cfg $DIST_CONF $TCONF
      init_travis
      result_testenv
    fi
    test_result "init_travis.dry_run" "" "$opts_dry_run"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.verbose" "-v" "$opts_verbose"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.FLOG_ECHO" "echo" "$FLOG_ECHO"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.setup" "$LCLTEST_SETUP" "$SETUP"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.reposname" "$LCLTEST_REPOSNAME" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.prjname" "$LCLTEST_PKGNAME" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.prjname" "$LCLTEST_PRJNAME" "$PRJNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.prjpath" "$LCLTEST_PRJPATH" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    check_4_travis
    test_result "travis.dstpath (RPS)" "$LCLTEST_TMPDIR" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      opts=$(inherits_travis_opts "v" "D")
      result_testenv
    fi
    test_result "init_travis opts" "-v" "$opts"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      MQT_VERBOSE_MODE=
      inherits_travis_opts "v" "T" >/dev/null
      result_testenv
    fi
    test_result "init_travis \$MQT_VERBOSE_MODE" "1" "$MQT_VERBOSE_MODE"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      opt_dprj=0
      RES=$(inherits_travis_opts "-rjPKT" "T")
      result_testenv
    fi
    test_result "inherit opts T" "-KjPrTv" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=-1
      opt_dprj=1
      RES=$(inherits_travis_opts "-vn" "A")
      result_testenv
    fi
    test_result "inherit opts A" "-jnv" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_cpush="-C"
      opt_diff=1
      RES=$(inherits_travis_opts "-n" "D")
      result_testenv
    fi
    test_result "inherit opts D" "-Cdnq" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_cpush="-P"
      opt_diff=0
      opt_force=1
      RES=$(inherits_travis_opts "-nd" "D")
      result_testenv
    fi
    test_result "inherit opts D" "-dfnPq" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_cpush="-R"
      opt_diff=0
      opt_force=0
      RES=$(inherits_travis_opts "-n" "D")
      result_testenv
    fi
    test_result "inherit opts D" "-nqR" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_cpush="-F"
      opt_diff=0
      opt_force=0
      RES=$(inherits_travis_opts "-nf" "D")
      result_testenv
    fi
    test_result "inherit opts D" "-Ffnq" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=-1
      opt_r=1
      RES=$(inherits_travis_opts "-nmjb" "E")
      result_testenv
    fi
    test_result "inherit opts E" "-jmnr" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=-1
      opt_r=0
      RES=$(inherits_travis_opts "-nmjb" "E")
      result_testenv
    fi
    test_result "inherit opts E" "-jmn" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_cpush=
      RES=$(inherits_travis_opts "-RnKCO" "N")
      result_testenv
    fi
    test_result "inherit opts N" "-CKnOR" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      opt_diff=1
      RES=$(inherits_travis_opts "-upOnLjb" "P")
      result_testenv
    fi
    test_result "inherit opts P" "-djnOuv" "$RES"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=0
      opt_diff=0
      opt_uop=1
      RES=$(inherits_travis_opts "-n" "8")
      result_testenv
    fi
    test_result "inherit opts 8" "-nqu" "$RES"
    restore_testenv
    return $sts
}

test_03() {
    save_testenv
    local s sts res opts
    export opt_conf=$TESTDIR/test_travis.conf
    if [ -f $opt_conf ]; then rm -f $opt_conf; fi
    touch $opt_conf
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      result_testenv
    fi
    test_result "travis.conf" "$tested_opt_conf" "$TCONF"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    res=$LCLTEST_TMPDIR
    test_result "travis.pkgpath" "$res" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.repository" "local/" "$REMOTEREPO"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    restore_testenv
    return $sts
}

test_04() {
    save_testenv
    local s sts res opts
    opt_conf=
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      opt_verbose=2
      opt_r=1
      TOOLS_PATH=
      PRJNAME=
      CFG_init
      conf_default
      # link_cfg $DIST_CONF $TCONF
      init_travis
      result_testenv
    fi
    test_result "init_travis.dry_run" "" "$opts_dry_run"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.verbose" "-v" "$opts_verbose"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.FLOG_ECHO" "echo" "$FLOG_ECHO"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.setup" "$LCLTEST_SETUP" "$SETUP"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis.reposname" "$LCLTEST_REPOSNAME" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ -d $TDIR/_travis ]; then
      test_result "init_travis \$TOOLS_PATH" "$RUNDIR/_travis" "$TOOLS_PATH"
    else
      test_result "init_travis \$TOOLS_PATH" "$HOME/dev/_travis" "$TOOLS_PATH"
    fi
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "init_travis \$MQT_PATH" "$LCLTEST_MQT_PATH" "$MQT_PATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opt_verbose=1
      MQT_VERBOSE_MODE=
      # TOOLS_PATH=~/maintainer-quality-tools/travis
      inherits_travis_opts "v" "T" >/dev/null
      result_testenv
    fi
    test_result "init_travis \$MQT_VERBOSE_MODE" "1" "$MQT_VERBOSE_MODE"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ -d ~/9.0 ]; then
      if [ ${opt_dry_run:-0} -eq 0 ]; then
        opt_verbose=1
        opt_dry_run=1
        prepare_env_travis
        run_svr_test_init > $FOUT
        result_testenv
      fi
      test_result "run_svr_test_ini" "$FOUT" "$FTEST" "diff -qEbB"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
    else
      VERSION=9.0
    fi
    restore_testenv
    return $sts
}

test_05() {
    save_testenv "0"
    local s sts res opts
    opt_conf=
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      opt_verbose=1
      PRJNAME=
      CFG_init
      conf_default
      # link_cfg $DIST_CONF $TCONF
      init_travis
      result_testenv "0"
    fi
    test_result "travis.pkgpath (OCB)" "$LCLTEST_TMPDIR0" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.reposname (OCB)" "" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjname (OCB)" "OCB" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjpath (OCB)" "$LCLTEST_TMPDIR0" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    check_4_travis
    test_result "travis.dstpath (OCB)" "$LCLTEST_TMPDIR0" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    restore_testenv "0"
    return $sts
}

test_06() {
    save_testenv
    local s sts res opts
    opt_conf=
    sts=0
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      opts_travis ""
      opt_verbose=1
      PRJNAME=
      CFG_init
      conf_default
      # link_cfg $DIST_CONF $TCONF
      init_travis
      result_testenv
    fi
    test_result "travis.pkgpath (RPS)" "$LCLTEST_TMPDIR" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.reposname (RPS)" "$LCLTEST_REPOSNAME" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjname (RPS)" "$LCLTEST_PKGNAME" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjpath (RPS)" "$LCLTEST_PRJPATH" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
     test_result "init_travis.prjname" "$LCLTEST_PRJNAME" "$PRJNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      result_testenv "0"
      revaluate_travis
      FLOG_ECHO=echo   # revaluate_travis update FLOG_ECHO and disable test output
      result_testenv "0"
    fi
    test_result "travis.pkgpath (OCB)" "$LCLTEST_TMPDIR0" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.reposname (OCB)" "" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjname (OCB)" "OCB" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjpath (OCB)" "$LCLTEST_TMPDIR0" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      result_testenv "2"
      revaluate_travis
      FLOG_ECHO=echo   # revaluate_travis update FLOG_ECHO and disable test output
      result_testenv "2"
    fi
    test_result "travis.pkgpath (unported)" "$LCLTEST_TMPDIR2" "$PKGPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.reposname (unported)" "$LCLTEST_REPOSNAME" "$REPOSNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjname (unported)" "$LCLTEST_PKGNAME" "$PKGNAME"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    test_result "travis.prjpath (unported)" "$LCLTEST_PRJPATH" "$PRJPATH"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    restore_testenv
    return $sts
}

Z0BUG_init
parseoptest -l$TESTDIR/test_travis_em.log "$@" "-J"
sts=$?
if [ $sts -ne 127 ]; then
  exit $sts
fi
if [ ${opt_tjlib:-0} -ne 0 ]; then
  TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. $TDIR/../travis_emulator $TDIR/../../travis_emulator . .. $HOME/dev")
  if [ -z "$TRAVISLIBDIR" ]; then
    echo "Library file travisrc not found!"
    exit 2
  fi
  . $TRAVISLIBDIR
fi
UT1_LIST=""
UT_LIST=""
Z0BUG_setup
if [ "$(type -t Z0BUG_setup)" == "function" ]; then Z0BUG_setup; fi
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
if [ "$(type -t Z0BUG_teardown)" == "function" ]; then Z0BUG_teardown; fi
exit $sts
