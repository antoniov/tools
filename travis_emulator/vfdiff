#! /bin/bash
# -*- coding: utf-8 -*-
# Version file diff
# Make diff of file among Odoo versions
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
# This free software is released under GNU Affero GPL3
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/travis_emulator $HOME/dev" "travis_emulator")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.1.3


vf_init() {
    VF_IGNORE="$(get_cfg_value 0 filedel)"
    VF_IGNORE="$VF_IGNORE $(get_cfg_value 0 fileignore)"
    VF_DIGNORE=$(get_cfg_value 0 "filediffignore")
    XRGX=
    XLFS=
    XLDF=
    for x in $VF_IGNORE; do
      local x1="${x:0:1}"
      local x9="${x: -1}"
      if [ "$x9" == "/" ]; then
         XRGX="$XRGX ^(.*\\/|)$x"
         XLFS="$XLFS --exclude=$x"
         XLDF="$XLDF -x '${x:0: -1}'"
      elif [ "$x1" == "." -o "$x1" == "," -o "$x" == "~" ]; then
         XRGX="$XRGX ^.*\\$x\$"
         XLFS="$XLFS --exclude=*$x"
         XLDF="$XLDF -x '*$x'"
      else
         XRGX="$XRGX $x"
         XLFS="$XLFS --exclude=*$x*"
         XLDF="$XLDF -x '*$x'"
      fi
    done
    XXDF=
    for x in $VF_DIGNORE; do
      local x1="${x:0:1}"
      local x9="${x: -1}"
      if [ "$x9" == "/" ]; then
         XXDF="$XXDF ^(.*\\/|)$x"
      elif [ "$x1" == "." -o "$x" == "~" ]; then
         XXDF="$XXDF ^.*\\$x\$"
      else
         XXDF="$XXDF $x"
      fi
      XLDF="$XLDF -x '*$x'"
    done
}

simple_diff() {
# simple_diff(opts src tgt)
    local opts=$1
    local src=$2
    local tgt=$3
    local d n s
    run_traced "diff$opts $src $tgt"
    s=$?
    # if [ "$VF_OFVER" != "$VFT_VER" ]; then
    #   n=$(basename $src)
    #   if [ "$n" == "__openerp__.py" ]; then
    #     if [ $opt_rest -gt 0 ]; then
    #       run_traced "sed -i -e \"s/'version': *'$VFT_VER/'version': '$VF_OFVER/g\" -e \"s/\\\"version\\\": *\\\"$VFT_VER/\\\"version': \\\"$VF_OFVER/g\" $tgt"
    #     else
    #       run_traced "sed -i -e \"s/'version': *'$VF_OFVER/'version': '$VFT_VER/g\" -e \"s/\\\"version\\\": *\\\"$VF_OFVER/\\\"version': \\\"$VFT_VER/g\" $tgt"
    #     fi
    #  fi
    # fi
    return $s
}

exec_diff() {
    local left=$1
    local right=$2
    if [ -d "$left" ]; then
      if [ $opt_all -gt 0 ]; then
        opts=" -Zqr"
      else
        opts="$XLDF -ZBqr"
      fi
      if [ $opt_igns -gt 0 ]; then
        opts="${opts}Ew"
      fi
    else
      if [ $opt_para -ne 0 ]; then
        opts=" -ZBy"
        if [ $opt_igns -gt 0 ]; then
          opts="${opts}Ew"
        fi
      elif [ $opt_igns -gt 0 ]; then
          opts=" -ZBEw"
      else
        opts=" -ZB"
      fi
    fi
    run_traced "diff$opts $left $right"
    return $?
}

localdiff() {
    local param=-i
    local left=$1
    local right=$2
    local f
    local cparq=""
    local cparv=""
    local sts=$opt_sts
    if [ "$opt_sel" ]; then param="$param -s$opt_sel"; fi
    if [ $opt_verbose -gt 0 ]; then
      param="$param -v"
    else
      cparq="$cparq -q"
    fi
    if [ $opt_para -ne 0 ]; then
      cparv="$cparv -y --suppress-common-lines"
      param="$param -y"
    fi
    if [ "$opt_md" ]; then param="$param -m"; fi
    if [ -d $left ]; then
      for f in $(ls -1 $left); do
        if [ $opt_verbose -gt 1 ]; then
          echo "> $0 $param $left/$f $right/$f"
        fi
        if $(matches1of "$f" "$XRGX"); then
          :
        else
          $0 -$sts $param -2 $left/$f $right/$f
          if [ $? -gt 0 ]; then
            sts=$STS_FAILED
          fi
        fi
      done
      if [ -d $right ]; then
        for f in $(ls -1 $right); do
          if $(matches1of "$f" "$XRGX $XXDF"); then
            :
          else
            if [ ! -e $left/$f ]; then
              echo "Only in $right: $f"
              sts=$STS_FAILED
            fi
          fi
        done
      fi
      if [ $opt_2nd -eq 0 -a $sts -eq $STS_SUCCESS -a $opt_verbose -gt 0 ]; then
         echo "No diff found"
      fi
    else
      if [ $opt_verbose -gt 1 ]; then
        echo "> $0 $left $right"
      fi
      if $(matches1of "$left" "$XRGX $XXDF"); then
        :
      else
        if [ -f $right ]; then
          if [[ "$left" =~ $opt_sel ]]; then
            local mime=$(file -b --mime-type $left)
            if [ $opt_md -ne 0  -a "$mime" == "text/x-python" -o "${left: -3}" == ".py" ]; then
              if [ $opt_verbose -eq 0 ]; then
                if diff -qZBI'^#' $left $right; then
                  echo "diff -ZBI'^#' $cparv $left $right"
                fi
              fi
              run_traced "diff -ZBI'^#' $cparv $left $right"
            else
              run_traced "diff $cparv $left $right"
            fi
          else
            run_traced "diff $cparq $left $right"
          fi
          if [ $? -gt 0 ]; then
            sts=$STS_FAILED
          fi
        elif [ ! -f $right ]; then
          fd=$(dirname $left)
          fb=$(basename $left)
          echo "Only in $fd: $fb"
          sts=$STS_FAILED
        fi
      fi
    fi
    return $sts
}

set_oever() {
# set_oever(odoo_ver)
    if [ -z "$VF_OFVER" ]; then
      VF_OFVER=$1
    fi
    if [ -z "$VFT_VER" ]; then
      VFT_VER=$1
    fi
}

# PATH examples:
#   /opt/odoo/${ver}/${repository}/${module}/module_path/file
#   /etc/odoo/odoo${ver}[-server].conf
#   /var/run/odoo/odoo${ver}.pid
#   /etc/init.d/odoo${ver}[-server]
#   filename
#   ${ver}
get_path_ver() {
# get_path_ver(path odoo_ver rep pkg)
    VF_MSTS=0
    local i
    local r t v
    local re="(10\.0|9\.0|8\.0|7\.0|v7)"
    VFT_VER=$2
    if [ -z "$1" ]; then
      r=$VF_PFX
    else
      r=$(dirname $1)
      if [ "$r" == "." ]; then
        if [ -d "./$1" -o "${1: -1}" == "/" ]; then
          r=$PWD/$1
        elif [ -f "./$1" ]; then
          r=$PWD
          VF_FN=$1
        elif [[ $1 =~ $re ]]; then
          r=$VF_PFX
          set_oever "$1"
          # echo "<$1;r=$r;VF_OFVER=$VF_OFVER;VFT_VER=$VFT_VER>" #debug
        else
          r=$1
        fi
      elif [ "${r:0:1}" == "/" -o "${r:0:1}" == "~" -o "${1:0:2}" == "./" -o "${1:0:3}" == "../" ]; then
        if [ -d $1 ]; then
          r=$1
        else
          VF_FN=$(basename $1)
        fi
      else
        VF_FN=$(basename $1)
      fi
    fi
    PUWD=$(readlink -f $PWD/..)
    result=
    for i in {1..9}; do
      t=$(echo "$r"|awk -F/ '{ print $'$i'}')
      if [ -z "$t" ]; then
        continue
      elif [ $VF_MSTS -eq 0 ]; then
        if [[ $t =~ $re ]]; then
          if [ "${r:0:2}" == ".." ]; then
            VF_PFX=$PUWD
          elif [ "${r:0:1}" == "." ]; then
            VF_PFX=$PWD
          elif [ -n "$result" ]; then
            VF_PFX=$result
          fi
          if [ -z "$result" ]; then
            if [ "$VF_PFX" == "/opt/odoo" ]; then
              result=$VF_PFX/$t
            else
              result=$VF_PFX
            fi
          elif [ "${result:0:9}" == "/opt/odoo" ]; then
            result=$result/$t
          fi
          set_oever "$t"
          VF_MSTS=1
        elif [[ $t =~ ^odoo[0-9] ]]; then
          if [ "${r:0:1}" == "." -a "${r:0:2}" != ".." ]; then
            VF_PFX=$PWD
            result="$VF_PFX/$result"
          elif [ "${r:0:1}" != "/" -a "${r:0:1}" != "~" ]; then
            result="$VF_PFX/$result"
          else
            VF_PFX=$result
          fi
          v=$(echo $t|grep -Eo "[0-9]*"|head -n1)
          VF_OFVER=$v.0
          if [ -z "$VFT_VER" ]; then
            VFT_VER=$VF_OFVER
          fi
          v=$(echo $VFT_VER|grep -Eo "[0-9]*"|head -n1)
          t=$(echo $t|sed -e s:odoo[0-9]*:odoo$v:)
          result="$result/$t"
          VF_MSTS=3
        else
          result="$result/$t"
        fi
      elif [ $VF_MSTS -eq 1 ]; then
        if [ "${result:0:10}" == "/opt/odoo/" ]; then
          VF_REP=$t
          VF_MSTS=2
        fi
        result="$result/$t"
      elif [ $VF_MSTS -eq 2 ]; then
        if [ "${result:0:10}" == "/opt/odoo/" ]; then
          VF_PKG=$t
          VF_MSTS=3
        fi
        result="$result/$t"
      elif [ $VF_MSTS -eq 3 ]; then
        if [ "${result:0:10}" == "/opt/odoo/" ]; then
          VF_PATH=$t
        fi
        VF_MSTS=4
        result="$result/$t"
      elif [ $VF_MSTS -eq 4 ]; then
        if [ "${result:0:10}" == "/opt/odoo/" ]; then
          VF_PATH=$VF_PATH/$t
        fi
        result="$result/$t"
      fi
    done
    if [ "${result:0:9}" != "/opt/odoo" -a -n "$VF_FN" ]; then
      if [[ $VF_FN =~ ^odoo[0-9] ]]; then
        VF_PFX=$result
        v=$(echo $VF_FN|grep -Eo "[0-9]*"|head -n1)
        VF_OFVER=$v.0
        if [ -z "$VFT_VER" ]; then
          if [ -z "$odoo_ver" ]; then
            VFT_VER=$VF_OFVER
          else
            VFT_VER=$odoo_ver
          fi
        fi
        v=$(echo $VFT_VER|grep -Eo "[0-9]*"|head -n1)
        VF_FN=$(echo $VF_FN|sed -e s:odoo[0-9]*:odoo$v:)
      fi
    fi
    if [ $VF_MSTS -eq 0 ]; then
      if [ "${r:0:2}" == ".." ]; then
        VF_PFX=$PUWD
      elif [ "${r:0:1}" == "." ]; then
        VF_PFX=$PWD
      elif [ "${r:0:1}" != "/" -a "${r:0:1}" != "~" ]; then
        if [ -z "$result" ]; then
          result=$VF_PFX
        fi
      fi
      if [ -z "$VFT_VER" ]; then
        if [ -z "$odoo_ver" ]; then
          VFT_VER=$VF_OFVER
        else
          VFT_VER=$odoo_ver
        fi
      fi
      if [ "${result:0:9}" == "/opt/odoo" -a -n "$VFT_VER" ]; then
        result=$result/$VFT_VER
        VF_MSTS=1
      else
        VF_MSTS=3
      fi
    fi
    if [ $VF_MSTS -eq 1 ]; then
      if [ "${result:0:9}" == "/opt/odoo" ]; then
        if [ -n "$3" ]; then
          VF_REP=$3
        elif [ -n "$opt_rep" ]; then
          VF_REP=$opt_rep
        fi
        if [ -n "$VF_REP" ]; then
          result=$result/$VF_REP
        fi
        VF_MSTS=2
      fi
    fi
    if [ $VF_MSTS -eq 2 ]; then
      if [ "${result:0:9}" == "/opt/odoo" ]; then
        if [ -n "$4" ]; then
          VF_PKG=$4
        elif [ -n "$opt_pkg" ]; then
          VF_pkg=$opt_pkg
        fi
        if [ -n "$VF_PKG" ]; then
          result=$result/$VF_PKG
        fi
        VF_MSTS=3
      fi
    fi
    if [ $VF_MSTS -eq 3 ]; then
      if [ "${result:0:9}" == "/opt/odoo" ]; then
        if [ -n "$VF_PATH" ]; then
          result="$result/$VF_PATH"
        fi
      fi
    fi
    if [ -n "$VF_FN" ]; then
      result="$result/$VF_FN"
    fi
}

OPTOPTS=(h        a       c        i       m      n            O         p         r            V           v           w        y        0       1       2)
OPTDEST=(opt_help opt_all opt_conf opt_iar opt_md opt_dry_run  odoo_ver  opt_pkg   opt_rep      opt_version opt_verbose opt_igns opt_para opt_sts opt_sts opt_2nd)
OPTACTI=(1        1       "="      1       1      1            "="       "="       "="          "*>"        1           1        1        0       1       1)
OPTDEFL=(0        0       ""       0       0      0            ""        ""        ""           ""          0           0        0        0       0       0)
OPTMETA=("help"   ""      "file"   ""      ""     "do nothing" "version" "package" "repository" "version"   "verbose"   ""       "parall" ""      ""      "")
OPTHELP=("this help"\
 "diff all files (ignore exclusion list)"\
 "configuration file (def ~/dev/.travis.conf)"\
 "use internal algorithm rather than standard recursive diff"\
 "ignore minor difference (i.e. remarks)"\
 "do nothing (dry-run)"\
 "select target Odoo version (may be 7, 8, 9 o 10)"\
 "select package name"\
 "select repository name"\
 "show version"\
 "verbose mode"\
 "ignore all space differences"\
 "side by side"\
 "initial status is true"\
 "initial status is false"\
 "undocumented")
OPTARGS=(source target)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ -z "$odoo_ver" -a -z "$source" ]; then
  opt_help=1
fi
if [ $opt_help -gt 0 ]; then
  print_help "Diff file between Odoo versions"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Odoo/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ $opt_all -gt 0 ]; then
  opt_iar=0
fi
if [[ " 10 9 8 7 " =~ [[:space:]]$odoo_ver[[:space:]] ]]; then
  odoo_ver="$odoo_ver.0"
fi
if [ -n "$opt_conf" -a -f "$opt_conf" ]; then
  TCONF=$opt_conf
else
  TCONF=$TDIR/.travis.conf
fi
CFG_init
conf_default
link_cfg $TCONF
vf_init

if [ $opt_2nd -eq 0 ]; then
  VF_PFX=/opt/odoo
  VF_OFVER=
  VFT_VER=
  VF_REP=
  VF_PKG=
  VF_PATH=
  VF_FN=
  get_path_ver "$source" "" "$opt_rep" "$opt_pkg"
  left=$result
  get_path_ver "$target" "" "$opt_rep" "$opt_pkg"
  right=$result
else
  left=$source
  right=$target
fi
if [ $opt_iar -gt 0 ]; then
  localdiff "$left" "$right"
else
  exec_diff "$left" "$right"
fi
exit $?
