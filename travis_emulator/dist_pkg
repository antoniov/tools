#! /bin/bash
# -*- coding: utf-8 -*-
# Copy package for git push on github.com
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
# git report to origin
# git fetch origin , poi, git reset --hard origin/8.0-ddt-based-on-packaging-preparation_fa
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/travis_emulator $HOME/dev" "travis_emulator")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.1.16



# main
OPTOPTS=(h        C         c        d        F         f         n            o        P         p         q           R         S        u       V           v           W          w         -)
OPTDEST=(opt_help opt_cpush opt_conf opt_diff opt_fetch opt_force opt_dry_run  opt_ids  opt_cpush opt_dpath opt_verbose opt_cpush opt_sts  opt_upd opt_version opt_verbose opt_whatis opt_cpush opt_sync)
OPTACTI=(1        "*>"      "="      "1>"     "1>"      1         1            "=>"     "*>"      "="       0           "*>"      "=>"     1       "*"         "+"         "=>"       "*>"      "1>")
OPTDEFL=(1        ""        ""       0        0         0         0            ""       ""        ""        -1          ""        ""       0       ""          -1          ""         ""        0)
OPTMETA=("help"   "commit"  "file"   "diff"   "fetch"   ""        "do nothing" "prj_id" "push"    "path"    "quiet"     "replace" "status" "upd"   "version"   "verbose"   "param"    "wep"     "sync")
OPTHELP=("this help"\
 "commit and push to production paths"\
 "configuration file"\
 "diff with local git path"\
 "fetch from local git path"\
 "force copy (with -C -P)"\
 "do nothing (dry-run)"\
 "push only external project ids (require -P)"\
 "push to external projects"\
 "declare local git path"\
 "silent mode"\
 "replace local git path"\
 "set development Status"\
 "do not update newer file (require -C -F -P or -R)"\
 "show version"\
 "verbose mode"\
 "whatis param value?"\
 "wep directory"\
 "refresh info for distribution")
OPTARGS=(pkg PRJNAME)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_help -gt 0 ]; then
  print_help "Copy package for distribution"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

opts_travis "$pkg"
CFG_init
conf_default
link_cfg $DIST_CONF $TCONF
if [ $opt_verbose -gt 1 ]; then set -x; fi
init_travis
prepare_env_travis ""
sts=$STS_SUCCESS

if [ "$opt_sts" ]; then
  if [ "$opt_sts" == "0" ]; then
    opt_sts=" 0 - WIP"
  elif [ "$opt_sts" == "1" ]; then
    opt_sts=" 1 - Planning"
  elif [ "$opt_sts" == "2" ]; then
    opt_sts=" 2 - Pre-Alpha"
  elif [ "$opt_sts" == "3" ]; then
    opt_sts=" 3 - Alpha"
  elif [ "$opt_sts" == "4" ]; then
    opt_sts=" 4 - Beta"
  elif [ "$opt_sts" == "5" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 6 - Mature"
  elif [ "$opt_sts" == "7" ]; then
    opt_sts=" 7 - Inactive"
  else
    echo "Invalid status:"
    echo "use $(basename $0) -n -S n PKGPATH"
    echo "where n is 0..7 for more info about status"
    exit $STS_FAILED
  fi
fi
if [ "$opt_sts" ]; then
  devstatus="$opt_sts"
else
  devstatus=""
fi
if [ "$opt_whatis" ]; then
  if [ "$opt_whatis" == "LGITPATH" -o "$opt_whatis" == "PKGPATH" -o "$opt_whatis" == "SETUP" -o "$opt_whatis" == "ODOO_SETUP" -o "$opt_whatis" == "REPOSNAME" ]; then
    echo "${!opt_whatis}"
  elif [ "$opt_whatis" == "PRJVERSION" ]; then
    echo "${prjversion}"
  else
    echo "Unknown!!"
  fi
  exit $STS_SUCCESS
fi
if [ $opt_dry_run -gt 0 ]; then
  if [ $opt_sync -gt 0 ]; then
    echo "$(basename $0) -n -- $PKGNAME $PRJNAME"
  elif [ $opt_diff -gt 0 ]; then
    echo "$(basename $0) -n -d -p \"$LGITPATH\" $PKGNAME $PRJNAME"
  elif [ "$opt_cpush" ]; then
    echo "$(basename $0) -n $opt_cpush -p \"$LGITPATH\" $PKGNAME $PRJNAME"
  elif [ $opt_fetch -gt 0 ]; then
    echo "$(basename $0) -n -f -p \"$LGITPATH\" $PKGNAME $PRJNAME"
  elif [ "$opt_sts" ]; then
    echo "$opt_sts"
  else
    echo "$(basename $0) -n -p \"$LGITPATH\" $PKGNAME $PRJNAME"
  fi
fi

if [ "$PRJNAME" != "Odoo" ]; then
  LSETUP=$PKGPATH/$PKGNAME/setup.py
  if [ -f $LSETUP ]; then
    DEVSSTS0=" 1 - Planning"
    if [ -z "$devstatus" ]; then
      devstatus=$(if [ -f $LSETUP ]; then echo ""; else echo "$DEVSSTS0"; fi)
    fi
    if [ -z "$devstatus" ]; then
      devstatus=$(if [ $(find . -executable -type f -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
    fi
    if [ -z "$devstatus" ]; then
      devstatus=$(if [ $(find . -type f -name "*.py" -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
    fi
    if [ -z "$devstatus" ]; then
      devstatus=$(grep " *'Development Status" $LSETUP 2>/dev/null|awk -F":" '{print $3}'|tr -d "\"',\r\n")
    fi
  fi
fi
if [ "$opt_cpush" == "-C" -o "$opt_cpush" == "-P" ]; then
  robocopy_init "$PRJNAME" "$PKGNAME"
  f_done=0
  for ii in {1..9}; do
    if [[ -n "$opt_ids" ]]; then
      if [[ ! "$ii" == "$opt_ids" ]]; then
        continue
      fi
    fi
    declare x=tgt${ii}path
    declare y=tgt${ii}params
    declare tgtpath="$(get_cfg_value 0 $x)"
    declare tgtparm="$(get_cfg_value 0 $y)"
    if [ -n "$tgtpath" ]; then
      tgtpath=$(expand_path "$tgtpath")
      declare z=tgt${ii}enable
      declare enabled="$(get_cfg_value 0 $z)"
      if [ ${enabled:-0} -eq 0 ]; then
        enabled=$opt_force
      fi
      if [ ${enabled:-0} -eq 2 -a "$opt_cpush" != "-C" ]; then
        enabled=0;
      elif [ ${enabled:-0} -eq 1 -a "$opt_cpush" == "-C" ]; then
        enabled=0;
      fi
      if [ ${enabled:-0} -gt 0 ]; then
        if [ "$tgtparm" ]; then
          declare $y=$(echo "$tgtparm"|sed 's:\\::g')
          [ $opt_verbose -gt 0 ] && echo "$ robocopy \"$PKGPATH\" \"$tgtpath\" \"ssh $tgtparm\""
          robocopy "$PKGPATH" "$tgtpath" "ssh $tgtparm"
        else
          [ $opt_verbose -gt 0 ] && echo "$ robocopy \"$PKGPATH\" \"$tgtpath\" \"ssh\""
          robocopy "$PKGPATH" "$tgtpath" "ssh"
        fi
        f_done=1
        if [ "$opt_cpush" == "-C" ]; then
          break
        fi
      fi
    fi
  done
  if [ $f_done -eq 0 ]; then
    echo "No destination found in configuration file $DIST_CONF"
    echo "Nothing is done"
  fi
  exit $STS_SUCCESS
fi
check_4_travis
install_dev
if [ "$PRJNAME" != "Odoo" ]; then
  if [ "$PKGNAME" != "$PRJNAME" ]; then
    echo "Warning: package name $PKGNAME and project name $PRJNAME are different!"
  else
    if [ $opt_dry_run -eq 0 -a $opt_diff -eq 0 ]; then
      # run_traced "cp $SETUP $PKGPATH/$PKGNAME/setup.py"
      echo "from setuptools import setup">$PKGPATH/$PKGNAME/setup.py
      echo "">>$PKGPATH/$PKGNAME/setup.py
      echo "setup(name='$PRJNAME',">>$PKGPATH/$PKGNAME/setup.py
      echo "      version='$prjversion',">>$PKGPATH/$PKGNAME/setup.py
      echo "      description='$prjdesc',">>$PKGPATH/$PKGNAME/setup.py
      echo "      classifiers=[">>$PKGPATH/$PKGNAME/setup.py
      echo "          'Development Status ::$devstatus',">>$PKGPATH/$PKGNAME/setup.py
      echo "      ])">>$PKGPATH/$PKGNAME/setup.py
    fi
  fi
fi
if [ "$opt_sts" ]; then
  exit $STS_SUCCESS
fi
if [ $opt_sync -gt 0 ]; then
  exit $STS_SUCCESS
fi
if [ "$opt_cpush" == "-w" ]; then
  clean_dirs "$PKGPATH"
  if [ "$PRJNAME" == "Odoo" ]; then
    cd $PKGPATH
  else
    cd $PKGPATH/$PKGNAME
  fi
  if [ "$PRJNAME" != "z0lib" ]; then
    if [ -f ./Makefile -a -f /opt/odoo/dev/Makefile ]; then
      rm -f ./Makefile
    fi
    if [ -f ./z0librc -a -f /etc/z0librc ]; then
      x=$(_install_z0librc -n)
      if [ -z "$x" ]; then
        rm -f ./z0librc
        ln -s /etc/z0librc ./
      fi
    fi
  elif [ "$PRJNAME" != "travis_emulator" ]; then
    if [ -d ./_travis -a -d /opt/odoo/dev/_travis ]; then
      rm -f ./_travis
    fi
  fi
  exit $STS_SUCCESS
fi
update_dev "$PRJNAME"
if [ "$PRJNAME" == "travis_emulator" ]; then
  if [ ! -d "$LGITPATH" ]; then
    exit $STS_SUCCESS
  fi
fi
if [ ! -d "$LGITPATH" ]; then
  echo "Invalid destination path $LGITPATH"
  exit $STS_FAILED
fi
dpath_parent=$LGITPATH
dpath_child=$LGITPATH/$PKGNAME
dpath_prj=$PKGPATH/$PRJNAME
if [ "$PRJNAME" == "Odoo" ]; then
  dpath_prj=$PKGPATH
  LGITLEV=0
else
  LGITLEV=1
fi
robocopy_init "$PRJNAME" "$PKGNAME"
if [ $opt_diff -gt 0 ]; then
  if [ $LGITLEV -gt 0 ]; then
    if [ $opt_verbose -gt 0 ]; then echo "$ diff $XLDF -rq $dpath_prj/ $LGITPATH/"; fi
    $TDIR/prjdiff $dpath_prj $LGITPATH
  else
    if [ $opt_verbose -gt 0 ]; then echo "$ diff $XLDF -rq $dpath_prj/ $LGITPATH/"; fi
    $TDIR/prjdiff $dpath_prj $LGITPATH
  fi
  exit $STS_SUCCESS
fi
if [ $opt_fetch -eq 0 ]; then
  if [ $LGITLEV -gt 0 ]; then
    for f in $(dir $PKGPATH); do
      # if [ $opt_verbose -gt 0 ]; then echo "$ robocopy \"$PKGPATH/$f\" \"$LGITPATH\""; fi
      robocopy "$PKGPATH/$f" "$LGITPATH"
    done
  else
    for f in $(dir $PKGPATH); do
      # if [ $opt_verbose -gt 0 ]; then echo "$ robocopy \"$PKGPATH/$f\" \"$LGITPATH/$f\""; fi
      robocopy "$PKGPATH/$f" "$LGITPATH/$f"
    done
  fi
  if [ ! -f ~/tools/pytok/Makefile ]; then
    if [ $opt_verbose -gt 0 ]; then echo "$ cp /opt/odoo/dev/Makefile ~/tools/pytok"; fi
    cp /opt/odoo/dev/Makefile ~/tools/pytok
  fi
else
  if [ $LGITLEV -gt 0 ]; then
    for f in $(dir $LGITPATH); do
      if [[ ! $f =~ .*~ ]]; then
        # if [ $opt_verbose -gt 0 ]; then echo "$ robocopy \"$LGITPATH/$f\" \"$PKGPATH/$PKGNAME/$f\""; fi
        robocopy "$LGITPATH/$f" "$PKGPATH/$PKGNAME/$f"
      fi
    done
  else
    for f in $(dir $LGITPATH); do
      if [[ ! $f =~ .*~ ]]; then
        # if [ $opt_verbose -gt 0 ]; then echo "$ robocopy \"$LGITPATH/$f\" \"$PKGPATH/$f\""; fi
        robocopy "$LGITPATH/$f" "$PKGPATH/$f"
      fi
    done
  fi
fi
# LGITPATH=$(readlink -e $LGITPATH/..)
# for f in $(dir $LGITPATH); do
#   if [ -d $LGITPATH/$f ]; then
#     if [ ! -f $LGITPATH/$f/z0librc ]; then
#       run_traced "ln -s $LGITPATH/z0lib/z0librc $LGITPATH/$f/z0librc"
#     fi
#   fi
# done
# if [ ! -f $LGITPATH/travis_emulator/_travis/z0librc ]; then
#   run_traced "ln -s $LGITPATH/z0lib/z0librc $LGITPATH/travis_emulator/_travis/z0librc"
# fi
# if [ ! -f $LGITPATH/travis_emulator/z0librc ]; then
#   run_traced "cp $LGITPATH/z0lib/z0librc $LGITPATH/travis_emulator/z0librc"
# fi
exit $STS_SUCCESS
