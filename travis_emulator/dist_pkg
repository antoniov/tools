#! /bin/bash
# -*- coding: utf-8 -*-
# Copy package for git push on github.com
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com

# git report to origin
# git fetch origin , poi, git reset --hard origin/8.0-ddt-based-on-packaging-preparation_fa

THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -f $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -f ./z0librc ]; then
. ./z0librc
elif [ -f ~/z0librc ]; then
. ~/z0librc
else
. /etc/z0librc
fi
TCONF=$TDIR/.$THIS.conf
. $TDIR/travisrc

__version__=0.1.68

# main
OPTOPTS=(h        C         c        d        F         n            P         p         R         S        u       V           v           W          w         -)
OPTDEST=(opt_help opt_cpush opt_conf opt_diff opt_fetch opt_dry_run  opt_cpush opt_dpath opt_cpush opt_sts  opt_upd opt_version opt_verbose opt_whatis opt_cpush opt_sync)
OPTACTI=(1        "*>"      "="      "1>"     "1>"      1             "*>"      "="       "*>"      "=>"    1       "*"         1           "=>"       "*>"      "1>")
OPTDEFL=(1        ""        ""       0        0         0            ""        ""        ""        ""       0       ""          0           ""         ""        0)
OPTMETA=("help"   "commit"  "file"   "diff"   "fetch"   "do nothing" "push"    "path"    "replace" "status" "upd"   "version"   "verbose"   "param"    "wep"     "sync")
OPTHELP=("this help"\
 "commit and push to production paths"\
 "configuration file"\
 "diff with local git path"\
 "fetch from local git path"\
 "do nothing (dry-run)"\
 "push to external projects"\
 "declare local git path"\
 "replace local git path"\
 "set development Status"\
 "do not update newer file (require -C -F -P or -R)"\
 "show version"\
 "verbose mode"\
 "whatis param value?"\
 "wep directory"\
 "refresh info for distribution")
OPTARGS=(pkg_path PRJNAME)

parseoptargs $@
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Copy package for distribution"\
  "(C) 2015 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ "$opt_conf" -a -f "$opt_conf" ]; then
  TCONF=$opt_conf
fi
if [ "$pkg_path" ]; then
  PKGPATH=$pkg_path
else
  PKGPATH=$PWD
fi
PKGPATH=$(set_pkgpath "$PKGPATH")
pkgname=$(basename $PKGPATH)
$(init_cfg)
$(active_cfg)
conf_default
link_cfg $DIST_CONF $TCONF
init_travis
if [ "$opt_dpath" ]; then
  LGITPATH="$opt_dpath"
else
  if [ "$REPOSNAME" ]; then
    declare LGITPATH=$(get_cfg_value "" "${REPOSNAME}_distpath")
  else
    declare LGITPATH=
  fi
  if [ -z "$LGITPATH" ]; then
    declare LGITPATH=$(get_cfg_value "" "${PRJNAME}_distpath")
  fi
  if [ -z "$LGITPATH" ]; then
    LGITPATH=$(get_cfg_value "" "distpath")
  fi
fi
LGITPATH=$(expand_path "$LGITPATH")
x=$(get_cfg_value "$1" "CONFN")
if [ "$x" ]; then
  DIST_CONF=$CONFN
else
  DIST_CONF=$(readlink -f $PKGPATH/$DIST_CONF)
fi

if [ "$opt_sts" ]; then
  if [ "$opt_sts" == "0" ]; then
    opt_sts=" 0 - WIP"
  elif [ "$opt_sts" == "1" ]; then
    opt_sts=" 1 - Planning"
  elif [ "$opt_sts" == "2" ]; then
    opt_sts=" 2 - Pre-Alpha"
  elif [ "$opt_sts" == "3" ]; then
    opt_sts=" 3 - Alpha"
  elif [ "$opt_sts" == "4" ]; then
    opt_sts=" 4 - Beta"
  elif [ "$opt_sts" == "5" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 6 - Mature"
  elif [ "$opt_sts" == "7" ]; then
    opt_sts=" 7 - Inactive"
  else
    echo "Invalid status:"
    echo "use $(basename $0) -n -S n PKGPATH"
    echo "where n is 0..7 for more info about status"
    exit 1
  fi
fi
if [ "$opt_sts" ]; then
  devstatus="$opt_sts"
else
  devstatus=""
fi
if [ "$opt_whatis" ]; then
  if [ "$opt_whatis" == "LGITPATH" -o "$opt_whatis" == "PKGPATH" -o "$opt_whatis" == "SETUP" -o "$opt_whatis" == "ODOO_SETUP" ]; then
    echo "${!opt_whatis}"
  else
    echo "Unknown!!"
  fi
  exit 0
fi
if [ $opt_dry_run -gt 0 ]; then
  if [ $opt_sync -gt 0 ]; then
    echo "$(basename $0) -n -- $pkgname $PRJNAME"
  elif [ $opt_diff -gt 0 ]; then
    echo "$(basename $0) -n -d -p \"$LGITPATH\" $pkgname $PRJNAME"
  elif [ "$opt_cpush" ]; then
    echo "$(basename $0) -n $opt_cpush -p \"$LGITPATH\" $pkgname $PRJNAME"
  elif [ $opt_fetch -gt 0 ]; then
    echo "$(basename $0) -n -f -p \"$LGITPATH\" $pkgname $PRJNAME"
  elif [ "$opt_sts" ]; then
    echo "$opt_sts"
  else
    echo "$(basename $0) -n -p \"$LGITPATH\" $pkgname $PRJNAME"
  fi
fi

if [ "$PRJNAME" != "Odoo" ]; then
  LSETUP=$PKGPATH/$pkgname/setup.py
  if [ -f $LSETUP ]; then
    DEVSSTS0=" 1 - Planning"
    if [ -z "$devstatus" ]; then
      devstatus=$(if [ -f $LSETUP ]; then echo ""; else echo "$DEVSSTS0"; fi)
    fi
    if [ -z "$devstatus" ]; then
      devstatus=$(if [ $(find . -executable -type f -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
    fi
    if [ -z "$devstatus" ]; then
      devstatus=$(if [ $(find . -type f -name "*.py" -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
    fi
    if [ -z "$devstatus" ]; then
      devstatus=$(grep " *'Development Status" $LSETUP 2>/dev/null|awk -F":" '{print $3}'|tr -d "\"',\r\n")
    fi
  fi
fi
if [ "$opt_cpush" == "-C" -o "$opt_cpush" == "-P" ]; then
  if [ -f $DIST_CONF ]; then
    robocopy_init "$PRJNAME" "$pkgname"
    f_done=0
    for ii in {1..9}; do
      declare x=tgt${ii}path
      declare y=tgt${ii}params
      declare tgtpath=$(grep "^$x *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
      declare tgtparm=$(grep "^$y *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
      if [ -z "$tgtpath" ]; then
        declare tgtpath=$(grep "^$x *=" $TCONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
        declare tgtparm=$(grep "^$y *=" $TCONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
      fi
      if [ "$tgtpath" ]; then
        tgtpath=$(expand_path "$tgtpath")
        declare z=tgt${ii}enable
        declare enabled=$(grep "^$z *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
        if [ ${enabled:-0} -eq 2 ]; then
          if [ "$opt_cpush" != "-C" ]; then enabled=0; fi
        fi
        if [ ${enabled:-0} -gt 0 ]; then
          if [ "tgtparm" ]; then
            declare $y=$(echo "$tgtparm"|sed 's:\\::g')
            if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$PWD\" \"$tgtpath\" \"ssh $tgtparm\""; fi
            robocopy "$PWD" "$tgtpath" "ssh $tgtparm"
          else
           if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$PWD\" \"$tgtpath\" \"ssh\""; fi
            robocopy "$PWD" "$tgtpath" "ssh"
          fi
        fi
        f_done=1
      fi
    done
    if [ $f_done -eq 0 ]; then
      echo "No destination found in file $DIST_CONF"
      echo "Nothing is done"
    fi
  else
    echo "No configuration file $DIST_CONF for distribution"
    echo "Nothing is done"
  fi
  exit 0
fi
if [ ! -d "$PKGPATH" ]; then
  echo "Invalid package name $pkgname"
  exit 1
fi
install_dev
if [ "$PRJNAME" != "Odoo" ]; then
  if [ "$pkgname" != "$PRJNAME" ]; then
    echo "Warning: package name $pkgname and project name $PRJNAME are different!"
  else
    if [ $opt_dry_run -eq 0 -a $opt_diff -eq 0 ]; then
      if [ $opt_verbose -gt 0 ]; then echo "> cp $SETUP $PKGPATH/$pkgname/setup.py"; fi
      echo "from setuptools import setup">$PKGPATH/$pkgname/setup.py
      echo "">>$PKGPATH/$pkgname/setup.py
      echo "setup(name='$PRJNAME',">>$PKGPATH/$pkgname/setup.py
      echo "      version='$prjversion',">>$PKGPATH/$pkgname/setup.py
      echo "      description='$prjdesc',">>$PKGPATH/$pkgname/setup.py
      echo "      classifiers=[">>$PKGPATH/$pkgname/setup.py
      echo "          'Development Status ::$devstatus',">>$PKGPATH/$pkgname/setup.py
      echo "      ])">>$PKGPATH/$pkgname/setup.py
    fi
  fi
fi
if [ "$opt_sts" ]; then
  exit 0
fi
if [ $opt_sync -gt 0 ]; then
  exit 0
fi
if [ "$opt_cpush" == "-w" ]; then
  clean_dirs "$PKGPATH"
  if [ "$PRJNAME" == "Odoo" ]; then
    cd $PKGPATH
  else
    cd $PKGPATH/$pkgname
  fi
  if [ "$PRJNAME" != "z0lib" ]; then
    if [ -f ./Makefile -a -f /opt/odoo/dev/Makefile ]; then
      rm -f ./Makefile
      ln -s /opt/odoo/dev/Makefile ./
    fi
    if [ -f ./z0librc -a -f /etc/z0librc ]; then
      x=$(_install_z0librc -n)
      if [ -z "$x" ]; then
        rm -f ./z0librc
        ln -s /etc/z0librc ./
      fi
    fi
  fi
  exit 0
fi
update_dev "$PRJNAME"
if [ "$PRJNAME" == "travis_emulator" ]; then
  if [ ! -d "$LGITPATH" ]; then
    exit 0
  fi
fi
if [ ! -d "$LGITPATH" ]; then
  echo "Invalid destination path $LGITPATH"
  exit 1
fi
dpath_parent=$LGITPATH
dpath_child=$LGITPATH/$pkgname
dpath_prj=$PKGPATH/$PRJNAME
if [ "$PRJNAME" == "Odoo" ]; then
  dpath_prj=$PKGPATH
  LGITLEV=0
else
  LGITLEV=1
fi
robocopy_init "$PRJNAME" "$pkgname"
if [ $opt_diff -gt 0 ]; then
  if [ $LGITLEV -gt 0 ]; then
    if [ $opt_verbose -gt 0 ]; then echo "> diff $XLDF -rq $dpath_prj/ $LGITPATH/"; fi
    $TDIR/prjdiff $dpath_prj $LGITPATH
  else
    if [ $opt_verbose -gt 0 ]; then echo "> diff $XLDF -rq $dpath_prj/ $LGITPATH/"; fi
    $TDIR/prjdiff $dpath_prj $LGITPATH
  fi
  exit 0
fi
if [ $opt_fetch -eq 0 ]; then
  if [ $LGITLEV -gt 0 ]; then
    for f in $(dir $PKGPATH); do
      if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$PKGPATH/$f\" \"$LGITPATH\""; fi
      robocopy "$PKGPATH/$f" "$LGITPATH"
    done
  else
    for f in $(dir $PKGPATH); do
      if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$PKGPATH/$f\" \"$LGITPATH/$f\""; fi
      robocopy "$PKGPATH/$f" "$LGITPATH/$f"
    done
  fi
else
  if [ $LGITLEV -gt 0 ]; then
    for f in $(dir $LGITPATH); do
      if [[ ! $f =~ .*~ ]]; then
        if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$LGITPATH/$f\" \"$PKGPATH/$pkgname/$f\""; fi
        robocopy "$LGITPATH/$f" "$PKGPATH/$pkgname/$f"
      fi
    done
  else
    for f in $(dir $LGITPATH); do
      if [[ ! $f =~ .*~ ]]; then
        if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$LGITPATH/$f\" \"$PKGPATH/$f\""; fi
        robocopy "$LGITPATH/$f" "$PKGPATH/$f"
      fi
    done
  fi
fi
exit 0
