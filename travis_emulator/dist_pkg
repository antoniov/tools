#! /bin/bash
# -*- coding: utf-8 -*-
# Copy package for git push on github.com
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com

if [ -f z0librc ]; then
. ./z0librc
elif [ -f ~/z0librc ]; then
. ~/z0librc
else
. /etc/z0librc
fi
MYDIR=$(echo $(readlink -f $(dirname $0)))
. $MYDIR/travisrc

__version__="0.1.34"

# main
OPTOPTS=(h        c          d        f         n            O              p         S        V           -)
OPTDEST=(opt_help opt_commit opt_diff opt_fetch opt_dry_run  opt_own        opt_dpath opt_sts  opt_version opt_sync)
OPTACTI=(1        "1>"       1        1         1            "="            "=>"      "=>"     "*"         "1>")
OPTDEFL=(1        0          0        0         0            "openerp:ERPs" ""        ""       ""          0)
OPTMETA=("help"   "commit"   "diff"   "fetch"   "do nothing" "uid:gid"      "path"    "status" "version"   "sync")
OPTHELP=("this help"\
 "push commit to external projects"\
 "diff with distribution directory"\
 "do nothing (dry-run)"\
 "set owner user:group (def openerp:ERPs)"\
 "local path for git cloned project"\
 "set evelopment Status"\
 "show version"\
  "refresh info on distribution directory")
OPTARGS=(pkg_path prjname)

parseoptargs $@
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Copy package for github"\
  "(C) 2015 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

robocopy () {
    if [ -d "$f" ]; then
      t="d"
    else
      t="f"
    fi
    fn=$(basename $f)
    if [ "$prjname" == "Odoo" ]; then
      v=1
      if [ "$fn" == "Makefile" ]; then v=4; fi
    else
      v=0
      if [ "$fn" == "Makefile" ]; then v=5; fi
      if [ "$fn" == "README.rst" ]; then v=2; fi
      if [ "$fn" == "README.md" ]; then v=2; fi
      if [ "$fn" == "setup.py" ]; then v=3; fi
      if [ "$fn" == "$pkgname" ]; then v=1; fi
    fi
    l=${#fn}
    ((l=l-4))
    for x in .pyc .log .bak; do
      if [ "${fn:l}" == "$x" ]; then v=0; fi
    done
    if [ $v -eq 1 ]; then
      if [ "$t" == "d" ]; then
        if [ $opt_fetch -gt 0 ]; then
          echo "rsync -ab --del --copy-links $X $opt_dpath/$f/ $PKGPATH/$f/"
          rsync -ab --del --copy-links $X --chmod=g+rw,o+rw $opt_dpath/$f/ $PKGPATH/$f/
        else
          echo "rsync -ab --del --copy-links $X $PKGPATH/$f/ $opt_dpath/$f/"
          rsync -ab --del --copy-links $X --chmod=g+rw,o+rw $PKGPATH/$f/ $opt_dpath/$f/
        fi
      else
        if [ $opt_fetch -gt 0 ]; then
          echo "cp $opt_dpath/$f $PKGPATH/"
          (($opt_dry_run))||cp $opt_dpath/$f $PKGPATH/
        else
          echo "cp $PKGPATH/$f $opt_dpath/"
          (($opt_dry_run))||cp $PKGPATH/$f $opt_dpath/
        fi
      fi
    elif [ $v -eq 2 ]; then
      if [ $opt_fetch -eq 0 ]; then
        echo "cp $PKGPATH/$f $dpath_child/$fn"
        (($opt_dry_run))||cp $PKGPATH/$f $dpath_child/$fn
      fi
    elif [ $v -eq 3 ]; then
      if [ $opt_fetch -eq 0 ]; then
         echo "cp $PKGPATH/$pkgname/setup.py $dpath_child/$fn"
        (($opt_dry_run))||cp $PKGPATH/$pkgname/setup.py $dpath_child/$fn
      fi
    elif [ $v -eq 4 ]; then
      if [ $opt_fetch -eq 0 ]; then
        echo "cp $MAKEF $opt_dpath/"
        (($opt_dry_run))||cp $MAKEF $opt_dpath/
      fi
    elif [ $v -eq 5 ]; then
      if [ $opt_fetch -eq 0 ]; then
        echo "cp $MAKEF $dpath_child/$fn"
        (($opt_dry_run))||cp $MAKEF $dpath_child/$fn
      fi
    fi
}

roboown () {
    if [ $opt_fetch -eq 0 ]; then
      if [ "$prjname" != "Odoo" -a -f $PKGPATH/$pkgname/.coveragerc ]; then
        echo "cp $PKGPATH/$pkgname/.coveragerc $opt_dpath/.coveragerc"
        (($opt_dry_run))||cp $PKGPATH/$pkgname/.coveragerc $opt_dpath/.coveragerc
      fi
      if [ $opt_dry_run -eq 0 ]; then
        for x in .pyc .log .bak; do
          find $dpath_child -name "*$x" -exec rm -f '{}' \;
        done
        find $dpath_child -name ".coverage" -exec rm -f '{}' \;
        if dir ~/*-*.out 1>/dev/null 2>&1
        then
          rm -f ~/*-*.out
        fi
      fi
      if [ $opt_dry_run -eq 0 ]; then
        dotmode=$(shopt -p dotglob)
        chown -R odoo:ERPs $dpath_child
        chmod -R u+rwX,g+rwX $dpath_child
        $dotmode
      else
        echo "chown -R odoo:ERPs $dpath_child"
        echo "chmod -R u+rwX,g+rwX $dpath_child"
      fi
      if [ "$prjname" != "Odoo" ]; then
        if [ -d $opt_dpath/$pkgname/cover ]; then
          if [ $opt_dry_run -eq 0 ]; then
            rm -fR $opt_dpath/$pkgname/cover
          fi
        fi
        if [ -h $PKGPATH/$pkgname/Makefile ]; then
          echo "cp $MAKEF $dpath_child/Makefile"
          (($opt_dry_run))||rm -f $dpath_child/Makefile
          (($opt_dry_run))||cp $MAKEF $dpath_child/Makefile
        fi
      fi
    fi
}

if [ "$opt_sts" ]; then
  if [ "$opt_sts" == "0" ]; then
    opt_sts=" 0 - WIP"
  elif [ "$opt_sts" == "1" ]; then
    opt_sts=" 1 - Planning"
  elif [ "$opt_sts" == "2" ]; then
    opt_sts=" 2 - Pre-Alpha"
  elif [ "$opt_sts" == "3" ]; then
    opt_sts=" 3 - Alpha"
  elif [ "$opt_sts" == "4" ]; then
    opt_sts=" 4 - Beta"
  elif [ "$opt_sts" == "5" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 6 - Mature"
  elif [ "$opt_sts" == "7" ]; then
    opt_sts=" 7 - Inactive"
  else
    echo "Invalid status:"
    echo "use $(basename $0) -n -S n pkg_path"
    echo "where n is 0..7 for more info about status"
    exit 1
  fi
fi
if [ $opt_dry_run -gt 0 ]; then
  if [ $opt_sync -gt 0 ]; then
    echo "$(basename $0) -n -- $pkg_path $prjname"
  elif [ $opt_diff -gt 0 ]; then
    echo "$(basename $0) -n -d -p \"$opt_dpath\" $pkg_path $prjname"
  elif [ $opt_commit -gt 0 ]; then
    echo "$(basename $0) -n -c $pkg_path $prjname"
  elif [ $opt_fetch -gt 0 ]; then
    echo "$(basename $0) -n -f -p \"$opt_dpath\" $pkg_path $prjname"
  elif [ "$opt_sts" ]; then
    echo "$opt_sts"
  else
    echo "$(basename $0) -n -p \"$opt_dpath\" $pkg_path $prjname"
  fi
  # set -x  # debug
fi
if [ "$pkg_path" ]; then
  PKGPATH=$pkg_path
fi
PKGPATH=$(set_pkgpath "$PKGPATH")
pkgname=$(basename $PKGPATH)
SETUP=$(if [ -f $ODOO_SETUP ]; then echo "$ODOO_SETUP"; elif [ -f setup.py ]; then echo "setup.py"; else echo "$ODOO_SETUP"; fi)
if [ "$opt_sts" ]; then
  devstatus="$opt_sts"
else
  devstatus=""
fi
if [ "$SETUP" == "$ODOO_SETUP" ]; then
  if [ -z "$prjname" ]; then
    prjname="Odoo"
  fi
  if [ -f $ODOO_SETUP ]; then
    prjversion=$(grep "'version' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"', \r\n")
    prjdesc=$(grep "'name' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"',\r\n")
  else
    prjversion=""
    prjdesc="Unrecognized Odoo module"
  fi
else
  if [ -z "$prjname" ]; then
    prjname=$(grep "[^a-zA-Z0-9_]name *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
    if [ "$prjname" == "odoo" ]; then
      prjname=Odoo
    fi
  fi
  prjversion=$(grep "[^a-zA-Z0-9_]version *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
  if [ "$prjversion" == "version" ]; then
    prjversion=""
  fi
  prjdesc=$(grep "[^a-zA-Z0-9_]description *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"',\r\n")
  if [ "$prjdesc" == "description" ]; then
    prjdesc="Unrecognized Odoo module"
  fi
fi
if [ "$prjname" != "Odoo" ]; then
  LSETUP=$PKGPATH/$pkgname/setup.py 
  DEVSSTS0=" 1 - Planning"
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ -f $LSETUP ]; then echo ""; else echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ $(find . -executable -type f -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ $(find . -type f -name "*.py" -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(grep " *'Development Status" $LSETUP 2>/dev/null|awk -F":" '{print $3}'|tr -d "\"',\r\n")
  fi
fi
if [ $opt_commit -gt 0 ]; then
  if [ -f $DIST_CONF ]; then
    find $PWD -name "*.pyc" -exec rm -f '{}' \;
    f_done=0
    tgt1path=$(grep "^tgt1path *=" $DIST_CONF 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
    tgt1path=$(echo "$tgt1path"|sed s:\$name:$pkgname:)
    if [ "$tgt1path" ]; then
      echo "rsync -avzhe ssh $PWD/ $tgt1path"
      rsync -avzhe ssh $PWD $tgt1path
      f_done=1
    fi
    tgt2path=$(grep "^tgt2path *=" $DIST_CONF 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
    tgt2path=$(echo "$tgt2path"|sed s:\$name:$pkgname:)
    if [ "$tgt2path" ]; then
      echo "rsync -avzhe ssh $PWD/ $tgt2path"
      rsync -avzhe ssh $PWD $tgt2path
      f_done=1
    fi
    if [ $f_done -eq 0 ]; then
      echo "No destination found in file $DIST_CONF"
      echo "Nothing is done"
    fi
  else
    echo "No configuration file $DIST_CONF for distribution"
    echo "Nothing is done"
  fi
  exit 0
fi
if [ ! -d "$PKGPATH" ]; then
  echo "Invalid package name $pkgname"
  exit 1
fi
if [ "$prjname" != "Odoo" ]; then
  if [ "$pkgname" != "$prjname" ]; then
    echo "Warning: package name $pkgname and project name $prjname are different!"
  else
    if [ $opt_dry_run -eq 0 -a $opt_diff -eq 0 ]; then 
      echo "from setuptools import setup">$PKGPATH/$pkgname/setup.py
      echo "">>$PKGPATH/$pkgname/setup.py
      echo "setup(name='$prjname',">>$PKGPATH/$pkgname/setup.py
      echo "      version='$prjversion',">>$PKGPATH/$pkgname/setup.py
      echo "      description='$prjdesc',">>$PKGPATH/$pkgname/setup.py
      echo "      classifiers=[">>$PKGPATH/$pkgname/setup.py
      echo "          'Development Status ::$devstatus',">>$PKGPATH/$pkgname/setup.py
      echo "      ])">>$PKGPATH/$pkgname/setup.py
    fi
  fi
fi
if [ "$prjname" == "travis_emulator" ]; then
  XDPATH=$(echo "$(dirname $MAKEF)")
  RFLIST="beauty dist_pkg Makefile topep8 travis travisrc wok_doc wok_doc.py"
  xvalid=1
  for x in $RFLIST; do
    if [ ! -f $PKGPATH/$pkgname/$x ]; then
      xvalid=0
    fi
  done
  if [ $xvalid -eq 0 ]; then
     echo "Invalid package travis_emulator!"
     exit 1
  fi
  if [ -z "$opt_sts" ]; then
    for x in $RFLIST; do
      if [ -f $PKGPATH/$pkgname/$x ]; then
        if [ $opt_diff -gt 0 ]; then
          if [ "$(diff -rq -x '*.pyc' $PKGPATH/$pkgname/$x $XDPATH/$x)" ]; then
            # echo -e "$PKGPATH/$pkgname/$x\t$XDPATH/$x"
            # diff -y --suppress-common-lines $PKGPATH/$pkgname/$x $XDPATH/$x|less
            diff -rq -x '*.pyc' $PKGPATH/$pkgname/$x $XDPATH/$x
          fi
        elif [ $opt_fetch -gt 0 ]; then
          echo "cp $XDPATH/$x $PKGPATH/$pkgname/$x"
          (($opt_dry_run))||cp $XDPATH/$x $PKGPATH/$pkgname/$x
        else
          echo "cp $PKGPATH/$pkgname/$x $XDPATH/$x"
          (($opt_dry_run))||cp $PKGPATH/$pkgname/$x $XDPATH/$x
        fi
      fi
    done
    MAKEF=$PKGPATH/$pkgname/Makefile
    if [ $opt_diff -eq 0 -a $opt_fetch -eq 0 ]; then
      chown -R $opt_own $XDPATH
      chmod -R u+rw,g+rw $XDPATH
    fi
  fi
fi
if [ $opt_dry_run -eq 0 -a $opt_diff -eq 0 -a $opt_fetch -eq 0 ]; then
  dotmode=$(shopt -p dotglob)
  if [ "$prjname" == "Odoo" ]; then
    chown -R $opt_own $PKGPATH
    chmod -R u+rw,g+rw $PKGPATH
  else
    chown $opt_own $PKGPATH
    chmod u+rw,g+rw $PKGPATH
    chown $opt_own $PKGPATH/$pkgname
    chmod u+rw,g+rw $PKGPATH/$pkgname
  fi
  $dotmode
fi
if [ "$opt_sts" ]; then
  exit 0
fi
if [ $opt_sync -gt 0 ]; then
  exit 0
fi
if [ ! -d "$opt_dpath" ]; then
  echo "Invalid destination path $opt_dpath"
  exit 1
fi
dpath_parent=$opt_dpath
dpath_child=$opt_dpath/$pkgname
if [ "$prjname" == "Odoo" ]; then
  opt_dpath=$dpath_child
  if [ ! -d "$opt_dpath" ]; then
    echo "Invalid destination path $opt_dpath"
    exit 1
  fi
fi
if [ "$PKGPATH" == "$opt_dpath" ]; then
  echo "Invalid package name $pkgname"
  exit 1
fi
if [ $opt_diff -gt 0 ]; then
  # echo "  diff -rq $PKGPATH/ $opt_dpath/"
  diff -rq -x '*.pyc' $PKGPATH/ $opt_dpath/
  if [ $? -eq 0 ]; then
    echo "No difference found"
  fi
  exit 0
fi
if [ $opt_dry_run -eq 0 ]; then
  X=
else
  X="--dry-run"
fi
for x in .pyc .log .bak build/ .coverage/ .git/; do
    X="$X --exclude *$x"
done
if [ $opt_fetch -eq 0 ]; then
  for f in $(dir $PKGPATH)
  do
    robocopy
  done
else
  for f in $(dir $opt_dpath)
  do
    robocopy
  done
fi
roboown
# echo "Now remember:"
# echo "$ cd $PKGPATH"
# echo "$ python setup.py register"
# echo "$ python setup.py sdist"
# echo "$ python setup.py register sdist upload"
exit 0
