#! /bin/bash
# -*- coding: utf-8 -*-
# Copy package for git push on github.com
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com

if [ -f ./z0librc ]; then
. ./z0librc
elif [ -f ~/z0librc ]; then
. ~/z0librc
else
. /etc/z0librc
fi
THIS=$(basename $0)
TDIR=$(echo $(readlink -f $(dirname $0)))
DIST_GCONF=$TDIR/$THIS.conf
. $TDIR/travisrc

__version__="0.1.42"

# main
OPTOPTS=(h        C         c        d        F         n            O              P         p         R         S        V           v           -)
OPTDEST=(opt_help opt_cpush opt_conf opt_diff opt_fetch opt_dry_run  opt_own        opt_cpush opt_dpath opt_cpush opt_sts  opt_version opt_verbose opt_sync)
OPTACTI=(1        "*>"      "="      1        1         1            "="            "*>"      "="       "*>"      "=>"     "*"         1           "1>")
OPTDEFL=(1        ""        ""       0        0         0            "openerp:ERPs" ""        ""        ""        ""       ""          0           0)
OPTMETA=("help"   "commit"  "file"   "diff"   "fetch"   "do nothing" "uid:gid"      "push"    "path"    "replace" "status" "version"   "verbose"   "sync")
OPTHELP=("this help"\
 "commit and push to production project"\
 "configuration file"\
 "diff with local git path"\
 "fetch from local git path"\
 "do nothing (dry-run)"\
 "set owner user:group (def openerp:ERPs)"\
 "push to external projects"\
 "local git path"\
 "replace local git path"\
 "set development Status"\
 "show version"\
 "verbose mode"\
 "refresh info for distribution")
OPTARGS=(pkg_path prjname)

parseoptargs $@
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Copy package for github"\
  "(C) 2015 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ $opt_dry_run -gt 0 ]; then
  opts_dry_run=-n
else
  opts_dry_run=
fi
if [ "$opt_conf" -a -f "$opt_conf" ]; then
  DIST_GCONF=$opt_conf
fi
if [ "$pkg_path" ]; then
  PKGPATH=$pkg_path
fi
PKGPATH=$(set_pkgpath "$PKGPATH")
pkgname=$(basename $PKGPATH)
SETUP=$(if [ -f $ODOO_SETUP ]; then echo "$ODOO_SETUP"; elif [ -f setup.py ]; then echo "setup.py"; else echo "$ODOO_SETUP"; fi)
if [ "$SETUP" == "$ODOO_SETUP" ]; then
  if [ -z "$prjname" ]; then
    prjname="Odoo"
  fi
  if [ -f $ODOO_SETUP ]; then
    prjversion=$(grep "'version' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"', \r\n")
    prjdesc=$(grep "'name' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"',\r\n")
  else
    prjversion=""
    prjdesc="Unrecognized Odoo module"
  fi
else
  if [ -z "$prjname" ]; then
    prjname=$(grep "[^a-zA-Z0-9_]name *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
    if [ "$prjname" == "odoo" ]; then
      prjname=Odoo
    fi
  fi
  prjversion=$(grep "[^a-zA-Z0-9_]version *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
  if [ "$prjversion" == "version" ]; then
    prjversion=""
  fi
  prjdesc=$(grep "[^a-zA-Z0-9_]description *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"',\r\n")
  if [ "$prjdesc" == "description" ]; then
    prjdesc="Unrecognized Odoo module"
  fi
fi
declare DPATH=$(grep "^${prjname}_distpath *=" $DIST_GCONF 2>/dev/null|awk -F"[a-z ]=" '{print $2}'|tr -d "\"', \r\n")
if [ -z "$DPATH" ]; then
  declare DPATH=$(grep "^distpath *=" $DIST_GCONF 2>/dev/null|awk -F"[a-z ]=" '{print $2}'|tr -d "\"', \r\n")
fi
if [ "$opt_dpath" ]; then
  DPATH="$opt_dpath"
else
  DPATH=${DPATH/\$\{pkgpath\}/$PKGPATH}
  DPATH=${DPATH/\$\{pkgname\}/$pkgname}
  DPATH=${DPATH/\$\{prjname\}/$prjname}
fi
if [ "$opt_sts" ]; then
  if [ "$opt_sts" == "0" ]; then
    opt_sts=" 0 - WIP"
  elif [ "$opt_sts" == "1" ]; then
    opt_sts=" 1 - Planning"
  elif [ "$opt_sts" == "2" ]; then
    opt_sts=" 2 - Pre-Alpha"
  elif [ "$opt_sts" == "3" ]; then
    opt_sts=" 3 - Alpha"
  elif [ "$opt_sts" == "4" ]; then
    opt_sts=" 4 - Beta"
  elif [ "$opt_sts" == "5" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 6 - Mature"
  elif [ "$opt_sts" == "7" ]; then
    opt_sts=" 7 - Inactive"
  else
    echo "Invalid status:"
    echo "use $(basename $0) -n -S n pkg_path"
    echo "where n is 0..7 for more info about status"
    exit 1
  fi
fi
if [ "$opt_sts" ]; then
  devstatus="$opt_sts"
else
  devstatus=""
fi
if [ $opt_dry_run -gt 0 ]; then
  if [ $opt_sync -gt 0 ]; then
    echo "$(basename $0) -n -- $pkg_path $prjname"
  elif [ $opt_diff -gt 0 ]; then
    echo "$(basename $0) -n -d -p \"$DPATH\" $pkg_path $prjname"
  elif [ "$opt_cpush" ]; then
    echo "$(basename $0) -n $opt_cpush -p \"$DPATH\" $pkg_path $prjname"
  elif [ $opt_fetch -gt 0 ]; then
    echo "$(basename $0) -n -f -p \"$DPATH\" $pkg_path $prjname"
  elif [ "$opt_sts" ]; then
    echo "$opt_sts"
  else
    echo "$(basename $0) -n -p \"$DPATH\" $pkg_path $prjname"
  fi
fi

if [ "$prjname" != "Odoo" ]; then
  LSETUP=$PKGPATH/$pkgname/setup.py
  DEVSSTS0=" 1 - Planning"
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ -f $LSETUP ]; then echo ""; else echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ $(find . -executable -type f -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ $(find . -type f -name "*.py" -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(grep " *'Development Status" $LSETUP 2>/dev/null|awk -F":" '{print $3}'|tr -d "\"',\r\n")
  fi
fi
if [ "$opt_cpush" == "-C" -o "$opt_cpush" == "-P" ]; then
  if [ -f $DIST_CONF ]; then
    robocopy_init "$prjname" "$pkgname"
    f_done=0
    for ii in {1..9}; do
      declare x=tgt${ii}path
      declare y=tgt${ii}params
      declare tgtpath=$(grep "^$x *=" $DIST_GCONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
      declare tgtparm=$(grep "^$y *=" $DIST_GCONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
      if [ -z "$tgtpath" ]; then
        declare tgtpath=$(grep "^$x *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
        declare tgtparm=$(grep "^$y *=" $DIST_CONF 2>/dev/null|awk -F"[a-z0-9 ]=" '{print $2}'|tr -d "\"', \r\n")
      fi
      if [ "$tgtpath" ]; then
        declare z=tgt${ii}enable
        declare enabled=$(grep "^$z *=" $DIST_CONF 2>/dev/null|awk -F"[a-z ]=" '{print $2}'|tr -d "\"', \r\n")
        if [ ${enabled:-0} -eq 2 ]; then
          if [ "$opt_cpush" != "-C" ]; then enabled=0; fi
        fi
        if [ ${enabled:-0} -gt 0 ]; then
          if [ "tgtparm" ]; then
            declare $y=$(echo "$tgtparm"|sed 's:\\::g')
            if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$PWD\" \"$tgtpath\" \"ssh $tgtparm\""; fi
            robocopy "$PWD" "$tgtpath" "ssh $tgtparm"
          else
           if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$PWD\" \"$tgtpath\" \"ssh\""; fi
            robocopy "$PWD" "$tgtpath" "ssh"
          fi
        fi
        f_done=1
      fi
    done
    if [ $f_done -eq 0 ]; then
      echo "No destination found in file $DIST_CONF"
      echo "Nothing is done"
    fi
  else
    echo "No configuration file $DIST_CONF for distribution"
    echo "Nothing is done"
  fi
  exit 0
fi
if [ ! -d "$PKGPATH" ]; then
  echo "Invalid package name $pkgname"
  exit 1
fi
if [ "$prjname" != "Odoo" ]; then
  if [ "$pkgname" != "$prjname" ]; then
    echo "Warning: package name $pkgname and project name $prjname are different!"
  else
    if [ $opt_dry_run -eq 0 -a $opt_diff -eq 0 ]; then
      if [ $opt_verbose -gt 0 ]; then echo "> cp $SETUP $PKGPATH/$pkgname/setup.py"; fi
      echo "from setuptools import setup">$PKGPATH/$pkgname/setup.py
      echo "">>$PKGPATH/$pkgname/setup.py
      echo "setup(name='$prjname',">>$PKGPATH/$pkgname/setup.py
      echo "      version='$prjversion',">>$PKGPATH/$pkgname/setup.py
      echo "      description='$prjdesc',">>$PKGPATH/$pkgname/setup.py
      echo "      classifiers=[">>$PKGPATH/$pkgname/setup.py
      echo "          'Development Status ::$devstatus',">>$PKGPATH/$pkgname/setup.py
      echo "      ])">>$PKGPATH/$pkgname/setup.py
    fi
  fi
fi
if [ "$opt_sts" ]; then
  exit 0
fi
if [ $opt_sync -gt 0 ]; then
  exit 0
fi
if [ ! -d "$DPATH" ]; then
  echo "Invalid destination path $DPATH"
  exit 1
fi
dpath_parent=$DPATH
dpath_child=$DPATH/$pkgname
if [ "$prjname" == "travis_emulator" ]; then
  XDPATH=$(echo "$(dirname $MAKEF)")
  RFLIST="beauty dist_pkg Makefile topep8 travis travisrc wok_doc wok_doc.py"
  xvalid=1
  for x in $RFLIST; do
    if [ ! -f $PKGPATH/$pkgname/$x ]; then
      xvalid=0
    fi
  done
  if [ $xvalid -eq 0 ]; then
     echo "Invalid package travis_emulator!"
     exit 1
  fi
  if [ -z "$opt_sts" ]; then
    for x in $RFLIST; do
      if [ -f $PKGPATH/$pkgname/$x ]; then
        if [ $opt_diff -gt 0 ]; then
          if [ "$(diff -rq $XLDF $PKGPATH/$pkgname/$x $XDPATH/$x)" ]; then
            if [ $opt_verbose -gt 0 ]; then echo "> diff -rq $XLDF $PKGPATH/$pkgname/$x $XDPATH/$x"; fi
            diff -rq $XLDF $PKGPATH/$pkgname/$x $XDPATH/$x
          fi
        elif [ $opt_fetch -gt 0 ]; then
          if [ $opt_verbose -gt 0 ]; then echo "> $opt_dry_run||cp $XDPATH/$x $PKGPATH/$pkgname/$x"; fi
          (($opt_dry_run))||cp $XDPATH/$x $PKGPATH/$pkgname/$x
        else
          if [ $opt_verbose -gt 0 ]; then echo "> $opt_dry_run||cp $PKGPATH/$pkgname/$x $XDPATH/$x"; fi
          (($opt_dry_run))||cp $PKGPATH/$pkgname/$x $XDPATH/$x
        fi
      fi
    done
    MAKEF=$PKGPATH/$pkgname/Makefile
  fi
elif [ "$prjname" == "Odoo" ]; then
  DPATH=$dpath_child
  if [ ! -d "$DPATH" ]; then
    echo "Invalid destination path $DPATH"
    exit 1
  fi
fi
robocopy_init "$prjname" "$pkgname"
if [ $opt_diff -gt 0 ]; then
  if [ $opt_verbose -gt 0 ]; then echo "> diff -rq $XLDF $PKGPATH/$prjname $DPATH/"; fi
  diff -rq $XLDF $PKGPATH/$prjname $DPATH/
  if [ $? -eq 0 ]; then
    echo "No difference found"
  fi
  exit 0
fi
if [ $opt_fetch -eq 0 ]; then
  for f in $(dir $PKGPATH); do
    if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$PKGPATH/$f\" \"$DPATH\""; fi
    robocopy "$PKGPATH/$f" "$DPATH"
  done
  if [ $opt_verbose -gt 0 ]; then echo "> clean_dirs \"$DPATH\""; fi
  clean_dirs "$DPATH"
else
  for f in $(dir $DPATH); do
    if [ $opt_verbose -gt 0 ]; then echo "> robocopy \"$DPATH/$f\" \"$PKGPATH\""; fi
    robocopy "$DPATH/$f" "$PKGPATH"
  done
fi
exit 0
