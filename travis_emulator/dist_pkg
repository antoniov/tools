#! /bin/bash
# -*- coding: utf-8 -*-
# Copy package for git push on github.com
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com

if [ -f ./z0librc ]; then
. ./z0librc
elif [ -f ~/z0librc ]; then
. ~/z0librc
else
. /etc/z0librc
fi
TDIR=$(echo $(readlink -f $(dirname $0)))
. $TDIR/travisrc

__version__="0.1.38"

# main
OPTOPTS=(h        c          d        f         n            O              p         S        V           -)
OPTDEST=(opt_help opt_commit opt_diff opt_fetch opt_dry_run  opt_own        opt_dpath opt_sts  opt_version opt_sync)
OPTACTI=(1        "1>"       1        1         1            "="            "=>"      "=>"     "*"         "1>")
OPTDEFL=(1        0          0        0         0            "openerp:ERPs" ""        ""       ""          0)
OPTMETA=("help"   "commit"   "diff"   "fetch"   "do nothing" "uid:gid"      "path"    "status" "version"   "sync")
OPTHELP=("this help"\
 "push commit to external projects"\
 "diff with distribution directory"\
 "fetch from external project"\
 "do nothing (dry-run)"\
 "set owner user:group (def openerp:ERPs)"\
 "local path for git cloned project"\
 "set evelopment Status"\
 "show version"\
 "refresh info for distribution")
OPTARGS=(pkg_path prjname)

parseoptargs $@
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Copy package for github"\
  "(C) 2015 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ $opt_dry_run -gt 0 ]; then
  opts_dry_run=-n
else
  opts_dry_run=
fi


if [ "$opt_sts" ]; then
  if [ "$opt_sts" == "0" ]; then
    opt_sts=" 0 - WIP"
  elif [ "$opt_sts" == "1" ]; then
    opt_sts=" 1 - Planning"
  elif [ "$opt_sts" == "2" ]; then
    opt_sts=" 2 - Pre-Alpha"
  elif [ "$opt_sts" == "3" ]; then
    opt_sts=" 3 - Alpha"
  elif [ "$opt_sts" == "4" ]; then
    opt_sts=" 4 - Beta"
  elif [ "$opt_sts" == "5" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 5 - Production/Stable"
  elif [ "$opt_sts" == "6" ]; then
    opt_sts=" 6 - Mature"
  elif [ "$opt_sts" == "7" ]; then
    opt_sts=" 7 - Inactive"
  else
    echo "Invalid status:"
    echo "use $(basename $0) -n -S n pkg_path"
    echo "where n is 0..7 for more info about status"
    exit 1
  fi
fi
if [ $opt_dry_run -gt 0 ]; then
  if [ $opt_sync -gt 0 ]; then
    echo "$(basename $0) -n -- $pkg_path $prjname"
  elif [ $opt_diff -gt 0 ]; then
    echo "$(basename $0) -n -d -p \"$opt_dpath\" $pkg_path $prjname"
  elif [ $opt_commit -gt 0 ]; then
    echo "$(basename $0) -n -c $pkg_path $prjname"
  elif [ $opt_fetch -gt 0 ]; then
    echo "$(basename $0) -n -f -p \"$opt_dpath\" $pkg_path $prjname"
  elif [ "$opt_sts" ]; then
    echo "$opt_sts"
  else
    echo "$(basename $0) -n -p \"$opt_dpath\" $pkg_path $prjname"
  fi
  # set -x  # debug
fi
if [ "$pkg_path" ]; then
  PKGPATH=$pkg_path
fi
PKGPATH=$(set_pkgpath "$PKGPATH")
pkgname=$(basename $PKGPATH)
SETUP=$(if [ -f $ODOO_SETUP ]; then echo "$ODOO_SETUP"; elif [ -f setup.py ]; then echo "setup.py"; else echo "$ODOO_SETUP"; fi)
if [ "$opt_sts" ]; then
  devstatus="$opt_sts"
else
  devstatus=""
fi
if [ "$SETUP" == "$ODOO_SETUP" ]; then
  if [ -z "$prjname" ]; then
    prjname="Odoo"
  fi
  if [ -f $ODOO_SETUP ]; then
    prjversion=$(grep "'version' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"', \r\n")
    prjdesc=$(grep "'name' *:" $SETUP 2>/dev/null|awk -F":" '{print $2}'|tr -d "\"',\r\n")
  else
    prjversion=""
    prjdesc="Unrecognized Odoo module"
  fi
else
  if [ -z "$prjname" ]; then
    prjname=$(grep "[^a-zA-Z0-9_]name *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
    if [ "$prjname" == "odoo" ]; then
      prjname=Odoo
    fi
  fi
  prjversion=$(grep "[^a-zA-Z0-9_]version *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
  if [ "$prjversion" == "version" ]; then
    prjversion=""
  fi
  prjdesc=$(grep "[^a-zA-Z0-9_]description *=" $SETUP 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"',\r\n")
  if [ "$prjdesc" == "description" ]; then
    prjdesc="Unrecognized Odoo module"
  fi
fi
if [ "$prjname" != "Odoo" ]; then
  LSETUP=$PKGPATH/$pkgname/setup.py
  DEVSSTS0=" 1 - Planning"
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ -f $LSETUP ]; then echo ""; else echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ $(find . -executable -type f -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(if [ $(find . -type f -name "*.py" -cnewer $LSETUP|head -n1) ]; then echo "$DEVSSTS0"; fi)
  fi
  if [ -z "$devstatus" ]; then
    devstatus=$(grep " *'Development Status" $LSETUP 2>/dev/null|awk -F":" '{print $3}'|tr -d "\"',\r\n")
  fi
fi
if [ $opt_commit -gt 0 ]; then
  if [ -f $DIST_CONF ]; then
    find $PWD -name "*.pyc" -exec rm -f '{}' \;
    for ii in 1 2 3 4; do
      declare x=tgt${ii}path
      declare $x=$(grep "^$x *=" $DIST_CONF 2>/dev/null|awk -F"=" '{print $2}'|tr -d "\"', \r\n")
      if [ "${!x}" ]; then
        declare y=tgt${ii}params
        declare $y=$(grep "^$y *=" $DIST_CONF 2>/dev/null|awk -F"[a-z]=" '{print $2}'|tr -d "\"', \r\n")
        if [ "${!y}" ]; then
          declare $y=$(echo "${!y}"|sed 's:\\::g')
          echo rsync $opts_dry_run -avzhe \"ssh ${!y}\" $PWD/ ${!x}
          rsync -avzhe $opts_dry_run "ssh ${!y}" $PWD ${!x}
        else
          echo "rsync $opts_dry_run -avzhe ssh $PWD/ ${!x}"
          rsync $opts_dry_run -avzhe ssh $PWD ${!x}
        fi
        f_done=1
      fi
    done
    if [ $f_done -eq 0 ]; then
      echo "No destination found in file $DIST_CONF"
      echo "Nothing is done"
    fi
  else
    echo "No configuration file $DIST_CONF for distribution"
    echo "Nothing is done"
  fi
  exit 0
fi
if [ ! -d "$PKGPATH" ]; then
  echo "Invalid package name $pkgname"
  exit 1
fi
if [ "$prjname" != "Odoo" ]; then
  if [ "$pkgname" != "$prjname" ]; then
    echo "Warning: package name $pkgname and project name $prjname are different!"
  else
    if [ $opt_dry_run -eq 0 -a $opt_diff -eq 0 ]; then
      echo "from setuptools import setup">$PKGPATH/$pkgname/setup.py
      echo "">>$PKGPATH/$pkgname/setup.py
      echo "setup(name='$prjname',">>$PKGPATH/$pkgname/setup.py
      echo "      version='$prjversion',">>$PKGPATH/$pkgname/setup.py
      echo "      description='$prjdesc',">>$PKGPATH/$pkgname/setup.py
      echo "      classifiers=[">>$PKGPATH/$pkgname/setup.py
      echo "          'Development Status ::$devstatus',">>$PKGPATH/$pkgname/setup.py
      echo "      ])">>$PKGPATH/$pkgname/setup.py
    fi
  fi
fi
if [ "$opt_sts" ]; then
  exit 0
fi
if [ $opt_sync -gt 0 ]; then
  exit 0
fi
if [ ! -d "$opt_dpath" ]; then
  echo "Invalid destination path $opt_dpath"
  exit 1
fi
dpath_parent=$opt_dpath
dpath_child=$opt_dpath/$pkgname
if [ "$prjname" == "travis_emulator" ]; then
  XDPATH=$(echo "$(dirname $MAKEF)")
  RFLIST="beauty dist_pkg Makefile topep8 travis travisrc wok_doc wok_doc.py"
  xvalid=1
  for x in $RFLIST; do
    if [ ! -f $PKGPATH/$pkgname/$x ]; then
      xvalid=0
    fi
  done
  if [ $xvalid -eq 0 ]; then
     echo "Invalid package travis_emulator!"
     exit 1
  fi
  if [ -z "$opt_sts" ]; then
    for x in $RFLIST; do
      if [ -f $PKGPATH/$pkgname/$x ]; then
        if [ $opt_diff -gt 0 ]; then
          if [ "$(diff -rq -x '*.pyc' $PKGPATH/$pkgname/$x $XDPATH/$x)" ]; then
            diff -rq -x '*.pyc' $PKGPATH/$pkgname/$x $XDPATH/$x
          fi
        elif [ $opt_fetch -gt 0 ]; then
          echo "$opt_dry_run||cp $XDPATH/$x $PKGPATH/$pkgname/$x"
          (($opt_dry_run))||cp $XDPATH/$x $PKGPATH/$pkgname/$x
        else
          echo "$opt_dry_run||cp $PKGPATH/$pkgname/$x $XDPATH/$x"
          (($opt_dry_run))||cp $PKGPATH/$pkgname/$x $XDPATH/$x
        fi
      fi
    done
    MAKEF=$PKGPATH/$pkgname/Makefile
  fi
elif [ "$prjname" == "Odoo" ]; then
  opt_dpath=$dpath_child
  if [ ! -d "$opt_dpath" ]; then
    echo "Invalid destination path $opt_dpath"
    exit 1
  fi
fi
robocopy_init "$prjname" "$pkgname"
if [ $opt_diff -gt 0 ]; then
  diff -rq -x '*.pyc' $PKGPATH/ $opt_dpath/
  if [ $? -eq 0 ]; then
    echo "No difference found"
  fi
  exit 0
fi
if [ $opt_fetch -eq 0 ]; then
  for f in $(dir $PKGPATH); do
    robocopy "$PKGPATH/$f" "$opt_dpath"
  done
  clean_dirs "$opt_dpath"
else
  for f in $(dir $opt_dpath); do
    robocopy "$opt_dpath/$f" "$PKGPATH"
  done
fi
exit 0
