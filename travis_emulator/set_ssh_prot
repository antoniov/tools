#! /bin/bash
# -*- coding: utf-8 -*-
# Set default protection of user root dir in order to run ssh
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 1.0.2.7
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
HOME_DEV="$HOME/devel"
[[ -x $TDIR/../bin/python ]] && PYTHON=$(readlink -f $TDIR/../bin/python) || [[ -x $TDIR/python ]] && PYTHON="$TDIR/python" || PYTHON="python"
PYPATH=$(echo -e "import os,sys;\nTDIR='"$TDIR"';HOME_DEV='"$HOME_DEV"'\no=os.path\nHOME=os.environ.get('HOME');t=o.join(HOME,'tools')\nn=o.join(HOME,'pypi') if o.basename(HOME_DEV)=='venv_tools' else o.join(HOME,HOME_DEV, 'pypi')\nd=HOME_DEV if o.basename(HOME_DEV)=='venv_tools' else o.join(HOME_DEV,'venv')\ndef apl(l,p,b):\n if p:\n  p2=o.join(p,b,b)\n  p1=o.join(p,b)\n  if o.isdir(p2):\n   l.append(p2)\n  elif o.isdir(p1):\n   l.append(p1)\nl=[TDIR]\nv=''\nfor x in sys.path:\n if not o.isdir(t) and o.isdir(o.join(x,'tools')):\n  t=o.join(x,'tools')\n if not v and o.basename(x)=='site-packages':\n  v=x\nfor x in os.environ['PATH'].split(':'):\n if x.startswith(d):\n  d=x\n  break\nfor b in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if TDIR.startswith(d):\n  apl(l,d,b)\n elif TDIR.startswith(n):\n  apl(l,n,b)\n apl(l,v,b)\n apl(l,t,b)\nl=l+os.environ['PATH'].split(':')\ntdir=o.dirname(TDIR)\np=set()\npa=p.add\np=[x for x in l if x and (x.startswith(HOME) or x.startswith(HOME_DEV) or x.startswith(tdir)) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found in <$PYPATH>!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"

DIST_CONF=$(findpkg ".z0tools.conf" "$PYPATH")
TCONF="$HOME/.z0tools.conf"
CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"

__version__=1.0.3

OPTOPTS=(h        G         n            V           v)
OPTDEST=(opt_help opt_group opt_dry_run  opt_version opt_verbose)
OPTACTI=("+"      "="       "1>"         "*>"        1)
OPTDEFL=(1        ""        0            ""          0)
OPTMETA=("help"   "group"   "do nothing" "version"   "verbose")
OPTHELP=("this help"\
  "set group ownership"
  "do nothing (dry-run)"
  "show version"
  "verbose mode")
OPTARGS=(tgtpath)
parseoptargs "$@"

if [[ "$opt_version" ]]; then
  echo "$__version__"
  exit 0
fi
if [[ $opt_help -gt 0 ]]; then
  print_help "Set default protection of user root dir in order to run ssh" \
    "(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ $opt_verbose -gt 1 ]; then set -x; fi
if [ -z "$tgtpath" ]; then
  echo "Missed path"
  exit 1
fi
rootpath=$($READLINK -e $tgtpath)
if [ ! -d "$rootpath" ]; then
  echo "Path does not exist"
  exit 1
fi
if grep -q :$rootpath: /etc/passwd; then
  :
else
  echo "Path is not home directory of any user"
  exit 1
fi
tgtpath=$($READLINK -e $rootpath/.ssh)
if [ ! -d "$tgtpath" ]; then
  echo "$rootpath/.ssh does not exist"
  exit 1
fi
user=$(grep :$rootpath: /etc/passwd | head -n1 | awk -F: '{print $1}')
rgid=$(grep ^$user: /etc/passwd | awk -F: '{print $4}')
rgroup=$(grep :$rgid: /etc/group | head -n1 | awk -F: '{print $1}')
if [ -z $opt_group ]; then
  group=$rgroup
else
  group=$opt_group
fi
if [ $opt_dry_run -gt 0 ]; then
  opts_dry_run=--dry-run
else
  opts_dry_run=
fi
echo "Ownership = $user:$group ($rgroup)"
if [ "${tgtpath:0:5}" == "/opt/" ]; then
  echo "chown $opts_dry_run root:root /opt/"
  (($opt_dry_run)) || chown root:root /opt/
  echo "chmod $opts_dry_run u=rwx,g=rx,o=rx /opt/"
  (($opt_dry_run)) || chmod u=rwx,g=rx,o=rx /opt/
fi
echo "chown $opts_dry_run $user:$group $rootpath"
(($opt_dry_run)) || chown $user:$group $rootpath
# echo "chmod $opts_dry_run u=rwx,g=rwx,o-rwx $rootpath"
# (($opt_dry_run))||chmod u=rwx,g=rwx,o-rwx $rootpath
echo "chown $opts_dry_run $user:$rgroup $tgtpath"
(($opt_dry_run)) || chown $user:$rgroup $tgtpath
echo "chmod $opts_dry_run u=rwx,g-rwx,o-rwx $tgtpath"
(($opt_dry_run)) || chmod u=rwx,g-rwx,o-rwx $tgtpath
echo "chmod $opts_dry_run u=rwx,g-rwx,o-rwx $tgtpath/.."
(($opt_dry_run)) || chmod u=rwx,g-rwx,o-rwx $tgtpath/..
echo "chown $opts_dry_run $user:$rgroup $tgtpath/*"
(($opt_dry_run)) || chown $user:$rgroup $tgtpath/*
echo "chmod $opts_dry_run u=r,g-rwx,o-rwx $tgtpath/*"
(($opt_dry_run)) || chmod u=r,g-rwx,o-rwx $tgtpath/*
echo "chmod $opts_dry_run u=r,g=r,o=r $tgtpath/*.pub"
(($opt_dry_run)) || chmod u=r,g=r,o=r $tgtpath/*.pub
if [ -f $tgtpath/authorized_keys ]; then
  echo "chmod $opts_dry_run u=rw,g=r,o=r $tgtpath/authorized_keys"
  (($opt_dry_run)) || chmod u=rw,g=r,o=r $tgtpath/authorized_keys
fi
if [ -f $tgtpath/known_hosts ]; then
  echo "chmod $opts_dry_run u=rw,g=r,o=r $tgtpath/known_hosts"
  (($opt_dry_run)) || chmod u=rw,g=r,o=r $tgtpath/known_hosts
fi
dir -alhd $rootpath/ $tgtpath/. $tgtpath/..
dir -alh $tgtpath/
exit 0
