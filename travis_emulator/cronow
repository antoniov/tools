#! /bin/bash
# -*- coding: utf-8 -*-
# Execute now a selected statement from crontab
# Tool for test cron
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2017 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in $TDIR $TDIR/.. . .. $TDIR/../../z0lib /etc; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi

__version__=0.2.1

CRONTAB_SAVED=~/$THIS.crontab
CRONTAB_TMP=~/$THIS.crontab.$$.tmp
CRONTAB_TMP2=~/$THIS.crontab.$$_2.tmp
VIM_RC=~/$THIS.vim

extract_cmdline() {
    local cronline=$(grep "$opt_sel" $CRONTAB_SAVED|head -n1)
    local SUBM_TIME=$(date +"%H:%M" -d"+1 minutes")
    local SUBM_HH=$(echo $SUBM_TIME|awk -F\: '{print $1}')
    local SUBM_MM=$(echo $SUBM_TIME|awk -F\: '{print $2}')
    SK_CMD=
    SK_RCMD=
    SKTIME=
    local i=0
    for i in {1..19}; do
      if [ $i -eq 1 ]; then
        SK_CMD="$SUBM_MM"
        SKTIME="$SUBM_MM"
      elif [ $i -eq 2 ]; then
        SK_CMD="$SK_CMD $SUBM_HH"
        SKTIME="$SKTIME $SUBM_HH"
      else
        local p=$(echo "$cronline"|awk '{print $'$i'}')
        SK_CMD="$SK_CMD $p"
      fi
    done
    FQN_THIS=$(readlink -f $0)
    SK_RCMD="$SKTIME * * * SHELL=/bin/bash $FQN_THIS -R"
}

cron_wait() {
    local sts=0
    local cronline=$(crontab -l|grep "$FQN_THIS -R"|head -n1)
    if [ -n "$cronline" ]; then
      local SUBM_TIME=$(echo "$cronline"|awk '{print $2":"$1}')
    fi
    local wctr=20
    while [ -n "$cronline" -a $wctr -gt 0 ]; do
      local NOW_TIME=$(date +"%H:%M")
      echo "$NOW_TIME waiting for cron activation ($SUBM_TIME), please do not execute crontab command! $REM"
      sleep 6
      cronline=$(crontab -l|grep "$FQN_THIS -R"|head -n1)
      ((wctr--))
    done
    if [ $wctr -eq 0 ]; then
      sts=1
    fi
    return $sts
}

cron_list() {
    if [ -f $CRONTAB_SAVED ]; then
      cat $CRONTAB_SAVED
      echo "****************************************************************************"
      echo "$THIS is waiting for cron activation, please do not execute crontab command!"
    else
      crontab -l
    fi
    return $?
}

cron_runow() {
    local sts=0
    local del_saved=0
    if [ -f $CRONTAB_SAVED ]; then
      if [ $opt_force -eq 0 ]; then
        echo "$THIS already running or previous crashed execution"
        echo "Use -f for run after previous crash"
        return 1
      fi
    else
      crontab -l >$CRONTAB_SAVED
      if [ $opt_dry_run -gt 0 ]; then
        del_saved=1
      fi
    fi
    extract_cmdline
    if [ $opt_edit -eq 0 ]; then
      if [ $opt_dry_run -gt 0 ]; then
        echo "crontab statement simulated by DRY_RUN:"
        echo "$cronline"
      else
        cp $CRONTAB_SAVED $CRONTAB_TMP
        echo "$SK_CMD">>$CRONTAB_TMP
        echo "$SK_RCMD">>$CRONTAB_TMP
        if [ $opt_verbose -gt 0 ]; then
          echo "crontab statement added:"
          echo "$cronline"
        fi
        cat $CRONTAB_TMP|crontab
        sts=$?
      fi
    else
      if [ $opt_dry_run -eq 0 ]; then
        echo "GA">$VIM_RC
        echo "$SK_CMD">>$VIM_RC
        echo "$SK_RCMD">>$VIM_RC
        echo -e "\e">>$VIM_RC
        echo ":w!q">>$VIM_RC
        # VISUAL="vim -s $VIM_RC" crontab -e
        EDITOR="vim -s $VIM_RC" crontab -e
        sts=$?
      fi
    fi
    if [ $sts -eq 0 -a $opt_dry_run -eq 0 ]; then
      crontab -l >$CRONTAB_TMP
      diff -qr $CRONTAB_SAVED $CRONTAB_TMP &>/dev/null
      sts=$?
      if [ $sts -eq 0 ]; then
        sts=1
      else
        sts=0
      fi
    fi
    if [ $sts -ne 0 ]; then
      echo "Warning: crontab does not accept new jobs!!"
    fi
    if [ $del_saved -gt 0 ]; then
      rm -f $CRONTAB_SAVED
    fi
    return $sts
}

cron_recover() {
    local sts=0
    if [ -f $CRONTAB_SAVED ]; then
      if [ $opt_dry_run -eq 0 ]; then
        crontab -l >$CRONTAB_TMP
        head $CRONTAB_TMP -n-2>$CRONTAB_TMP2
        mv -f $CRONTAB_TMP2 $CRONTAB_TMP
        diff -qr $CRONTAB_SAVED $CRONTAB_TMP &>/dev/null
        sts=$?
        if [ $sts -eq -0 ]; then
          cat $CRONTAB_SAVED|crontab
          rm -f $CRONTAB_SAVED
        else
          echo "**********************************************"
          echo "Warning: crontab schedulation was modified during execution"
          echo "---- Initial crontab ----"
          cat $CRONTAB_SAVED
          echo "---- Current crontab ----"
          cat $CRONTAB_TMP
          echo "-------------------------"
          if [ "$opt_action" != "-e" ]; then
            echo "run '$THIS -e' to restore correct values"
          fi
          sts=1
        fi
        if [ "$opt_action" == "-e" ]; then
          read
          echo "G">$VIM_RC
          echo "dd">>$VIM_RC
          echo "dd">>$VIM_RC
          echo ":w!q">>$VIM_RC
          # VISUAL="vim -s $VIM_RC" crontab -e
          EDITOR="vim -s $VIM_RC" crontab -e
          sts=$?
          if [ -f "$CRONTAB_SAVED" ]; then
            rm -f $CRONTAB_SAVED
          fi
        fi
      fi
    elif [ "$opt_action" == "-e" ]; then
      crontab -e
      sts=$?
    fi
    return $sts
}

cron_clean() {
    if [ -f $CRONTAB_TMP ]; then
      rm -f $CRONTAB_TMP
    fi
    if [ -f $VIM_RC ]; then
      rm -f $VIM_RC
    fi
}

OPTOPTS=(h        e        f         l          n            R          s       V           v           w)
OPTDEST=(opt_help opt_edit opt_force opt_action opt_dry_run  opt_action opt_sel opt_version opt_verbose opt_wait)
OPTACTI=(1        "1>"     1         "*>"       "1>"         "*>"       "=>"    "*>"        1           "1>")
OPTDEFL=(1        0        0         ""         0            ""         "^$"    ""          0           0  )
OPTMETA=("help"   "edit"   "force"   "list"     "do nothing" "rollbck"  "regex" "version"   "verbose"   "wait")
OPTHELP=("this help"\
 "edit crontab [after selection or crash]"\
 "force execution after crash"\
 "list crontab entries"\
 "do nothing (dry-run)"\
 "rollbak from cron execution (never use this option!)"\
 "select statement to execute now"\
 "show version"\
 "verbose mode"\
 "wait for job activation")
OPTARGS=()

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Run now a selected cron statement from crontab"\
  "(C) 2015-2017 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
# set -x #debug
if [ -z "$opt_action" ]; then
  if [ "$opt_sel" != "^\$" ]; then
    opt_action="--"
  elif [ $opt_edit -ne 0 ]; then
    opt_action="-e"
  elif [ $opt_wait -gt 0 ]; then
    opt_action="-w"
  fi
fi
if [ "$opt_action" == "-l" ]; then
  cron_list
  sts=$?
elif [ "$opt_action" == "--" ]; then
  cron_runow
  sts=$?
  if [ $sts -eq 0 -a $opt_wait -gt 0 ]; then
    cron_wait
  fi
elif [ "$opt_action" == "-R" -o "$opt_action" == "-e" ]; then
  cron_recover
  sts=$?
elif [ "$opt_action" == "-w" ]; then
  cron_wait
  sts=$?
else
  print_help "Run now a selected cron statement from crontab"\
  "(C) 2015-2017 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  sts=1
fi
cron_clean
exit $sts
