#! /bin/bash
# -*- coding: utf-8 -*-
# Version file copy
# Make copy of file to another Odoo version
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
# This free software is released under GNU Affero GPL3
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in "$TDIR" "$TDIR/.." "." ".." "~" "/etc"; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi

__version__="0.1.8"


# PATH examples:
#   /opt/odoo/${ver}/${repository}/${module}/module_path/file
#   /etc/odoo/odoo${ver}[-server].conf
#   /var/run/odoo/odoo${ver}.pid
#   /etc/init.d/odoo${ver}[-server]
#   filename
get_path_ver() {
# get_path_ver(path odoo_ver rep pkg)
    VF_MSTS=0
    local i
    local r t v
    if [ -z "$1" ]; then
      r=$VF_PFX
    elif [ -d $1 ]; then
      r=$1
    else
      if [ "${r:0:1}" == "/" -o "${r:0:1}" == "~" -o "${1:0:2}" == "./" -o "${1:0:3}" == "../" ]; then
        :
      fi
      r=$(dirname $1)
      if [ "$r" == "." ]; then
        if [ -d "./$1" -o "${1: -1}" == "/" ]; then
          r=$PWD/$1
          VF_FN=
        elif [ -f "./$1" ]; then
          r=$PWD
          VF_FN=$1
        else
          r=$1
          VF_FN=
        fi
      else
        VF_FN=$(basename $1)
      fi
    fi
    local VFT_VER=$2
    local re="(10\.0|9\.0|8\.0|7\.0|v7)"
    PUWD=$(readlink -f $PWD/..)
    result=
    for i in {1..9}; do
      t=$(echo "$r"|awk -F/ '{ print $'$i'}')
      if [ -z "$t" ]; then
        continue
      elif [ $VF_MSTS -eq 0 ]; then
        if [[ $t =~ $re ]]; then
          if [ "${r:0:2}" == ".." ]; then
            VF_PFX=$PUWD
          elif [ "${r:0:1}" == "." ]; then
            VF_PFX=$PWD
          elif [ -n "$result" ]; then
            VF_PFX=$result
          fi
          if [ -z "$VF_OFVER" ]; then
            VF_OFVER=$t
          fi
          if [ -z "$result" ]; then
            if [ "$VF_PFX" == "/opt/odoo" ]; then
              result=$VF_PFX/$t
            else
              result=$VF_PFX
            fi
          elif [ "${result:0:9}" == "/opt/odoo" ]; then
            result=$result/$t
          fi
          if [ -z "$VFT_VER" ]; then
            VFT_VER=$t
          fi
          VF_MSTS=1
        elif [[ $t =~ ^odoo[0-9] ]]; then
          if [ "${r:0:1}" == "." -a "${r:0:2}" != ".." ]; then
            VF_PFX=$PWD
            result="$VF_PFX/$result"
          elif [ "${r:0:1}" != "/" -a "${r:0:1}" != "~" ]; then
            result="$VF_PFX/$result"
          else
            VF_PFX=$result
          fi
          v=$(echo $t|grep -Eo [0-9]*|head -n1)
          VF_OFVER=$v.0
          if [ -z "$VFT_VER" ]; then
            VFT_VER=$VF_OFVER
          fi
          v=$(echo $VFT_VER|grep -Eo [0-9]*|head -n1)
          t=$(echo $t|sed -e s:odoo[0-9]*:odoo$v:)
          result="$result/$t"
          VF_MSTS=3
        else
          result="$result/$t"
        fi
      elif [ $VF_MSTS -eq 1 ]; then
        if [ "${result:0:10}" == "/opt/odoo/" ]; then
          VF_REP=$t
          VF_MSTS=2
        fi
        result="$result/$t"
      elif [ $VF_MSTS -eq 2 ]; then
        if [ "${result:0:10}" == "/opt/odoo/" ]; then
          VF_PKG=$t
          VF_MSTS=3
        fi
        result="$result/$t"
      elif [ $VF_MSTS -eq 3 ]; then
        if [ "${result:0:10}" == "/opt/odoo/" ]; then
          if [ -z "$VF_PATH" ]; then
            VF_PATH=$t
          else
            VF_PATH=$VF_PATH/$t
          fi
        fi
        result="$result/$t"
      fi
    done
    if [ "${result:0:9}" != "/opt/odoo" -a -n "$VF_FN" ]; then
      if [[ $VF_FN =~ ^odoo[0-9] ]]; then
        VF_PFX=$result
        v=$(echo $VF_FN|grep -Eo [0-9]*|head -n1)
        VF_OFVER=$v.0
        if [ -z "$VFT_VER" ]; then
          if [ -z "$odoo_ver" ]; then
            VFT_VER=$VF_OFVER
          else
            VFT_VER=$odoo_ver
          fi
        fi
        v=$(echo $VFT_VER|grep -Eo [0-9]*|head -n1)
        VF_FN=$(echo $VF_FN|sed -e s:odoo[0-9]*:odoo$v:)
      fi
    fi
    if [ $VF_MSTS -eq 0 ]; then
      if [ "${r:0:2}" == ".." ]; then
        VF_PFX=$PUWD
      elif [ "${r:0:1}" == "." ]; then
        VF_PFX=$PWD
      elif [ "${r:0:1}" != "/" -a "${r:0:1}" != "~" ]; then
        if [ -z "$result" ]; then
          result=$VF_PFX
        fi
      fi
      if [ -z "$VFT_VER" ]; then
        if [ -z "$odoo_ver" ]; then
          VFT_VER=$VF_OFVER
        else
          VFT_VER=$odoo_ver
        fi
      fi
      if [ "${result:0:9}" == "/opt/odoo" -a -n "$VFT_VER" ]; then
        result=$result/$VFT_VER
        VF_MSTS=1
      else
        VF_MSTS=3
      fi
    fi
    if [ $VF_MSTS -eq 1 ]; then
      if [ "${result:0:9}" == "/opt/odoo" ]; then
        if [ -n "$3" ]; then
          VF_REP=$3
        elif [ -n "$opt_rep" ]; then
          VF_REP=$opt_rep
        fi
        if [ -n "$VF_REP" ]; then
          result=$result/$VF_REP
        fi
        VF_MSTS=2
      fi
    fi
    if [ $VF_MSTS -eq 2 ]; then
      if [ "${result:0:9}" == "/opt/odoo" ]; then
        if [ -n "$4" ]; then
          VF_PKG=$4
        elif [ -n "$opt_pkg" ]; then
          VF_pkg=$opt_pkg
        fi
        if [ -n "$VF_PKG" ]; then
          result=$result/$VF_PKG
        fi
        VF_MSTS=3
      fi
    fi
    if [ $VF_MSTS -eq 3 ]; then
      if [ "${result:0:9}" == "/opt/odoo" ]; then
        if [ -n "$VF_PATH" ]; then
          result="$result/$VF_PATH"
        fi
      fi
    fi
    if [ -n "$VF_FN" ]; then
      result="$result/$VF_FN"
    fi
}

OPTOPTS=(h        n            O         p         R         r            V           v)
OPTDEST=(opt_help opt_dry_run  odoo_ver  opt_pkg   opt_rest  opt_rep      opt_version opt_verbose)
OPTACTI=(1        "1"          "="       "="       1         "="          "*>"        1)
OPTDEFL=(0        0            ""        ""        0         ""           ""          0)
OPTMETA=("help"   "do nothing" "version" "package" "restore" "repository" "version"   "verbose")
OPTHELP=("this help"\
 "do nothing (dry-run)"\
 "select target Odoo version (may be 7, 8, 9 o 10)"\
 "select package name"\
 "reverse copy from target to source rather source to target"\
 "select repository name"\
 "show version"\
 "verbose mode")
OPTARGS=(source target)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ -z "$odoo_ver" -a -z "$source" ]; then
  opt_help=1
fi
if [ $opt_help -gt 0 ]; then
  print_help "Copy file between Odoo versions"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Odoo/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
# set -x
if [[ " 10 9 8 7 " =~ [[:space:]]$odoo_ver[[:space:]] ]]; then
  odoo_ver="$odoo_ver.0"
fi
VF_PFX=/opt/odoo
VF_OFVER=
VF_REP=
VF_PKG=
VF_PATH=
VF_FN=
get_path_ver "$source" "" "$opt_rep" "$opt_pkg"
filenames=$result
get_path_ver "$target" "" "$opt_rep" "$opt_pkg"
filenamet=$result
if [ -d "$filenames" ]; then
  opts=" -R"
else
  opts=
fi
if [ $opt_rest -gt 0 ]; then
  tmp=$filenamet
  filenamet=$filenames
  filenames=$tmp
fi
if [ $opt_verbose -gt 0 ]; then
  echo "cp$opts $filenames $filenamet"
fi
if [ $opt_dry_run -eq 0 ]; then
  cp$opts $filenames $filenamet
fi
