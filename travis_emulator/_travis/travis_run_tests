#! /bin/bash
# -*- coding: utf-8 -*-
#
# Run test in travis environment
# This script is default script to run syntax and regression tests
# Should be replaced by OCA maintainer-quality-tools os something like it!
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../../z0lib ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TRAVISLIBDIR=$(findpkg travisrc "$TDIR $TDIR/.. $TDIR/../travis_emulator $TDIR/../../travis_emulator . .. $HOME/dev")
if [ -z "$TRAVISLIBDIR" ]; then
  echo "Library file travisrc not found!"
  exit 2
fi
. $TRAVISLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.2.1.9


do_test () {
    if [ "$PRJNAME" == "Odoo" ]; then
      if [ $opt_verbose -gt 0 ]; then
        echo "\$ run_server_test"
      fi
      run_server_test
    else
      if [ $opt_verbose -gt 0 ]; then
        echo "\$ run_regression_test"
      fi
      run_regression_test
    fi
    sts=$?
    return $sts
}


OPTOPTS=(h        c        j        K         n            p        q           r     T        t         V           v)
OPTDEST=(opt_help opt_conf opt_dprj opt_check opt_dry_run  opt_pyth opt_verbose opt_r opt_regr test_mode opt_version opt_verbose)
OPTACTI=(1        "="      1        1         1            1        0           1     1        1         "*>"        "+")
OPTDEFL=(0        ""       0        0         0            0        -1          0     0        0         ""          -1)
OPTMETA=("help"   "file"   "dprj"   "check"   "do nothing" ""       "qiet"     "rxt"  "test"   "test"    "version"   "verbose")
OPTHELP=("this help"\
 "configuration file (def .travis.conf)"\
 "execute tests in project dir rather in test dir"\
 "do bash, flake8 and pylint checks"\
 "do nothing (dry-run)"\
 "prefer python test over bash test when avaiable"\
 "silent mode"\
 "run rescricted mode (w/o parsing travis.yml file)"\
 "do regression tests"\
 "test mode (implies dry-run)"\
 "show version"\
 "verbose mode")
OPTARGS=(pkg PRJNAME)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Run test in travis environment"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

if [ "${MQT_DRY_RUN:-0}" == "1" ]; then opt_dry_run=1; fi
if [ "${MQT_VERBOSE_MODE:-0}" == "1" ]; then opt_verbose=1; fi
if [ "${MQT_VERBOSE_MODE:-1}" == "0" ]; then opt_verbose=0; fi
opts_travis
CFG_init
conf_default
link_cfg $DIST_CONF $TCONF
if [ $opt_verbose -gt 1 ]; then set -x; fi
init_travis
prepare_env_travis "test"
sts=$STS_SUCCESS
if [ $test_mode -gt 0 ]; then
  do_chkconfig
  exit $STS_SUCCESS
fi
check_4_travis

if [ ${opt_regr:-0} -gt 0 ]; then
  LINT_CHECK="0"
  TESTS="1"
fi
if [ ${opt_check:-0} -gt 0 ]; then
  BASH_CHECK="1"
  LINT_CHECK="1"
fi
if [ "${BASH_CHECK:-0}" == "1" ]; then BASH_CHECK_ENABLED=1; else BASH_CHECK_ENABLED=0; fi
if [ "${LINT_CHECK:-0}" == "1" ]; then LINT_CHECK_ENABLED=1; else LINT_CHECK_ENABLED=0; fi
if [ "${LINT_CHECK:-1}" == "0" ]; then LINT_CHECK_DISABLED=1; else LINT_CHECK_DISABLED=0; fi
if [ "${TESTS:-0}" == "1" ]; then TEST_CHECK_ENABLED=1; else TEST_CHECK_ENABLED=0; fi
if [ -z "${TESTS}" ]; then TESTS_UNSPECIFIED=1; else TESTS_UNSPECIFIED=0; fi
if [ "${TRANSIFEX_CHECK:-0}" == "1" ]; then TRANSIFEX_CHECK_ENABLED=1; else TRANSIFEX_CHECK_ENABLED=0; fi
if [ $BASH_CHECK_ENABLED -gt 0 ]; then
  please_test_bash
  sts_bash=$?
else
  sts_bash=127
fi
if [ $LINT_CHECK_DISABLED -eq 0 ]; then
  please_test_flake8
  sts_flake8=$?
  please_test_pylint
  sts_pylint=$?
  if [ $sts_bash -ne 127 ]; then
    sts=$(($sts_bash || $sts_flake8 || $sts_pylint))
  else
    sts=$(($sts_flake8 || $sts_pylint))
  fi
else
  sts=$STS_SUCCESS
fi
if [ $sts -eq $STS_SUCCESS ]; then
  if [ $TESTS_UNSPECIFIED -gt 0 -a $LINT_CHECK_ENABLED -eq 0 ]; then
    do_test
    test_sts=$?
  elif [ $TEST_CHECK_ENABLED -gt 0 ]; then
    do_test
    test_sts=$?
  fi
  sts=$test_sts
else
  test_sts=
fi
do_summary "$sts_bash" "$sts_flake8" "$sts_pylint" "$test_sts"
exit $sts
