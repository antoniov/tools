#! /bin/bash
# -*- coding: utf-8 -*-
#
# test nightly Zeroincombenze software for continuous integration
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com

if [ $EUID -eq 0 -a -d /opt/odoo/tools/z0lib ]; then
  cd /opt/odoo/tools/z0lib
fi
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
FCONF=$TDIR/.$THIS.conf
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
elif [ -f /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit 1
fi

__version__=0.1.76.17

# main
OPTOPTS=(h        A         C        K        n           O        R           t        V           v           8     9)
OPTDEST=(opt_help opt_nall  opt_ncld opt_cron opt_dry_run opt_odoo opt_replica opt_test opt_version opt_verbose opt_8 opt_9)
OPTACTI=(1        "*>"      "*>"     1        1           "*>"     1           1        "*>"        1           1     1)
OPTDEFL=(0        ""        ""       0        0           ""       0           0        ""          0           0     0)
OPTMETA=("help"   "not_all" "nocld"  "cron"   "noop"      "odoo"   "replica"   "test"   "version"   "verbose"   "x"   "x")
OPTHELP=("this help"\
 "do not execute all Odoo test"\
 "do not execute clodoo statements"\
 "run in cron environment"\
 "do nothing (dry-run)"\
 "run odoo burst tests"\
 "replica test on Production machine"\
 "show configuration and do nothing (dry-run)"\
 "show version"\
 "verbose mode"\
 "undocumented"\
 "do not upgrade this script")
 OPTARGS=(tgt)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Test nightly"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

detached_login () {
    if [ $opt_cron -gt 0 -a "$SHELL" == "/bin/sh" ]; then
      if [ $opt_dry_run -eq 0 ]; then
        fqcmd=$(readlink -f $0)
        SHELL=/bin/bash exec "$fqcmd" "$@"
      fi
    elif [ $opt_cron -gt 0 ]; then
      . ~/.bash_profile
    fi
    if [ $(echo ":$PATH:"|grep -v "/usr/local/bin" 2>/dev/null) ]; then
      export PATH=/usr/local/bin:$PATH
    fi
    if [ $(echo ":$PATH:"|grep -v "/dev/" 2>/dev/null) ]; then
      if [ -d ~/dev ]; then
        export PATH=$PATH:~/dev
      else
        export PATH=$PATH:/opt/odoo/dev
      fi
    fi
}


upgrade_myself () {
# THIS is developed on /opt/odoo/dev/pypi/travis_emulator/travis_emulator (DEV_DIR)
# If regression test ends successfully, is copied to /opt/odoo/tools/travis_emulator (PRD_DIR)
# Because THIS runs on ~/bin (RUN_DIR), is copied from /opt/odoo/tools/travis_emulator
# after a short regression test
    local PRD_DIR=/opt/odoo/tools/travis_emulator
    local RUN_DIR=$(readlink -f ~/bin)
    local sts=$STS_SUCCESS
    if [ $opt_dry_run -eq 0 ]; then
      if [ "$USER" == "odoo" -a -f $DEV_DIR/$THIS -a "$TDIR" != "$DEV_DIR" ]; then
        elog "Check for newest version to run"
        diff -q $DEV_DIR/$THIS $TDIR/$THIS
        local sts=$?
        if [ $sts -ne $STS_SUCCESS ]; then
          elog "Found newest version of $THIS $__version__"
          test_pkg_pypi $MYPKG
          local sts=$?
          if [ $sts -ne $STS_SUCCESS ]; then
            $DEV_DIR/$THIS -n
            local sts=$?
          fi
          if [ $sts -ne $STS_SUCCESS ]; then
            $DEV_DIR/$THIS -9
            local sts=$?
          fi
          if [ $sts -ne $STS_SUCCESS ]; then
            elog "Upgrade myself ($DEV_DIR/$THIS -8 "$TDIR")!"
            exec $DEV_DIR/$THIS -8 "$TDIR"
            exit 1 # never should execute it!
          fi
          elog "!? Newest version run failed! Run current version"
        fi
      elif [ "$USER" != "odoo" -a -f $PRD_DIR/$THIS ]; then
        elog "Check for newest version to run"
        if [ -f $RUN_DIR/$THIS ]; then
          diff -q $PRD_DIR/$THIS $RUN_DIR/$THIS
          local sts=$?
        else
          local sts=$STS_FAILED
        fi
        if [ $sts -ne $STS_SUCCESS ]; then
          elog "Found newest version of $THIS $__version__"
          $PRD_DIR/$THIS -9
          local sts=$?
          if [ $sts -eq $STS_SUCCESS ]; then
            elog "Upgrade myself ($PRD_DIR/$THIS -8 "$RUN_DIR")!"
            exec $PRD_DIR/$THIS -8 "$RUN_DIR"
            exit 1 # never should execute it!
          else
            elog "!New version terminated with error!"
          fi
        fi
      fi
    fi
    return $sts
}


test_pkg_pypi () {
# test_pkg_pypi(name)
# return: sts
    if [ ! -d ~/dev/svg ]; then
      mkdir ~/dev/svg
    fi
    if [ $opt_dry_run -eq 0 ]; then
      wlog "------------------------------------"
      wlog "Required test for $1 package ..."
    else
      wlog "Package $1 should be tested"
    fi
    if [ ! -d ~/dev/pypi/$1 ]; then
      generate_svg "$USER" "WARN" "$__version__"
      wlog "!? Package $1 not found!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1 ]; then
      generate_svg "$USER" "WARN" "$__version__"
      wlog "!? Invalid package $1!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1/tests ]; then
      generate_svg "$1" "WARN"
      wlog "!? Unit test for package $1 not found"
      exit 0
    fi
    sts=$STS_SUCCESS
    cd ~/dev/pypi/$1/$1
    if [ $opt_dry_run -eq 0 ]; then
      wlog "\$ please test # $1"
      please test
    fi
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ $opt_dry_run -eq 0 ]; then
        wlog "\$ please wep  # $1"
        please wep
        wlog "Package $1: test successfully terminated"
      fi
      if [ -x ./$1 ]; then
        local ver=$(./$1 -V)
      else
        local ver=
      fi
      generate_svg "$1" "OK" "$ver"
    else
      generate_svg "$1" "FAIL"
      wlog "!? Package $1: test failed ($sts)! See package log in ~/dev/pypi/$1/$1/tests!!!"
    fi
    return $sts
}


pkg_pypi_commit () {
# pkg_pypi_commit(name)
# return: sts
    if [ $opt_dry_run -eq 0 ]; then
      wlog "Committing $1 package  ..."
    else
      wlog "Package $1 should be committed"
    fi
    if [ ! -d ~/dev/pypi/$1 ]; then
      wlog "!? Package $1 not found!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1 ]; then
      wlog "!? Invalid package $1!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1/tests ]; then
      wlog "!? Unit test for package $1 not found"
      exit 0
    fi
    sts=$STS_SUCCESS
    cd ~/dev/pypi/$1/$1
    if [ $opt_dry_run -eq 0 ]; then
      wlog "$ please replace  # $1"
      if [ $opt_verbose -gt 0 ]; then
        please replace $opts_verbose &>>~/$THIS.log
      else
        please replace &>/dev/null
      fi
      if [ "$HOSTNAME" == "$DEV_HOST" -a $sts -eq $STS_SUCCESS ]; then
        wlog "$ make commit # $1"
        # cd ~/dev/pypi/$1; dist_pkg -vC $1 $1; &>>~/$THIS.log
        if [ $opt_verbose -gt 0 ]; then
          make -f$HOME/dev/Makefile commit &>>~/$THIS.log
        else
          make -f$HOME/dev/Makefile commit &>/dev/null
        fi
      fi
    fi
    return $sts
}


oe_upd_burst () {
    local XX=$(ps -ef|grep "clodoo\.py.*$1.conf"|tail -n1)
    if [ -z "$XX" ]; then
      local clodir=$(get_cfg_value "" "CLODIR")
      run_traced "cd $clodir"
      if [ -z "$opt_ncld" -a -f $1.conf -a $opt_dry_run -eq 0 ]; then
        wlog "Starting all DB Odoo burst upgrade (-c $1.conf)"
        local SLEEP_TM=$(get_cfg_value "" "SLEEP_TIME")
        local SLEEP_TML
        local SLEEP_TMS
        let SLEEP_TML=$SLEEP_TM+10
        if [ $SLEEP_TM -gt 25 ]; then
          let SLEEP_TMS=$SLEEP_TM-20
        else
          SLEEP_TMS=5
        fi
        if [ $EUID -eq 0 ]; then
          svc_name=$(get_cfg_value "" "svc_name")
          run_traced "service $svc_name restart"
          sleep $SLEEP_TMS
        fi
        sts=$STS_SUCCESS
        run_traced "clodoo.py -d demo -c $1.conf"
        sts=$?
        if [ $sts -eq $STS_SUCCESS ]; then
          sleep $SLEEP_TM
          run_traced "clodoo.py -d zeroincombenze -c $1.conf"
          sts=$?
        fi
        if [ $sts -eq $STS_SUCCESS ]; then
          for i in {0..12}; do
            l=${#i}
            ((l--))
            n="0$i"
            n=${n:l}
            db="zi0001$n[0-9]{2}"
            run_traced "clodoo.py -d $db -c $1.conf"
            sts=$?
            if [ $sts -ne $STS_SUCCESS ]; then
              break
            fi
            sleep $SLEEP_TML
            if [ $EUID -eq 0 ]; then
              run_traced "service $svc_name restart"
              sleep $SLEEP_TMS
            else
              sleep $SLEEP_TM
            fi
          done
        fi
        if [ $sts -eq $STS_SUCCESS ]; then
          if [ "$USER" == "odoo" ]; then
            run_traced "makecommit"
          fi
          run_traced "mv $1.conf $1.conf.bak"
        fi
        wlog "** All DB Odoo burst upgrade ended **"
      else
        wlog "No clodoo operations to do"
      fi
      if [ -f /var/log/$THIS.log ]; then
        chmod +rw /var/log/$THIS.log
      fi
    else
      wlog "*** Odoo burst upgrade is already running ***"
    fi
    return $sts
}


check4env () {
    if [ ! -d ~/dev/pypi ]; then
      wlog "!? Invalid environment: missing ~/dev/pypi directory!"
      exit 1
    fi
    if [ ! -d ~/dev/_travis ]; then
      wlog "!? Invalid environment: missing ~/dev/_travis directory!"
      exit 1
    fi
    if [ ! -d /opt/odoo/tools ]; then
      mkdir -p /opt/odoo/tools
    fi
    if [ ! -d /opt/odoo/tools/travis_emulator ]; then
      mkdir -p /opt/odoo/tools/travis_emulator
    fi
}


cpfiles () {
# cpfiles(srcpath, tgtpath, files, owner)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    if [ -d $1 -a -n "$2" ]; then
      cd $1
      for f in $l; do
        if [ -f $1/$f ]; then
          if [ $opt_dry_run -eq 0 ]; then
            wlog "\$ cp $1/$f $2/$f"
            cp $1/$f $2/$f
            if [ $4 ]; then
              wlog "\$ chown $4 $2/$f"
              chown $4 $2/$f
            fi
          fi
        else
          elog "! File $1/$f not found!!"
          local sts=$STS_FAILED
        fi
      done
    else
      elog "! Directory $1 not found!!"
      local sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}


scpfiles () {
# scpfiles(srcpath, tgtpath, files)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    if [ -d $1 -a -n "$2" ]; then
      cd $1
      for f in $l; do
        if [ -f $1/$f ]; then
          if [ $opt_dry_run -eq 0 ]; then
            wlog "\$ scp $1/$f $2/$f"
            scp $1/$f $2/$f
          fi
        else
          elog "! File $1/$f not found!!"
          local sts=$STS_FAILED
        fi
      done
    else
      elog "! Directory $1 not found!!"
      local sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}


mvfiles () {
# mvfiles(srcpath, tgtpath, files, owner)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    if [ -d $1 -a -n "$2" ]; then
      cd $1
      for f in $l; do
        if [ -f $1/$f ]; then
          if [ $opt_dry_run -eq 0 ]; then
            wlog "\$ mv $1/$f $2/$f"
            mv $1/$f $2/$f
            if [ $4 ]; then
              wlog "\$ chown $4 $2/$f"
              chown $4 $2/$f
            fi
          fi
        else
          elog "! File $1/$f not found!!"
          local sts=$STS_FAILED
        fi
      done
    else
      elog "! Directory $1 not found!!"
      local sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}


generate_svg () {
# generate_svg(id, result, ver?)
    if [ $opt_dry_run -eq 0 ]; then
      wlog "generate_svg $1[ $2 ] -V$3"
    fi
    local sw_id="$1"
    local sw_date=$(date +%d-%m-%Y)
    if [ "$HOSTNAME" == "$PRD_HOST" ]; then
      local color_dev_prd="#004dff"
      tgt="prd"
    elif [ "$HOSTNAME" == "$DEV_HOST" ]; then
      local color_dev_prd="#162832"
      tgt="dev"
    else
      local color_dev_prd="#3b3b3b"
      tgt=""
    fi
    if [ "$2" == "OK" ]; then
      local color_result="#33a600"
    elif [ "$2" == "FAIL" ]; then
      local color_result="#900404"
    elif [ "$2" == "WARN" ]; then
      local color_result="#ff8000"
    else
      local color_result="#8b8989"
    fi
    if [ $opt_dry_run -eq 0 -a -n "$tgt" ]; then
      cp $SVG_TMPL_DIR/$SVG_TMPL_BTNM ./$sw_id.svg
      for t in sw_id sw_date color_dev_prd color_result;do
        # echo "$t=${!t}"
        sed -i "s:\${$t}:${!t}:g" ./$sw_id.svg
      done
      local d=$(readlink -f ~/dev/svg)
      if [ -n "$d" ]; then
        mvfiles "." "$d" "$sw_id.svg"
      fi
    fi
}

publish_svg () {
# publish_svg(src)
    local sts=$STS_FAILED
    if  [ -n "$1" ]; then
      if [ "$HOSTNAME" == "$PRD_HOST" ]; then
        tgt="prd"
      elif [ "$HOSTNAME" == "$DEV_HOST" ]; then
        tgt="dev"
      else
        tgt=""
      fi
      if [ $opt_dry_run -eq 0 -a -n "$tgt" ]; then
        mvfiles "$1" "$HTML_SVG_DIR/$tgt" "*.svg" "apache:apache"
        local sts=$?
        if [ "$HOSTNAME" == "$DEV_HOST" -a "$1" == "." ]; then
          scpfiles "$HTML_SVG_DIR/$tgt" "$PRD_HOST:$HTML_SVG_DIR/$tgt" "*.svg"
          local s=$?
          [ $sts -eq $STS_SUCCESS ]&&sts=$s
        fi
      fi
    fi
    return $sts
}

synchronize_odoo () {
    local VERSION=
    local l=
    local n=
    for VERSION in 7.0 8.0 9.0; do
      for d in $HOME/$VERSION/*; do
        if [ -d $d ]; then
          if [ -d $d/.git ]; then
            run_traced "cd $d"
            l=$(git remote -v|grep "origin[[:space:]]"|awk '{print $2}'|head -n1)
            if [ "${l:0:19}" == "https://github.com/" ]; then
              n="git@github.com:${l:19}"
              run_traced "git remote set-url origin $n${l:19}"
            fi
            if [ "$d" == "l10n-italy-supplemental" -o "$d" == "zeroincombenze" ]; then
              l=$(git remote -v|grep "upstream[[:space:]]"|awk '{print $2}'|head -n1)
              if [ -n "$l" ]; then
                run_traced "git remote rm upstream"
              fi
              if [ "$HOSTNAME" == "$DEV_HOST" ]; then
                run_traced "git pull origin $VERSION"
                run_traced "git push"
              elif [ "$HOSTNAME" == "$PRD_HOST" ]; then
                run_traced "git pull"
              fi
            else
              l=$(git remote -v|grep "upstream[[:space:]]"|awk '{print $2}'|head -n1)
              if [ -z "$l" ]; then
                l=$(git remote -v|grep "origin[[:space:]]"|awk '{print $2}'|head -n1)
                l=$(echo "$l"|sed -e s\|git@github.com:zeroincombenze\|https://github.com/OCA\|)
                run_traced "git remote add upstream $l"
              elif [ "${l:0:19}" != "https://github.com/" ]; then
                l=$(git remote -v|grep "origin[[:space:]]"|awk '{print $2}'|head -n1)
                l=$(echo "$l"|sed -e s\|git@github.com:zeroincombenze\|https://github.com/OCA\|)
                run_traced "git remote set-url upstream $l"
              fi
              if [ "$HOSTNAME" == "$DEV_HOST" ]; then
                run_traced "git pull upstream $VERSION"
                run_traced "git push"
              elif [ "$HOSTNAME" == "$PRD_HOST" ]; then
                run_traced "git pull"
              fi
            fi
          fi
        fi
      done
    done
}

exit_n_status () {
  if [ $sts -eq $STS_SUCCESS ]; then
    generate_svg "$USER" "OK" "$__version__"
    if [ $EUID -eq 0 ]; then
      publish_svg "."
    fi
    if [ $opt_dry_run -eq 0 -a $opt_replica -gt 0 -a "$HOSTNAME" == "$DEV_HOST" ]; then
      elog "$ ssh $PRD_HOST \"~/bin/cronow -s $THIS\""
      ssh $PRD_HOST "~/bin/cronow -s $THIS"
    fi
    if [ $opt_dry_run -eq 0 ]; then
      wlog "Test $__version__ successfully terminated"
    else
      wlog "++ Dry-run $__version__ executed with success ++"
    fi
  else
    generate_svg "$USER" "FAIL" "$__version__"
    if [ $EUID -eq 0 ]; then
      publish_svg "."
    fi
    if [ $opt_dry_run -eq 0 ]; then
      wlog "!?!?!?!? Test $__version__ failed!!!! !?!?!?!?"
    else
      wlog "!?!?!?!? ++ This test $__version__ cannot be really used!!!! !?!?!?!?"
    fi
  fi
  exit $sts
}

conf_default () {
    set_cfg_def "DEV_HOST" "shsdev16"
    set_cfg_def "PRD_HOST" "shsprd14"
    set_cfg_def "ME_BOS" "test_nightly .test_nightly.conf.sample"
    set_cfg_def "MYPKG" "travis_emulator"
    set_cfg_def "HTML_SVG_DIR" "/var/www/html/wp-zi/wp-content/uploads/ci-ct"
    set_cfg_def "WWW_DWNLOAD_DIR" "/var/www/html/mw/download"
    if [ "${HOSTNAME:0:6}" == "shsdev" ]; then
      set_cfg_def "pip_pkgver__reportlab" "3.2.0"
      set_cfg_def "upgrade_dow" "2"
    else
      set_cfg_def "pip_pkgver__reportlab" "3.1.44"
      set_cfg_def "upgrade_dow" "4"
    fi
    set_cfg_def "ODOO_SETUP" "__openerp__.py"
    set_cfg_def "svc_name" "openerp"
    set_cfg_def "CLODIR" "/opt/odoo/clodoo"
    set_cfg_def "SLEEP_TIME" "30"
    set_cfg_def "XFLIST__zar" "bckconf bckconf.py pg_db_active restconf restconf.py bckwww restwww bckdb bckdb.py restdb restdb.py updzar zarlib.py"
}


$(init_cfg)
$(active_cfg)
conf_default
link_cfg $FCONF
for p in DEV_HOST HTML_SVG_DIR MYPKG PRD_HOST SVG_TMPL_DIR SVG_TMPL_BTNM upgrade_dow WWW_DWNLOAD_DIR XFLIST__zar; do
  declare $p=$(get_cfg_value "" "$p")
  if [ -z "${!p}" ]; then
    generate_svg "$USER" "FAIL" "$__version__"
    elog "!? Invalid configuration parameter $p!!"
    exit 1
  fi
done
DEV_DIR=/opt/odoo/dev/pypi/$MYPKG/$MYPKG
for p in ME_BOS PKGSLX; do
  declare $p="$(get_cfg_value "" "$p")"
  declare $p="${!p//,/ }"
done
if [ $opt_8 -gt 0 ]; then
  if [ "$TDIR" != "$tgt" ]; then
    cpfiles "$TDIR" "$tgt" "$ME_BOS"
    sts=$?
  else
    sts=$STS_SUCCESS
  fi
  opt_replica=1
  exit_n_status
  exit 1 # never should execute it!
fi
if [ $opt_test -gt 0 ]; then
  for p in DEV_HOST PRD_HOST SVG_TMPL_DIR SVG_TMPL_BTNM WWW_DWNLOAD_DIR; do
    echo "$p=${!p}"
  done
  echo "Upgrade myself does .."
  for f in $ME_BOS; do
     echo "\$ cp $TDIR/$f {tgt}/$f"
  done
  echo "Test list .."
  for f in $PKGSLX; do
     echo "\$ please test # $f"
  done
  exit 0
fi

dom=$(date +%d)
dow=$(date +%w)
yod=$(date +%Y)
dt=$(date +%Y-%m-%d)
if [[ -t 0 || -p /dev/stdin ]]; then
  set_tlog_file "~/$THIS.log" "" "echo"
elif [ $dom -eq 12 ]; then
  set_tlog_file "~/$THIS.log" "new"
else
  set_tlog_file "~/$THIS.log"
fi
sts=$STS_SUCCESS
if [ $opt_cron -gt 0 ]; then
  wlog "Run cron mode"
  detached_login "$@"
  wlog "$PATH"
fi
(($opt_9))||upgrade_myself
# here if upgrade fails or is not needed

ODOO_LTF=~/testlog/result.log

if [ $opt_dry_run -eq 0 ]; then
  wlog "********************************************************"
  wlog "Test nightly $__version__ starting by $USER"
  wlog "********************************************************"
else
  wlog "++ Test nightly $__version__ is dry-running by $USER ++"
fi
if [ $EUID -eq 0 ]; then
  wlog "> Upgrade z0librc"
  _install_z0librc
  if [ "$HOSTNAME" == "$DEV_HOST" -o "$HOSTNAME" == "$PRD_HOST" ]; then
    udow=$(get_cfg_value "" "upgrade_dow")
    if [ $dow -eq $udow ]; then
      valid=1
    else
      valid=0
    fi
    if [ $valid -gt 0 -a $opt_dry_run -eq 0 ]; then
      logtm=$(grep "yum -y update" ~/test_nightly.log|tail -n1|awk '{print $1}')
      curtm=$(date +"%Y-%m-%")
      if [ "$curtm" != "$logtm" ]; then
        wlog "\$ yum -y update"
        yum -y update
        wlog "\$ vmware-config-tools.pl --default"
        vmware-config-tools.pl --default
        wlog "\$ pip install --upgrade pip"
        pip install --upgrade pip
        wlog "\$ pip install --upgrade --pre pylint-odoo"
        pip install --upgrade --pre pylint-odoo
        for f in $(pip list|awk '{print $1}'); do
          f1=${f,,}
          ver=$(get_cfg_value "" "pip_pkgver__$f1")
          if [ -n "$ver" ]; then
            wlog "\$ pip install $f==$ver --upgrade --no-deps"
            pip install $f==$ver --upgrade --no-deps
          else
            wlog "\$ pip install $f --upgrade --no-deps"
            pip install $f --upgrade --no-deps
          fi
        done
        service openerp restart
        for ver in 7 8 9; do
          service odoo${ver}-server restart
        done
      fi
    fi
    sts=$STS_SUCCESS
    d=$(readlink -f /opt/odoo/dev/svg)
    publish_svg "$d"
    sts=$?
    if [ $sts -ne $STS_SUCCESS ]; then
      elog "!unpublished svg!!"
    fi
    if [ "$HOSTNAME" == "$PRD_HOST" ]; then
      cd /opt/odoo/tools/product/
      wlog "\$ product package"
      product package
    fi
    vbef=$(product -V)
    wlog "\$ product update product"
    product update product
    vaft=$(product -V)
    wlog "product $vbef upgraded to $vaft"
    if [ "$HOSTNAME" == "$DEV_HOST" ]; then
      d=$(readlink -f /opt/odoo/mySAP)
      if [ -z "$(grep [[:space:]][[:space:]]pdb.set_trace $d/explsmw_ftcli.py)" ]; then
        cpfiles "$d" "$WWW_DWNLOAD_DIR" "explsmw_ftcli.py" "apache:apache"
        s=$?
        [ $sts -eq $STS_SUCCESS ]&&sts=$s
      fi
    fi
    cpfiles "/opt/odoo/tools/zar" "/root" "$XFLIST__zar" "root:root"
    s=$?
    if [ $s -ne $STS_SUCCESS ]; then
      elog "!unupdated zar tool!!"
    fi
    [ $sts -eq $STS_SUCCESS ]&&sts=$s
    cpfiles "/opt/odoo/tools/wok_code" "/root" "av_php" "root:root"
    s=$?
    if [ $s -ne $STS_SUCCESS ]; then
      elog "!unupdated wok_code tool!!"
    fi
    [ $sts -eq $STS_SUCCESS ]&&sts=$s
    cpfiles "/opt/odoo/tools/travis_emulator" "/root/bin" "cronow" "root:root"
    s=$?
    if [ $s -ne $STS_SUCCESS ]; then
      elog "!unupdated travis emulator!!"
    fi
    [ $sts -eq $STS_SUCCESS ]&&sts=$s
    if [ $opt_dry_run -eq 0 ]; then
      python /opt/odoo/dev/z0testercode.py
      s=$?
      if [ $s -ne $STS_SUCCESS ]; then
        elog "!Python regression test FAILED!!"
      fi
      [ $sts -eq $STS_SUCCESS ]&&sts=$s
    fi
    if [ $opt_dry_run -eq 0 ]; then
      resi=$(perl /usr/share/doc/mod_evasive-1.10.1/test.pl|head -n1)
      rese=$(perl /usr/share/doc/mod_evasive-1.10.1/test.pl|tail -n1)
      if [ "$(echo $resi|grep -v 200)" ]; then
        s=$STS_FAILED
      elif [ "$(echo $rese|grep -v 403)" ]; then
        s=$STS_FAILED
      else
        s=$STS_SUCCESS
      fi
      if [ $s -ne $STS_SUCCESS ]; then
        elog "!Apache mod_evasive FAILED!!"
      fi
      [ $sts -eq $STS_SUCCESS ]&&sts=$s
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      opt_odoo="oe_upgrade"
      oe_upd_burst "$opt_odoo"
      s=$?
      [ $sts -eq $STS_SUCCESS ]&&sts=$s
    fi
  fi
fi
if [ "$USER" == "odoo" ]; then
  (($opt_dry_run))||check4env
  cd ~/dev/pypi
  for pkgname in *; do
    if [ $sts -eq $STS_SUCCESS ]; then
      valid=0
      if [ -d "$pkgname" ]; then
        for p in $PKGSLX; do
          if [ "$pkgname" == "$p" ]; then
            valid=1
            break
          fi
        done
        if [ $valid -gt 0 ]; then
          test_pkg_pypi $pkgname
          sts=$?
          if [ $sts -eq $STS_SUCCESS ]; then
            pkg_pypi_commit $pkgname
          fi
        elif [ $opt_dry_run -eq $STS_SUCCESS ]; then
          wlog "------------------------------------"
          wlog "Module $pkgname uncertificated ($sts)!"
        fi
      fi
    fi
    cd ~/dev/pypi
  done
  wlog "cd ~/tools"
  cd ~/tools
  if [ $opt_dry_run -eq 0 ]; then
    tm=$(date +%H%M)
    if [ $tm -gt 2000 -o $tm -lt 0600 ]; then
      cmsg="[RUN] test nightly"
    else
      cmsg="[RUN] blueman test"
    fi
    wlog "$ git commit -am \"$cmsg\""
    git commit -am "$cmsg" &>>~/$THIS.log
    if [ "$HOSTNAME" == "$DEV_HOST" -a $sts -eq $STS_SUCCESS ]; then
      wlog "$ git push"
      git push &>>~/$THIS.log
    elif [ "$HOSTNAME" == "$PRD_HOST" ]; then
      # wlog "$ git reset --hard origin"
      # git reset --hard origin
      wlog "$ git pull origin"
      git pull origin
    fi
  fi
  tm=$(date +%H%M)
  if [ $tm -gt 2100 -o $tm -lt 0300 ]; then
    synchronize_odoo
  fi
  if [ -d /opt/odoo/tools/clodoo ]; then
    cpfiles "/opt/odoo/tools/clodoo" "/opt/odoo/dev" "clodoo.py clodoocore.py clodoolib.py"
    s=$?
    [ $sts -eq $STS_SUCCESS ]&&sts=$s
  fi
  if [ -d /opt/odoo/tools/z0tester ]; then
    cpfiles "/opt/odoo/tools/z0tester" "/opt/odoo/dev" "z0testercode.py"
    s=$?
    [ $sts -eq $STS_SUCCESS ]&&sts=$s
  fi
  if [ $sts -eq $STS_SUCCESS ]; then
    opt_odoo="nightly"
    oe_upd_burst "$opt_odoo"
    s=$?
    [ $sts -eq $STS_SUCCESS ]&&sts=$s
  fi
fi
if [ "$USER" == "openerp" ]; then
  if [ $sts -eq $STS_SUCCESS ]; then
    if [ $sts -eq $STS_SUCCESS -a -z "$opt_nall" ]; then
      wlog "Odoo all tests"
      if [ $opt_dry_run -eq 0 ]; then
        /opt/odoo/dev/pypi/clodoo/clodoo/odoo_test -Aaqy test
        if [ -n "$(grep \"$dt\" $ODOO_LTF|grep FAIL)" ]; then
          sts=$STS_FAILED
          grep "$dt" $ODOO_LTF|grep FAIL
        fi
      fi
    fi
  fi
fi
if [ $opt_9 -gt 0 ]; then
  sts=$STS_SUCCESS
fi
exit_n_status
exit 1 # never should execute it!
