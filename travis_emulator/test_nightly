#! /bin/bash
# -*- coding: utf-8 -*-
#
# test nightly Zeroincombenze software for continuous integration
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in $TDIR $TDIR/.. . .. $TDIR/../../z0lib /etc; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $TDIR/../clodoo $TDIR/../../clodoo . .. $HOME/dev /etc")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR


__version__=0.1.79.13


detached_login() {
    if [ $opt_cron -gt 0 -a "$SHELL" == "/bin/sh" ]; then
      if [ $opt_dry_run -eq 0 ]; then
        fqcmd=$(readlink -f $0)
        SHELL=/bin/bash exec "$fqcmd" "$@"
      fi
    elif [ $opt_cron -gt 0 ]; then
      . ~/.bash_profile
    fi
    if [ $(echo ":$PATH:"|grep -v "/usr/local/bin" 2>/dev/null) ]; then
      export PATH=/usr/local/bin:$PATH
    fi
    if [ $(echo ":$PATH:"|grep -v "/dev/" 2>/dev/null) ]; then
      if [ -d ~/dev ]; then
        export PATH=$PATH:~/dev
      else
        export PATH=$PATH:/opt/odoo/dev
      fi
    fi
}


upgrade_myself() {
# THIS is developed on /opt/odoo/dev/pypi/travis_emulator/travis_emulator (DEV_DIR)
# If regression test ends successfully, is copied to /opt/odoo/tools/travis_emulator (PRD_DIR)
# Because THIS runs on ~/bin (RUN_DIR), is copied from /opt/odoo/tools/travis_emulator
# after a short regression test
    local PRD_DIR=/opt/odoo/tools/travis_emulator
    local RUN_DIR=$(readlink -f ~/bin)
    local sts=$STS_SUCCESS
    if [ $opt_dry_run -eq 0 ]; then
      if [ "$USER" == "odoo" -a -f $DEV_DIR/$THIS -a "$TDIR" != "$DEV_DIR" ]; then
        elog "Check for newest version to run"
        diff -q $DEV_DIR/$THIS $TDIR/$THIS
        local sts=$?
        if [ $sts -ne $STS_SUCCESS ]; then
          elog "Found newest version of $THIS $__version__"
          test_pkg_pypi $MYPKG
          local sts=$?
          if [ $sts -ne $STS_SUCCESS ]; then
            $DEV_DIR/$THIS -n
            local sts=$?
          fi
          if [ $sts -ne $STS_SUCCESS ]; then
            $DEV_DIR/$THIS -9
            local sts=$?
          fi
          if [ $sts -ne $STS_SUCCESS ]; then
            elog "Upgrade myself ($DEV_DIR/$THIS -8 "$TDIR")!"
            exec $DEV_DIR/$THIS -8 "$TDIR"
            exit 1 # never should execute it!
          fi
          elog "!? Newest version run failed! Run current version"
        fi
      elif [ "$USER" != "odoo" -a -f $PRD_DIR/$THIS ]; then
        elog "Check for newest version to run"
        if [ -f $RUN_DIR/$THIS ]; then
          diff -q $PRD_DIR/$THIS $RUN_DIR/$THIS
          local sts=$?
        else
          local sts=$STS_FAILED
        fi
        if [ $sts -ne $STS_SUCCESS ]; then
          elog "Found newest version of $THIS $__version__"
          $PRD_DIR/$THIS -9
          local sts=$?
          if [ $sts -eq $STS_SUCCESS ]; then
            elog "Upgrade myself ($PRD_DIR/$THIS -8 "$RUN_DIR")!"
            exec $PRD_DIR/$THIS -8 "$RUN_DIR"
            exit 1 # never should execute it!
          else
            elog "!New version terminated with error!"
          fi
        fi
      fi
    fi
    return $sts
}


test_pkg_pypi() {
# test_pkg_pypi(name)
# return: sts
    local s
    if [ ! -d ~/dev/svg ]; then
      mkdir ~/dev/svg
    fi
    if [ $opt_dry_run -eq 0 ]; then
      wlog "-----------------------------------------"
      wlog "### Required test for $1 package ..."
    else
      wlog "### Package $1 should be tested"
    fi
    if [ ! -d ~/dev/pypi/$1 ]; then
      generate_svg "$USER" "WARN" "$__version__"
      wlog "!!!? Package $1 not found!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1 ]; then
      generate_svg "$USER" "WARN" "$__version__"
      wlog "!!!? Invalid package $1!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1/tests ]; then
      generate_svg "$1" "WARN"
      wlog "!!!? Unit test for package $1 not found"
      exit 0
    fi
    local sts=$STS_SUCCESS
    run_traced "cd ~/dev/pypi/$1/$1"
    run_traced "travis . test # $1"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ $s -eq $STS_SUCCESS ]; then
      run_traced "please wep  # $1"
      wlog "### Package $1: test successfully terminated"
      if [ -x ./$1 ]; then
        local ver=$(./$1 -V)
      else
        local ver=
      fi
      generate_svg "$1" "OK" "$ver"
    else
      generate_svg "$1" "FAIL"
      wlog "!!!? Package $1: test failed ($sts)! See package log in ~/dev/pypi/$1/$1/tests!!!"
    fi
    return $sts
}


pkg_pypi_commit() {
# pkg_pypi_commit(name)
# return: sts
    if [ $opt_dry_run -eq 0 ]; then
      wlog "### Committing $1 package  ..."
    else
      wlog "### Package $1 should be committed"
    fi
    if [ ! -d ~/dev/pypi/$1 ]; then
      wlog "!!!? Package $1 not found!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1 ]; then
      wlog "!!!? Invalid package $1!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1/tests ]; then
      wlog "!!!? Unit test for package $1 not found"
      exit 0
    fi
    sts=$STS_SUCCESS
    run_traced "cd ~/dev/pypi/$1/$1"
    run_traced "please replace  # $1"
    sts=$?
    if [ "$HOSTNAME" == "$DEV_HOST" -a $sts -eq $STS_SUCCESS ]; then
      run_traced "please commit # $1"
      run_traced "please push # $1"
    fi
    return $sts
}


commit_files() {
#commit_files(pkg file)
    wlog "# Upgrade command $1"
    if [[ -d /opt/odoo/tools/$1 ]]; then
      cpfiles "/opt/odoo/tools/$1" "/usr/local/bin" "$2" "root:root"
      local s=$?
      if [ $s -ne $STS_SUCCESS ]; then
        elog "!unupdated $1!!"
      fi
      if [[ -f /root/bin/$2 ]]; then
        run_traced "rm -f /root/bin/$2"
      fi
      if [[ -f /root/bin/$2 ]]; then
        run_traced "rm -f /root/$2"
      fi
    fi
    return $s
}


oe_upd_burst() {
    local XX=$(ps -ef|grep "clodoo\.py.*$1.conf"|tail -n1)
    if [ -z "$XX" ]; then
      local clodir=$(get_cfg_value "" "CLODIR")
      run_traced "cd $clodir"
      if [ -z "$opt_ncld" -a -f $1.conf -a $opt_dry_run -eq 0 ]; then
        wlog "### Starting all DB Odoo burst upgrade (-c $1.conf)"
        local SLEEP_TM=$(get_cfg_value "" "SLEEP_TIME")
        local SLEEP_TML
        local SLEEP_TMS
        let SLEEP_TML=$SLEEP_TM+10
        if [ $SLEEP_TM -gt 25 ]; then
          let SLEEP_TMS=$SLEEP_TM-20
        else
          SLEEP_TMS=5
        fi
        if [ $EUID -eq 0 ]; then
          svc_name=$(get_cfg_value "" "svc_name")
          run_traced "service $svc_name restart"
          sleep $SLEEP_TMS
        fi
        sts=$STS_SUCCESS
        run_traced "clodoo.py -d demo -c $1.conf"
        sts=$?
        if [ $sts -eq $STS_SUCCESS ]; then
          sleep $SLEEP_TM
          run_traced "clodoo.py -d zeroincombenze -c $1.conf"
          sts=$?
        fi
        if [ $sts -eq $STS_SUCCESS ]; then
          for i in {0..12}; do
            l=${#i}
            ((l--))
            n="0$i"
            n=${n:l}
            db="zi0001$n[0-9]{2}"
            run_traced "clodoo.py -d $db -c $1.conf"
            sts=$?
            if [ $sts -ne $STS_SUCCESS ]; then
              break
            fi
            sleep $SLEEP_TML
            if [ $EUID -eq 0 ]; then
              run_traced "service $svc_name restart"
              sleep $SLEEP_TMS
            else
              sleep $SLEEP_TM
            fi
          done
        fi
        if [ $sts -eq $STS_SUCCESS ]; then
          if [ "$USER" == "odoo" ]; then
            run_traced "makecommit"
          fi
          run_traced "mv $1.conf $1.conf.bak"
        fi
        wlog "### All DB Odoo burst upgrade ended **"
      else
        wlog "### No clodoo operations to do"
      fi
      if [ -f /var/log/$THIS.log ]; then
        chmod +rw /var/log/$THIS.log
      fi
    else
      wlog "### Odoo burst upgrade is already running ***"
    fi
    return $sts
}


check4env() {
    if [ ! -d ~/dev/pypi ]; then
      wlog "!!!? Invalid environment: missing ~/dev/pypi directory!"
      exit 1
    fi
    if [ ! -d ~/dev/_travis ]; then
      wlog "!!!? Invalid environment: missing ~/dev/_travis directory!"
      exit 1
    fi
    if [ ! -d /opt/odoo/tools ]; then
      mkdir -p /opt/odoo/tools
    fi
    if [ ! -d /opt/odoo/tools/travis_emulator ]; then
      mkdir -p /opt/odoo/tools/travis_emulator
    fi
}


cpfiles() {
# cpfiles(srcpath, tgtpath, files, owner)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    if [ -d $1 -a -n "$2" ]; then
      cd $1
      for f in $l; do
        if [ -f $1/$f ]; then
          if [ $opt_dry_run -eq 0 ]; then
            wlog "\$ cp $1/$f $2/$f"
            cp $1/$f $2/$f
            if [ $4 ]; then
              wlog "\$ chown $4 $2/$f"
              chown $4 $2/$f
            fi
          fi
        else
          elog "! File $1/$f not found!!"
          local sts=$STS_FAILED
        fi
      done
    else
      elog "! Directory $1 not found!!"
      local sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}


scpfiles() {
# scpfiles(srcpath, tgtpath, files)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    if [ -d $1 -a -n "$2" ]; then
      cd $1
      for f in $l; do
        if [ -f $1/$f ]; then
          if [ $opt_dry_run -eq 0 ]; then
            wlog "\$ scp $1/$f $2/$f"
            scp $1/$f $2/$f
          fi
        else
          elog "! File $1/$f not found!!"
          local sts=$STS_FAILED
        fi
      done
    else
      elog "! Directory $1 not found!!"
      local sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}


mvfiles() {
# mvfiles(srcpath, tgtpath, files, owner)
    if [ -z "$3" ]; then
      local l="*"
    else
      local l="$3"
    fi
    local CWD=$PWD
    local sts=$STS_SUCCESS
    if [ -d $1 -a -n "$2" ]; then
      cd $1
      for f in $l; do
        if [ -f $1/$f ]; then
          if [ $opt_dry_run -eq 0 ]; then
            wlog "\$ mv $1/$f $2/$f"
            mv $1/$f $2/$f
            if [ $4 ]; then
              wlog "\$ chown $4 $2/$f"
              chown $4 $2/$f
            fi
          fi
        else
          elog "! File $1/$f not found!!"
          local sts=$STS_FAILED
        fi
      done
    else
      elog "! Directory $1 not found!!"
      local sts=$STS_FAILED
    fi
    cd $CWD
    return $sts
}


generate_svg() {
# generate_svg(id, result, ver?)
    if [ $opt_dry_run -eq 0 ]; then
      wlog "## generate_svg $1[ $2 ] -V$3"
    fi
    local sw_id="$1"
    local sw_date=$(date +%d-%m-%Y)
    if [ "$HOSTNAME" == "$PRD_HOST" ]; then
      local color_dev_prd="#004dff"
      tgt="prd"
    elif [ "$HOSTNAME" == "$DEV_HOST" ]; then
      local color_dev_prd="#162832"
      tgt="dev"
    else
      local color_dev_prd="#3b3b3b"
      tgt=""
    fi
    if [ "$2" == "OK" ]; then
      local color_result="#33a600"
    elif [ "$2" == "FAIL" ]; then
      local color_result="#900404"
    elif [ "$2" == "WARN" ]; then
      local color_result="#ff8000"
    else
      local color_result="#8b8989"
    fi
    if [ $opt_dry_run -eq 0 -a -n "$tgt" ]; then
      cp $SVG_TMPL_DIR/$SVG_TMPL_BTNM ./$sw_id.svg
      for t in sw_id sw_date color_dev_prd color_result;do
        # echo "$t=${!t}"
        sed -i "s:\${$t}:${!t}:g" ./$sw_id.svg
      done
      local d=$(readlink -f ~/dev/svg)
      if [ -n "$d" ]; then
        mvfiles "." "$d" "$sw_id.svg"
      fi
    fi
}


publish_svg() {
# publish_svg(src)
    local sts=$STS_FAILED
    if  [ -n "$1" ]; then
      if [ "$HOSTNAME" == "$PRD_HOST" ]; then
        tgt="prd"
      elif [ "$HOSTNAME" == "$DEV_HOST" ]; then
        tgt="dev"
      else
        tgt=""
      fi
      if [ $opt_dry_run -eq 0 -a -n "$tgt" ]; then
        mvfiles "$1" "$HTML_SVG_DIR/$tgt" "*.svg" "apache:apache"
        local sts=$?
        if [ "$HOSTNAME" == "$DEV_HOST" -a "$1" == "." ]; then
          scpfiles "$HTML_SVG_DIR/$tgt" "$PRD_HOST:$HTML_SVG_DIR/$tgt" "*.svg"
          local s=$?
          [ $sts -eq $STS_SUCCESS ]&&sts=$s
        fi
      fi
    fi
    return $sts
}


synchronize_module_odoo() {
# synchronize_module_odoo(module)
    local s sts
    local d=$1
    if [ -z "$d" ]; then
      PKGNAME=OCB
      wlog "##### Module OCB"
    else
      run_traced "cd $d"
      PKGNAME=$(basename $d)
      wlog "##### Module $PWD"
    fi
    run_traced "please synchro . zero-merged"
    s=$?; [ ${s-0} -ne 0 ] && sts=$s
    if [ $s -eq $STS_SUCCESS ]; then
      run_traced "travis"
      s=$?; [ ${s-0} -ne 0 ] && sts=$s
      if [ $s -eq $STS_SUCCESS ]; then
        run_traced "please synchro . zero"
        PYPKGS[$PKGNAME]='Ok'
        wlog "### travis test of $PKGNAME success!"
      else
        PYPKGS[$PKGNAME]='FAILED'
        wlog "### travis test of $PKGNAME FAILED!"
      fi
    else
      PYPKGS[$PKGNAME]='Not synchronized'
      wlog "### synchronization of $PKGNAME FAILED!"
    fi
    return $sts
}


synchronize_odoo() {
# synchronize_odoo ($dow)
    local l n s
    local dow=$1
    local VERSION=
    local sts=$STS_SUCCESS
    local DOW_SEED=$(get_cfg_value "" "DOW_SEED")
    unset PYPKGS
    declare -gA PYPKGS
    wlog "========================================================"
    wlog "======            Starting Odoo tests             ======"
    for VERSION in 6.1 7.0 8.0 9.0 10.0; do
      n=$(echo $VERSION|grep -Eo [0-9]*|head -n1)
      let n="$DOW_SEED-$n"
      if [ $n -ne $dow ]; then
        continue
      fi
      wlog "====== Odoo $VERSION ======"
      for d in $HOME/$VERSION/*; do
        if [ -d $d ]; then
          if [ -d $d/.git ]; then
            synchronize_module_odoo $d
            s=$?; [ ${s-0} -ne 0 ] && sts=$s
          fi
        fi
      done
      synchronize_module_odoo
      wlog "--------------------------------------------------------"
      for PKGNAME in ${!PYPKGS[*]}; do
        x=$(printf "%-64.64s: %s" "$PKGNAME" "${PYPKGS[$PKGNAME]}")
        wlog "$x"
      done
      wlog "--------------------------------------------------------"
    done
    return $sts
}


exit_n_status() {
  if [ $sts -eq $STS_SUCCESS ]; then
    generate_svg "$THIS($USER)" "OK" "$__version__"
    if [ $EUID -eq 0 ]; then
      publish_svg "."
    fi
    if [ $opt_dry_run -eq 0 -a $opt_replica -gt 0 -a "$HOSTNAME" == "$DEV_HOST" ]; then
      elog "$ ssh $PRD_HOST \"~/bin/cronow -s $THIS\""
      ssh $PRD_HOST "~/bin/cronow -s $THIS"
    fi
    if [ $opt_dry_run -eq 0 ]; then
      wlog "### Test $__version__ successfully terminated"
    else
      wlog "+++ Dry-run $__version__ executed with success +++"
    fi
  else
    generate_svg "$USER" "FAIL" "$__version__"
    if [ $EUID -eq 0 ]; then
      publish_svg "."
    fi
    if [ $opt_dry_run -eq 0 ]; then
      wlog "!?!?!?!? Test $__version__ failed!!!! !?!?!?!?"
    else
      wlog "!?!?!?!? ++ This test $__version__ cannot be really used!!!! !?!?!?!?"
    fi
  fi
  exit $sts
}


conf_default() {
    if [ -n "$HOSTNAME_DEV" ]; then
      set_cfg_def "DEV_HOST" "$HOSTNAME_DEV"
    else
      set_cfg_def "DEV_HOST" "shsde[a-z][0-9]*"
    fi
    if [ -n "$HOSTNAME_PRD" ]; then
      set_cfg_def "DEV_HOST" "$HOSTNAME_PRD"
    else
      set_cfg_def "PRD_HOST" "shsprd[0-9]*"
    fi
    set_cfg_def "ME_BOS" "test_nightly .test_nightly.conf.sample"
    set_cfg_def "MYPKG" "travis_emulator"
    set_cfg_def "HTML_SVG_DIR" "/var/www/html/wp-zi/wp-content/uploads/ci-ct"
    set_cfg_def "WWW_DWNLOAD_DIR" "/var/www/html/mw/download"
    set_cfg_def "ODOO_SETUP" "__openerp__.py"
    set_cfg_def "svc_name" "openerp-server"
    set_cfg_def "CLODIR" "/opt/odoo/clodoo"
    set_cfg_def "SLEEP_TIME" "30"
    set_cfg_def "XFLIST__zar" "bckconf bckconf.py pg_db_active restconf restconf.py bckwww restwww bckdb bckdb.py restdb restdb.py zarlib.py zar_upd"
    set_cfg_def "DOW_SEED" "11"
    set_cfg_def "ODOO_SYNCHRO_BEG" "2100"
    set_cfg_def "ODOO_SYNCHRO_END" "0300"
}


FCONF=$TDIR/.$THIS.conf

# main
OPTOPTS=(h        A         C        E        K        I       n           O        R           t        V           v           W          8     9)
OPTDEST=(opt_help opt_nall  opt_ncld opt_edit opt_cron opt_xtl opt_dry_run opt_odoo opt_replica opt_test opt_version opt_verbose opt_whatis opt_8 opt_9)
OPTACTI=(1        "*>"      "*>"     1        1        1       1           "*>"     1           1        "*>"        1           "=>"       1     1)
OPTDEFL=(0        ""        ""       0        0        0       0           ""       0           0        ""          0           ""         0     0)
OPTMETA=("help"   "not_all" "nocld"  ""       "cron"   ""      "noop"      "odoo"   "replica"   "test"   "version"   "verbose"   "param"    "x"   "x")
OPTHELP=("this help"\
 "do not execute all Odoo test"\
 "do not execute clodoo statements"\
 "edit config file"\
 "run in cron environment"\
 "install this script"\
 "do nothing (dry-run)"\
 "run odoo burst tests"\
 "replica test on Production machine"\
 "show configuration and do nothing (dry-run)"\
 "show version"\
 "verbose mode"\
 "whatis param value?"\
 "undocumented"\
 "do not upgrade this script")
 OPTARGS=(tgt)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Test nightly"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

CFG_init
conf_default
link_cfg $FCONF
GBLS="DEV_HOST HTML_SVG_DIR MYPKG PRD_HOST SVG_TMPL_DIR SVG_TMPL_BTNM upgrade_dow WWW_DWNLOAD_DIR XFLIST__zar"
GBLME="ME_BOS PKGSLX"
if [ $opt_xtl -ne 0 ]; then
  cat <<EOF >$TDIR/.test_nightly.conf.sample
[Options]
# DEV_HOST: Development Hostname; package successfully tested are copied to Production Hostname
DEV_HOST=shsprd17
# PRD_HOST: Production Hostname
PRD_HOST=shsdef16
# ME_BOS: Myself Bill Of Software to update
ME_BOS=test_nightly,.test_nightly.conf.sample
# SVG_TMPL_DIR: SVG templates directory
SVG_TMPL_DIR=/var/www/svg-templates
# SVG_TMPL_BTNM: Button OK/Fail name
SVG_TMPL_BTNM=button-ci-ct.svg
# PKGSLX: PYPI packages to test nightly
PKGSLX=clodoo,lisa,os0,pytok,travis_emulator,wok_code,wok_news,z0lib,z0tester,zar,zerobug
# PKGSLX=travis_emulator,z0lib,zar
# MYPKG: Package contains test_nightly itself
MYPKG=travis_emulator
# HTML_SVG_DIR: directory where http daemon searches SVG to publish
HTML_SVG_DIR=/var/www/html/wp-zi/wp-content/uploads/ci-ct
# WWW_DWNLOAD_DIR: directory for public download
WWW_DWNLOAD_DIR=/var/www/html/mw/download
# upgrade_dow: day of the week to upgrade all packages
# Value should be 3 (Wednesday) on Development host and 4 (Thursday) on Production host
upgrade_dow=5
#
# pip_pkgver__{PKG}: version required for package when update
# reportlab require 3.1.44; on development host is running 3.2.0 to test
pip_pkgver__babel=1.3
pip_pkgver__decorator=3.4.0
pip_pkgver__docutils=0.12
pip_pkgver__feedparser=5.1.3
pip_pkgver__gdata=2.0.18
pip_pkgver__gevent=1.0.2
pip_pkgver__jinja2=2.7.3
pip_pkgver__lxml=3.4.1
pip_pkgver__mako=1.0.1
pip_pkgver__mock=1.0.1
pip_pkgver__passlib=1.6.2
pip_pkgver__pillow=2.7.0
pip_pkgver__psutil=2.2.0
pip_pkgver__psycogreen=1.0
pip_pkgver__psycopg2=2.5.4
pip_pkgver__pydot=1.0.2
pip_pkgver__pyparsing=2.0.3
pip_pkgver__pypdf=1.13
pip_pkgver__pyserial=2.7
pip_pkgver__python-dateutil=2.4.0
pip_pkgver__python-ldap=2.4.19
pip_pkgver__python-openid=2.2.5
pip_pkgver__pytz=2014.10
pip_pkgver__pyusb=1.0.0b2
pip_pkgver__pyyaml=3.11
pip_pkgver__qrcode=5.1
pip_pkgver__reportlab=3.1.44
pip_pkgver__requests=2.6.0
pip_pkgver__simplejson=3.5.3
pip_pkgver__six=1.9.0
pip_pkgver__unittest2=0.5.1
pip_pkgver__vatnumber=1.2
pip_pkgver__werkzeug=0.9.6
pip_pkgver__xlwt=0.7.5

pip_pkgver__pylint=1.6.4
pip_pkgver__pylint-plugin-utils=0.2.4
pip_pkgver__astroid=1.4.8
pip_pkgver__pygments=2.0.2
pip_pkgver__restructuredtext_lint=0.12.2
pip_pkgver__unidecode=0.04.17
pip_pkgver__pyxb=1.2.4
EOF
  exit $STS_SUCCESS
fi
if [ $opt_edit -ne 0 ]; then
  vim $TDIR/.test_nightly.conf
  exit $STS_SUCCESS
fi
c=0
for v in 6.1 7.0 8.0 9.0 10.0 11.0; do
  for p in "" v odoo ODOO; do
    odoo_bin=$(build_odoo_param BIN $p$v search)
    if [ -n "$odoo_bin" ] && [ -f "$odoo_bin" ]; then
      ((c++))
    fi
  done
done
if [ $c -gt 2 ]; then
  opt_multi=1
else
  opt_multi=0
fi
for p in $GBLS $GBLME; do
  declare $p="$(get_cfg_value '' $p)"
  if [ -z "${!p}" ]; then
    generate_svg "$USER" "FAIL" "$__version__"
    elog "!? Invalid configuration parameter $p!!"
    exit 1
  fi
done
DEV_DIR=/opt/odoo/dev/pypi/$MYPKG/$MYPKG
for p in $GBLME; do
  declare $p="$(get_cfg_value '' $p)"
  declare $p="${!p//,/ }"
done
if [[ -n "$opt_whatis" ]]; then
  REGBLS="(${GBLS// /|}|${GBLME// /|})"
  if [[ "$opt_whatis" =~ $REGBLS ]]; then
    echo "${!opt_whatis}"
  else
    echo "Unknown!!"
  fi
  exit $STS_SUCCESS
fi
if [ $opt_8 -gt 0 ]; then
  if [ "$TDIR" != "$tgt" ]; then
    cpfiles "$TDIR" "$tgt" "$ME_BOS"
    sts=$?
  else
    sts=$STS_SUCCESS
  fi
  opt_replica=1
  exit_n_status
  exit 1 # never should execute it!
fi
if [ $opt_test -gt 0 ]; then
  for p in $GBLS $GBLME; do
    echo "$p=${!p}"
  done
  wlog "Upgrade myself does .."
  for f in $ME_BOS; do
     echo "\$ cp $TDIR/$f \${tgt}/$f"
  done
  echo "Test list .."
  for f in $PKGSLX; do
     echo "\$ please test # $f"
  done
  exit 0
fi

dom=$(date +%d)
dow=$(date +%w)
yod=$(date +%Y)
dt=$(date +%Y-%m-%d)
if [[ -t 0 || -p /dev/stdin ]]; then
  set_tlog_file "~/$THIS.log" "" "echo"
elif [ $dom -eq 12 ]; then
  set_tlog_file "~/$THIS.log" "new"
else
  set_tlog_file "~/$THIS.log"
fi
sts=$STS_SUCCESS
if [ $opt_cron -gt 0 ]; then
  wlog "Run cron mode"
  detached_login "$@"
  wlog "$PATH"
fi
(($opt_9))||upgrade_myself
# here if upgrade fails or is not needed

ODOO_LTF=~/testlog/result.log

dtme=$(date +"%Y-%m-%d %H:%M:%S")
if [ $opt_dry_run -eq 0 ]; then
  wlog "*************************************************************"
  wlog "Test nightly $__version__ starting by $USER on $dtme"
  wlog "*************************************************************"
else
  wlog "+++ Test nightly $__version__ is dry-running by $USER +++"
fi
if [ $EUID -eq 0 ]; then
  if [ -d /opt/odoo/tools/z0lib ]; then
    cd /opt/odoo/tools/z0lib
    wlog "# Upgrade z0librc"
    _install_z0librc
  fi
  for d in $MYPKG odoo; do
    if [ ! -d /var/run/$d ]; then
      run_traced "mkdir /var/run/$d"
      run_traced "chown odoo:odoo /var/run/$d"
    fi
  done
  if [[ ! "$HOSTNAME" =~ "$DEV_HOST" && ! "$HOSTNAME" =~ "$PRD_HOST" ]]; then
    elog "# Running out of Zeroincombenze environment"
  else
    udow=$(get_cfg_value "" "upgrade_dow")
    if [ $udow -lt $dow ]; then
       ((valid=$udow-$udow+6))
    else
       ((valid=$uudo-$dow))
    fi
    sts=$STS_SUCCESS
    if [ $valid -ne 0 ]; then
      elog "Upgrade packages in $valid days"
    else
      wlog "Upgrade all packages"
      logtm=$(grep "yum -y update" ~/test_nightly.log|tail -n1|awk '{print $1}')
      curtm=$(date +"%Y-%m-%")
      if [ "$curtm" != "$logtm" ]; then
        run_traced "yum -y update"
        run_traced "vmware-config-tools.pl --default"
        run_traced "pip install pip --upgrade"
        # pip install --upgrade --pre --no-deps git+https://github.com/OCA/pylint-odoo.git"
        run_traced "pip install pylint-odoo  --pre --upgrade"
        for f in $(pip list --format=legacy|awk '{print $1}'); do
          f1=${f,,}
          ver=$(get_cfg_value "" "pip_pkgver__$f1")
          if [ -n "$ver" ]; then
            run_traced "pip install $f==$ver --upgrade --no-deps"
          else
            run_traced "pip install $f --upgrade --no-deps"
          fi
        done
        for ver in v7 6 7 8 9 10; do
          svcname=$(build_odoo_param SVCNAME $ver)
          run_traced "service $svcname restart"
        done
      fi
      sts=$STS_SUCCESS
      d=$(readlink -f /opt/odoo/dev/svg)
      publish_svg "$d"
      sts=$?
      if [ $sts -ne $STS_SUCCESS ]; then
        elog "!unpublished svg!!"
      fi
      # if [ "$HOSTNAME" == "$PRD_HOST" ]; then
      #   cd /opt/odoo/tools/lisa/
      #   wlog "\$ lisa package"
      #   lisa package
      # fi
    fi
    vbef=$(lisa -V)
    run_traced "lisa update lisa -q"
    vaft=$(lisa -V)
    [[ "$vbef" == "$vaft" ]] || wlog "# lisa $vbef upgraded to $vaft"
    # if [ "$HOSTNAME" == "$DEV_HOST" ]; then
    #   d=$(readlink -f /opt/odoo/mySAP)
    #   if [ -z "$(grep [[:space:]][[:space:]]pdb.set_trace $d/explsmw_ftcli.py)" ]; then
    #     cpfiles "$d" "$WWW_DWNLOAD_DIR" "explsmw_ftcli.py" "apache:apache"
    #     s=$?
    #     [ $sts -eq $STS_SUCCESS ]&&sts=$s
    #   fi
    # fi
    commit_files zar "$XFLIST__zar"
    s=$s; [[ $s > 0 ]] && sts=$s
    commit_files wok_code av_php
    s=$s; [[ $s > 0 ]] && sts=$s
    commit_files travis_emulator cronow
    s=$s; [[ $s > 0 ]] && sts=$s
    commit_files zar pg_db_active
    s=$s; [[ $s > 0 ]] && sts=$s
    if [ $opt_dry_run -eq 0 ]; then
      wlog "# Python regression test"
      python /opt/odoo/dev/z0testercode.py
      s=$?
      if [ $s -ne $STS_SUCCESS ]; then
        elog "!Python regression test FAILED!!"
      fi
      [ $sts -eq $STS_SUCCESS ]&&sts=$s
    fi
    if [ $opt_dry_run -eq 0 ]; then
      wlog "# Apache mod_evasive test"
      resi=$(perl /usr/share/doc/mod_evasive-1.10.1/test.pl|head -n1)
      rese=$(perl /usr/share/doc/mod_evasive-1.10.1/test.pl|tail -n1)
      if [ "$(echo $resi|grep -v 200)" ]; then
        s=$STS_FAILED
      elif [ "$(echo $rese|grep -v 403)" ]; then
        s=$STS_FAILED
      else
        s=$STS_SUCCESS
      fi
      [[ $s > 0 ]] && elog "!Apache mod_evasive FAILED!!"
      [[ $s > 0 ]] && sts=$s
    fi
    # if [ $sts -eq $STS_SUCCESS ]; then
    #   opt_odoo="oe_upgrade"
    #   oe_upd_burst "$opt_odoo"
    #   s=$?
    #   [ $sts -eq $STS_SUCCESS ] && sts=$s
    # fi
  fi
fi
if [ "$USER" == "odoo" ]; then
  (($opt_dry_run))||check4env
  sts=$STS_SUCCESS
  wlog "========================================================"
  wlog "### PYPI Package tests"
  cd ~/dev/pypi
  unset PYPKGS
  declare -A PYPKGS
  for PKGNAME in *; do
    valid=0
    if [ -d "$PKGNAME" ]; then
      for p in $PKGSLX; do
        if [ "$PKGNAME" == "$p" ]; then
          valid=1
          break
        fi
      done
      if [ $valid -gt 0 ]; then
        test_pkg_pypi $PKGNAME
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
        if [ $s -eq $STS_SUCCESS ]; then
          PYPKGS[$PKGNAME]='Ok'
          pkg_pypi_commit $PKGNAME
        else
          PYPKGS[$PKGNAME]='FAILED'
        fi
      else
        wlog "------------------------------------"
        wlog "### Module $PKGNAME uncertificated!"
      fi
    fi
    cd ~/dev/pypi
  done
  wlog "-----------------------------------------------------------"
  for PKGNAME in ${!PYPKGS[*]}; do
    x=$(printf "%-40.40s: %s" "$PKGNAME" "${PYPKGS[$PKGNAME]}")
    wlog "$x"
  done
  wlog "-----------------------------------------------------------"
  wlog "### End of package tests, commit results into tool package"
  wlog "cd ~/tools"
  cd ~/tools
  if [ $opt_dry_run -eq 0 ]; then
    run_traced "please wep"
    tm=$(date +%H%M)
    if [ $tm -gt 2000 -o $tm -lt 0600 ]; then
      cmsg="[RUN] test nightly"
    else
      cmsg="[RUN] blueman test"
    fi
    run_traced "git commit -am \"$cmsg\""
    if [ "$HOSTNAME" == "$DEV_HOST" -a $sts -eq $STS_SUCCESS ]; then
      run_traced "$ git push"
    # elif [ "$HOSTNAME" == "$PRD_HOST" ]; then
    #   run_traced "$ git pull origin"
    fi
  fi
  tm_beg=$(get_cfg_value "" "ODOO_SYNCHRO_BEG")
  tm_end=$(get_cfg_value "" "ODOO_SYNCHRO_END")
  tm=$(date +%H%M)
  if [ $tm_end -lt $tm_beg ]; then let tm_end="$tm_end+2400"; fi
  wlog "--- Synchronization time $tm_beg < $tm < $tm_end"
  if [ $tm -gt $tm_beg -a $tm -lt $tm_end ]; then
    synchronize_odoo $dow
  fi
  if [ -d /opt/odoo/tools/z0tester ]; then
    cpfiles "/opt/odoo/tools/z0tester" "/opt/odoo/dev" "z0testercode.py"
    s=$?
    [ $sts -eq $STS_SUCCESS ]&&sts=$s
  fi
  if [ $sts -eq $STS_SUCCESS ]; then
    opt_odoo="nightly"
    oe_upd_burst "$opt_odoo"
    s=$?
    [ $sts -eq $STS_SUCCESS ]&&sts=$s
  fi
fi
if [ $opt_9 -gt 0 ]; then
  sts=$STS_SUCCESS
fi
exit_n_status
exit 1 # never should execute it!
