#! /bin/bash
# -*- coding: utf-8 -*-
#
# test nightly Zeroincombenze sofware for continuous integration
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com

if [ $EUID -eq 0 -a -d /opt/odoo/tools/z0lib ]; then
  cd /opt/odoo/tools/z0lib
fi
THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
else
. /etc/z0librc
fi

__version__=0.1.40
# main
OPTOPTS=(h        A         C        V)
OPTDEST=(opt_help opt_nall  opt_ncld opt_version)
OPTACTI=(1        "*>"      "*>"     "*>")
OPTDEFL=(0        ""        ""       "")
OPTMETA=("help"   "not_all" "nocld"  "version")
OPTHELP=("this help"\
 "do not execute all Odoo test"\
 "do not execute clodoo statements"\
 "show version")
 OPTARGS=()

parseoptargs $@
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Test nightly"\
  "(C) 2015 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

# set -x
dom=$(date +%d)
dow=$(date +%w)
yod=$(date +%Y)
dt=$(date +%Y-%m-%d)
#if [ "$PS1" ]; then
if [[ -t 0 || -p /dev/stdin ]]; then
  set_tlog_file "~/$THIS.log" "" "echo"
elif [ $dom -eq 12 ]; then
  set_tlog_file "~/$THIS.log" "new"
else
  set_tlog_file "~/$THIS.log"
fi
TCONF=$TDIR/.$THIS.conf
# development host
DEV_HOST=shsdev14
# production host
PRD_HOST=shsprd14
ODOO_LTF=~/testlog/result.log

wlog "********************************************************"
wlog "Test nightly $__version__ starting by $USER"
wlog "********************************************************"

test_pkg_pypi () {
# test_pkg_pypi (name)
# return: sts
    wlog "------------------------------------"
    wlog "Required test for $1 package ..."
    if [ ! -d ~/dev/pypi/$1 ]; then
      wlog "Package $1 not found!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1 ]; then
      wlog "Invalid package $1!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1/tests ]; then
      wlog "Unit test for package $1 not found"
      exit 0
    fi
    sts=0
    if [ -f ~/dev/pypi/$1/$1/tests/all_tests ]; then
      wlog "> make test  # $1"
      cd ~/dev/pypi/$1/$1/tests
      ./all_tests &>/dev/null
      sts=$?
    elif [ -f ~/dev/pypi/$1/$1/tests/test_$1.py ]; then
      wlog "> make test  # $1"
      cd ~/dev/pypi/$1/$1/tests
      python ~/dev/pypi/$1/$1/tests/test_$1.py &>/dev/null
      sts=$?
    else
      sts=1
    fi
    if [ $sts -eq 0 ]; then
      cd ~/dev/pypi/$1/$1
      wlog "> make wep  # $1"
      make wep
      wlog "Package $1: test successfully terminated"
    else
      wlog "Package $1: test failed! See package log in ~/dev/pypi/$1/$1/tests!!!"
    fi
    return $sts
}


pkg_pypi_commit () {
# pkg_pypi_commit (name)
# return: sts
    wlog "Committing $1 package  ..."
    if [ ! -d ~/dev/pypi/$1 ]; then
      wlog "Package $1 not found!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1 ]; then
      wlog "Invalid package $1!"
      exit 1
    fi
    if [ ! -d ~/dev/pypi/$1/$1/tests ]; then
      wlog "Unit test for package $1 not found"
      exit 0
    fi
    sts=0
    cd ~/dev/pypi/$1/$1
    wlog "> make replace  # $1"
    make replace &>>~/$THIS.log
    if [ "$HOSTNAME" == "$DEV_HOST" -a $sts -eq 0 ]; then
      wlog "> make commit # $1"
      make commit &>>~/$THIS.log
    fi
    return $sts
}


upgrade_myself () {
    src=/opt/odoo/tools/travis_emulator
    tgt=/opt/odoo/dev
    f=test_nightly
    if [ -f $src/$f -a -f $tgt/$f -a "$TDIR" == "$tgt" ]; then
      diff -q $src/$f $tgt/$f
      sts=$?
      if [ $sts -gt 0 ]; then
        wlog "Need upgrade $THIS $__version__ when is running!"
        if [ "$THIS" == "$f" ]; then
          wlog "Cloning $THIS $__version__ to $THIS.sh and run it!"
          cp $0 $0.sh
          $0.sh
          exit 0
        else
          wlog "Upgrade $THIS $__version__ for next run!"
          wlog "> cp $src/$f $tgt/$f"
          cp -v $src/$f $tgt/$f
          wlog "> chown odoo:ERPs $tgt/$f"
          chown openerp:ERPs $tgt/$f
          let l=${#0}-3
          if [ "${0:l}" == ".sh" ]; then
            new=${0:0:l}
            wlog "Run $new after upgrade!"
            $new
            exit 0
          fi
        fi
      fi
    fi
    if [ "$THIS" == "$f" -a -f $src/$f.sh ]; then
      wlog "Remove old $THIS after upgraded itself, now is running $__version__"
      rm -f $src/$f.sh
    fi
}


check4env () {
    if [ ! -d ~/dev/pypi ]; then
      wlog "Invalid environment: missing ~/dev/pypi directory"
      exit 1
    fi
    if [ ! -d ~/dev/_travis ]; then
      wlog "Invalid environment: missing ~/dev/_travis directory"
      exit 1
    fi
    if [ ! -d /opt/odoo/tools ]; then
      mkdir -p /opt/odoo/tools
    fi
    if [ ! -d /opt/odoo/tools/travis_emulator ]; then
      mkdir -p /opt/odoo/tools/travis_emulator
    fi
    if [ ! -d /opt/odoo/7.0 ]; then
      mkdir -p /opt/odoo/7.0
    fi
    if [ ! -d /opt/odoo/8.0 ]; then
      mkdir -p /opt/odoo/8.0
    fi
    if [ ! -d /opt/odoo/7.0/zeroincombenze ]; then
      mkdir -p /opt/odoo/7.0/zeroincombenze
      touch -d $yod-01-01 /opt/odoo/7.0/zeroincombenze/__openerp__.py
    fi
    if [ ! -d /opt/odoo/7.0/zeroincombenze/l10n_it_bbone ]; then
      mkdir -p /opt/odoo/7.0/zeroincombenze/l10n_it_bbone
      touch -d $yod-01-01 /opt/odoo/7.0/zeroincombenze/l10n_it_bbone/__openerp__.py
    fi
    if [ ! -d /opt/odoo/7.0/zeroincombenze/l10n_it_bbone/conf ]; then
      mkdir -p /opt/odoo/7.0/zeroincombenze/l10n_it_bbone/conf
    fi
    if [ ! -d /opt/odoo/7.0/zeroincombenze/l10n_it_fiscal ]; then
      mkdir -p /opt/odoo/7.0/zeroincombenze/l10n_it_fiscal
      touch -d $yod-01-01 /opt/odoo/7.0/zeroincombenze/__openerp__.py
    fi
    if [ ! -d /opt/odoo/7.0/zeroincombenze/l10n_it_fiscal/data ]; then
      mkdir -p /opt/odoo/7.0/zeroincombenze/l10n_it_fiscal/data
    fi
    if [ ! -d /opt/odoo/7.0/zeroincombenze/l10n_it_fiscal/conf ]; then
      mkdir -p /opt/odoo/7.0/zeroincombenze/l10n_it_fiscal/conf
    fi
}


cpfiles () {
# srcpath, tgtpath, files, own
    for f in $3; do
      wlog "> cp $1/$f $2/$f"
      cp -v $1/$f $2/$f
      if [ $4 ]; then
        wlog "> chown $4 $2/$f"
        chown $4 $2/$f
      fi
    done
}


sts=0
if [ $EUID -eq 0 ]; then
  wlog "> Upgrade z0librc"
  _install_z0librc
  if [ "$HOSTNAME" == "$DEV_HOST" -o "$HOSTNAME" == "$PRD_HOST" ]; then
    if [ $dow -eq 4 ]; then
      wlog "> yum -y update"
      yum -y update
    fi
    cpfiles "/opt/odoo/tools/clodoo" "/opt/openerp/dev" "clodoo.py" "odoo:ERPs"
    cpfiles "/opt/odoo/dev" "/opt/openerp/dev" "beauty clodoo.py cronow dist_pkg Makefile prjdiff test_nightly topep8 travis travisrc" "odoo:ERPs"
  fi
fi
if [ "$USER" == "odoo" ]; then
  upgrade_myself
  check4env
  cd ~/dev/pypi
  for pkgname in *; do
    if [ $sts -eq 0 ]; then
      if [ "$pkgname" == "os0" -o "$pkgname" == "pytok" -o "$pkgname" == "travis_emulator" -o "$pkgname" == "z0lib" ]; then
        test_pkg_pypi $pkgname
        sts=$?
        if [ $sts -eq 0 ]; then
          pkg_pypi_commit $pkgname
        fi
      fi
    fi
  done
  if [ "$HOSTNAME" == "$DEV_HOST" -a $sts -eq 0 ]; then
    wlog "cd ~/tools"
    cd ~/tools
    wlog "> git commit -a -m '[RUN] nightly commit'"
    git commit -a -m "[RUN] nightly commit" &>>~/$THIS.log
    wlog "> git push"
    git push &>>~/$THIS.log
  fi
  cpfiles "/opt/odoo/tools/clodoo" "/opt/odoo/dev" "clodoo.py"
fi
if [ "$USER" == "openerp" ]; then
  if [ $sts -eq 0 ]; then
    cd ~/7.0/clodoo
    if [ -z "$opt_ncld" -a -f ./nightly.conf ]; then
      wlog "Starting clodoo operations"
      # clodoo.py -c ./nightly.conf &>/dev/null
      python ~/dev/clodoo.py -c ./nightly.conf
      mv ./nightly.conf ./nightly.bak
    fi
    if [ -z "$opt_nall" ]; then
      wlog "Odoo all tests"
      /opt/odoo/dev/pypi/clodoo/clodoo/odoo_test -Aaqy test
      if [ -n "$(grep \"$dt\" $ODOO_LTF|grep FAIL)" ]; then
        sts=1
        grep "$dt" $ODOO_LTF|grep FAIL
      fi
    fi
  fi
fi
if [ $sts -eq 0 ]; then
  wlog "Test $__version__ successfully terminated"
else
  wlog "?????????? Test $__version__ failed!!!! ??????????"
fi
exit $sts
