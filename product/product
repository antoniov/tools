#! /bin/bash
# -*- coding: utf-8 -*-
# LAMP setup (installer)
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
# This free software is released under GNU Affero GPL3

# TODO remove: python-paste python-pillow python-tempita
#  remove CentOS6: pyOpenSSL jbigkit-libs libwebp python-six
#  ZSI
# gcc always!
# yum install python-requests python-yaml
# codicefiscale pyxb pypdf for italian localization
# pip install unicodecsv pydot vatnumber BeautifulSoup
# products?
# oerplib
# wget
# flake8, autopep8, pylint, pylint-mccabe, coverage, coveralls, github3.py click
# yum install mod_ssl mod_proxy_html iptables-services bind-utils
# setuptools
#[RHEL]
# curl --silent --location https://rpm.nodesource.com/setup_5.x | bash -
# yum -y install nodejs
# curl -L https://npmjs.org/install.sh | sh
#[Debian]
# apt-get install nodejs
# apt-get install npm
#[Common]
# npm install -g less
# npm install -g less-plugin-clean-css
#[End]
# per Kaspersky
# yum install kernel-headers
# yum install glibc.i686

if [ -f z0librc ]; then
. ./z0librc
elif [ -f ~/z0librc ]; then
. ~/z0librc
elif [ -f /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit $STS_FAILED
fi


__version__="0.2.28.5"
STS_FAILED=1
STS_SUCCESS=0
THIS=$(basename $0)
TDIR=$(echo $(readlink -f $(dirname $0)))
if [ "$TDIR" == "/usr/bin" ]; then
  CDIR="/etc/$THIS"
else
  CDIR=$TDIR
fi
FCONF=$CDIR/$THIS.conf
FH=$(xuname "-f")
x=$(xuname "-v")
v=$(echo $x|awk -F. '{print $1}')
DISTO=$(xuname "-d")$v
LXCORE=$(xuname "-c")
MACHARCH=$(xuname "-m")
TMP_LIS_PIP=~/${THIS}_pip.log
if [ -f $TMP_LIS_PIP ]; then
  rm -f TMP_LIS_PIP
fi
_LAST_PKG=""
_LAST_VER=""


DEFPRM=("NAME_Debian"\
 "NAME_RHEL"\
 "LAMP__Debian"\
 "LAMP__RHEL"\
 "LAMP__CentOS7"\
 "VFYLOW"\
 "VFYUPP"\
 "VFYE2NL"\
 "VFYERR"\
 "postgresql-server_svcname"\
 "postgresql_svcname"\
 "SUB_python__Debian"\
 "SUB_python__RHEL"\
 "SUB_python__Debian__DEV"\
 "SUB_python__RHEL__DEV"\
 "SUB_odoo__Debian"\
 "SUB_odoo__RHEL"\
 "SUB_odoo__Debian__DEV"\
 "SUB_odoo__RHEL__DEV"\
 "SUB_mariadb_server"\
 "SUB_openssh_server__RHEL"\
 "SUB_openssh_server__Debian"\
 "SUB_php5"\
 "SUB_odoo__DEV"\
 "TCP_httpd"\
 "TCP_apache2"\
 "TCP_openssh_server"\
 "NOINQ"\
 "${THIS}_vfycmd")


DEFVAL=("apache2 postgresql mysql-server php5 python-dev zlib1g-dev libreadline6-dev"\
 "httpd postgresql-server mysql-server php python-devel zlib-devel readline-devel"\
 "python-pip LAMP_security openssh-server apache2 mysql-server postgresql php5 python"\
 "epel-release pip yum-utils LAMP_security openssh-server httpd mysql-server postgresql-server php python"\
 "epel-release python-pip yum-utils LAMP_security openssh-server httpd mariadb-server postgresql-server php python"\
 "apachectl php php5"\
 "ssh"\
 ""\
 "ssh python"\
 "postgresql"\
 "postgresql"\
 "setuptools python-virtualenv virtualenv\
    libreadline6 libxslt-python python-psycopg2 python-simplejson pytz xlwt PyYAML\
    python-gdata python-ldap python-lxml pydot"\
 "setuptools python-virtualenv virtualenv readline\
    libxslt-python python-psycopg2 python-simplejson pytz xlwt PyYAML\
    gdata python-ldap python-lxml pydot"\
 "python-dev libsasl2-dev libldap2-dev zlib1g-dev libssl-dev libreadline6-dev libsqlite3-dev tk-dev libgdbm-dev libpcap-dev liblzma-dev python-libxml2"\
 "python-devel openldap-devel zlib-devel bzip2-devel openssl-devel ncurses-devel readline-devel sqlite-devel tk-devel gdbm-devel libpcap-devel xz-devel postgresql-devel libxml2 libxml2-devel libxml2-python libxslt-devel"\
 "ghostscript libart-2.0-2\
    libcupsfilters1 libcupsimage2 libgs9 libgs9-common libijs-0.35 libjbig2dec0\
    liblcms2-2 libpaper-utils libpaper1 libpoppler44 libtidy-0.99-0 libwebp5\
    libwebpmux1 poppler-data poppler-utils python-babel python-babel-localedata\
    python-dateutil python-decorator python-docutils python-feedparser\
    python-gevent python-greenlet python-imaging python-jinja2 python-mako\
    python-markupsafe python-mock python-openid passlib python-pil\
    python-psutil python-pybabel python-pychart python-pydot python-pygments\
    python-pyinotify python-pyparsing python-pypdf python-renderpm\
    python-reportlab python-reportlab-accel python-roman python-suds\
    python-unittest2 python-utidylib python-vatnumber python-vobject\
    python-werkzeug docutils-common docutils-doc unidecode wkhtmltopdf"\
 "Babel dejavu-fonts-common dejavu-sans-fonts fontpackages-filesystem\
    libjpeg-turbo libtiff libyaml passlib\
    pyOpenSSL pychart pyparsing python-babel python-beaker python-dateutil python-docutils python-feedparser python-jinja2\
    python-ldap python-lxml python-mako python-markupsafe python-mock python-openid\
    python-psutil python-psycopg2 python-reportlab python-simplejson\
    python-unittest2 urllib3 python-vobject python-werkzeug pytz unidecode wkhtmltopdf"\
 ""\
 "libjpeg-turbo-devel"\
 "mariadb"\
 "openssh-clients telnet"\
 "openssh-client telnet"\
 "php5-mysql php5-common php5-xml"\
 "pcregrep oerplib os0 pytok"\
 "80 443"\
 "80 443"\
 "22"\
 "ghostscript odoo"\
 "/usr/bin/$THIS -V")

get_prm_value() {
# get_prm_value (confname prmname)::DEF*
# return: prmvalue; -> disco, vist
    local p
    if [ -z "$2" ]; then
      p=
      echo $p
      return
    elif [ -f $1 ]; then
      p=$(grep "^$2 *=.*" $1 2>/dev/null|awk -F\= '{print $2}'|tr -d "\"'\r\n")
      p=$(echo $p)
    else
      p=
    fi
    if [ -z "$p" -o "$p" == "None" -o "$p" == "False" ]; then
      local jy=0
      p=""
      while ((jy<${#DEFPRM[*]})); do
        if [ "${2}__${DISTO}" == "${DEFPRM[jy]}" -o "${2}__${FH}" == "${DEFPRM[jy]}" ]; then
          p="${DEFVAL[jy]}"
          break
        elif [ "$2" == "${DEFPRM[jy]}" ]; then
          p="${DEFVAL[jy]}"
          break
        fi
        ((++jy))
      done
      if [ "$p" -a $opt_dev -gt 0 ]; then
        local jy=0
        while ((jy<${#DEFPRM[*]})); do
          if [ "${2}__${DISTO}__DEV" == "${DEFPRM[jy]}" -o "${2}__${FH}__DEV" == "${DEFPRM[jy]}" ]; then
            p="$p ${DEFVAL[jy]}"
          elif [ "$2" == "${DEFPRM[jy]}__DEV" ]; then
            p="$p ${DEFVAL[jy]}"
          fi
          ((++jy))
        done
      fi
    fi
    if [ -z "$p" ]; then
      if [ "$2" == "SUB_LAMP_security" ]; then
        if [ "$FH" == "RHEL" ]; then
          if [ "$DISTO" == "CentOS7" ]; then
            p="libffi-devel pyOpenSSL pyasn1 ndg-httpsclient"
          else
            p="openssl-devel libffi-devel pyOpenSSL pyasn1 ndg-httpsclient"
          fi
        else
          p="libffi-dev libssl-dev python-openssl build-essential"
        fi
      elif [ "$2" == "SUB_mysql_server" ]; then
        if [ "$FH" == "Debian" ]; then
          p="libapache2-mod-auth-mysql"
        fi
      elif [ "$2" == "SUB_php" ]; then
        p="php-mysql php-common php-xml"
      elif [ "$2" == "SUB_postgresql_server" ]; then
        if [ $opt_grf -gt 0 ]; then
          p="pgadmin3"
        else
          p=""
         fi
      elif [ "$2" == "SUB_postgresql" ]; then
        p="postgresql-client-common postgresql-contrib"
        if [ $opt_grf -gt 0 ]; then
          p="$p pgadmin3"
        fi
      elif [ "$2" == "PIP_PKGS" ]; then
        p="oerplib virtualenv Babel python-ldap python-dateutil python-openid os0 pytok pyasn1 ndg-httpsclient pytz gdata PyYAML xlwt unidecode urllib3 passlib wkhtmltopdf"
      elif [ "$2" == "STD_PKGS" ]; then
        p="epel-release python-pip pip yum-utils openssh-server httpd mariadb-server postgresql-server php python"
        p="$p apache2 mysql-server postgresql php5 php-mysql php-common php-xml zlib-devel zlib1g-dev bzip2-devel openssl-devel libssl-dev"
        p="$p python-dev python-devel ncurses-devel sqlite-devel odoo ghostscript"
        p="$p antiword docutils-common docutils-doc libart-2.0-2 libcupsfilters1 libcupsimage2 libgs9 libgs9-common"
        p="$p libijs-0.35 libjbig2dec0 liblcms2-2 libpaper-utils libpaper1 libpoppler44 libtidy-0.99-0 libwebp5 libwebpmux1"
        p="$p poppler-data poppler-utils python-babel python-babel-localedata python-decorator python-docutils python-feedparser"
        p="$p python-gevent python-greenlet python-imaging python-jinja2 python-mako python-markupsafe python-mock"
        p="$p python-pil python-psutil python-pybabel python-pychart python-pydot python-pygments python-pyinotify python-pyparsing"
        p="$p python-pypdf python-renderpm python-reportlab python-reportlab-accel python-roman python-suds python-unittest2"
        p="$p python-utidylib python-vatnumber python-vobject python-werkzeug"
      elif [ "$2" == "NAME_ALIAS" ]; then
        if [ "$DISTO" == "CentOS7" ]; then
          p="mysql mysql-server pip pyopenssl"
        elif [ "$FH" == "RHEL" ]; then
          p="mariadb-server mysql pyopenssl"
        else
          p="mariadb-server mysql pip"
        fi
        p="$p babel"
      elif [ "$2" == "NAME_REAL" ]; then
        if [ "$DISTO" == "CentOS7" ]; then
          p="mariadb-server mariadb-server python-pip pyOpenSSL"
        elif [ "$FH" == "RHEL" ]; then
          p="mysql-server mysql-server pyOpenSSL"
        else
          p="mysql-server mysql-server python-pip"
        fi
        p="$p Babel"
      elif [ "$2" == "NAME_VIRTUAL" ]; then
        p="LAMP LAMP_security PYTHON_DEVELOVER"
      elif [ "$2" == "apache2_cmdname" -o  "$2" == "httpd_cmdname" ]; then
        p="apachectl"
      elif [ "$2" == "postgresql_cmdname" -o  "$2" == "postgresql-server_cmdname" ]; then
        p="psql"
      elif [ "$2" == "apache2_svcname" -o "$2" == "httpd_svcname" -o "$2" == "mariadb_svcname" ]; then
        let l=${#2}-8
        p="${2:0:l}"
      elif [ "$2" == "openssh-server_svcname" ]; then
        if [ "$FH" == "RHEL" ]; then
          p="sshd"
        else
          p="ssh"
        fi
      elif [ "${2: -15}" == "-server_svcname" ]; then
        let l=${#2}-15
        if [ "$FH" == "RHEL" ]; then
          p="${2:0:l}d"
          if [ "$p" == "mariadbd" ]; then
            p="mariadb"
          fi
        else
          p="${2:0:l}"
        fi
      elif [ "$2" == "openssh-server_cmdname" ]; then
        p=""
      elif [ "$2" == "openssh-client_cmdname" -o "$2" == "openssh-clients_cmdname" ]; then
        p="ssh"
      elif [ "$2" == "python-pip_cmdname" ]; then
        p="pip"
      elif [ "${2: -8}" == "_cmdname" ]; then
        let l=${#2}-8
        p="${2:0:l}"
      elif [ "${2: -7}" == "_vfycmd" ]; then
        let l=${#2}-7
        x="${2:0:l}"
        if [ -z "$x" -o "$(echo -e \\"$PIP_PKGS\\"|grep [[:space:]]$x[[:space:]] 2>/dev/null)" ]; then
          p=
        elif [ -z "$x" -o "$(echo \\"$NOINQ\\"|grep [[:space:]]$x[[:space:]] 2>/dev/null)" ]; then
          p=
        elif [ "$(echo \\"$VFYLOW\\"|grep [[:space:]]$x[[:space:]] 2>/dev/null)" ]; then
          p="$x -v"
        elif [ "$(echo \\"$VFYUPP\\"|grep [[:space:]]$x[[:space:]] 2>/dev/null)" ]; then
          p="$x -V"
        else
          p="$x --version"
        fi
      fi
    fi
    if [ -z "$p" ]; then
      echo $p
    elif [[ $2 =~ (^[A-Z].*$) ]];  then
      echo " $p "
    else
      echo $p
    fi
    # echo "get_prm_value ('$1' '$2')::$DISTO($FH)=$p;;">>~/product.his    #debug
}

init_cfg () {
# init_cfg (pkgname)::FCONF,NAME*,VFY*,STD*,PIP*,NOINQ*
# return:
    # echo "init_cfg  ('$1')::$FCONF($FH)=$p;;">>~/product.his    #debug
    $(a_new "3")
    $(a_active "3")
    LAMP=$(get_prm_value $FCONF "LAMP")
    if [ -n "$opt_odoo" ]; then
      LAMP="$LAMP odoo"
    fi
    iter=$(set_iter $1)
    for pkgname in $iter; do
      realname=$(prod realname $pkgname)
      export SUB_${pkgname//-/_}="$(get_prm_value $FCONF SUB_${pkgname//-/_})"
      export TCP_${pkgname//-/_}="$(get_prm_value $FCONF TCP_${pkgname//-/_})"
    done
    NOINQ="$(get_prm_value $FCONF NOINQ)"
    VFYLOW="$(get_prm_value $FCONF VFYLOW)"
    VFYUPP="$(get_prm_value $FCONF VFYUPP)"
    VFYE2NL="$(get_prm_value $FCONF VFYE2NL)"
    VFYERR="$(get_prm_value $FCONF VFYERR)"
    PIP_PKGS="$(get_prm_value $FCONF PIP_PKGS)"
    STD_PKGS="$(get_prm_value $FCONF STD_PKGS)"
    NAME_RHEL=($(get_prm_value $FCONF NAME_RHEL))
    NAME_Debian=($(get_prm_value $FCONF NAME_Debian))
    NAME_ALIAS=($(get_prm_value $FCONF NAME_ALIAS))
    NAME_REAL=($(get_prm_value $FCONF NAME_REAL))
    NAME_VIRTUAL=($(get_prm_value $FCONF NAME_VIRTUAL))
}

print_title () {
    if [ $opt_quiet -eq 0 ]; then
      wlog "$1"
    fi
}

verbose_msg () {
    if [ $opt_verbose -gt 0 -a $test_mode -eq 0 ]; then
      elog "$@"
    fi
}

test_msg () {
    if [ $test_mode -eq 0 ]; then
      echo "$@"
    else
      elog "$@"
    fi
}

set_iter () {
# set_iter (pkgname)
# return: <pkg_list>
  if [ -z "$1" ]; then
    local iter="$LAMP"
  elif [ "${!1}" ]; then
    local iter="${!1}"
  else
    local iter="$1"
  fi
  if $(is_virtualname $1); then
    if [ -z "$(echo \" $iter \"|grep [[:space:]]$1[[:space:]] 2>/dev/null)" ]; then
      local iter="$1 $iter"
    fi
  fi
  echo "$iter"
}


run_traced () {
# (cmd, user, login(0|1))
    local xcmd="$1"
    if [ -n "$2" -a "$2" != "$USER" ]; then
      if [ ${3:-0} -gt 0 ]; then
        xcmd="sudo -iu$2 $1"
      else
        xcmd="sudo -u$2 $1"
      fi
    fi
    if [ $opt_dry_run -eq 0 ]; then
      if [ "${1:0:5}" != "wlog " ];then
        wlog "--> $xcmd"
      fi
      if [ "${1:0:1}" != "#" ]; then
        eval "$xcmd"
      fi
    elif [ "${1:0:6}" != "sleep " ]; then
      echo "--> $xcmd"
      if [ "${1:0:3}" == "cd " ]; then
        eval "$xcmd"
      fi
    fi
}

enable_port () {
    # echo "enable_port ('$1' '$2')">>~/product.his #debug
    local port=$1
    local prot=$2
    if [ "$prot" != "tcp" -a "$prot" != "upd" ]; then
       prot=tcp
    fi
    if [ "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]port_${prot}_${port}[[:space:]] 2>/dev/null)" ]; then
      x="port_$prot_$port"
    elif [ "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]port_${prot}_${port}[[:space:]] 2>/dev/null)" ]; then
      x=""
    else
      x=$(iptables -S 2>/dev/null|grep "\-p *$prot *.*\-dport *$port" 2>/dev/null)
    fi
    if [ -z "$x" ]; then
      run_traced "iptables -A INPUT -p $prot -m state --state NEW -m $prot --dport $port -j ACCEPT"
    fi
}

disable_port () {
    # echo "disable_port ('$1' '$2')">>~/product.his #debug
    local port=$1
    local prot=$2
    if [ "$prot" != "tcp" -a "$prot" != "upd" ]; then
       prot=tcp
    fi
    if [ "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]port_${prot}_${port}[[:space:]] 2>/dev/null)" ]; then
      x="port_$prot_$port"
    elif [ "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]port_${prot}_${port}[[:space:]] 2>/dev/null)" ]; then
      x=""
    else
      x=$(iptables -S 2>/dev/null|grep "\-p *$prot *.*\-dport *$port" 2>/dev/null)
    fi
    if [ "$x" ]; then
      run_traced "iptables -D INPUT -p $prot -m state --state NEW -m $prot --dport $port -j ACCEPT"
    fi
}

get_arch () {
    if [ "$1" == "CentOS7" -o "$1" == "CentOS" -o "$1" == "RHEL" ]; then
      DISTO="CentOS7"
      FH="RHEL"
      LXCORE=
      MACHARCH="x86_64"
    elif [ "$1" == "CentOS6" ]; then
      DISTO="CentOS6"
      FH="RHEL"
      LXCORE=
      MACHARCH="i686"
    elif [ "$1" == "Ubuntu14" -o "$1" == "Ubuntu"  -o "$1" == "Debian" ]; then
      DISTO="Ubuntu14"
      FH="Debian"
      LXCORE="trusty"
      MACHARCH="x86_64"
    elif [ "$1" == "Ubuntu12" ]; then
      DISTO="Ubuntu12"
      FH="Debian"
      LXCORE="precise"
      MACHARCH="i686"
    else
      echo "Invalid architecture"
    fi
}

get_locale_name () {
    local pn=
    if [ "$1" == "it" ]; then
      if [ "$opt_oed" == "odoo" -o "$opt_oed" == "oca" ]; then
        pn="https://github.com/OCA/l10n-italy.git"
      else
        pn="https://github.com/zeroincombenze/l10n-italy.git"
      fi
    elif [ "$1" == "be" ]; then
      pn="https://github.com/OCA/l10n-belgium.git"
    elif [ "$1" == "ch" ]; then
      pn="https://github.com/OCA/l10n-switzerland.git"
    elif [ "$1" == "es" ]; then
      pn="https://github.com/OCA/l10n-spain.git"
    elif [ "$1" == "fr" ]; then
      pn="https://github.com/OCA/l10n-france.git"
    elif [ "$1" == "nl" ]; then
      pn="https://github.com/OCA/l10n-netherlands.git"
    elif [ ${#1} -ne 2 ]; then
      if [ "$opt_oed" == "odoo" -o "$opt_oed" == "oca" ]; then
        pn="https://github.com/OCA/$1.git"
      else
        pn="https://github.com/zeroincombenze/$1.git"
      fi
    fi
    echo "$pn"
}

get_locale_dir () {
    local addons=$(echo $1|awk -F/ '{print $5}'|awk -F. '{print $1}')
    echo "$addons"
}

install_submodules () {
    local opt_osub="$1"
    local ov="$2"
    for iso in ${opt_osub//,/ }; do
      run_traced "cd /opt/odoo/$ov.0"
      pn=$(get_locale_name "$iso")
      if [ -z "$pn" ]; then
        if [ ${#iso} -ne 2 ]; then
          elog  "Invalid submodule name $iso"
        else
          elog  "Invalid $iso in -l $opt_locale switch"
        fi
      else
        addons=$(get_locale_dir "$pn")
        if [ -f .gitignore -o $test_mode -gt 0 ]; then
          if [ -z "$(grep "$addons/" .gitignore 2>/dev/null)" -o $test_mode -gt 0 ]; then
            run_traced "echo \"$addons/\">>.gitignore"
          fi
        fi
        if [ -d $addons -a $test_mode -eq 0 ]; then
          run_traced "cd $addons"
          run_traced "git pull origin $ov.0" "odoo"
          run_traced "cd /opt/odoo/$ov.0"
        else
          run_traced "git clone -b $ov.0 $pn $addons $git_opts" "odoo"
          run_traced "git submodule add -b $ov.0 -f $pn $addons" "odoo"
          if [ "opt_oed" == "zeroincombenze" ]; then
            run_traced "git remote add upstream https://github.com/OCA/$addons.git" "odoo"
          fi
          run_traced "cd /opt/odoo/$ov.0"
        fi
      fi
    done
}

is_virtualname () {
    local pkgname=$1
    local sts=$STS_FAILED
    if [ "$pkgname" ]; then
      local jy=0
      while ((jy<${#NAME_VIRTUAL[*]})); do
        if [ "$1" == "${NAME_VIRTUAL[jy]}" ]; then
          sts=$STS_SUCCESS
          break
        fi
        ((++jy))
      done
    fi
    return $sts
}

get_realname () {
# get_realname (pkgname)::NAME*
# return: realname
    local pkgname=$1
    if [ "$pkgname" ]; then
      local jy=0
      while ((jy<${#NAME_ALIAS[*]})); do
        if [ "$1" == "${NAME_ALIAS[jy]}" ]; then
          pkgname="${NAME_REAL[jy]}"
          break
        fi
        ((++jy))
      done
      if [ "$FH" == "RHEL" ]; then
        jy=0
        while ((jy<${#NAME_Debian[*]})); do
          if [ "$pkgname" == "${NAME_Debian[jy]}" ]; then
            pkgname="${NAME_RHEL[jy]}"
            break
          fi
          ((++jy))
        done
        if [ "${2: -6}" == "-devel" ]; then
          let l=${#2}-2
          pkgname="${2:0:l}"
        fi
      elif [ "$FH" == "Debian" ]; then
        jy=0
        while ((jy<${#NAME_RHEL[*]})); do
          if [ "$pkgname" == "${NAME_RHEL[jy]}" ]; then
            pkgname="${NAME_Debian[jy]}"
            break
          fi
          ((++jy))
        done
      fi
    fi
    echo $pkgname
}

get_pkg_ver_inq () {
# get_pkg_ver_inq (pkgname cmdname vfycmd xtlcmd stscmd)
# return: ->  pkgversion,xtlcmd,stscmd
    # echo "get_pkg_ver_inq ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname="$1"
    local vfycmd="$3"
    if [ "$pkgname" == "$_LAST_PKG" ]; then
      pkgversion="$_LAST_VER"
    elif $(is_virtualname $pkgname); then
        pkgversion=
  elif [ "$pkgname" == "odoo" ]; then
    pkgversion=
    if [ "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      pkgversion=7.0
    elif [ "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      pkgversion=
    else
      if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
        local ov_iter="9 8 7"
      else
        local ov_iter=$opt_odoo
      fi
      for ov in $ov_iter; do
        if [ -d /opt/odoo/$ov.0 ]; then
          if [ -f /opt/odoo/$ov.0/openerp-server ]; then
            pkgversion=$ov.0
            break
          fi
        fi
      done
    fi
    else
      pkgversion=
      if [ "$vfycmd" ]; then
        x="$(echo "$vfycmd"|awk -F\| '{print $1}'|awk -F'2>' '{print $1}'|awk -F'&>' '{print $1}')"
        if [ "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
          sts=$STS_SUCCESS
        elif [ "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
          sts=127
        else
          p=$($x &>/dev/null)
          sts=$?
        fi
      else
        sts=127
      fi
      if [ $sts -ne 127 -a $sts -ne 2 ]; then
        if [ "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
          pkgversion=".($vfycmd)"
        elif [ "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
          pkgversion=
        else
          if [ "$(echo \\"$VFYERR\\"|grep [[:space:]]$cmdname[[:space:]] 2>/dev/null)" ]; then
            pkgversion="$($vfycmd &>~/tmp.log; cat ~/tmp.log|head -n1; rm -f ~/tmp.log)"
          elif [ "$(echo \\"$VFYE2NL\\"|grep [[:space:]]$cmdname[[:space:]] 2>/dev/null)" ]; then
            pkgversion="$($vfycmd|head -n1)"
          else
            pkgversion="$($vfycmd 2>/dev/null|head -n1)"
          fi
        fi
        _LAST_VER="$pkgversion"
        _LAST_PKG="$pkgname"
      else
        pkgversion=
      fi
    fi
    # echo "ret:$pkgversion;;">>~/product.his    #debug
}

get_pkg_ver_pip () {
# get_pkg_ver_pip 'pkgname' 'cmdname' 'vfycmd' 'xtlcmd' 'stscmd'
# return: pkgversion,xtlcmd,stscmd
    # echo "get_pkg_ver_pip ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname="$1"
    local vfycmd="$3"
    if [ "$pkgname" == "$_LAST_PKG" ]; then
      pkgversion="$_LAST_VER"
    else
      pkgversion=
      if [ "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
        pkgversion="($stscmd list|grep $pkgname).($vfycmd)"
      elif [ "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
        pkgversion=
      else
        if [ -f $TMP_LIS_PIP ]; then
          pkgversion="$(cat $TMP_LIS_PIP|grep $pkgname 2>/dev/null|awk '{print $2}'|tr -d ', \r\n\(\)')"
        else
          pkgversion="$($stscmd list 2>/dev/null|grep $pkgname 2>/dev/null|awk '{print $2}'|tr -d ', \r\n\(\)')"
        fi
      fi
      if [ "$pkgversion" ]; then
        _LAST_VER="$pkgversion"
        _LAST_PKG="$pkgname"
      fi
    fi
}

get_pkg_ver_rpm () {
# get_pkg_ver_rpm 'pkgname' 'cmdname' 'vfycmd' 'xtlcmd' 'stscmd'
# return: pkgversion,xtlcmd,stscmd
    # echo "get_pkg_ver_rpm ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname="$1"
    local vfycmd="$3"
    if [ "$pkgname" == "$_LAST_PKG" ]; then
      pkgversion="$_LAST_VER"
    else
      pkgversion=
      if [  "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
        pkgversion="($stscmd -q --qf '%{VERSION}').($vfycmd)"
      elif [ "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
        pkgversion=
      else
        x=$($stscmd -q --qf '%{VERSION}' $pkgname 2>/dev/null)
        sts=$?
        if [ $sts -eq $STS_SUCCESS ]; then
          pkgversion="$x"
        fi
      fi
      if [ "$pkgversion" ]; then
        _LAST_VER="$pkgversion"
        _LAST_PKG="$pkgname"
      fi
    fi
}

get_pkg_ver_dpkg () {
# get_pkg_ver_dpkg 'pkgname' 'cmdname' 'vfycmd' 'xtlcmd' 'stscmd'
# return: pkgversion,xtlcmd,stscmd
    # echo "get_pkg_ver_dpkg ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname="$1"
    local vfycmd="$3"
    if [ "$pkgname" == "$_LAST_PKG" ]; then
      pkgversion="$_LAST_VER"
    else
      pkgversion=
      if [ "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
        pkgversion="($stscmd -W $pkgname).($vfycmd)"
      elif [ "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
        pkgversion=
      else
        x="$($stscmd -f='${Status}' -W $pkgname 2>/dev/null|awk '{print $3}')"
        sts=$?
        if [ $sts -eq $STS_SUCCESS -a "$x" != "installed" ]; then
          sts=$STS_FAILED
        fi
        if [ $sts -eq $STS_SUCCESS ]; then
          pkgversion="$($stscmd -f='${Version}' -W $pkgname 2>/dev/null|awk -F\- '{print $1}')"
        fi
      fi
      if [ "$pkgversion" ]; then
        _LAST_VER="$pkgversion"
        _LAST_PKG="$pkgname"
      fi
    fi
}

get_pkg_ver () {
# get_pkg_ver 'pkgname' 'cmdname' 'vfycmd' 'xtlcmd' 'stscmd'
# return: pkgversion,xtlcmd,stscmd,vfycmd
    # echo "get_pkg_ver ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname=$1
    local cmdname=$2
    vfycmd=$3
    xtlcmd=$4
    stscmd=$5
    if $(is_virtualname $pkgname); then
      pkgversion="N/A"
      vfycmd=
    elif [ "$pkgname" == "odoo" ]; then
      get_pkg_ver_inq "$1" "$2" "$3" "$4" "$5"
    elif [ "$stscmd" == "pip" ]; then
      pkgversion=
      vfycmd=
    else
      get_pkg_ver_inq "$1" "$2" "$3" "$4" "$5"
    fi
    if [ -z "$pkgversion" -a "$pkgname" != "odoo" ]; then
      sts=$STS_FAILED
      if [ "${cmdname:0:1}" != "." -a "${cmdname:0:1}" != "/" ]; then
        if [ "$stscmd" == "rpm" ]; then
          get_pkg_ver_rpm "$1" "$2" "$3" "$4" "$5"
        elif [ "$stscmd" == "dpkg-query" ]; then
          get_pkg_ver_dpkg "$1" "$2" "$3" "$4" "$5"
        elif [ "$stscmd" == "pip" ]; then
          get_pkg_ver_pip "$1" "$2" "$3" "$4" "$5"
        fi
        if [ -z "$pkgversion" -a "$stscmd" != "pip" ]; then
          if $(pip search $pkgname 2>/dev/null|grep "^$pkgname[ \t]" &>/dev/null); then
            xtlcmd="pip"
            stscmd="pip"
            vfycmd=
            OPTS=
            get_pkg_ver_pip "$1" "$2" "$3" "$4" "$5"
          fi
        fi
      fi
    fi
    # echo "ret:$pkgversion;;">>~/product.his    #debug
}

set_xtlcmds () {
# set_xtlcmds::pkgname opt_yes STD_PKGS, PIP_PKGS
# return: -> xtlcmd, stscmd, vfycmd, 'OPTS'
    if $(is_virtualname $pkgname); then
      xtlcmd="product"
      stscmd="product"
    elif [ "$FH" == "RHEL" ]; then
      xtlcmd="yum"
      stscmd="rpm"
    elif [ "$FH" == "Debian" ]; then
      xtlcmd="apt-get"
      stscmd="dpkg-query"
    else
      xtlcmd="#"
      stscmd="#"
      elog "Invalid platform"
    fi
    OPTS=$opt_yes
    if [ "$pkgname" -a -z "$(echo -e \\"$STD_PKGS\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      if [ "$(echo -e \\"$PIP_PKGS\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
        xtlcmd="pip"
        stscmd="pip"
        vfycmd=
        OPTS=
      fi
    fi
}

set_installcmd () {
# set_installcmd::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
# return: -> cmd, cmd0
    local INSTALLcmd="product_$1_${pkgname//-/_}"
    if [ "$(echo -e \\"$SIMULATE_INSTALL_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      cmd="# $INSTALLcmd (SUCCESS)"
    elif [ "$(echo -e \\"$SIMULATE_INSTALL_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      cmd="# $INSTALLcmd (FAIL)"
    elif [ "$(type -t $INSTALLcmd)" == "function" ]; then
      cmd="$INSTALLcmd $OPTS install $pkgname"
    elif $(is_virtualname $pkgname); then
      cmd="# $INSTALLcmd (VIRTUALNAME)"
    else
      cmd="$xtlcmd $OPTS install $pkgname"
    fi
}

set_updatecmd () {
# set_updatecmd::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
# return: -> cmd, cmd0
    local UPDATEcmd="product_$1_${pkgname//-/_}"
    if [ "$(echo -e \\"$SIMULATE_UPDATE_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      cmd="# $UPDATEcmd (SUCCESS)"
    elif [ "$(echo -e \\"$SIMULATE_UPDATE_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      cmd="# $UPDATEcmd (FAIL)"
    elif [ "$(type -t $UPDATEcmd)" == "function" ]; then
      cmd="$UPDATEcmd $OPTS update $pkgname"
    elif $(is_virtualname $pkgname); then
      cmd="# $UPDATEcmd (VIRTUALNAME)"
    elif [ "$pkgname" == "python-pip" ]; then
      cmd="pip install --upgrade pip"
    elif [ "$xtlcmd" == "pip" ]; then
      cmd="$xtlcmd $OPTS install $pkgname --upgrade"
    elif [ "$FH" == "RHEL" ]; then
      cmd="$xtlcmd $OPTS update $pkgname"
    else
      cmd0="$xtlcmd $OPTS update $pkgname"
      cmd="$xtlcmd $OPTS upgrade $pkgname"
    fi
}

set_removecmd () {
# set_removecmd::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
# return: -> cmd, cmd0
    local REMOVEcmd="product_$1_${pkgname//-/_}"
    if [ "$(echo -e \\"$SIMULATE_REMOVE_YES\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      cmd="# $REMOVEcmd (SUCCESS)"
    elif [ "$(echo -e \\"$SIMULATE_REMOVE_NO\\"|grep [[:space:]]$pkgname[[:space:]] 2>/dev/null)" ]; then
      cmd="# $REMOVEcmd (FAIL)"
    elif [ "$(type -t $REMOVEcmd)" == "function" ]; then
      cmd="$REMOVEcmd $OPTS update $pkgname"
    elif $(is_virtualname $pkgname); then
      cmd="# $REMOVEcmd (VIRTUALNAME)"
    elif [ "$xtlcmd" == "pip" ]; then
       cmd="$xtlcmd $OPTS uninstall $pkgname"
    else
       cmd="$xtlcmd $OPTS remove $pkgname"
    fi
}

set_configcmd () {
# set_configcmd::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
# return: -> cmd, cmd0
    local CFGcmd="product_$1_${pkgname//-/_}"
    if [ "$(type -t $CFGcmd)" == "function" ]; then
      cmd="$CFGcmd $OPTS config $pkgname"
    else
      cmd="# $CFGcmd"
    fi
}

update_hba_conf () {
    local fnd_mrk=0
    local eorem=0
    local patched=0
    local dt=$(date +%Y-%m-%d)
    while IFS=\~ read -r line; do
      if [ "${line:0:11}" == "# [PRODUCT:" ]; then
        fnd_mrk=1
      elif [[ $line =~ ^[a-zA-Z_].*$ ]]; then
        eorem=1
      fi
      if [ $eorem -eq 1 -a $patched -eq 0 -a $fnd_mrk -eq 0 ]; then
         patched=1
         echo "# [PRODUCT: $dt] Added access to Odoo">>$1.tmp
         echo "# Where user were created, no password was issued, so this configuration uses trust method to connect">>$1.tmp
         echo "# Warning! This method is unsecure for no local connection">>$1.tmp
         echo "# In order to set postgresql secure you must:">>$1.tmp
         echo "# 1. drop users automatically created; type >drop user odoo[7|8|9]">>$1.tmp
         echo "# 2. recreate users">>$1.tmp
         echo "#    type >createuser --createdb --username postgres --no-createrole --no-superuser --pwprompt odoo[7|8|9]">>$1.tmp
         echo "#    Rememeber password you type, because you must insert it in odoo conf file">>$1.tmp
         echo "# 3. Correct following lines, subst 'trust' by 'md5' for users odoo[7|8|9]">>$1.tmp
         echo "# 4. Restart service postgresql">>$1.tmp
         echo "# When you connect to psql console do not forget dbname, type:">>$1.tmp
         echo "# psql -Uodoo[7|8|9] postgres">>$1.tmp
         echo "# User openerp is used by old installation schema of Odoo7 (formerly OpenERP)">>$1.tmp
         echo "local   all         openerp                           peer">>$1.tmp
         echo "host    all         openerp     127.0.0.1/32          trust">>$1.tmp
         echo "host    all         openerp     ::1/128               trust">>$1.tmp
         echo "local   all         odoo                              peer">>$1.tmp
         echo "host    all         odoo        127.0.0.1/32          trust">>$1.tmp
         echo "host    all         odoo        ::1/128               trust">>$1.tmp
         for ov in 7 8 9; do
           echo "local   all         odoo$ov                             trust">>$1.tmp
           echo "host    all         odoo$ov       127.0.0.1/32          trust">>$1.tmp
           echo "host    all         odoo$ov       ::1/128               trust">>$1.tmp
         done
         echo "# [PRODUCT: end automatic configuration]">>$1.tmp
      fi
      echo "$line">>$1.tmp
    done < "$1"
    if [ $opt_dry_run -eq 0 ]; then
      [ -z "opt_yes" ] || vim $1.tmp
      run_traced "mv $1 $1.bak"
      run_traced "mv $1.tmp $1"
    else
      vim $1.tmp
    fi

}

build_groups_list () {
    infile=/etc/group
    outfile=~/z0_x_groups.txt
    if [ $opt_dry_run -eq 0 -a -f $outfile ]; then rm -f $outfile; fi
    while IFS=: read -r group enpass gid other; do
      if [ $gid -ge 400 ]; then
        valid=1
      else
        valid=0
      fi
      if [[ "$group" =~ kluser* ]]; then valid=0; fi
      if [[ "$group" =~ saslauth* ]]; then valid=0; fi
      if [[ "$group" =~ dev131* ]]; then valid=0; fi
      if [[ "$group" =~ cgred* ]]; then valid=0; fi
      if [[ "$group" =~ odoo* ]]; then valid=0; fi
      if [[ "$group" =~ openerp* ]]; then valid=0; fi
      if ((valid)); then
        wlog "Group $group ($gid)"
        if [ $opt_dry_run -eq 0 ]; then
          echo "$group:$enpass:$gid">>$outfile
        fi
      fi
    done < "$infile"
}

build_user_list () {
    infile=/etc/passwd
    outfile=~/z0_x_users.txt
    if [ $opt_dry_run -eq 0 -a -f $outfile ]; then rm -f $outfile; fi
    while IFS=: read -r user enpass uid gid desc home shell; do
      if [ $uid -ge 400 ]; then
        valid=1
      else
        valid=0
      fi
      if [[ "$user" =~ kluser* ]]; then valid=0; fi
      if [[ "$user" =~ saslauth* ]]; then valid=0; fi
      if [[ "$user" =~ dev131* ]]; then valid=0; fi
      if ((valid)); then
        wlog "User $user ($uid) assigned \"$home\" home directory with $shell shell."
        if [ $opt_dry_run -eq 0 ]; then
          echo "$user:$enpass:$uid:$gid:$desc:$home:$shell">>$outfile
        fi
      fi
    done < "$infile"
}

add_groups () {
    sysfile=/etc/group
    infile=~/z0_x_groups.txt
    if [ -f $infile ]; then
      while IFS=: read -r group enpass gid other; do
        if [ $(grep "^$group:" $sysfile 2>/dev/null) ]; then
          wlog "Group $group already exists"
        else
          cmd="groupadd -g $gid $group"
          wlog "$cmd"
          if [ $opt_dry_run -eq 0 ]; then
            $cmd
          fi
        fi
      done < "$infile"
    else
      wlog "File $infile not found!"
    fi
}

add_users () {
    sysfile=/etc/passwd
    infile=~/z0_x_users.txt
    if [ -f $infile ]; then
      while IFS=: read -r user enpass uid gid desc home shell; do
        if [ $(grep "^$user:" $sysfile 2>/dev/null) ]; then
          wlog "User $user already exists"
        else
          if [ ! -d $home ]; then cmd="useradd -m"; else cmd="useradd"; fi
          cmd="$cmd -u $uid -g $gid -d $home -s $shell $user"
          wlog "$cmd"
          if [ $opt_dry_run -eq 0 ]; then
            $cmd
            if [ "$opt_pwd" ]; then
              echo $opt_pwd|passwd --stdin $user
            fi
          fi
        fi
      done < "$infile"
    else
      wlog "File $infile not found!"
    fi
}

prod_install_if () {
# prod (pkgname)
# return: sts -> pkgname, xtlcmd, stscmd, svcname, cmdname, vfycmd
    if $(prod status $1 "-q"); then
      return $STS_SUCCESS
    fi
    prod "install" "$1" "-q"
    return $STS_SUCCESS
}

prod () {
# prod (action pkgname -q level)
# return: sts -> pkgname, xtlcmd, stscmd, svcname, cmdname, vfycmd
# TODO [Debian] aptitude search 'pkgname'
# TODO [RHEL] yum search 'pkgname'
    # echo "prod ('$1' '$2' '$3' '$4')">>~/product.his    #debug
    pkgname=$(get_realname "$2")
    set_xtlcmds
    svcname=$(get_prm_value $FCONF "${pkgname}_svcname")
    cmdname=$(get_prm_value $FCONF "${pkgname}_cmdname")
    vfycmd=$(get_prm_value $FCONF "${cmdname}_vfycmd")
    cmd0=""
    if [ -z "$4" ]; then
      level=0
      local lm=
    else
      level=$4
      let x=$level*2
      local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    fi
    # echo "$pkgname:svc=$svcname:cmd=$cmdname:vfy=$vfycmd:xtl:$xtlcmd:$stscmd;;">>~/product.his #debug
    if [ "$1" == "realname" ]; then
      echo "$pkgname"
      return $STS_SUCCESS
    elif [ "$1" == "installer" ]; then
      echo "$xtlcmd"
      return $STS_SUCCESS
    elif [ "$1" == "vfycmd" ]; then
      echo "$vfycmd"
      return $STS_SUCCESS
    elif [ "$1" == "install" ]; then
      set_installcmd $1
    elif [ "$1" == "update" ]; then
      set_updatecmd $1
    elif [ "$1" == "remove" ]; then
      set_removecmd $1
    elif [ "$1" == "config" ]; then
      set_configcmd $1
    elif [ "$1" == "status" ]; then
      get_pkg_ver "$pkgname" "$cmdname" "$vfycmd" "$xtlcmd" "$stscmd"
      [ -n "$pkgversion" ]
      sts=$?
      if [ "$3" == "-q" ]; then
        return $sts
      elif [ $sts -eq $STS_SUCCESS ]; then
         cmd="wlog $lm $pkgname: installed by $xtlcmd"
      else
         cmd="wlog $lm $pkgname could be installed by $xtlcmd"
      fi
    elif [ "$1" == "version" ]; then
      get_pkg_ver "$pkgname" "$cmdname" "$vfycmd" "$xtlcmd" "$stscmd"
      if [ -z "$pkgversion" ]; then
        pkgversion="$pkgname: unknown version"
      fi
      if [ $opt_quiet -gt 0 ]; then
        cmd="wlog $pkgversion"
      else
        cmd="wlog $lm $pkgname: $pkgversion"
      fi
    elif [ "$1" == "whatis" ]; then
      if $(is_virtualname $pkgname); then
        vfycmd=
      fi
    else
      return $STS_FAILED
    fi
    if [ "$1" == "whatis" ]; then
       local msg="$lm$pkgname (by $xtlcmd)($vfycmd)"
       test_msg "$msg"
    else
      PREcmd="pre_$1_$pkgname"
      if [  "$(echo -e \\"$SIMULATE_YES\\"|grep [[:space:]]pre_$1_$pkgname[[:space:]] 2>/dev/null)" ]; then
        run_traced "# $PREcmd succesfully ended"
      elif [  "$(echo -e \\"$SIMULATE_NO\\"|grep [[:space:]]pre_$1_$pkgname[[:space:]] 2>/dev/null)" ]; then
        run_traced "# $PREcmd failed"
      elif [ "$(type -t $PREcmd)" == "function" ]; then
        $PREcmd "$svcname" "$cmdname" "$vfycmd"
      elif [ "$1" == "remove" -a "$svcname" ]; then
        run_traced "service $svcname stop"
        run_traced "sleep 3"
      fi
      if [ "$cmd0" ]; then
        x=$(echo "$cmd"|awk '{print $1}')
        if [ "$(type -t $x)" == "function" ]; then
          $cmd0
        else
          run_traced "$cmd0"
        fi
      fi
      x=$(echo "$cmd"|awk '{print $1}')
      if [ "$(type -t $x)" == "function" ]; then
        $cmd
      else
        run_traced "$cmd"
      fi
      POSTcmd="post_$1_$pkgname"
      if [ "$(type -t $POSTcmd)" == "function" ]; then
        $POSTcmd "$svcname" "$cmdname" "$vfycmd"
      elif [ "$1" == "install" -a "$svcname" ]; then
        run_traced "service $svcname start"
        run_traced "sleep 3"
      elif [ "$1" == "update" -a "$svcname" ]; then
        run_traced "service $svcname restart"
        run_traced "sleep 3"
      elif [ "$1" == "config" -a "$svcname" ]; then
        run_traced "service $svcname restart"
        run_traced "sleep 3"
      fi
    fi
    if [ "$3" == "-q" ]; then
      return $STS_SUCCESS
    fi
    local X="TCP_${pkgname//-/_}"
    if [ "${!X}" ]; then
      if [ "$1" == "install" -o "$1" == "update" -o "$1" == "config" ]; then
        for port in ${!X}; do
          enable_port $port tcp
        done
      elif [ "$1" == "remove" ]; then
        for port in ${!X}; do
          disable_port $port tcp
        done
      elif [ "$1" == "whatis" ]; then
        for port in ${!X}; do
          test_msg "- TCP port $port"
        done
      fi
    fi
    X="UDP_${pkgname//-/_}"
    if [ "${!X}" ]; then
      if [ "$1" == "install" -o "$1" == "update" -o "$1" == "config" ]; then
        for port in ${!X}; do
          enable_port $port udp
        done
      elif [ "$1" == "remove" ]; then
        for port in ${!X}; do
          disable_port $port tcp
        done
      elif [ "$1" == "whatis" ]; then
        for port in ${!X}; do
          test_msg "- UDP port $port"
        done
      fi
    fi
    SUBlist="SUB_${pkgname//-/_}"
    if [ -z "$level" ]; then level=0; fi
    if [ "${!SUBlist}" -a $level -lt $opt_depth ]; then
      ((level++))
      for p in ${!SUBlist}; do
        realname=$(prod realname $p)
        verbose_msg "Analyzing $realname"
        if [ "$1" == "install" ]; then
          if $(prod status $realname "-q" $level); then
            prod update $realname "" $level
          else
            prod $1 $realname "" $level
          fi
        elif [ "$1" == "update" ]; then
          if $(prod status $realname "-q" $level); then
            prod $1 $realname "" $level
          else
            prod install $realname "" $level
          fi
        elif [ "$1" == "remove" ]; then
          if $(prod status $realname "-q" $level); then
            elog "$realname should be removed"
          fi
        else
          prod $1 $realname "" $level
        fi
      done
      ((level--)) #?
    fi
    if [ $level -eq 0 -a "$FH" == "Debian" -a "$1" == "remove" ]; then
      run_traced "apt-get autoremove"
    fi
    return $STS_SUCCESS
}

product_install_product () {
# product_install_product::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
    if [ "opt_if" ]; then
      SCP="scp -oIdentityFile=$opt_if"
    else
      SCP="scp"
    fi
    if [ -z "$opt_host" ]; then
      if [ "$TDIR" != "/usr/bin" ]; then
        if [ "${TDIR:0:14}" == "/opt/odoo/dev/" ]; then
          local cmd="cp"
        else
          local cmd="mv"
        fi
        run_traced "mkdir -p /etc/$THIS"
        run_traced "$cmd $TDIR/$pkgname /usr/bin"
        run_traced "$cmd $TDIR/${pkgname}.man /usr/bin"
        run_traced "$cmd $TDIR/${pkgname}_bld_ods /usr/bin"
        run_traced "chmod +x /usr/bin/$pkgname*"
        for f in ${pkgname}.conf odoo-server_Debian odoo-server_RHEL odoo-server; do
          if [ -f $TDIR/$f ]; then
            run_traced "cp $TDIR/$f /etc/$THIS"
          fi
        done
        run_traced "_install_z0librc"
      fi
    else
      wlog "Copying config files to host $opt_host"
      if [ -f z0_x_*.txt ]; then
        run_traced "$SCP z0_x_*.txt $opt_host:~/"
      fi
      run_traced "$SCP $TDIR/$pkgname $opt_host:~/"
      run_traced "$SCP $TDIR/${pkgname}.* $opt_host:~/"
      run_traced "$SCP /etc/z0librc $opt_host:~/"
    fi
}

product_update_product () {
# product_install_product::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
    if [ "$TDIR" != "/usr/bin" ]; then
      product_install_product
    else
      prod_install_if "git"
      run_traced "cd /tmp"
      if  [ -d /tmp/tools ]; then
        rm -fR /tmp/tools
      fi
      run_traced "git clone https://github.com/zeroincombenze/tools.git" "odoo"
      run_traced "cd /tmp/tools/product"
      run_traced "exec ./product update product"
      run_traced "rm -fR /tmp/tools"
    fi
}

product_remove_product () {
    run_traced "rm /usr/bin/$pkgname"
    run_traced "rm /usr/bin/${pkgname}.*"
}

pre_install_LAMP () {
    if [ $opt_dev -gt 0 ]; then
      prod_install_if "gcc"
      if [ "$FH" == "RHEL" ]; then
        run_traced "yum $opt_yes groupinstall \"Development tools\""
      fi
    fi
}

pre_update_LAMP () {
    pre_install_LAMP
}

init_odoo_env () {
    if [ ! -d /opt/odoo ]; then
      run_traced "mkdir -p /opt/odoo"
    fi
    if [ "$opt_oed" == "odoo" ]; then
      gitrep="odoo/odoo"
    elif [ "$opt_oed" == "oca" ]; then
      gitrep="OCA/OCB"
    else
      gitrep="zeroincombenze/OCB"
    fi
    if [ -z "$opt_odoo" ]; then
      opt_odoo="*"
    fi
}

product_install_odoo () {
# product_install_odoo::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
    init_odoo_env
    git_opts=""
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
    else
      local ov_iter=$opt_odoo
      git_opts="--single-branch"
    fi
    if [ $opt_dev -eq 0 ]; then
      git_opts="--depth 1 $git_opts"
    fi
    for ov in $ov_iter; do
      local xtl=1
      local v=$(get_pkg_ver_inq "odoo")
      if [ -n "$v" -a -d /opt/odoo/$ov.0 ]; then
        cd /opt/odoo/$ov.0
        git status &>/dev/null
        if [ $? -ne 128 ]; then xtl=0; fi
      fi
      run_traced "cd /opt/odoo"
      if [ $xtl -gt 0 ]; then
        run_traced "git clone https://github.com/$gitrep.git $ov.0 -b $ov.0 $git_opts" "odoo" #debug
        if [ -n "$opt_osub" ]; then
          install_submodules "$opt_osub" "$ov"
        fi
        if [ -n "$opt_sub" ]; then
          install_submodules "$opt_sub" "$ov"
        fi
        if [ -n "$opt_locale" ]; then
          install_submodules "$opt_locale" "$ov"
        fi
      fi #debug
      run_traced "chown -R odoo:odoo $ov.0/"
      run_traced "cd /opt/odoo/$ov.0"
      run_traced "git checkout $ov.0"
      if [ $test_mode -eq 0 -a -f /opt/odoo/$ov.0/requirements.txt ]; then
        local f=/opt/odoo/7.0/requirements.txt
        local p n v r
        while IFS=\= read p n v; do
          r=$(product -q version $p)
          r=$(echo $r)
          if [ "$r" == "$v" ]; then
            elog "Package $p $r already installed"
          else
            r=$(product -q status $p|grep "could be")
            if [ -z "$r" ]; then
              run_traced "pip install $p --upgrade"
            else
              run_traced "pip install $p"
            fi
            r=$(product -q version $p)
            r=$(echo $r)
            if [ "$r" != "$v" ]; then
              elog "Package $p has invalid version $r: required $v"
            fi
          fi
        done < $f
      fi
    done
}

product_update_odoo () {
# product_install_product::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
    init_odoo_env
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
    else
      local ov_iter=$opt_odoo
    fi
    for ov in $ov_iter; do
      local xtl=0
      if [ -d /opt/odoo/$ov.0 ]; then
        run_traced "cd /opt/odoo/$ov.0"
        if [ $test_mode -gt 0 ]; then
          true
        else
          git status &>/dev/null
        fi
        if [ $? -ne 128 ]; then xtl=1; fi
        if [ $xtl -gt 0 ]; then
          run_traced "git pull origin $ov.0" "odoo"
          if [ $test_mode -eq 0 ]; then
             opt_sub=$(grep "\[submodule" .gitmodules|awk '{print $2}'|tr -d "\"]"|tr "\n" " ")
          fi
          if [ -n "$opt_osub" ]; then
            install_submodules "$opt_osub" "$ov"
          fi
          if [ -n "$opt_sub" ]; then
            install_submodules "$opt_sub" "$ov"
          fi
          if [ -n "$opt_locale" ]; then
            install_submodules "$opt_locale" "$ov"
          fi
        fi
        run_traced "git checkout $ov.0"
      fi
    done
}

product_config_odoo () {
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
      local opt_multi="-m"
    else
      local ov_iter=$opt_odoo
      if [ $opt_mult -gt 0 ]; then
        local opt_multi="-m"
      else
        local opt_multi=""
      fi
    fi
    local userhome=$(sudo -u postgres -i eval 'echo "$HOME"')
    if [ -z "$userhome" ]; then
      userhome=$(grep postgres /etc/passwd|awk -F":" '{print $6}')
    fi
    if [ -f $userhome/.pgpass ]; then
      local pwd=$(grep odoo $userhome/.pgpass|awk -F: '{ print $5 }'|head -n1)
    else
      local pwd=
      while [ -z "$pwd" ]; do
        read -rsp"Type password for postgresql user access (no echo)>" pwd
        echo -e "\n"
        read -rsp"Retype password for validation>" pwd1
        echo -e "\n"
        if [ "$pwd" != "$pwd1" ]; then
          local pwd=
        fi
      done
    fi
    echo "*:*:*:odoo:$pwd">$userhome/.pgpass
    chown postgres:postgres $userhome/.pgpass
    chmod u=rw,g=,o= $userhome/.pgpass
    f_hba=$(findpkg "pg_hba.conf" "/var/lib /etc" "postgresql pgsql" "9.4 9.3 9.2 9.1 9.0 8.4" "data main")
    update_hba_conf $f_hba
    if [ -n "$f_hba" ]; then
      vi $f_hba
    fi
    for ov in $ov_iter; do
      if [ -n "$opt_multi" ]; then
        uu="odoo$ov"
        echo "*:*:*:$uu:$pwd">>$userhome/.pgpass
      elif [ "$ov" == "7" ]; then
        uu=openerp
      else
        uu=odoo
      fi
      local x=$(sudo -iupostgres psql -c \\dg|grep " $uu ")
      if [ -z "$x" ]; then
        elog "Create account $uu for postgres access by odoo"
        echo "Warning: store password you type in odoo config file"
        run_traced "sudo -iupostgres createuser --createdb --username postgres --no-createrole --no-superuser --no-password $uu"
      fi
      elog "Running odoo $ov to configure"
      if [ -f /opt/odoo/.openerp_serverrc ]; then
        rm -f /opt/odoo/.openerp_serverrc
      fi
      cmd="sudo -iuodoo /opt/odoo/$ov.0/openerp-server"
      cmd="$cmd --addons-path=/opt/odoo/$ov.0/openerp/addons,/opt/odoo/$ov.0/addons"
      for iso in ${opt_osub//,/ } ${opt_sub//,/ }; do
        pn=$(get_locale_name "$iso")
        if [ -z "$pn" ]; then
          elog  "Invalid submodule name $iso"
        else
          addons=$(get_locale_dir "$pn")
          if [ -d $addons ]; then
            cmd="$cmd,/opt/odoo/$ov.0/$addons"
          fi
        fi
      done
      for iso in ${opt_locale//,/ }; do
        pn=$(get_locale_name "$iso")
        if [ -z "$pn" ]; then
          elog  "Invalid $iso in -l $opt_locale switch"
        else
          addons=$(get_locale_dir "$pn")
          if [ -d $addons ]; then
            cmd="$cmd,/opt/odoo/$ov.0/$addons"
          fi
        fi
      done
      local xtl_pidfile=/var/run/odoo/$uu.pid
      local xtl_logfile=/var/log/odoo/${uu}-server.log
      cmd="$cmd -s --stop-after-init"
      cmd="$cmd --pidfile=$xtl_pidfile"
      cmd="$cmd --logfile=$xtl_logfile"
      cmd="$cmd --db_host=localhost"
      cmd="$cmd --db_user=$uu"
      cmd="$cmd --db_password=$pwd"
      if [ "$opt_multi" == "-m" ]; then
        cmd="$cmd --xmlrpc-port=816$ov"
      fi
      run_traced "$cmd"
      if [ -f /opt/odoo/.openerp_serverrc ]; then
        if [ $opt_dry_run -eq 0 ]; then
          sed -i "s:^data_dir *=.*Odoo:&$ov:" /opt/odoo/.openerp_serverrc
          [ -z "opt_yes" ] || vim /opt/odoo/.openerp_serverrc
        fi
        run_traced "cp /opt/odoo/.openerp_serverrc /etc/odoo/${uu}-server.conf"
        run_traced "chown odoo:odoo /etc/odoo/${uu}-server.conf"
        run_traced "chmod u+rw,g+r,o+r /etc/odoo/${uu}-server.conf"
        run_traced "$TDIR/product_bld_ods -E$FH -L$xtl_logfile -P$xtl_pidfile $opt_multi -O$ov ${uu}-server"
        run_traced "chown odoo:odoo ${uu}-server"
        run_traced "mv ${uu}-server /etc/init.d/"
      else
        elog "!Odoo error: configuration file not created!!"
      fi
    done
}

pre_config_odoo () {
    sysfile=/etc/group
    group=odoo
    if [ "$ODOO_GID" ]; then
      x=$(grep "^[^:]*:[^:]:$ODOO_GID[^0-9]" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        g=$(echo "$x"|awk -F: '{ print $1 }')
        if [ "$g" != "$group" ]; then
          wlog "Required gid $ODOO_GID already assigned to $g"
        fi
      fi
    fi
    if [ -z $(grep "^$group:" $sysfile 2>/dev/null) ]; then
      if [ "$ODOO_GID" ]; then
        run_traced "groupadd -g $ODOO_GID $group"
      else
        run_traced "groupadd $group"
      fi
    fi
    if [ "$ODOO_GID" ]; then
      x=$(grep "^$group:.*" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        gid=$(echo "$x"|awk -F: '{ print $3 }')
        if [ "$gid" != "$ODOO_GID" ]; then
          run_traced "groupmod -g $ODOO_GID $group"
        fi
      fi
    fi
    sysfile=/etc/passwd
    user=odoo
    if [ "$ODOO_UID" ]; then
      x=$(grep "^[^:]*:[^:]:$ODOO_UID[^0-9]" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        u=$(echo "$x"|awk -F: '{ print $1 }')
        if [ "$u" != "$user" ]; then
          wlog "Required uid $ODOO_UID already assigned to $u"
        fi
      fi
    fi
    if [ -z $(grep "^$user:" $sysfile 2>/dev/null) ]; then
      if [ ! -d /opt/odoo ]; then cmd="useradd -m"; else cmd="useradd"; fi
      if [ "$ODOO_UID" ]; then
        run_traced "$cmd -u "$ODOO_UID" -g odoo -d /opt/odoo -s /bin/bash $user"
      else
        run_traced "$cmd -r -g odoo -d /opt/odoo -s /bin/bash $user"
      fi
    fi
    if [ "$ODOO_UID" ]; then
      x=$(grep "^$user:.*" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        uid=$(echo "$x"|awk -F: '{ print $3 }')
        if [ "$uid" != "$ODOO_UID" ]; then
          run_traced "usermod -u $ODOO_UID $user"
        fi
      fi
    fi
}

post_config_odoo () {
    local r="$(prod realname "postresql")"
    run_traced "service $r restart"
}

pre_install_odoo () {
    prod_install_if "git"
    if [ "$FH" == "RHEL" ]; then
      if [ ! -f /etc/yum.repos.d/odoo.repo ]; then
        run_traced "yum-config-manager --add-repo=https://nightly.odoo.com/8.0/nightly/rpm/odoo.repo"
      fi
    elif [ "$FH" == "Debian" ]; then
      if [ -z "$(apt-key list|grep info@odoo.com 2>/dev/null)" ]; then
        run_traced "wget -O - https://nightly.odoo.com/odoo.key | apt-key add -"
      fi
      if [ -z "$(cat /etc/apt/sources.list|grep 'nightly.odoo.com' 2>/dev/null)" ]; then
       run_traced "echo 'deb http://nightly.odoo.com/8.0/nightly/deb/ ./' >> /etc/apt/sources.list"
      fi
    fi
    pre_config_odoo
}

post_install_odoo () {
    local p
    p=etc
    run_traced "mkdir -p /$p/odoo"
    run_traced "chown odoo:odoo /$p/odoo"
    run_traced "chmod -R u+rw,g+r,o+r /$p/odoo"
    for p in log lib run; do
      run_traced "mkdir -p /var/$p/odoo"
      run_traced "chown odoo:odoo /var/$p/odoo"
      run_traced "chmod -R u+rw,g+r,o+r /var/$p/odoo"
    done
}

post_update_odoo () {
    post_install_odoo
}

product_install_python_dateutil () {
    if [ "$DISTO" == "CentOS6" ]; then
      run_traced "cd /tmp"
      run_traced "wget https://pypi.python.org/packages/source/p/python-dateutil/python-dateutil-1.5.tar.gz#md5=0dcb1de5e5cad69490a3b6ab63f0cfa5"
      run_traced "pip install python-dateutil-1.5.tar.gz"
      run_traced "rm -f python-dateutil-1.5.tar.gz"
    else
      run_traced "pip install python-dateutil"
    fi
}

product_update_python_dateutil () {
    if [ "$DISTO" == "CentOS6" ]; then
      run_traced "cd /tmp"
      run_traced "wget https://pypi.python.org/packages/source/p/python-dateutil/python-dateutil-1.5.tar.gz#md5=0dcb1de5e5cad69490a3b6ab63f0cfa5"
      run_traced "pip install python-dateutil-1.5.tar.gz --upgrade"
      run_traced "rm -f python-dateutil-1.5.tar.gz"
    else
      run_traced "pip install python-dateutil --upgrade"
    fi
}

get_wkhtmltopdf_URL () {
    echo "http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
}

get_wkhtmltopdf_name () {
    local pn=""
    if [ "$DISTO" == "CentOS6" ]; then
      if [ "$MACHARCH" == "x86_64" ]; then
        pn="wkhtmltox-0.12.2.1_linux-centos6-amd64.rpm"
      elif [ "$MACHARCH" == "i686" ]; then
        pn="wkhtmltox-0.12.2.1_linux-centos6-i386.rpm"
      fi
    elif [ "$DISTO" == "CentOS7" ]; then
      if [ "$MACHARCH" == "x86_64" ]; then
        pn="wkhtmltox-0.12.2.1_linux-centos7-amd64.rpm"
      elif [ "$MACHARCH" == "i686" ]; then
        pn=""
      fi
    elif [ "$FH" == "Debian" ]; then
      if [ "$LXCORE" == "trusty" -a "$MACHARCH" == "x86_64" ]; then
        pn="wkhtmltox-0.12.2.1_linux-trusty-amd64.deb"
      elif [ "$LXCORE" == "trusty" -a "$MACHARCH" == "i686" ]; then
        pn="wkhtmltox-0.12.2.1_linux-trusty-i386.deb"
      elif [ "$LXCORE" == "precise" -a "$MACHARCH" == "x86_64" ]; then
        pn="wkhtmltox-0.12.2.1_linux-precise-amd64.deb"
      elif [ "$LXCORE" == "precise" -a "$MACHARCH" == "i686" ]; then
        pn="wkhtmltox-0.12.2.1_linux-precise-i386.deb"
      fi
    fi
    echo "$pn"
}

product_install_wkhtmltopdf () {
    local pn=$(get_wkhtmltopdf_name)
    local URL=$(get_wkhtmltopdf_URL)
    if [ -z "$pn" ]; then
      elog "*** Package wkhtmltopdf not found for this hardware"
    else
      if [ "$FH" == "RHEL" ]; then
        run_traced "yum install xorg-x11-fonts-Type1"
        run_traced "yum install xorg-x11-fonts-75dpi"
        xtlcmd="rpm"
        run_traced "cd /tmp"
        run_traced "wget $URL/$pn"
        run_traced "$xtlcmd -i $pn"
        run_traced "rm -f $pn"
      elif [ "$FH" == "Debian" ]; then
        xtlcmd="apt-get"
        run_traced "cd /tmp"
        run_traced "wget $URL/$pn"
        run_traced "$xtlcmd install $pn"
        run_traced "rm -f $pn"
      fi
    fi
}

product_update_wkhtmltopdf () {
    local pn=$(get_wkhtmltopdf_name)
    local URL=$(get_wkhtmltopdf_URL)
    if [ -z "$pn" ]; then
      elog "*** Package wkhtmltopdf not found for this hardware"
    else
      if [ "$FH" == "RHEL" ]; then
        xtlcmd="rpm"
        run_traced "cd /tmp"
        run_traced "wget $URL/$pn"
        run_traced "$xtlcmd -U $pn"
        run_traced "rm -f $pn"
      elif [ "$FH" == "Debian" ]; then
        xtlcmd="apt-get"
        run_traced "cd /tmp"
        run_traced "wget $URL/$pn"
        run_traced "$xtlcmd update $pn"
        run_traced "$xtlcmd upgrade $pn"
        run_traced "rm -f $pn"
      fi
    fi
}

post_install_apache2_httpd () {
     if [ ! -d /var/www ]; then
      run_traced "mkdir -p /var/www"
      run_traced "chmod u+rwx,g=rx,o=rx /var/www"
      fi
      if [ ! -d /var/www/html ]; then
      run_traced "mkdir -p /var/www/html"
      run_traced "chmod u+rwx,g=rx,o=rx /var/www/html"
      fi
}

post_install_apache2 () {
      run_traced "service apache2 start"
      run_traced "sleep 3"
    run_traced "chkconfig apache2 on"
      post_install_apache2_httpd
}

post_install_httpd () {
      run_traced "service httpd start"
      run_traced "sleep 3"
    run_traced "chkconfig --levels 235 httpd on"
      post_install_apache2_httpd
}

post_config_postgresql () {
    run_traced "service $1 initdb"
    run_traced "chkconfig $1 on"
}

post_config_postgresql-server () {
    if [ "$DISTO" == "CentOS7" ]; then
      run_traced "postgresql-setup initdb"
    else
      run_traced "service $1 initdb"
    fi
    run_traced "chkconfig $1 on"
}

post_config_mysql-server () {
    if [ "$FH" == "RHEL" ]; then
      run_traced "mysql_secure_installation"
      run_traced "chkconfig mysqld on"
    else
      for cmd in mysql_install_db mysql_secure_installation; do
        run_traced "$cmd"
      done
      run_traced "chkconfig mysql on"
    fi
}

post_config_mariadb-server () {
    if [ "$FH" == "RHEL" ]; then
      run_traced "mysql_secure_installation"
    fi
    run_traced "chkconfig mariadb on"
}

test_cfg_name () {
    if [ "$FH" == "RHEL" ]; then
       local TPRM=("." httpd_svcname httpd_cmdname apachectl_vfycmd postgresql-server_svcname mysql-server_svcname\
    php_cmdname postgresql-server_cmdname openssh-server_svcname php_vfycmd openssh-server_cmdname python-pip_cmdname\
    SUB_mariadb_server SUB_openssh_server)
       local TRES=("." "httpd" "apachectl" "apachectl -v" "postgresql" "mysqld"\
    "php" "psql" "sshd" "php -v" "" "pip"\
    " mariadb " " openssh-clients telnet ")
    else
       local TPRM=("." apache2_svcname apache2_cmdname apachectl_vfycmd postgresql-server_svcname mysql-server_svcname\
    php5_cmdname postgresql_cmdname openssh-server_svcname php5_vfycmd openssh-server_cmdname  python-pip_cmdname\
    SUB_openssh_server)
       local TRES=("." "apache2" "apachectl" "apachectl -v" "postgresql" "mysql"\
    "php5" "psql" "ssh" "php5 -v" "" "pip"\
    " openssh-client telnet ")
    fi
    local jj=0
    while ((jj<${#TPRM[*]})); do
      local p="${TPRM[jj]}"
      if [ "$p" == "." ]; then p=; fi
      ((tst_ctr++))
      local r="$(get_prm_value "./$THIS.notexists" $p)"
      local t="${TRES[jj]}"
      if [ "$t" == "." ]; then t=; fi
      elog "Test $tst_ctr [$FH]: confg '$p'='$t'"
      if [ "$r" != "$t" ]; then
        elog "Test Failed: ($r)"
        exit $STS_FAILED
      fi
      ((++jj))
    done
}

test_realname () {
    if [ "$FH" == "RHEL" ]; then
      local TRES=("." $THIS python-pip httpd httpd postgresql-server postgresql-server openssh-server python odoo)
    else
      local TRES=("." $THIS python-pip apache2 apache2 postgresql postgresql openssh-server python odoo)
    fi
    local jj=0
    while ((jj<${#PNLX[*]})); do
      local p="${PNLX[jj]}"
      if [ "$p" == "." ]; then p=; fi
      ((tst_ctr++))
      elog "Test $tst_ctr [$FH]: prod realname '$p'"
      local r="$(prod realname $p)"
      local t="${TRES[jj]}"
      if [ "$t" == "." ]; then t=; fi
      if [ "$r" != "$t" ]; then
        elog "Test Failed: ($r)"
        exit $STS_FAILED
      fi
      ((++jj))
    done
}

test_install () {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "." ]; then p=; fi
    ((tst_ctr++))
    elog "Test $tst_ctr [$FH]: prod install '$p'"
    if [ "$p" == "$THIS" ]; then
      echo "--> mkdir -p /etc/$p">>$ftest
      echo "--> cp $TDIR/$p /usr/bin">>$ftest
      echo "--> cp $TDIR/${p}.man /usr/bin">>$ftest
      echo "--> cp $TDIR/${p}_bld_ods /usr/bin">>$ftest
      echo "--> chmod +x /usr/bin/$p*">>$ftest
      for f in ${pkgname}.conf odoo-server_Debian odoo-server_RHEL odoo-server; do
        if [ -f $TDIR/$f ]; then
          echo "--> cp $TDIR/$f /etc/$THIS">>$ftest
        fi
      done
      echo "--> _install_z0librc">>$ftest
    elif [ "$p" == "python-pip" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y install python-pip">>$ftest
      else
        echo "--> apt-get -y install python-pip">>$ftest
      fi
    elif [ "$p" == "apache2" -o "$p" == "httpd" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y install httpd">>$ftest
        echo "--> service httpd start">>$ftest
        echo "--> chkconfig --levels 235 httpd on">>$ftest
      else
        echo "--> apt-get -y install apache2">>$ftest
        echo "--> service apache2 start">>$ftest
        echo "--> chkconfig apache2 on">>$ftest
      fi
    elif [ "$p" == "postgresql" -o "$p" == "postgresql-server" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y install postgresql-server">>$ftest
      else
        echo "--> apt-get -y install postgresql">>$ftest
      fi
        echo "--> service postgresql start">>$ftest
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y install pgadmin3">>$ftest
      else
        echo "--> apt-get -y install postgresql-client-common">>$ftest
        echo "--> apt-get -y install postgresql-contrib">>$ftest
        echo "--> apt-get -y install pgadmin3">>$ftest
      fi
    elif [ "$p" == "openssh-server" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y install openssh-server">>$ftest
        echo "--> service sshd start">>$ftest
        echo "--> iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT">>$ftest
        echo "--> yum -y install openssh-clients">>$ftest
        echo "--> yum -y install telnet">>$ftest
      else
        echo "--> apt-get -y install openssh-server">>$ftest
        echo "--> service ssh start">>$ftest
        echo "--> iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT">>$ftest
        echo "--> apt-get -y install openssh-client">>$ftest
        echo "--> apt-get -y install telnet">>$ftest
      fi
    elif [ "$p" == "python" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y install python">>$ftest
        # echo "--> yum -y install python-devel">>$ftest
        echo "--> yum -y update setuptools">>$ftest
        echo "--> yum -y install python-virtualenv">>$ftest
        echo "--> pip  install virtualenv">>$ftest
        # echo "--> yum -y install zlib-devel">>$ftest
        # echo "--> yum -y install bzip2-devel">>$ftest
        # echo "--> yum -y install openssl-devel">>$ftest
        # echo "--> yum -y install ncurses-devel">>$ftest
        echo "--> yum -y update readline">>$ftest
        # echo "--> yum -y install readline-devel">>$ftest
        # echo "--> yum -y install sqlite-devel">>$ftest
        # echo "--> yum -y install tk-devel">>$ftest
        # echo "--> yum -y install gdbm-devel">>$ftest
        # echo "--> yum -y install libpcap-devel">>$ftest
        # echo "--> yum -y install xz-devel">>$ftest
        echo "--> yum -y install libxslt-python">>$ftest
        echo "--> yum -y update python-psycopg2">>$ftest
        echo "--> yum -y update python-simplejson">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install xlwt">>$ftest
        echo "--> pip  install PyYAML">>$ftest
        echo "--> pip  install gdata">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> yum -y update python-lxml">>$ftest
        # echo "--> pip  install ZSI">>$ftest
        # echo "--> yum -y install postgresql-devel">>$ftest
        echo "--> yum -y install pydot">>$ftest
      else
        echo "--> apt-get -y install python">>$ftest
        # echo "--> apt-get -y install python-dev">>$ftest
        echo "--> apt-get -y update setuptools">>$ftest
        echo "--> apt-get -y upgrade setuptools">>$ftest
        echo "--> apt-get -y install python-virtualenv">>$ftest
        echo "--> pip  install virtualenv">>$ftest
        # echo "--> apt-get -y install zlib1g-dev">>$ftest
        # echo "--> apt-get -y install libssl-dev">>$ftest
        echo "--> apt-get -y update libreadline6">>$ftest
        echo "--> apt-get -y upgrade libreadline6">>$ftest
        # echo "--> apt-get -y install libreadline6-dev">>$ftest
        # echo "--> apt-get -y install libsqlite3-dev">>$ftest
        # echo "--> apt-get -y install tk-dev">>$ftest
        # echo "--> apt-get -y install libgdbm-dev">>$ftest
        # echo "--> apt-get -y install libpcap-dev">>$ftest
        # echo "--> apt-get -y install liblzma-dev">>$ftest
        echo "--> apt-get -y install libxslt-python">>$ftest
        echo "--> apt-get -y update python-psycopg2">>$ftest
        echo "--> apt-get -y upgrade python-psycopg2">>$ftest
        echo "--> apt-get -y update python-simplejson">>$ftest
        echo "--> apt-get -y upgrade python-simplejson">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install xlwt">>$ftest
        echo "--> pip  install PyYAML">>$ftest
        echo "--> apt-get -y install python-gdata">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> apt-get -y update python-lxml">>$ftest
        echo "--> apt-get -y upgrade python-lxml">>$ftest
        # echo "--> pip  install ZSI">>$ftest
        echo "--> apt-get -y install pydot">>$ftest
      fi
    elif [ "$p" == "odoo" ]; then
      local opt_osub="account-financial-tools account-invoicing account-payment bank-payment knowledge partner-contact stock-logistics-workflow webkit-tools"
      if [ "$FH" == "RHEL" ]; then
        echo "--> # pre_install_odoo failed">>$ftest
        echo "--> cd /opt/odoo">>$ftest
        echo "--> git clone https://github.com/odoo/odoo.git 7.0 -b 7.0 --depth 1 --single-branch">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          # echo "--> git remote add upstream https://github.com/OCA/${d}.git">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> chown -R odoo:odoo $opt_odoo.0/">>$ftest
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> pip  install Babel">>$ftest
        echo "--> yum -y install dejavu-fonts-common">>$ftest
        echo "--> yum -y install dejavu-sans-fonts">>$ftest
        echo "--> yum -y install fontpackages-filesystem">>$ftest
        # echo "--> yum -y install jbigkit-libs">>$ftest
        echo "--> yum -y install libjpeg-turbo">>$ftest
        echo "--> yum -y install libtiff">>$ftest
        # echo "--> yum -y install libwebp">>$ftest
        # echo "--> yum -y install libxml2-python">>$ftest
        # echo "--> yum -y install libxslt-python">>$ftest
        echo "--> yum -y install libyaml">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> yum -y install pyOpenSSL">>$ftest
        echo "--> yum -y install pychart">>$ftest
        echo "--> yum -y install pyparsing">>$ftest
        echo "--> yum -y update python-babel">>$ftest
        echo "--> yum -y install python-beaker">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> yum -y install python-docutils">>$ftest
        echo "--> yum -y install python-feedparser">>$ftest
        echo "--> yum -y install python-jinja2">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> yum -y update python-lxml">>$ftest
        echo "--> yum -y install python-mako">>$ftest
        echo "--> yum -y install python-markupsafe">>$ftest
        echo "--> yum -y install python-mock">>$ftest
        echo "--> pip  install python-openid">>$ftest
        ## echo "--> pip  install passlib">>$ftest
        # echo "--> yum -y install python-paste">>$ftest
        # echo "--> yum -y install python-pillow">>$ftest
        echo "--> yum -y install python-psutil">>$ftest
        echo "--> yum -y update python-psycopg2">>$ftest
        echo "--> yum -y install python-reportlab">>$ftest
        # echo "--> yum -y install python-requests">>$ftest
        echo "--> yum -y update python-simplejson">>$ftest
        # echo "--> yum -y install python-six">>$ftest
        # echo "--> yum -y install python-tempita">>$ftest
        echo "--> yum -y install python-unittest2">>$ftest
        echo "--> pip  install urllib3">>$ftest
        echo "--> yum -y install python-vobject">>$ftest
        echo "--> yum -y install python-werkzeug">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-centos7-amd64.rpm"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> rpm -U $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
      else
        echo "--> # pre_install_odoo failed">>$ftest
        echo "--> cd /opt/odoo">>$ftest
        echo "--> git clone https://github.com/odoo/odoo.git 7.0 -b 7.0 --depth 1 --single-branch">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          # echo "--> git remote add upstream https://github.com/OCA/${d}.git">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> chown -R odoo:odoo $opt_odoo.0/">>$ftest
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> apt-get -y install ghostscript">>$ftest
        echo "--> apt-get -y install libart-2.0-2">>$ftest
        # echo "--> apt-get -y install python-libxml2">>$ftest
        echo "--> apt-get -y install libcupsfilters1">>$ftest
        echo "--> apt-get -y install libcupsimage2">>$ftest
        echo "--> apt-get -y install libgs9">>$ftest
        echo "--> apt-get -y install libgs9-common">>$ftest
        echo "--> apt-get -y install libijs-0.35">>$ftest
        echo "--> apt-get -y install libjbig2dec0">>$ftest
        echo "--> apt-get -y install liblcms2-2">>$ftest
        echo "--> apt-get -y install libpaper-utils">>$ftest
        echo "--> apt-get -y install libpaper1">>$ftest
        echo "--> apt-get -y install libpoppler44">>$ftest
        echo "--> apt-get -y install libtidy-0.99-0">>$ftest
        echo "--> apt-get -y install libwebp5">>$ftest
        echo "--> apt-get -y install libwebpmux1">>$ftest
        echo "--> apt-get -y install poppler-data">>$ftest
        echo "--> apt-get -y install poppler-utils">>$ftest
        echo "--> apt-get -y update python-babel">>$ftest
        echo "--> apt-get -y upgrade python-babel">>$ftest
        echo "--> apt-get -y install python-babel-localedata">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> apt-get -y install python-decorator">>$ftest
        echo "--> apt-get -y install python-docutils">>$ftest
        echo "--> apt-get -y install python-feedparser">>$ftest
        echo "--> apt-get -y install python-gevent">>$ftest
        echo "--> apt-get -y install python-greenlet">>$ftest
        echo "--> apt-get -y install python-imaging">>$ftest
        echo "--> apt-get -y install python-jinja2">>$ftest
        echo "--> apt-get -y install python-mako">>$ftest
        echo "--> apt-get -y install python-markupsafe">>$ftest
        echo "--> apt-get -y install python-mock">>$ftest
        echo "--> pip  install python-openid">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> apt-get -y install python-pil">>$ftest
        echo "--> apt-get -y install python-psutil">>$ftest
        echo "--> apt-get -y install python-pybabel">>$ftest
        echo "--> apt-get -y install python-pychart">>$ftest
        echo "--> apt-get -y install python-pydot">>$ftest
        echo "--> apt-get -y install python-pygments">>$ftest
        echo "--> apt-get -y install python-pyinotify">>$ftest
        echo "--> apt-get -y install python-pyparsing">>$ftest
        echo "--> apt-get -y install python-pypdf">>$ftest
        echo "--> apt-get -y install python-renderpm">>$ftest
        echo "--> apt-get -y install python-reportlab">>$ftest
        echo "--> apt-get -y install python-reportlab-accel">>$ftest
        echo "--> apt-get -y install python-roman">>$ftest
        echo "--> apt-get -y install python-suds">>$ftest
        echo "--> apt-get -y install python-unittest2">>$ftest
        echo "--> apt-get -y install python-utidylib">>$ftest
        echo "--> apt-get -y install python-vatnumber">>$ftest
        echo "--> apt-get -y install python-vobject">>$ftest
        echo "--> apt-get -y install python-werkzeug">>$ftest
        echo "--> apt-get -y install docutils-common">>$ftest
        echo "--> apt-get -y install docutils-doc">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-trusty-amd64.deb"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> apt-get update $pn">>$ftest
        echo "--> apt-get upgrade $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
      fi
    fi
    if [ "$p" ]; then
      prod install $p>$fout
      if [ "$(diff -q $fout $ftest)" ]; then
        elog "Test Failed"
        exit $STS_FAILED
      fi
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

test_update () {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "." ]; then p=; fi
    ((tst_ctr++))
    elog "Test $tst_ctr [$FH]: 'prod update $p'"
    if [ -z "$p" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y update ">>$ftest
      else
        echo "--> apt-get -y update ">>$ftest
        echo "--> apt-get -y upgrade ">>$ftest
      fi
    elif [ "$p" == "$THIS" ]; then
      echo "--> mkdir -p /etc/$p">>$ftest
      echo "--> cp $TDIR/$p /usr/bin">>$ftest
      echo "--> cp $TDIR/${p}.man /usr/bin">>$ftest
      echo "--> cp $TDIR/${p}_bld_ods /usr/bin">>$ftest
      echo "--> chmod +x /usr/bin/$p*">>$ftest
      for f in ${pkgname}.conf odoo-server_Debian odoo-server_RHEL odoo-server; do
        if [ -f $TDIR/$f ]; then
          echo "--> cp $TDIR/$f /etc/$THIS">>$ftest
        fi
      done
      echo "--> _install_z0librc">>$ftest
    elif [ "$p" == "python-pip" ]; then
      echo "--> pip install --upgrade pip">>$ftest
    elif [ "$p" == "apache2" -o "$p" == "httpd" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y update httpd">>$ftest
        echo "--> service httpd restart">>$ftest
      else
        echo "--> apt-get -y update apache2">>$ftest
        echo "--> apt-get -y upgrade apache2">>$ftest
        echo "--> service apache2 restart">>$ftest
      fi
    elif [ "$p" == "postgresql" -o "$p" == "postgresql-server" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y update postgresql-server">>$ftest
      else
        echo "--> apt-get -y update postgresql">>$ftest
        echo "--> apt-get -y upgrade postgresql">>$ftest
      fi
        echo "--> service postgresql restart">>$ftest
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y install pgadmin3">>$ftest
      else
        echo "--> apt-get -y install postgresql-client-common">>$ftest
        echo "--> apt-get -y install postgresql-contrib">>$ftest
        echo "--> apt-get -y install pgadmin3">>$ftest
      fi
    elif [ "$p" == "openssh-server" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y update openssh-server">>$ftest
        echo "--> service sshd restart">>$ftest
        echo "--> iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT">>$ftest
        echo "--> yum -y install openssh-clients">>$ftest
        echo "--> yum -y install telnet">>$ftest
      else
        echo "--> apt-get -y update openssh-server">>$ftest
        echo "--> apt-get -y upgrade openssh-server">>$ftest
        echo "--> service ssh restart">>$ftest
        echo "--> iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT">>$ftest
        echo "--> apt-get -y install openssh-client">>$ftest
        echo "--> apt-get -y install telnet">>$ftest
      fi
    elif [ "$p" == "python" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y update python">>$ftest
        # echo "--> yum -y install python-devel">>$ftest
        echo "--> yum -y update setuptools">>$ftest
        echo "--> yum -y install python-virtualenv">>$ftest
        echo "--> pip  install virtualenv">>$ftest
        # echo "--> yum -y install zlib-devel">>$ftest
        # echo "--> yum -y install bzip2-devel">>$ftest
        # echo "--> yum -y install openssl-devel">>$ftest
        # echo "--> yum -y install ncurses-devel">>$ftest
        echo "--> yum -y update readline">>$ftest
        # echo "--> yum -y install readline-devel">>$ftest
        # echo "--> yum -y install sqlite-devel">>$ftest
        # echo "--> yum -y install tk-devel">>$ftest
        # echo "--> yum -y install gdbm-devel">>$ftest
        # echo "--> yum -y install libpcap-devel">>$ftest
        # echo "--> yum -y install xz-devel">>$ftest
        echo "--> yum -y install libxslt-python">>$ftest
        echo "--> yum -y update python-psycopg2">>$ftest
        echo "--> yum -y update python-simplejson">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install xlwt">>$ftest
        echo "--> pip  install PyYAML">>$ftest
        echo "--> pip  install gdata">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> yum -y update python-lxml">>$ftest
        # echo "--> pip  install ZSI">>$ftest
        # echo "--> yum -y install postgresql-devel">>$ftest
        echo "--> yum -y install pydot">>$ftest
      else
        echo "--> apt-get -y update python">>$ftest
        echo "--> apt-get -y upgrade python">>$ftest
        # echo "--> apt-get -y install python-dev">>$ftest
        echo "--> apt-get -y update setuptools">>$ftest
        echo "--> apt-get -y upgrade setuptools">>$ftest
        echo "--> apt-get -y install python-virtualenv">>$ftest
        echo "--> pip  install virtualenv">>$ftest
        # echo "--> apt-get -y install zlib1g-dev">>$ftest
        # echo "--> apt-get -y install libssl-dev">>$ftest
        echo "--> apt-get -y update libreadline6">>$ftest
        echo "--> apt-get -y upgrade libreadline6">>$ftest
        # echo "--> apt-get -y install libreadline6-dev">>$ftest
        # echo "--> apt-get -y install libsqlite3-dev">>$ftest
        # echo "--> apt-get -y install tk-dev">>$ftest
        # echo "--> apt-get -y install libgdbm-dev">>$ftest
        # echo "--> apt-get -y install libpcap-dev">>$ftest
        # echo "--> apt-get -y install liblzma-dev">>$ftest
        echo "--> apt-get -y install libxslt-python">>$ftest
        echo "--> apt-get -y update python-psycopg2">>$ftest
        echo "--> apt-get -y upgrade python-psycopg2">>$ftest
        echo "--> apt-get -y update python-simplejson">>$ftest
        echo "--> apt-get -y upgrade python-simplejson">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install xlwt">>$ftest
        echo "--> pip  install PyYAML">>$ftest
        echo "--> apt-get -y install python-gdata">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> apt-get -y update python-lxml">>$ftest
        echo "--> apt-get -y upgrade python-lxml">>$ftest
        # echo "--> pip  install ZSI">>$ftest
        echo "--> apt-get -y install pydot">>$ftest
      fi
    elif [ "$p" == "odoo" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git pull origin 7.0">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> pip  install Babel">>$ftest
        echo "--> yum -y install dejavu-fonts-common">>$ftest
        echo "--> yum -y install dejavu-sans-fonts">>$ftest
        echo "--> yum -y install fontpackages-filesystem">>$ftest
        # echo "--> yum -y install jbigkit-libs">>$ftest
        echo "--> yum -y install libjpeg-turbo">>$ftest
        echo "--> yum -y install libtiff">>$ftest
        # echo "--> yum -y install libwebp">>$ftest
        # echo "--> yum -y install libxml2-python">>$ftest
        # echo "--> yum -y install libxslt-python">>$ftest
        echo "--> yum -y install libyaml">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> yum -y install pyOpenSSL">>$ftest
        echo "--> yum -y install pychart">>$ftest
        echo "--> yum -y install pyparsing">>$ftest
        echo "--> yum -y update python-babel">>$ftest
        echo "--> yum -y install python-beaker">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> yum -y install python-docutils">>$ftest
        echo "--> yum -y install python-feedparser">>$ftest
        echo "--> yum -y install python-jinja2">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> yum -y update python-lxml">>$ftest
        echo "--> yum -y install python-mako">>$ftest
        echo "--> yum -y install python-markupsafe">>$ftest
        echo "--> yum -y install python-mock">>$ftest
        echo "--> pip  install python-openid">>$ftest
        ## echo "--> pip  install passlib">>$ftest
        # echo "--> yum -y install python-paste">>$ftest
        # echo "--> yum -y install python-pillow">>$ftest
        echo "--> yum -y install python-psutil">>$ftest
        echo "--> yum -y update python-psycopg2">>$ftest
        echo "--> yum -y install python-reportlab">>$ftest
        # echo "--> yum -y install python-requests">>$ftest
        echo "--> yum -y update python-simplejson">>$ftest
        # echo "--> yum -y install python-six">>$ftest
        # echo "--> yum -y install python-tempita">>$ftest
        echo "--> yum -y install python-unittest2">>$ftest
        echo "--> pip  install urllib3">>$ftest
        echo "--> yum -y install python-vobject">>$ftest
        echo "--> yum -y install python-werkzeug">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-centos7-amd64.rpm"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> rpm -U $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
      else
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git pull origin 7.0">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> apt-get -y install ghostscript">>$ftest
        echo "--> apt-get -y install libart-2.0-2">>$ftest
        # echo "--> apt-get -y install python-libxml2">>$ftest
        echo "--> apt-get -y install libcupsfilters1">>$ftest
        echo "--> apt-get -y install libcupsimage2">>$ftest
        echo "--> apt-get -y install libgs9">>$ftest
        echo "--> apt-get -y install libgs9-common">>$ftest
        echo "--> apt-get -y install libijs-0.35">>$ftest
        echo "--> apt-get -y install libjbig2dec0">>$ftest
        echo "--> apt-get -y install liblcms2-2">>$ftest
        echo "--> apt-get -y install libpaper-utils">>$ftest
        echo "--> apt-get -y install libpaper1">>$ftest
        echo "--> apt-get -y install libpoppler44">>$ftest
        echo "--> apt-get -y install libtidy-0.99-0">>$ftest
        echo "--> apt-get -y install libwebp5">>$ftest
        echo "--> apt-get -y install libwebpmux1">>$ftest
        echo "--> apt-get -y install poppler-data">>$ftest
        echo "--> apt-get -y install poppler-utils">>$ftest
        echo "--> apt-get -y update python-babel">>$ftest
        echo "--> apt-get -y upgrade python-babel">>$ftest
        echo "--> apt-get -y install python-babel-localedata">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> apt-get -y install python-decorator">>$ftest
        echo "--> apt-get -y install python-docutils">>$ftest
        echo "--> apt-get -y install python-feedparser">>$ftest
        echo "--> apt-get -y install python-gevent">>$ftest
        echo "--> apt-get -y install python-greenlet">>$ftest
        echo "--> apt-get -y install python-imaging">>$ftest
        echo "--> apt-get -y install python-jinja2">>$ftest
        echo "--> apt-get -y install python-mako">>$ftest
        echo "--> apt-get -y install python-markupsafe">>$ftest
        echo "--> apt-get -y install python-mock">>$ftest
        echo "--> pip  install python-openid">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> apt-get -y install python-pil">>$ftest
        echo "--> apt-get -y install python-psutil">>$ftest
        echo "--> apt-get -y install python-pybabel">>$ftest
        echo "--> apt-get -y install python-pychart">>$ftest
        echo "--> apt-get -y install python-pydot">>$ftest
        echo "--> apt-get -y install python-pygments">>$ftest
        echo "--> apt-get -y install python-pyinotify">>$ftest
        echo "--> apt-get -y install python-pyparsing">>$ftest
        echo "--> apt-get -y install python-pypdf">>$ftest
        echo "--> apt-get -y install python-renderpm">>$ftest
        echo "--> apt-get -y install python-reportlab">>$ftest
        echo "--> apt-get -y install python-reportlab-accel">>$ftest
        echo "--> apt-get -y install python-roman">>$ftest
        echo "--> apt-get -y install python-suds">>$ftest
        echo "--> apt-get -y install python-unittest2">>$ftest
        echo "--> apt-get -y install python-utidylib">>$ftest
        echo "--> apt-get -y install python-vatnumber">>$ftest
        echo "--> apt-get -y install python-vobject">>$ftest
        echo "--> apt-get -y install python-werkzeug">>$ftest
        echo "--> apt-get -y install docutils-common">>$ftest
        echo "--> apt-get -y install docutils-doc">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-trusty-amd64.deb"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> apt-get update $pn">>$ftest
        echo "--> apt-get upgrade $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
      fi
    fi
    prod update $p>$fout
    if [ "$(diff -q $fout $ftest)" ]; then
      elog "Test Failed"
      exit $STS_FAILED
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

test_remove () {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "." ]; then p=; fi
    ((tst_ctr++))
    elog "Test $tst_ctr [$FH]: 'prod remove $p'"
    if [ "$p" == "$THIS" ]; then
      echo "--> rm /usr/bin/$p">>$ftest
      echo "--> rm /usr/bin/${p}.*">>$ftest
      if [ "$FH" == "Debian" ]; then
        echo "--> apt-get autoremove">>$ftest
      fi
    elif [ "$p" == "python-pip" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y remove python-pip">>$ftest
      else
        echo "--> apt-get -y remove python-pip">>$ftest
        echo "--> apt-get autoremove">>$ftest
      fi
    elif [ "$p" == "apache2" -o "$p" == "httpd" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> service httpd stop">>$ftest
        echo "--> yum -y remove httpd">>$ftest
        echo "--> iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT">>$ftest
        echo "--> iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT">>$ftest
      else
        echo "--> service apache2 stop">>$ftest
        echo "--> apt-get -y remove apache2">>$ftest
        echo "--> iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT">>$ftest
        echo "--> iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT">>$ftest
        echo "--> apt-get autoremove">>$ftest
      fi
    elif [ "$p" == "postgresql" -o "$p" == "postgresql-server" ]; then
        echo "--> service postgresql stop">>$ftest
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y remove postgresql-server">>$ftest
      else
        echo "--> apt-get -y remove postgresql">>$ftest
        echo "--> apt-get autoremove">>$ftest
      fi
    elif [ "$p" == "openssh-server" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> service sshd stop">>$ftest
        echo "--> yum -y remove openssh-server">>$ftest
      else
        echo "--> service ssh stop">>$ftest
        echo "--> apt-get -y remove openssh-server">>$ftest
        echo "--> apt-get autoremove">>$ftest
      fi
    elif [ "$p" == "python" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y remove python">>$ftest
        echo "setuptools should be removed">>$ftest
        echo "readline should be removed">>$ftest
        echo "python-psycopg2 should be removed">>$ftest
        echo "python-simplejson should be removed">>$ftest
        echo "python-lxml should be removed">>$ftest
      else
        echo "--> apt-get -y remove python">>$ftest
        echo "setuptools should be removed">>$ftest
        echo "libreadline6 should be removed">>$ftest
        echo "python-psycopg2 should be removed">>$ftest
        echo "python-simplejson should be removed">>$ftest
        echo "python-lxml should be removed">>$ftest
        echo "--> apt-get autoremove">>$ftest
      fi
    elif [ "$p" == "odoo" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y remove odoo">>$ftest
        echo "python-babel should be removed">>$ftest
        echo "python-lxml should be removed">>$ftest
        echo "python-psycopg2 should be removed">>$ftest
        echo "python-simplejson should be removed">>$ftest
        echo "wkhtmltopdf should be removed">>$ftest
      else
        echo "--> apt-get -y remove odoo">>$ftest
        echo "python-babel should be removed">>$ftest
        echo "wkhtmltopdf should be removed">>$ftest
        echo "--> apt-get autoremove">>$ftest
      fi
    fi
    if [ "$p" ]; then
      prod remove $p>$fout
      if [ "$(diff -q $fout $ftest)" ]; then
        elog "Test Failed"
        exit $STS_FAILED
      fi
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

# main
if [ $EUID -eq 0 ]; then
  FLOG=/var/log/$THIS.log
else
  FLOG=~/$THIS.log
fi
set_tlog_file "$FLOG"

OPTOPTS=(h        D       d         E       e       g       H        I        i      J        L         l          m        n           O         P          q         s         t         V           v           y       1)
OPTDEST=(opt_help opt_dev opt_depth opt_osf opt_oed opt_grf opt_host opt_xtly opt_if opt_xtln opt_log   opt_locale opt_mult opt_dry_run opt_odoo  opt_pwd    opt_quiet opt_sub   test_mode opt_version opt_verbose opt_yes opt_1st)
OPTACTI=(1        1       "="       "="     "="     1       "="      "="      "="    "="      "="       "="        1        1           "="       "="        1         "="       1         "*"         1           "*"     1)
OPTDEFL=(1        0       ""        ""      ""      0       ""       ""       ""     ""       ""        ""         0        0           ""        ""         0         ""        0         ""          0           ""      0)
OPTMETA=("help"   "dev"   "number"  "disto" "disto" "win"   "host"   "pkg(s)" "file" "pkg(s)" "logfile" "iso3166"  "multi"  "noop"      "version" "password" "quiet"   "modules" "teste"   "version"   "verbose"   "yes"   "first")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "add development package(s)"\
 "max depth level"\
 "emulate Linux distribution; may be Ubuntu[12|14],CentOS[6|7]. Use carefully!"\
 "select odoo distribution; may be odoo,oca,zeroincombenze"\
 "add graphical interface package(s)"\
 "[user@]host to export config files"\
 "declare package(s) as installed"\
 "use identity file (private key) for remote authentication"\
 "declare package(s) as uninstalled"\
 "log file name (def /var/log/product.log)"\
 "include localization module for odoo; use ISO3166 country code"\
 "multiple version environment (append version to filenames)"\
 "do nothing (dry-run)"\
 "select odoo version: may be 7, 8 or 9"\
 "default for users, if added by import command"\
 "quiet mode"\
 "install odoo submodules"\
 "test mode (implies dry-run)"\
 "show version end exit"\
 "verbose mode"\
 "assume yes"\
 "1st installation")
OPTARGS=(action pkg sub1 sub2)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Build a Odoo or LAMP server"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ "$DEV_ENVIRONMENT" == "$THIS" ]; then
  test_mode=1
fi
if [ -z "$opt_depth" ]; then
  opt_depth=999
fi
if [ $test_mode -gt 0 ]; then
  opt_dry_run=1
fi
if [ "$opt_log" ]; then
  FLOG=$opt_log
fi
if [ -n "$opt_osf" ]; then
  get_arch "$opt_osf"
fi
$(init_cfg)
$(active_cfg)
link_cfg $FCONF
if [ -z "$opt_odoo" ]; then
  if [ "$action" == "version" -o "$action" == "status" ]; then
    if $(prod status odoo "-q"); then
      opt_odoo="9"
    fi
  fi
fi
if [ -n "$opt_odoo" ]; then
  if [ "$opt_odoo" != "9" -a "$opt_odoo" != "8" -a "$opt_odoo" != "7" -a "$opt_odoo" != "*" ]; then
    echo "Invalid option value: use -O9 or -O8 or -O7 or -O*"
    exit $STS_FAILED
  fi
  if [ "opt_oed" != "odoo" -a "opt_oed" != "oca" -a "opt_oed" != "zeroincombenze" ]; then
    opt_oed="zeroincombenze"
  fi
fi
opt_osub="account-financial-tools account-invoicing account-payment bank-payment knowledge partner-contact stock-logistics-workflow web webkit-tools website"
if [ "$opt_oed" == "zeroincombenze" ]; then
  opt_osub="$opt_osub l10n-italy-supplemental"
fi
if [ -n "$opt_xtly" ]; then
  SIMULATE_YES=" ${opt_xtly//,/ } "
fi
if [ -n "$opt_xtln" ]; then
  SIMULATE_NO=" ${opt_xtln//,/ } "
fi
if [ "$action" == "regression_test" ]; then
  FCONF="./$THIS.notexists"
else
  init_cfg "$pkg"
fi
ODOO_UID=$(get_prm_value $FCONF "ODOO_UID")
ODOO_GID=$(get_prm_value $FCONF "ODOO_GID")

wlog "$THIS $__version__ running on $(xuname -a)"
wlog "Setup for $FH family"

if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "whatis" ]; then
  if [ $test_mode -eq 0 ]; then
    print_title "List managed packages"
  fi
  iter=$(set_iter $pkg)
  for p in $iter; do
    prod $action $p
  done
elif [ "$action" == "status" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  set_tlog_file "$FLOG" "" "echo"
  print_title "Check for installation status"
  iter=$(set_iter $pkg)
  for p in $iter; do
    realname=$(prod realname $p)
    prod $action $realname
  done
  echo "See $FLOG for traced informations"
elif [ "$action" == "version" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  set_tlog_file "$FLOG" "" "echo"
  print_title "Show installed package version"
  iter=$(set_iter $pkg)
  for p in $iter; do
    realname=$(prod realname $p)
    if $(prod status $realname "-q"); then
      prod version $realname
    fi
  done
elif [ "$action" == "update" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  print_title "Update/upgrade package(s)"
  iter=$(set_iter $pkg)
  for p in $iter; do
    realname=$(prod realname $p)
    if $(prod status $realname "-q"); then
      wlog "- package $realname"
      prod $action $realname
    else
      wlog "$realname not installed"
    fi
  done
  echo "See $FLOG for traced informations"
elif [ "$action" == "config" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  print_title "Config package(s)"
  iter=$(set_iter $pkg)
  if [ "$iter" == "product" ]; then
    for pkgname in $LAMP; do
      realname=$(prod realname $pkgname)
      if [ -z "$(echo -e \\"$PIP_PKGS\\"|grep [[:space:]]$realname[[:space:]] 2>/dev/null)" ]; then
        if [ -z "$(echo -e \\"$STD_PKGS\\"|grep [[:space:]]$realname[[:space:]] 2>/dev/null)" ]; then
          installer=$(prod installer $realname)
          if [ "$installer" == "pip" ]; then
            PIP_PKGS="$PIP_PKGS $realname "
          else
            STD_PKGS="$STD_PKGS $realname "
          fi
        fi
      fi
      SUBlist="SUB_${realname//-/_}"
      if [ "$SUBlist" ]; then
        for pkg in ${!SUBlist}; do
          p=$(prod realname $pkg)
          if [ -z "$(echo -e \\"$PIP_PKGS\\"|grep [[:space:]]$p[[:space:]] 2>/dev/null)" ]; then
            if [ -z "$(echo -e \\"$STD_PKGS\\"|grep [[:space:]]$p[[:space:]] 2>/dev/null)" ]; then
              installer=$(prod installer $p)
              if [ "$installer" == "pip" ]; then
                PIP_PKGS="$PIP_PKGS $p "
              else
                STD_PKGS="$STD_PKGS $p "
              fi
            fi
          fi
        done
      fi
    done
  else
    for p in $iter; do
      realname=$(prod realname $p)
      if $(is_virtualname $realname); then
        prod $action $realname "-q"
      elif $(prod status $realname "-q"); then
        wlog "- package $realname"
        prod $action $realname
      else
        wlog "$realname not installed"
      fi
    done
  fi
  echo "See $FLOG for traced informations"
elif [ "$action" == "remove" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  if [ -z "$pkg" ]; then
     echo "You must specify package to remove!"
     exit $STS_FAILED
  fi
  print_title "Remove package $pkg"
  iter=$(set_iter $pkg)
  for p in $iter; do
    realname=$(prod realname $p)
    if $(is_virtualname $realname); then
      prod $action $realname "-q"
    elif $(prod status $realname "-q"); then
      wlog "- package $realname"
      prod $action $realname
    else
      wlog "$realname not installed"
    fi
  done
  echo "See $FLOG for traced informations"
elif [ "$action" == "install" ]; then
  #if [ $EUID -ne 0 ]; then
  #  elog "This command must be executed by root"
  #  exit $STS_FAILED
  #fi
  print_title "Install package(s)"
  if [ $opt_1st -gt 0 ]; then
    wlog "Setup for 1st installation"
    if [ $opt_dry_run -eq 0 ]; then
      prod update
    fi
  fi
  iter=$(set_iter $pkg)
  for p in $iter; do
    realname=$(prod realname $p)
    if $(is_virtualname $realname); then
      prod $action $realname "-q"
    elif $(prod status $p "-q"); then
      wlog "Package $realname already installed"
    else
      wlog "- package $realname"
      prod $action $realname
    fi
  done
  echo "See $FLOG for traced informations"
elif [ "$action" == "prepare" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  wlog "Preparining group list"
  build_groups_list
  wlog "Preparing user list"
  build_user_list
  echo "See $FLOG for traced informations"
elif [ "$action" == "export" ]; then
  # if [ $EUID -ne 0 ]; then
  #   elog "This command must be executed by root"
  #   exit $STS_FAILED
  # fi
  if [ -z "$opt_host" ]; then
    elog "Missing destination host name: use -H host option"
  else
    prod install $THIS
  fi
  echo "See $FLOG for traced informations"
elif [ "$action" == "import" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  wlog "Creating groups"
  add_groups
  wlog "Creating users"
  add_users
  echo "See $FLOG for traced informations"
elif [ "$action" == "regression_test" ]; then
  DEV_ENVIRONMENT="$THIS"
  test_mode=1
  opt_dry_run=1
  tst_ctr=0
  opt_host=""
  opt_yes="-y"
  opt_grf=1
  opt_quiet=0
  opt_verbose=0
  opt_odoo="7"
  opt_dev=0
  opt_oed="odoo"
  opt_depth=999
  SAVE_SMLT_YES="python python-lxml python-psycopg2 python-simplejson python-babel setuptools readline libreadline6"
  SAVE_SMLT_YES="$SAVE_SMLT_YES wkhtmltopdf"
  SAVE_SMLT_YES="$SAVE_SMLT_YES port_tcp_80 port_tcp_443"
  SAVE_SMLT_NO="openssh-clients openssh-client telnet postgresql-client-common install postgresql-contrib pgadmin3"
  SAVE_SMLT_NO="$SAVE_SMLT_NO odoo python-gdata gdata python-ldap pytz xlwt ZSI"
  SAVE_SMLT_NO="$SAVE_SMLT_NO Babel python-dateutil python-docutils python-feedparser zlib-devel zlib1g-dev bzip2-devel openssl-devel"
  SAVE_SMLT_NO="$SAVE_SMLT_NO python-imaging python-jinja2 python-mako python-markupsafe python-mock python-openid python-psutil"
  SAVE_SMLT_NO="$SAVE_SMLT_NO python-reportlab python-suds python-unittest2 python-vatnumber python-vobject python-werkzeug urllib3"
  SAVE_SMLT_NO="$SAVE_SMLT_NO libwebp5 libwebpmux1 python-passlib passlib python-paste python-pillow python-requests python-six python-tempita"
  SAVE_SMLT_NO="$SAVE_SMLT_NO ncurses-devel sqlite-devel virtualenv pydot PyYAML libxslt-python python-libxml2 libxml2-python"
  SAVE_SMLT_NO="$SAVE_SMLT_NO docutils-common docutils-doc python-dev python-devel python-virtualenv libreadline libreadline6 "
  SAVE_SMLT_NO="$SAVE_SMLT_NO readline-devel tk-dev tk-devel gdbm-devel libgdbm-dev liblzma-dev"
  SAVE_SMLT_NO="$SAVE_SMLT_NO libpcap-dev libpcap-devel xz-devel postgresql-devel libssl-dev libreadline6-dev libsqlite3-dev unidecode"
  SAVE_SMLT_NO="$SAVE_SMLT_NO port_tcp_22"
  SAVE_SMLT_NO="$SAVE_SMLT_NO pre_install_odoo"
  PNLX=("." $THIS python-pip apache2 httpd postgresql postgresql-server openssh-server python odoo)
  # PNLX=(odoo) #debug
#
  for aa in "Ubuntu14" "CentOS7"; do
    elog "Regression test on $aa"
    get_arch "$aa"
    init_cfg "LAMP"
    SIMULATE_YES=". $SAVE_SMLT_YES ."
    SIMULATE_NO=". $SAVE_SMLT_NO $SUB_odoo python-pip ."
    test_cfg_name
    test_realname
    test_install
    SIMULATE_YES=". $SAVE_SMLT_YES python-pip ."
    SIMULATE_NO=". $SAVE_SMLT_NO $SUB_odoo ."
    test_update
    test_remove
  done

  elog "$tst_ctr regression test successfuly ended"
elif [ "$action" == "package" ]; then
  package="product"
  if [ -f $package -a -f $package.man -a -f z0librc ]; then
    if [ -f $package.gz ]; then
      rm -f $package.gz
    fi
    tar -cvf $package.gz $package $package.man z0librc ${package}_bld_ods
    for f in odoo-server_Debian odoo-server_RHEL odoo-server; do
      if [ -f $f ]; then
        tar -rvf $package.gz $f
      fi
    done
    chown apache:apache $package.gz
    mv $package.gz /var/www/html/mw/download/
  else
    cd /tmp
    if [ -f ./$package ]; then
      rm -f ./$package
    elif [ -d ./$package ]; then
      rm -fR ./$package
    fi
    mkdir ./$package
    cd ./$package
    cp /usr/bin/$package ./$package
    cp /usr/bin/$package.man ./$package
    cp /usr/bin/${pkgname}_bld_ods ./$package
    cp /etc/z0librc ./$package
    for f in odoo-server_Debian odoo-server_RHEL odoo-server; do
      if [ -f /usr/bin/$f ]; then
        cp /usr/bin/$f ./$package
      fi
    done
    tar -f $package.gz ./$package
    chown apache:apache $package.gz
    mv $package.gz /var/www/html/mw/download/
    rm -fR ./$package
  fi
elif [ "$action" == "debug" ]; then
   echo "[options]">product.conf.sample
   jy=0
   p=""
   while ((jy<${#DEFPRM[*]})); do
     echo "${DEFPRM[jy]}=${DEFVAL[jy]}"
     echo "${DEFPRM[jy]}=${DEFVAL[jy]}">>product.conf.sample
     ((jy++))
   done
else
  echo "No valid action $action!"
  exit $STS_FAILED
fi
if [ -f "$TMP_LIS_PIP" ]; then
  rm -f TMP_LIS_PIP
fi
exit 0
