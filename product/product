#! /bin/bash
# -*- coding: utf-8 -*-
# LAMP setup (installer)
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
# This free software is released under GNU Affero GPL3

# TODO remove: python-paste python-pillow python-tempita
#  remove CentOS6: pyOpenSSL jbigkit-libs libwebp python-six
#  ZSI
# # yum install python-requests python-yaml
# codicefiscale pyxb pypdf for italian localization
# products?
# # oerplib
# flake8, autopep8, pylint, pylint-mccabe, coverage, coveralls, github3.py click
#[RHEL]
# curl --silent --location https://rpm.nodesource.com/setup_5.x | bash -
# yum -y install nodejs
# curl -L https://npmjs.org/install.sh | sh
#[Debian]
# apt-get install nodejs
# apt-get install npm
#[Common]
# npm install -g less
# npm install -g less-plugin-clean-css
#[End]
# per Kaspersky
# yum install kernel-headers
# yum install glibc.i686


THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
if [ -d $TDIR/tests ]; then
  TESTDIR=$TDIR/tests
elif [ -d $TDIR/../tests ]; then
  TESTDIR=$TDIR
elif [ -d ./tests ]; then
  TESTDIR=./tests
elif [ -d ../tests ]; then
  TESTDIR=.
else
  TESTDIR=$TDIR
fi
if [ -e $TDIR/z0librc ]; then
. $TDIR/z0librc
elif [ -e ./z0librc ]; then
. ./z0librc
elif [ -e ../z0librc ]; then
. ../z0librc
elif [ -e ~/z0librc ]; then
. ~/z0librc
elif [ -e /etc/z0librc ]; then
. /etc/z0librc
else
  echo "Library file z0librc not found!"
  exit $STS_FAILED
fi
TESTDIR=$(readlink -e $TESTDIR)


__version__="0.2.29"

STS_FAILED=1
STS_SUCCESS=0
THIS=$(basename $0)
TDIR=$(echo $(readlink -f $(dirname $0)))
_LAST_PKG=""
_LAST_VER=""


conf_default () {
    # ALIAS
    local p=
    set_cfg_def "apache2" "httpd" "1" "RHEL"
    set_cfg_def "httpd" "apache2" "1" "Debian"
    set_cfg_def "pip" "python-pip" "1" "Debian"
    set_cfg_def "pip" "python-pip" "1" "CentOS7"
    set_cfg_def "python-pip" "pip" "1" "CentOS6"
    set_cfg_def "mysql" "mysql-server" "1"
    set_cfg_def "mysql" "mariadb" "1" "CentOS7"
    set_cfg_def "mysql-server" "mariadb-server" "1" "CentOS7"
    set_cfg_def "mariadb" "mysql-server" "1" "CentOS6"
    set_cfg_def "mariadb" "mysql-server" "1" "Debian"
    set_cfg_def "mariadb-server" "mysql-server" "1" "CentOS6"
    set_cfg_def "mariadb-server" "mysql-server" "1" "Debian"
    set_cfg_def "postgres" "postgresql-server" "1" "RHEL"
    set_cfg_def "postgres" "postgresql" "1" "Debian"
    set_cfg_def "postgresql" "postgresql-server" "1" "RHEL"
    set_cfg_def "postgresql-server" "postgresql" "1" "Debian"
    set_cfg_def "pyopenssl" "pyOpenSSL" "1" "RHEL"
    set_cfg_def "php5" "php" "1" "RHEL"
    set_cfg_def "php" "php5" "1" "Debian"
    set_cfg_def "openssh" "openssh-server" "1"
    set_cfg_def "openssh-client" "openssh-clients" "1" "RHEL"
    set_cfg_def "openssh-clients" "openssh-client" "1" "Debian"
    set_cfg_def "babel" "Babel" "1"
    set_cfg_def "beautifulsoup" "BeautifulSoup" "1"
    set_cfg_def "libxml2-python" "python-libxml2" "1" "Debian"
    set_cfg_def "python-libxml2" "libxml2-python" "1" "RHEL"
    set_cfg_def "libxslt-python" "python-libxslt1" "1" "Debian"
    set_cfg_def "python-libxslt1" "libxslt-python" "1" "RHEL"
    set_cfg_def "python-devel" "python-dev" "1" "Debian"
    set_cfg_def "python-dev" "python-devel" "1" "RHEL"
    set_cfg_def "zlib1g-dev" "zlib-devel" "1" "Debian"
    set_cfg_def "zlib-devel" "zlib1g-dev" "1" "RHEL"
    set_cfg_def "libreadline6-dev" "readline-devel" "1" "Debian"
    set_cfg_def "readline-devel" "libreadline6-dev" "1" "RHEL"
    set_cfg_def "dateutil" "python-dateutil" "1"
    set_cfg_def "php5-mysql" "php-mysql" "1" "RHEL"
    set_cfg_def "php-mysql" "php5-mysql" "1" "Debian"
    set_cfg_def "php5-common" "php-common" "1" "RHEL"
    set_cfg_def "php-common" "php5-common" "1" "Debian"
    set_cfg_def "php5-xml" "php-xml" "1" "RHEL"
    set_cfg_def "php-xml" "php5-xml" "1" "Debian"
    set_cfg_def "php5-cli" "php-cli" "1" "RHEL"
    set_cfg_def "php-cli" "php5-cli" "1" "Debian"
    # Commands templates
    set_cfg_def "VFYLOW" "apachectl php5" "0" "Debian"
    set_cfg_def "VFYLOW" "apachectl php" "0" "RHEL"
    set_cfg_def "VFYUPP" "ssh product" "0"
    set_cfg_def "VFYPSX" "pip mysql psql python" "0"
    set_cfg_def "VFYE2NL" "" "0"
    set_cfg_def "VFYERR" "ssh python" "0"
    set_cfg_def "NOINQ" "vsftpd postgresql-client-common postgresql-contrib ghostscript odoo" "0"
    set_cfg_def "NAME_VIRTUAL" "LAMP" "0"
    p="oerplib virtualenv Babel python-ldap python-openid os0"
    p="$p pytok pyasn1 ndg-httpsclient pytz gdata PyYAML xlwt unidecode urllib3"
    p="$p passlib unicodecsv pydot vatnumber BeautifulSoup mock lxml"
    p="$p psycopg2 simplejson"
    if [ "$DISTO" != "CentOS6" ]; then
      p="$p python-dateutil"
    fi
    set_cfg_def "PIP_PKGS" "$p" "0"
    set_cfg_def "GIT_PKGS" "product odoo" "0"
    p="product wkhtmltopdf"
    if [ "$DISTO" == "CentOS6" ]; then
      p="$p python-dateutil"
    fi
    set_cfg_def "WGET_PKGS" "$p" "0"
    p="epel-release python-pip pip yum-utils openssh-server"
    p="$p postgresql-server python mysql-server postgresql iptables-services"
    p="$p php-mysql php-common php-xml bzip2-devel mod_ssl mod_proxy_html"
    p="$p openssl-devel libssl-dev docutils-doc libart-2.0-2"
    p="$p libcupsfilters1 libcupsimage2 libgs9 libgs9-common"
    p="$p ncurses-devel sqlite-devel odoo ghostscript antiword docutils-common"
    p="$p libijs-0.35 libjbig2dec0 liblcms2-2 libpaper-utils libpaper1"
    p="$p libpoppler44 libtidy-0.99-0 libwebp5 libwebpmux1 poppler-data"
    p="$p poppler-utils python-babel python-babel-localedata python-decorator"
    p="$p python-docutils python-feedparser python-gevent python-greenlet"
    p="$p python-imaging python-jinja2 python-mako python-markupsafe"
    p="$p python-pil python-psutil python-pybabel python-pychart"
    p="$p python-pygments python-pyinotify python-pyparsing"
    p="$p python-pypdf python-renderpm python-reportlab python-reportlab-accel"
    p="$p python-roman python-suds python-unittest2"
    p="$p python-utidylib python-vobject python-werkzeug wget git"
    p="$p python-wheel libapache2-mod-auth-mysql pyopenssl"
    p="$p vsftpd postgresql-client-common postgresql-contrib"
    set_cfg_def "STD_PKGS" "$p" "0"
    p="httpd mariadb mariadb-server php libxml2-python pyOpenSSL libffi-devel"
    p="$p php-cli libxslt-python python-devel zlib1g-dev libreadline6-dev"
    p="$p php-mysql php-common php-xml php-cli openssh-clients"
    p="$p bind-utils"
    set_cfg_def "YUM_PKGS" "$p" "0" "RHEL"
    p="apache2 php5 python-libxml2 libffi-dev python-openssl build-essential"
    p="$p python-libxslt1 python-dev zlib-devel readline-devel"
    p="$p php5-mysql php5-common php5-xml php5-cli openssh-client"
    set_cfg_def "APT_PKGS" "$p" "0" "Debian"
    # Packges requirements
    set_cfg_def "REQ_LAMP" "gcc iptables" "0" "CentOS7"
    set_cfg_def "REQ_LAMP" "gcc" "0"
    set_cfg_def "REQ_product" "wget" "0"
    p="git unidecode unicodecsv pydot vatnumber BeautifulSoup"
    set_cfg_def "REQ_odoo" "python postgresql $p" "0" "Debian"
    set_cfg_def "REQ_odoo" "python postgresql-server $p" "0" "RHEL"
    set_cfg_def "REQ_python" "python-pip" "0" "Debian"
    set_cfg_def "REQ_python" "python-pip python-wheel" "0" "CentOS7"
    set_cfg_def "REQ_python" "python-pip" "0" "CentOS7"
    set_cfg_def "REQ_wkhtmltopdf" "xorg-x11-fonts-Type1 xorg-x11-fonts-75dpi" "0"
    # Bill of packages
    set_cfg_def "LAMP" "epel-release python-pip python-wheel yum-utils LAMP_security openssh-server httpd mariadb postgresql-server php python" "0" "CentOS7"
    set_cfg_def "LAMP" "epel-release pip yum-utils LAMP_security openssh-server httpd mysql-server postgresql-server php python" "0" "CentOS6"
    set_cfg_def "LAMP" "python-pip LAMP_security openssh-server apache2 mysql-server postgresql php5 python" "0" "Debian"
    set_cfg_def "LAMP_security" "libffi-devel pyOpenSSL pyasn1 ndg-httpsclient" "0" "CentOS7"
    set_cfg_def "LAMP_security" "openssl-devel libffi-devel pyOpenSSL pyasn1 ndg-httpsclient" "0" "CentOS6"
    set_cfg_def "LAMP_security" "libffi-dev libssl-dev python-openssl build-essential" "0" "Debian"
    set_cfg_def "SUB_apache2" "vsftpd" "0" "Debian"
    set_cfg_def "SUB_httpd" "vsftpd" "0" "CentOS7"
    set_cfg_def "SUB_mariadb" "mariadb-server" "0" "CentOS7"
    set_cfg_def "SUB_mysql-server" "libapache2-mod-auth-mysql" "0"
    if [ $opt_grf -eq 0 ]; then
      set_cfg_def "SUB_postgresql-server" "postgresql-client-common postgresql-contrib" "0" "RHEL"
      set_cfg_def "SUB_postgresql" "postgresql-client-common postgresql-contrib" "0" "Debian"
    else
      set_cfg_def "SUB_postgresql-server" "postgresql-client-common postgresql-contrib pgadmin3" "0" "RHEL"
      set_cfg_def "SUB_postgresql" "postgresql-client-common postgresql-contrib pgadmin3" "0" "Debian"
    fi
    if [ $opt_dev -gt 0 ]; then
      set_cfg_def "SUB_openssh-server" "openssh-clients telnet mod_ssl mod_proxy_html iptables-services bind-utils" "0" "RHEL"
      set_cfg_def "SUB_openssh-server" "openssh-client telnet" "0" "Debian"
    else
      set_cfg_def "SUB_openssh-server" "openssh-clients mod_ssl mod_proxy_html iptables-services bind-utils" "0" "RHEL"
      set_cfg_def "SUB_openssh-server" "openssh-client" "0" "Debian"
    fi
    set_cfg_def "SUB_php5" "php5-mysql php5-common php5-xml php5-cli" "0" "Debian"
    set_cfg_def "SUB_php" "php-mysql php-common php-xml php-cli" "0" "RHEL"
    set_cfg_def "PYTHON_LIB_XML" "python-libxslt1 libxml2 python-libxml2 lxml" "0" "Debian"
    set_cfg_def "PYTHON_LIB_XML" "libxslt-python libxml2 libxml2-python lxml" "0" "RHEL"
    p="setuptools python-virtualenv virtualenv"
    p="$p libreadline6 PYTHON_LIB_XML psycopg2 simplejson xlwt PyYAML"
    p="$p gdata python-ldap pytz"
    if [ $opt_dev -gt 0 ]; then
      p="$p python-dev libsasl2-dev libldap2-dev zlib1g-dev libssl-dev"
      p="$p libreadline6-dev libsqlite3-dev tk-dev libgdbm-dev libpcap-dev"
      p="$p liblzma-dev python-requests python-yaml mock"
    fi
    set_cfg_def "SUB_python" "$p" "0" "Debian"
    p="setuptools python-virtualenv virtualenv readline"
    p="$p PYTHON_LIB_XML psycopg2 simplejson xlwt PyYAML"
    p="$p gdata python-ldap pytz"
    if [ $opt_dev -gt 0 ]; then
      p="$p python-devel openldap-devel zlib-devel bzip2-devel openssl-devel"
      P="$p ncurses-devel readline-devel sqlite-devel tk-devel gdbm-devel"
      p="$p libpcap-devel xz-devel postgresql-devel libxml2-devel"
      p="$p libxslt-devel python-requests python-yaml mock"
    fi
    set_cfg_def "SUB_python" "$p" "0" "RHEL"
    p="ghostscript libart-2.0-2 libcupsfilters1"
    p="$p libcupsimage2 libgs9 libgs9-common libijs-0.35 libjbig2dec0"
    p="$p liblcms2-2 libpaper-utils libpaper1 libpoppler44 libtidy-0.99-0 libwebp5"
    p="$p libwebpmux1 poppler-data poppler-utils python-babel python-babel-localedata"
    p="$p python-dateutil python-decorator python-docutils python-feedparser"
    P="$p python-gevent python-greenlet python-imaging python-jinja2 python-mako"
    p="$p python-markupsafe python-openid passlib python-pil"
    P="$p python-psutil python-pybabel python-pychart python-pygments"
    p="$p python-pyinotify python-pyparsing python-pypdf python-renderpm"
    p="$p python-reportlab python-reportlab-accel python-roman python-suds"
    p="$p python-unittest2 python-utidylib python-vobject"
    p="$p python-werkzeug docutils-common docutils-doc wkhtmltopdf"
    if [ $opt_dev -gt 0 ]; then
      p="$p oerplib erppeek os0 pytok"
    fi
    set_cfg_def "SUB_odoo" "$p" "0" "Debian"
    p="Babel dejavu-fonts-common dejavu-sans-fonts fontpackages-filesystem"
    p="$p libjpeg-turbo libtiff libyaml passlib"
    p="$p pyOpenSSL pychart pyparsing python-babel python-beaker python-dateutil python-docutils python-feedparser python-jinja2"
    p="$p python-ldap python-mako python-markupsafe python-openid"
    p="$p python-psutil python-reportlab"
    p="$p python-unittest2 urllib3 python-vobject python-werkzeug wkhtmltopdf"
    if [ $opt_dev -gt 0 ]; then
      p="$p libjpeg-turbo-devel oerplib erppeek os0 pytok"
    fi
    set_cfg_def "SUB_odoo" "$p" "0" "RHEL"
    # Packages options
    if [ $test_mode -eq 0 ]; then
      set_cfg_def "${THIS}_vfycmd" "/usr/bin/$THIS -V" "0"
    else
      set_cfg_def "${THIS}_vfycmd" "$THIS -V" "0"
    fi
    set_cfg_def "apache2_cmdname" "apachectl" "0" "Debian"
    set_cfg_def "apache2_LocalRoot" "/var/www/html" "0" "Debian"
    set_cfg_def "httpd_cmdname" "apachectl" "0" "RHEL"
    set_cfg_def "httpd_LocalRoot" "/var/www/html" "0" "RHEL"
    set_cfg_def "postgresql-server_cmdname" "psql" "0" "RHEL"
    set_cfg_def "postgresql_cmdname" "psql" "0" "Debian"
    set_cfg_def "python-pip_cmdname" "pip" "0" "Debian"
    set_cfg_def "python-pip_cmdname" "pip" "0" "CentOS7"
    set_cfg_def "mysql-server_cmdname" "mysql" "0"
    set_cfg_def "mariadb-server_cmdname" "mysql" "0" "CentOS7"
    set_cfg_def "mysql_cmdname" "mysql" "0"
    set_cfg_def "mariadb_cmdname" "mysql" "0" "CentOS7"
    set_cfg_def "openssh-server_cmdname" "NULL" "0"
    set_cfg_def "openssh-client_cmdname" "ssh" "0" "Debian"
    set_cfg_def "openssh-clients_cmdname" "ssh" "0" "RHEL"
    if [ "$opt_oed" == "odoo" ]; then
      gitrep="odoo/odoo"
    elif [ "$opt_oed" == "oca" ]; then
      gitrep="OCA/OCB"
    else
      gitrep="zeroincombenze/OCB"
    fi
    set_cfg_def "odoo_git_URL" "https://github.com/$gitrep.git" "0"
    set_cfg_def "odoo_git_LocalRoot" "/opt/odoo" "0"
    set_cfg_def "odoo_git_LocalUser" "odoo" "0"
    set_cfg_def "product_git_URL" "https://github.com/zeroincombenze/tools.git" "0"
    # set_cfg_def "product_git_LocalRoot" "/tmp" "0"
    set_cfg_def "product_git_LocalUser" "odoo" "0"
    set_cfg_def "wkhtmltopdf_wget_URL" "http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1" "0"
    if [ "$MACHARCH" != "x86_64" ]; then
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-trusty-i386.deb" "0" "Ubuntu14"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-precise-i386.deb" "0" "Ubuntu12"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-centos6-i386.rpm" "0" "CentOS6"
    else
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-trusty-amd64.deb" "0" "Ubuntu14"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-precise-amd64.deb" "0" "Ubuntu12"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-centos7-amd64.rpm" "0" "CentOS7"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-centos6-amd64.rpm" "0" "CentOS6"
    fi
    if [ "$DISTO" == "CentOS6" ]; then
      set_cfg_def "python-dateutil_wget_URL" "https://pypi.python.org/packages/source/p/python-dateutil/" "0"
      set_cfg_def "python-dateutil_wget_xname" "python-dateutil-1.5.tar.gz" "0"
      set_cfg_def "python-dateutil_wget_md5" "#md5=0dcb1de5e5cad69490a3b6ab63f0cfa5" "0"
    fi
    # Service names
    set_cfg_def "vsftpd_svcname" "vsftpd" "0"
    set_cfg_def "iptables_svcname" "iptables" "0"
    set_cfg_def "apache2_svcname" "apache2" "0" "Debian"
    set_cfg_def "httpd_svcname" "httpd" "0" "RHEL"
    set_cfg_def "mysql_svcname" "mysql" "0" "Debian"
    set_cfg_def "mariadb_svcname" "mariadb" "0" "CentOS7"
    set_cfg_def "mariadb-server_svcname" "mariadb" "0" "CentOS7"
    set_cfg_def "mysql_svcname" "mysqld" "0" "CentOS6"
    set_cfg_def "postgresql_svcname" "postgresql" "0"
    set_cfg_def "postgresql-server_svcname" "postgresql" "0"
    set_cfg_def "openssh-server_svcname" "ssh" "0" "Debian"
    set_cfg_def "openssh-server_svcname" "sshd" "0" "RHEL"
    set_cfg_def "odoo_svcname" "odoo-server" "0"
    # TCP & UDP Ports
    set_cfg_def "TCP_httpd" "80 443" "0" "RHEL"
    set_cfg_def "TCP_apache2" "80 443" "0" "Debian"
    set_cfg_def "TCP_vsftpd" "21" "0"
    set_cfg_def "TCP_openssh-server" "22" "0"
    set_cfg_def "TCP_odoo" "8069" "0"
}


get_prm_value() {
# get_prm_value (tid prmname)::DEF*
# return: prmvalue; -> disco, vist
    local p
    local x
    if [ "$1" == "0" -o "$1" == "1" -o "$1" == "2" -o "$1" == "3" ]; then
      local tid=$1
    else
      local tid="0"
    fi
    if [ -z "$2" ]; then
      p=
      echo $p
      return
    else
      p=$(get_cfg_value $tid $2)
    fi
    if [ "$p" == "None" -o "$p" == "NULL" ]; then
      echo ""
      return
    fi
    if [ -z "$p" ]; then
      if [ "$2" != "-server_svcname" -a "${2: -15}" == "-server_svcname" ]; then
        if [ "$FH" == "RHEL" ]; then
          p="${2:0: -15}d"
        else
          p="${2:0: -15}"
        fi
      elif [ "$2" != "_cmdname" -a "${2: -8}" == "_cmdname" ]; then
        x="${2:0: -8}"
        if ! $(is_virtualname $x); then
          p="${2:0: -8}"
        else
          p=""
        fi
      elif [ "$2" != "xtlcmd" -a "${2: -7}" == "_xtlcmd" ]; then
        x="${2:0: -7}"
        if $(is_virtualname $x); then
          p="product"
        elif [[ " $STD_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          if [ "$FH" == "RHEL" ]; then
           p="yum"
          elif [ "$FH" == "Debian" ]; then
            p="apt-get"
          else
            p="#"
          fi
        elif [[ " $PIP_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="pip"
        elif [[ " $GIT_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="git"
        elif [[ " $WGET_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="wget"
        elif [[ " $YUM_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="yum"
        elif [[ " $APT_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="apt-get"
        else
          p=
        fi
      elif [ "$2" != "stscmd" -a "${2: -7}" == "_stscmd" ]; then
        x="${2:0: -7}"
        if $(is_virtualname $x); then
          p="product"
        elif [[ " $STD_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          if [ "$FH" == "RHEL" ]; then
            p="rpm"
          elif [ "$FH" == "Debian" ]; then
            p="dpkg-query"
          else
            p="#"
          fi
        elif [[ " $PIP_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="pip"
        elif [[ " $GIT_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="git"
        elif [[ " $WGET_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="#"
        elif [[ " $YUM_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="rpm"
        elif [[ " $APT_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="dpkg-query"
        else
          p=
        fi
      elif [ "$2" != "_vfycmd" -a "${2: -7}" == "_vfycmd" ]; then
        x="${2:0: -7}"
        if $(is_virtualname $x); then
          p=""
        else
          x=$(get_prm_value "0" "${x}_cmdname")
          if [ -z "$x" ]; then
            p=""
          else
            if [[ " $PIP_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
              p=""
            elif [[ " $NOINQ " =~ [[:space:]]$x[[:space:]] ]]; then
              p=
            elif [[ " $VFYLOW " =~ [[:space:]]$x[[:space:]] ]]; then
              p="$x -v"
            elif [[ " $VFYUPP " =~ [[:space:]]$x[[:space:]] ]]; then
              p="$x -V"
            elif [[ " $VFYPSX " =~ [[:space:]]$x[[:space:]] ]]; then
              p="$x --version"
            else
              p=""
            fi
          fi
        fi
      fi
    fi
    echo $p
    # echo "get_prm_value ('$1' '$2')::$DISTO($FH)=$p;;">>~/product.his    #debug
}

init_cfg_pkg () {
# init_cfg_pkg (pkgname)::FCONF,NAME*,VFY*,STD*,PIP*,NOINQ*
# return:
    # echo "init_cfg_pkg  ('$1')::$FCONF($FH)=$p;;">>~/product.his    #debug
    LAMP=$(get_prm_value "0" "LAMP")
    # if [ -n "$opt_odoo" ]; then
    #   LAMP="$LAMP odoo"
    # fi
    NAME_VIRTUAL="$(get_prm_value "0" NAME_VIRTUAL)"
    NOINQ="$(get_prm_value "0" NOINQ)"
    VFYLOW="$(get_prm_value "0" VFYLOW)"
    VFYUPP="$(get_prm_value "0" VFYUPP)"
    VFYPSX="$(get_prm_value "0" VFYPSX)"
    VFYE2NL="$(get_prm_value "0" VFYE2NL)"
    VFYERR="$(get_prm_value "0" VFYERR)"
    PIP_PKGS="$(get_prm_value "0" PIP_PKGS)"
    GIT_PKGS="$(get_prm_value "0" GIT_PKGS)"
    WGET_PKGS="$(get_prm_value "0" WGET_PKGS)"
    STD_PKGS="$(get_prm_value "0" STD_PKGS)"
    YUM_PKGS="$(get_prm_value "0" YUM_PKGS)"
    APT_PKGS="$(get_prm_value "0" APT_PKGS)"
}

print_title () {
    if [ $opt_quiet -eq 0 ]; then
      wlog "$1"
    fi
}

verbose_msg () {
    if [ $opt_verbose -gt 0 -a $test_mode -eq 0 ]; then
      elog "$@"
    fi
}

test_msg () {
    if [ $test_mode -eq 0 ]; then
      echo "$@"
    else
      elog "$@"
    fi
}

ending_msg () {
    if [ $test_mode -eq 0 ]; then
      echo "See $FLOG for traced informations"
    fi
}

set_iter () {
# set_iter (pkgname)
# return: <pkg_list>
  # echo "set_iter($1)">>~/product.his #debug
  if [ -z "$1" ]; then
    local iter="$1"
  else
    local p=$(get_cfg_value "0" $1)
    if [ -n "$p" ]; then
      local iter="$p"
    else
      local iter="$1"
    fi
    if $(is_virtualname $1); then
      if [[ " $iter " =~ [[:space:]]$1[[:space:]] ]]; then
        :
      else
        local iter="$1 $iter"
      fi
    fi
  fi
  echo "$iter"
}

enable_port () {
    # echo "enable_port ('$1' '$2')">>~/product.his #debug
    local port=$1
    local prot=$2
    if [ "$prot" != "tcp" -a "$prot" != "upd" ]; then
       prot=tcp
    fi
    if [[ " $SIMULATE_YES " =~ [[:space:]]port_${prot}_${port}[[:space:]] ]]; then
      x="port_$prot_$port"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]port_${prot}_${port}[[:space:]] ]]; then
      x=""
    else
      x=$(iptables -S 2>/dev/null|grep "\-p *$prot *.*\-dport *$port" 2>/dev/null)
    fi
    if [ -z "$x" ]; then
      run_traced "iptables -A INPUT -p $prot -m state --state NEW -m $prot --dport $port -j ACCEPT"
    fi
}

disable_port () {
    # echo "disable_port ('$1' '$2')">>~/product.his #debug
    local port=$1
    local prot=$2
    if [ "$prot" != "tcp" -a "$prot" != "upd" ]; then
       prot=tcp
    fi
    if [[ " $SIMULATE_YES " =~ [[:space:]]port_${prot}_${port}[[:space:]] ]]; then
      x="port_$prot_$port"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]port_${prot}_${port}[[:space:]] ]]; then
      x=""
    else
      x=$(iptables -S 2>/dev/null|grep "\-p *$prot *.*\-dport *$port" 2>/dev/null)
    fi
    if [ "$x" ]; then
      run_traced "iptables -D INPUT -p $prot -m state --state NEW -m $prot --dport $port -j ACCEPT"
    fi
}

get_arch () {
    if [ "$1" == "CentOS7" -o "$1" == "CentOS" -o "$1" == "RHEL" ]; then
      export DISTO="CentOS7"
      export FH="RHEL"
      LXCORE=
      MACHARCH="x86_64"
    elif [ "$1" == "CentOS6" ]; then
      export DISTO="CentOS6"
      export FH="RHEL"
      LXCORE=
      MACHARCH="i686"
    elif [ "$1" == "Ubuntu14" -o "$1" == "Ubuntu"  -o "$1" == "Debian" ]; then
      export DISTO="Ubuntu14"
      export FH="Debian"
      LXCORE="trusty"
      MACHARCH="x86_64"
    elif [ "$1" == "Ubuntu12" ]; then
      export DISTO="Ubuntu12"
      export FH="Debian"
      LXCORE="precise"
      MACHARCH="i686"
    else
      export FH=$(xuname "-f")
      local x=$(xuname "-v")
      local v=$(echo $x|awk -F. '{print $1}')
      export DISTO=$(xuname "-d")$v
      LXCORE=$(xuname "-c")
      MACHARCH=$(xuname "-m")
      if [ -n "$1" ]; then
        echo "!!Invalid $1 architecturre: used $DISTO instead!!"
      fi
    fi
    XU_FH="$FH"
    XU_DISTO="$DISTO"
}

get_locale_name () {
    local pn=
    if [ "$1" == "it" ]; then
      if [ "$opt_oed" == "odoo" -o "$opt_oed" == "oca" ]; then
        pn="https://github.com/OCA/l10n-italy.git"
      else
        pn="https://github.com/zeroincombenze/l10n-italy.git"
      fi
    elif [ "$1" == "be" ]; then
      pn="https://github.com/OCA/l10n-belgium.git"
    elif [ "$1" == "ch" ]; then
      pn="https://github.com/OCA/l10n-switzerland.git"
    elif [ "$1" == "es" ]; then
      pn="https://github.com/OCA/l10n-spain.git"
    elif [ "$1" == "fr" ]; then
      pn="https://github.com/OCA/l10n-france.git"
    elif [ "$1" == "nl" ]; then
      pn="https://github.com/OCA/l10n-netherlands.git"
    elif [ ${#1} -ne 2 ]; then
      if [ "$opt_oed" == "odoo" -o "$opt_oed" == "oca" ]; then
        pn="https://github.com/OCA/$1.git"
      else
        pn="https://github.com/zeroincombenze/$1.git"
      fi
    fi
    echo "$pn"
}

get_locale_dir () {
    local addons=$(echo $1|awk -F/ '{print $5}'|awk -F. '{print $1}')
    echo "$addons"
}

install_submodules () {
    local opt_osub="$1"
    local ov="$2"
    for iso in ${opt_osub//,/ }; do
      run_traced "cd /opt/odoo/$ov.0"
      pn=$(get_locale_name "$iso")
      if [ -z "$pn" ]; then
        if [ ${#iso} -ne 2 ]; then
          elog  "Invalid submodule name $iso"
        else
          elog  "Invalid $iso in -l $opt_locale switch"
        fi
      else
        addons=$(get_locale_dir "$pn")
        if [ -f .gitignore -o $test_mode -gt 0 ]; then
          if [ -z "$(grep "$addons/" .gitignore 2>/dev/null)" -o $test_mode -gt 0 ]; then
            run_traced "echo \"$addons/\">>.gitignore"
          fi
        fi
        if [ -d $addons -a $test_mode -eq 0 ]; then
          run_traced "cd $addons"
          run_traced "git pull origin $ov.0" "odoo"
          run_traced "cd /opt/odoo/$ov.0"
        else
          run_traced "git clone -b $ov.0 $pn $addons $git_opts" "odoo"
          run_traced "git submodule add -b $ov.0 -f $pn $addons" "odoo"
          if [ "opt_oed" == "zeroincombenze" ]; then
            run_traced "git remote add upstream https://github.com/OCA/$addons.git" "odoo"
          fi
          run_traced "cd /opt/odoo/$ov.0"
        fi
      fi
    done
}

is_virtualname () {
    local pkgname=$1
    local sts=$STS_FAILED
    if [ -n "$pkgname" -a "$pkgname" != "." ]; then
      if [[ " $NAME_VIRTUAL " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        sts=$STS_SUCCESS
      fi
    fi
    return $sts
}

get_realname () {
# get_realname (pkgname)::NAME*
# return: realname
    local pkgname=$1
    if [ -n "$pkgname" ]; then
      local p=$(get_cfg_value "1" $1)
      if [ -n "$p" ]; then
        pkgname=$p
      else
        if [ "$FH" == "RHEL" ]; then
          local p=$(get_cfg_value "1" ${1}__Debian)
          if [ "${p: -4}" == "-dev" ]; then
            pkgname="${p}el"
          fi
        elif [ "$FH" == "Debian" ]; then
          local p=$(get_cfg_value "1" ${1}__RHEL)
          if [ "${p: -6}" == "-devel" ]; then
            pkgname="${p:0: -2}"
          fi
        fi
      fi
    fi
    # echo "get_realname($1):=$pkgname">>~/product.his    #debug
    echo $pkgname
}

get_pkg_ver_inq () {
# get_pkg_ver_inq (pkgname)
# return: ->  pkgversion
    # echo "get_pkg_ver_inq ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname=$1
    local pkgversion=
    if [ "$pkgname" == "$_LAST_PKG" ]; then
      pkgversion="$_LAST_VER"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]$pkgname[[:space:]] ]]; then
      :
    else
      local cmdname=$(get_prm_value "0" "${pkgname}_cmdname")
      local vfycmd=$(get_prm_value "0" "${pkgname}_vfycmd")
      if [ -n "$vfycmd" ]; then
        local x="$(echo $vfycmd|head -n1|awk -F\| '{print $1}'|awk -F'2>' '{print $1}'|awk -F'&>' '{print $1}')"
        local p=$($x &>/dev/null)
        if [ $? -eq $STS_SUCCESS ]; then
          if [[ " $VFYERR " =~ [[:space:]]$cmdname[[:space:]] ]]; then
            pkgversion="$($vfycmd 2>&1 |head -n1)"
          elif [[ " $VFYE2NL " =~ [[:space:]]$cmdname[[:space:]] ]]; then
            pkgversion="$($vfycmd|head -n1)"
          else
            pkgversion="$($vfycmd 2>/dev/null|head -n1)"
          fi
        elif [[ " $SIMULATE_YES " =~ [[:space:]]$pkgname[[:space:]] ]]; then
          pkgversion=".($vfycmd)"
        fi
      fi
      _LAST_VER="$pkgversion"
      _LAST_PKG="$pkgname"
    fi
    echo $pkgversion
}

get_pkg_ver_pip () {
# get_pkg_ver_pip (pkgname)
# return: pkgversion
    # echo "get_pkg_ver_pip ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname="$1"
    local stscmd=$(get_prm_value "0" "${1}_stscmd")
    local pkgversion=
    local x=
    if [ "$pkgname" == "$_LAST_PKG" ]; then
      pkgversion="$_LAST_VER"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]$pkgname[[:space:]] ]]; then
      :
    else
      x="$($stscmd show $pkgname)"
      if [ $? -eq $STS_SUCCESS ]; then
        pkgversion="$($stscmd show $pkgname|grep ^[Vv]ersion|awk -F: '{print $2}'|tr -d ', \r\n\(\)')"
      fi
      if [[ " $SIMULATE_YES " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        if [ -z "$pkgversion" ]; then
          pkgversion="($pkgname).($vfycmd)"
        fi
      fi
      if [ "$pkgversion" ]; then
        _LAST_VER="$pkgversion"
        _LAST_PKG="$pkgname"
      fi
    fi
    echo $pkgversion
}

get_pkg_ver_rpm () {
# get_pkg_ver_rpm(pkgname)
# return: pkgversion
    # echo "get_pkg_ver_rpm ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname="$1"
    local stscmd=$(get_prm_value "0" "${1}_stscmd")
    local pkgversion=
    local x=
    if [ "$pkgname" == "$_LAST_PKG" ]; then
      pkgversion="$_LAST_VER"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]$pkgname[[:space:]] ]]; then
      :
    else
      x=$($stscmd -q --qf '%{VERSION}' $pkgname 2>/dev/null)
      if [ $? -eq $STS_SUCCESS ]; then
        pkgversion="$x"
      fi
      if [[ " $SIMULATE_YES " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        if [ -z "$pkgversion" ]; then
          pkgversion="($pkgname).($vfycmd)"
        fi
      fi
      if [ "$pkgversion" ]; then
        _LAST_VER="$pkgversion"
        _LAST_PKG="$pkgname"
      fi
    fi
    echo $pkgversion
}

get_pkg_ver_dpkg () {
# get_pkg_ver_dpkg(pkgname)
# return: pkgversion
    # echo "get_pkg_ver_dpkg ('$1' '$2' '$3' '$4' '$5')">>~/product.his    #debug
    local pkgname="$1"
    local stscmd=$(get_prm_value "0" "${1}_stscmd")
    local pkgversion=
    local x=
    if [ "$pkgname" == "$_LAST_PKG" ]; then
      pkgversion="$_LAST_VER"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]$pkgname[[:space:]] ]]; then
      :
    else
      x="$(${stscmd}-query -f='${Status}' -W $pkgname 2>/dev/null|awk '{print $3}')"
      sts=$?
      if [ $sts -eq $STS_SUCCESS -a "$x" != "installed" ]; then
        sts=$STS_FAILED
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        pkgversion="$(${stscmd}-query -f='${Version}' -W $pkgname 2>/dev/null|awk -F\- '{print $1}')"
      fi
      if [[ " $SIMULATE_YES " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        if [ -z "$pkgversion" ]; then
          pkgversion="($pkgname).($vfycmd)"
        fi
      fi
      if [ "$pkgversion" ]; then
        _LAST_VER="$pkgversion"
        _LAST_PKG="$pkgname"
      fi
    fi
    echo $pkgversion
}

get_pkg_ver () {
# get_pkg_ver(pkgname)
# return: pkgversion
    # echo "get_pkg_ver($1)">>~/product.his    #debug
    local pkgname=$1
    local pkgversion=$(get_pkg_ver_inq "$1")
    if [ -z "$pkgversion" ]; then
      if $(is_virtualname $pkgname); then
        pkgversion="# $pkgname N/A"
      else
        local stscmd=$(get_prm_value "0" "${1}_stscmd")
        local cmd="get_pkg_ver_$stscmd"
        if [ "$(type -t $cmd)" == "function" ]; then
          pkgversion=$($cmd "$1")
        fi
      fi
    fi
    # echo "    return $pkgversion">>~/product.his    #debug
    echo $pkgversion
}

get_full_xtlcmd () {
# get_full_xtlcmd(action pkgname OPTS)
    local xtlcmd=$(get_prm_value "0" "${2}_xtlcmd")
    if [ "$xtlcmd" == "yum" -o "$xtlcmd" == "apt-get" ]; then
      if [[ $3 =~ y ]]; then xtlcmd="$xtlcmd -y"; fi
    fi
    echo "$xtlcmd"
}

set_update_cmd () {
# set_update_cmd::pkgname opt_yes xtlcmd, stscmd STD_PKGS
# return: -> cmd, cmd0
    local UPDATEcmd="product_$1_${pkgname//-/_}"
    if [[ " $SIMULATE_UPDATE_YES " =~ [[:space:]]$pkgname[[:space:]] ]]; then
      cmd="# $UPDATEcmd (SUCCESS)"
    elif [[ " $SIMULATE_UPDATE_NO " =~ [[:space:]]$pkgname[[:space:]] ]]; then
      cmd="# $UPDATEcmd (FAIL)"
    elif [ "$(type -t $UPDATEcmd)" == "function" ]; then
      cmd="$UPDATEcmd $OPTS update $pkgname"
    elif $(is_virtualname $pkgname); then
      cmd="# $UPDATEcmd (VIRTUALNAME)"
    elif [ "$pkgname" == "python-pip" -o "$pkgname" == "pip" ]; then
      cmd="pip install --upgrade pip"
    elif [ "$xtlcmd" == "pip" ]; then
      cmd="$xtlcmd $OPTS install $pkgname --upgrade"
    elif [ "$xtlcmd" == "wget" ]; then
     cmd="update_by_wget $pkgname $OPTS"
    elif [ "$FH" == "RHEL" ]; then
      if [ "$pkgname" == "." ]; then
        cmd="$xtlcmd $OPTS update"
      else
        cmd="$xtlcmd $OPTS update $pkgname"
      fi
    else
      if [ "$pkgname" == "." ]; then
        cmd0="$xtlcmd $OPTS update"
        cmd="$xtlcmd $OPTS upgrade"
      else
        cmd0="$xtlcmd $OPTS update $pkgname"
        cmd="$xtlcmd $OPTS upgrade $pkgname"
      fi
    fi
}

set_remove_cmd () {
# set_remove_cmd::pkgname opt_yes xtlcmd, stscmd STD_PKGS
# return: -> cmd, cmd0
    local REMOVEcmd="product_$1_${pkgname//-/_}"
    if [[ " $SIMULATE_REMOVE_YES " =~ [[:space:]]$pkgname[[:space:]] ]]; then
      cmd="# $REMOVEcmd (SUCCESS)"
    elif [[ " $SIMULATE_REMOVE_NO " =~ [[:space:]]$pkgname[[:space:]] ]]; then
      cmd="# $REMOVEcmd (FAIL)"
    elif [ "$(type -t $REMOVEcmd)" == "function" ]; then
      cmd="$REMOVEcmd $OPTS update $pkgname"
    elif $(is_virtualname $pkgname); then
      cmd="# $REMOVEcmd (VIRTUALNAME)"
    elif [ "$xtlcmd" == "pip" ]; then
       cmd="$xtlcmd $OPTS uninstall $pkgname"
    else
       cmd="$xtlcmd $OPTS remove $pkgname"
    fi
}

set_config_cmd () {
# set_config_cmd::pkgname opt_yes xtlcmd, stscmd STD_PKGS
# return: -> cmd, cmd0
    local CFGcmd="product_$1_${pkgname//-/_}"
    if [ "$(type -t $CFGcmd)" == "function" ]; then
      cmd="$CFGcmd $OPTS config $pkgname"
    else
      cmd="# $CFGcmd"
    fi
}

update_hba_conf () {
    local fnd_mrk=0
    local eorem=0
    local patched=0
    local dt=$(date +%Y-%m-%d)
    while IFS=\~ read -r line; do
      if [ "${line:0:11}" == "# [PRODUCT:" ]; then
        fnd_mrk=1
      elif [[ $line =~ ^[a-zA-Z_].*$ ]]; then
        eorem=1
      fi
      if [ $eorem -eq 1 -a $patched -eq 0 -a $fnd_mrk -eq 0 ]; then
         patched=1
         echo "# [PRODUCT: $dt] Added access to Odoo">>$1.tmp
         echo "# Where user were created, no password was issued, so this configuration uses trust method to connect">>$1.tmp
         echo "# Warning! This method is unsecure for no local connection">>$1.tmp
         echo "# In order to set postgresql secure you must:">>$1.tmp
         echo "# 1. drop users automatically created; type >drop user odoo[7|8|9]">>$1.tmp
         echo "# 2. recreate users">>$1.tmp
         echo "#    type >createuser --createdb --username postgres --no-createrole --no-superuser --pwprompt odoo[7|8|9]">>$1.tmp
         echo "#    Rememeber password you type, because you must insert it in odoo conf file">>$1.tmp
         echo "# 3. Correct following lines, subst 'trust' by 'md5' for users odoo[7|8|9]">>$1.tmp
         echo "# 4. Restart service postgresql">>$1.tmp
         echo "# When you connect to psql console do not forget dbname, type:">>$1.tmp
         echo "# psql -Uodoo[7|8|9] postgres">>$1.tmp
         echo "# User openerp is used by old installation schema of Odoo7 (formerly OpenERP)">>$1.tmp
         echo "local   all         openerp                           peer">>$1.tmp
         echo "host    all         openerp     127.0.0.1/32          trust">>$1.tmp
         echo "host    all         openerp     ::1/128               trust">>$1.tmp
         echo "local   all         odoo                              peer">>$1.tmp
         echo "host    all         odoo        127.0.0.1/32          trust">>$1.tmp
         echo "host    all         odoo        ::1/128               trust">>$1.tmp
         for ov in 7 8 9; do
           echo "local   all         odoo$ov                             trust">>$1.tmp
           echo "host    all         odoo$ov       127.0.0.1/32          trust">>$1.tmp
           echo "host    all         odoo$ov       ::1/128               trust">>$1.tmp
         done
         echo "# [PRODUCT: end automatic configuration]">>$1.tmp
      fi
      echo "$line">>$1.tmp
    done < "$1"
    if [ $opt_dry_run -eq 0 ]; then
      [ -z "opt_yes" ] || vim $1.tmp
      run_traced "mv $1 $1.bak"
      run_traced "mv $1.tmp $1"
    else
      vim $1.tmp
    fi

}

build_groups_list () {
    infile=/etc/group
    outfile=~/z0_x_groups.txt
    if [ $opt_dry_run -eq 0 -a -f $outfile ]; then rm -f $outfile; fi
    while IFS=: read -r group enpass gid other; do
      if [ $gid -ge 400 ]; then
        valid=1
      else
        valid=0
      fi
      if [[ "$group" =~ kluser* ]]; then valid=0; fi
      if [[ "$group" =~ saslauth* ]]; then valid=0; fi
      if [[ "$group" =~ dev131* ]]; then valid=0; fi
      if [[ "$group" =~ cgred* ]]; then valid=0; fi
      if [[ "$group" =~ odoo* ]]; then valid=0; fi
      if [[ "$group" =~ openerp* ]]; then valid=0; fi
      if ((valid)); then
        wlog "# Group $group ($gid)"
        if [ $opt_dry_run -eq 0 ]; then
          echo "$group:$enpass:$gid">>$outfile
        fi
      fi
    done < "$infile"
}

build_user_list () {
    infile=/etc/passwd
    outfile=~/z0_x_users.txt
    if [ $opt_dry_run -eq 0 -a -f $outfile ]; then rm -f $outfile; fi
    while IFS=: read -r user enpass uid gid desc home shell; do
      if [ $uid -ge 400 ]; then
        valid=1
      else
        valid=0
      fi
      if [[ "$user" =~ kluser* ]]; then valid=0; fi
      if [[ "$user" =~ saslauth* ]]; then valid=0; fi
      if [[ "$user" =~ dev131* ]]; then valid=0; fi
      if ((valid)); then
        wlog "# User $user ($uid) assigned \"$home\" home directory with $shell shell."
        if [ $opt_dry_run -eq 0 ]; then
          echo "$user:$enpass:$uid:$gid:$desc:$home:$shell">>$outfile
        fi
      fi
    done < "$infile"
}

add_groups () {
    sysfile=/etc/group
    infile=~/z0_x_groups.txt
    if [ -f $infile ]; then
      while IFS=: read -r group enpass gid other; do
        if [ $(grep "^$group:" $sysfile 2>/dev/null) ]; then
          wlog "!! Group $group already exists"
        else
          cmd="groupadd -g $gid $group"
          wlog "$cmd"
          if [ $opt_dry_run -eq 0 ]; then
            $cmd
          fi
        fi
      done < "$infile"
    else
      wlog "!! File $infile not found!"
    fi
}

add_users () {
    sysfile=/etc/passwd
    infile=~/z0_x_users.txt
    if [ -f $infile ]; then
      while IFS=: read -r user enpass uid gid desc home shell; do
        if [ $(grep "^$user:" $sysfile 2>/dev/null) ]; then
          wlog "!! User $user already exists"
        else
          if [ ! -d $home ]; then cmd="useradd -m"; else cmd="useradd"; fi
          cmd="$cmd -u $uid -g $gid -d $home -s $shell $user"
          wlog "$cmd"
          if [ $opt_dry_run -eq 0 ]; then
            $cmd
            if [ "$opt_pwd" ]; then
              echo $opt_pwd|passwd --stdin $user
            fi
          fi
        fi
      done < "$infile"
    else
      wlog "!! File $infile not found!"
    fi
}

do_dry_install_product () {
# product_install_product(action pkgname OPTS)
    local pkgname=$2
    if [ -z "$opt_host" ]; then
      if [ "$TDIR" != "/usr/bin" ]; then
        if [ "${TDIR:0:14}" == "/opt/odoo/dev/" ]; then
          local cmd="cp"
        else
          local cmd="mv"
        fi
        run_traced "mkdir -p /etc/$THIS"
        run_traced "$cmd $TDIR/$pkgname /usr/bin"
        run_traced "$cmd $TDIR/${pkgname}.man /usr/bin"
        run_traced "$cmd $TDIR/${pkgname}_bld_ods /usr/bin"
        run_traced "chmod +x /usr/bin/$pkgname*"
        for f in ${pkgname}.conf odoo-server_Debian odoo-server_RHEL odoo-server; do
          if [ -f $TDIR/$f ]; then
            run_traced "cp $TDIR/$f /etc/$THIS"
          fi
        done
        run_traced "_install_z0librc"
      fi
    else
      if [ "opt_if" ]; then
        SCP="scp -oIdentityFile=$opt_if"
      else
        SCP="scp"
      fi
      wlog "# Copying config files to host $opt_host"
      if [ -f z0_x_*.txt ]; then
        run_traced "$SCP z0_x_*.txt $opt_host:~/"
      fi
      run_traced "$SCP $TDIR/$pkgname $opt_host:~/"
      run_traced "$SCP $TDIR/${pkgname}.* $opt_host:~/"
      run_traced "$SCP /etc/z0librc $opt_host:~/"
    fi
}

do_install_by_wget () {
# do_install_by_wget(pkgname OPTS)
    local pkgname=$1
    local xtlcmd=wget
    local LocalRoot="$(get_prm_value "0" ${pkgname}_${xtlcmd}_LocalRoot)"
    local pkg_URL="$(get_prm_value "0" ${pkgname}_${xtlcmd}_URL)"
    local pkg_xname="$(get_prm_value "0" ${pkgname}_${xtlcmd}_xname)"
    local pkg_md5="$(get_prm_value "0" ${pkgname}_${xtlcmd}_md5)"
    if [ -z "$pkg_xname" -o -z "$pkg_URL" ]; then
      elog "*** Package $pkgname not found for this hardware"
      elog "    wget $pkg_xname from URL=$pkg_URL"
      return 2
    fi
    if [ -n "$LocalRoot" ]; then
      if [ ! -d $LocalRoot ]; then
        run_traced "mkdir -p $LocalRoot"
      fi
      run_traced "cd $LocalRoot"
    else
      if [ -d /tmp/$pkg_xname ]; then
        run_traced "rm -fR /tmp/$pkg_xname"
      elif [ -f /tmp/$pkg_xname ]; then
        run_traced "rm -f /tmp/$pkg_xname"
      fi
      run_traced "cd /tmp"
    fi
    run_traced "wget $pkg_URL/$pkg_xname$pkg_md5"
    if [ "${pkg_xname: -4}" == ".rpm" ]; then
      run_traced "rpm -i $pkg_xname"
    elif [ "${pkg_xname: -4}"  == ".deb" ]; then
      run_traced "apt-get install $pkg_xname"
    elif [ "${pkg_xname: -7}"  == ".tar.gz" ]; then
      run_traced "pip install $pkg_xname"
    fi
    run_traced "rm -f $pkg_xname"
}

update_by_wget () {
# update_by_wget(pkgname OPTS svcname)
    local pkgname=$1
    local xtlcmd=wget
    local LocalRoot="$(get_prm_value "0" ${pkgname}_${xtlcmd}_LocalRoot)"
    local pkg_URL="$(get_prm_value "0" ${pkgname}_${xtlcmd}_URL)"
    local pkg_xname="$(get_prm_value "0" ${pkgname}_${xtlcmd}_xname)"
    if [ -z "$pkg_xname" -o -z "$pkg_URL" ]; then
      elog "*** Package $pkgname not found for this hardware"
      elog "    wget $pkg_xname from URL=$pkg_URL"
      return 2
    fi
    if [ -n "$LocalRoot" ]; then
      if [ ! -d $LocalRoot ]; then
        run_traced "mkdir -p $LocalRoot"
      fi
      run_traced "cd $LocalRoot"
    else
      if [ -d /tmp/$pkg_xname ]; then
        run_traced "rm -fR /tmp/$pkg_xname"
      elif [ -f /tmp/$pkg_xname ]; then
        run_traced "rm -f /tmp/$pkg_xname"
      fi
      run_traced "cd /tmp"
    fi
    run_traced "wget $pkg_URL/$pkg_xname"
    if [ "${pkg_xname: -4}" == ".rpm" ]; then
      run_traced "rpm -U $pkg_xname"
    elif [ "${pkg_xname: -4}"  == ".deb" ]; then
      run_traced "apt-get update $pkg_xname"
      run_traced "apt-get upgrade $pkg_xname"
    elif [ "${pkg_xname: -7}"  == ".tar.gz" ]; then
      run_traced "pip install $pkg_xname --upgrade"
    fi
    run_traced "rm -f $pkg_xname"
}

do_action_sub () {
# do_action_sub(action pkgname OPTS)
    local p
    local ps=$2
    local rs=$(get_realname $ps)
    local realname
    if [ "$3" != "-q" -a "$3" != "-Q" ]; then
      local iter=$(set_iter $ps)
      if [ "$ps" != "$iter" ]; then
        for p in $iter; do
          if [ "$p" != "$ps" -a "$p" != "$rs" ]; then
            realname=$(get_realname $p)
            do_action_sub $1 $realname "-Q"
          fi
        done
      else
        realname=$rs
        do_action_sub $1 $realname "-Q"
      fi
      return
    fi
    verbose_msg "Analyzing $2"
    if [ "$1" == "install" ]; then
      if $(prod status $2 "-q"); then
        prod update $2 ""
      else
        prod $1 $2 ""
      fi
    elif [ "$1" == "update" ]; then
      if $(prod status $2 "-q"); then
        prod $1 $2 ""
      else
        prod install $2 ""
      fi
    elif [ "$1" == "remove" ]; then
      if $(prod status $2 "-q"); then
        elog "# $2 should be removed"
      fi
    else
      prod $1 $2 ""
    fi
}

pre_install_LAMP () {
# pre_install_LAMP(action pkgname OPTS)
    if [ $opt_dev -gt 0 ]; then
      if [ "$FH" == "RHEL" ]; then
        run_traced "yum $opt_yes groupinstall \"Development tools\""
      fi
    fi
}

pre_update_LAMP () {
    pre_install_LAMP
}

pre_package () {
# pre_package(action pkgname OPTS)
    :
}

do_install_package () {
# do_package(action pkgname OPTS)
    local xtlcmd=$(get_full_xtlcmd $1 $2 $3)
    local cmd="$xtlcmd $1 $2"
    run_traced "$cmd"
    return $?
}

post_package () {
# post_package(action pkgname OPTS)
    :
}

pre_install_service() {
# pre_service(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# pre_${1}_${svcname} succesfully ended"
}

pre_service_NO () {
# pre_service_NO(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# pre_${1}_${2} failed"
}

pre_service_ANY () {
# pre_service_ANY(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# post_${1}_${svcname} ()"
}

do_service_YES () {
# do_service_YES(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# do_${1}_${svcname} succesfully ended"
}

do_service_NO () {
# do_service_NO(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# do_${1}_${2} failed"
}

do_install_service () {
# do_service_ANY(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# post_${1}_${svcname} ()"
    local xtlcmd=$(get_full_xtlcmd $1 $2 $3)
    local cmd="$xtlcmd $1 $2"
    run_traced "$cmd"
    return $?
}

post_service_YES () {
# post_service_YES(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# post_${1}_${svcname} succesfully ended"
}

post_service_NO () {
# post_service_NO(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# post_${1}_${svcname} failed"
}

post_service_ANY () {
# post_install_service_ANY(action pkgname OPTS)
    local svcname=$(get_prm_value "0" "${2}_svcname")
    run_traced "# post_${1}_${svcname} ()"
}

do_1_realname_package () {
# do_1_realname_package(action pkgname OPTS)
    echo "$2"
    return $STS_SUCCESS
}

do_1_installer_package () {
# do_1_installer_package(action pkgname OPTS)
    local xtlcmd=$(get_prm_value "0" "${2}_xtlcmd")
    echo "$xtlcmd"
    return $STS_SUCCESS
}

do_1_vfycmd_package () {
# do_1_vfycmd_package(action pkgname OPTS)
    local vfycmd=$(get_prm_value "0" "${2}_vfycmd")
    echo "$vfycmd"
    return $STS_SUCCESS
}

do_1_status_package () {
# do_1_status_package(action pkgname OPTS)
    # echo "do_1_status_package($1 $2 '$3')">>~/product.his    #debug
    local pkgversion="$(get_pkg_ver "$2")"
    [ -n "$pkgversion" ]
    return $?
}

do_status_package () {
# do_status_package(action pkgname OPTS)
    # echo "do_status_package($1 $2 '$3')">>~/product.his    #debug
    local x=$((prdstk_level*2))
    local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    do_1_status_package "$@"
    sts=$?
    local xtlcmd=$(get_prm_value "0" "${2}_xtlcmd")
    if [ $sts -eq $STS_SUCCESS ]; then
      local cmd="wlog \"$lm$pkgname: installed by $xtlcmd\""
    else
      local cmd="wlog \"$lm$pkgname could be installed by $xtlcmd\""
    fi
    eval $cmd
    return $STS_SUCCESS
}

do_version_package () {
# do_version_package(action pkgname OPTS)
    # cho "do_version_package($1 $2 '$3')">>~/product.his    #debug
    local pkgversion
    local xtlcmd
    local cmd
    local x=$((prdstk_level*2))
    local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    do_1_status_package "$@"
    if [ $? -ne $STS_SUCCESS ]; then
       xtlcmd=$(get_prm_value "0" "${2}_xtlcmd")
       cmd="wlog \"$lm$pkgname should be installed by $xtlcmd\""
    else
       pkgversion=$(get_pkg_ver "$2")
       if [ -z "$pkgversion" ]; then
         pkgversion="$pkgname: unknown version"
       fi
       if [ $opt_quiet -gt 0 ]; then
         cmd="wlog \"$pkgversion\""
       else
         cmd="wlog \"$lm$pkgname: $pkgversion\""
       fi
    fi
    eval $cmd
    return $STS_SUCCESS
}

do_whatis_package () {
# do_whatis_package(action pkgname OPTS)
    local x=$((prdstk_level*2))
    local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    local xtlcmd=$(get_prm_value "0" "${2}_xtlcmd")
    local svcname=$(get_prm_value "0" "${2}_svcname")
    local cmdname=$(get_prm_value "0" "${2}_cmdname")
    local vfycmd=$(get_prm_value "0" "${cmdname}_vfycmd")
    if [ -n "$vfycmd" ]; then
      local msg="$lm$2 (by $xtlcmd)($vfycmd)"
    else
      local msg="$lm$2 (by $xtlcmd)"
    fi
    test_msg "$msg"
    return $STS_SUCCESS
}


satisfy_request () {
# satisfy_request(action pkgname OPTS)
    # echo "satisfy_request($1 $2 '$3')">>~/product.his    #debug
    local pkgname=$2
    local REQlist="$(get_prm_value "0" REQ_$pkgname)"
    local xtlcmd=$(get_prm_value "0" "${2}_xtlcmd")
    if [ "$xtlcmd" == "git" -o "$xtlcmd" == "wget" ]; then
      if [[ "$REQlist" =~ $xtlcmd ]]; then
        :
      else
        local REQlist="$REQlist $xtlcmd"
      fi
    fi
    if [ "$1" == "install" -a -n "$REQlist" ]; then
      ((prdstk_level++))
      for p in $REQlist; do
        realname=$(get_realname $p)
        if $(prod status $realname "-q"); then
          :
        else
          prod install $realname "$3"
        fi
      done
      ((prdstk_level--))
    fi
}

do_iteration () {
# do_iteration(action pkgname OPTS)
    # echo "do_iteration($1 $2 '$3')">>~/product.his    #debug
    local pkgname=$(get_realname "$2")
    if [ "$3" != "-q" -a "$3" != "-Q" ]; then
      local iter=$(set_iter $pkgname)
      if [ "$pkgname" != "$iter" ]; then
        if [ "$1" == "realname" ]; then
          echo "$2=($iter)"
          return $STS_SUCCESS
        fi
        local p
        for p in $iter; do
          if [ "$p" == "$2" -o "$p" == "$pkgname" ]; then
            prod $1 $p "-Q" "$4"
          else
            prod $1 $p "$3" "$4"
          fi
        done
        return $STS_SUCCESS
      fi
    fi
    return 127
}

do_local_function () {
# select_function(prefix svcname action pkgname OPTS)
    if [ -n "$2" ]; then
       local x="service"
    else
       local x="package"
    fi
    if [[ " $SIMULATE_YES " =~ [[:space:]]$4[[:space:]] ]]; then
       local y="_YES"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]$4[[:space:]] ]]; then
       local y="_NO"
    else
       local y=
    fi
    local xtlcmd=$(get_prm_value "0" "${4}_xtlcmd")
    local n
    local cmd
    cmd=${1}_dry_${3}_$4
    if [ "$(type -t $cmd)" != "function" -a -z $y -a $opt_dry_run -eq 0 ]; then
      cmd=${1}_${3}_${4}
    fi
    if [ "$(type -t $cmd)" != "function" ]; then
      cmd=${1}_${3}_by_$xtlcmd
    fi
    if [ "$(type -t $cmd)" != "function" ]; then
      cmd=${1}_${3}_$x
    fi
    if [ "$(type -t $cmd)" != "function" ]; then
      cmd=${1}_$x
    fi
    if [ "$(type -t $cmd)" == "function" ]; then
      eval $cmd "$3" "$4" "$5"
    else
      echo "<<<$cmd>>>"
      :
    fi
    return $?
}

prod () {
# prod(action pkgname OPTS)
# return: sts
# TODO [Debian] aptitude search 'pkgname'
# TODO [RHEL] yum search 'pkgname'
    # echo "prod($1 $2 '$3')">>~/product.his    #debug
    if [ -z "$prdstk_level" ]; then prdstk_level=0; fi
    do_iteration "$@"
    if [ $? == $STS_SUCCESS ]; then
      return $STS_SUCCESS
    fi
    local x=$((prdstk_level*2))
    local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    local pkgname=$(get_realname "$2")
    satisfy_request $1 $pkgname "$3" "$4" "$5"
    local SUBcmd=do_${1}_package
    local SUBcmd1=do_1_${1}_package
    local SUBcmd2=
    if [ "$(type -t $SUBcmd1)" == "function" -a "$(type -t $SUBcmd)" != "function" ]; then
      eval $SUBcmd1 $1 $pkgname "$3" "$4" "$5"
      return $?
    elif [ "$(type -t $SUBcmd1)" == "function" -a "$3" == "-q" ]; then
      eval $SUBcmd1 $1 $pkgname "$3" "$4" "$5"
      return $?
    fi
    do_local_function "pre" "$svcname" "$1" "$pkgname" "$3" "$4" "$5"
    if [ $? -eq $STS_SUCCESS ]; then
      do_local_function "do" "$svcname" "$1" "$pkgname" "$3" "$4" "$5"
    fi
    if [ $? -eq $STS_SUCCESS ]; then
      do_local_function "post" "$svcname" "$1" "$pkgname" "$3" "$4" "$5"
    fi
    if [ "$3" == "-q" ]; then
      return $STS_SUCCESS
    fi
    local X="$(get_prm_value "0" TCP_$pkgname)"
    if [ -n "$X" ]; then
      if [ "$1" == "install" -o "$1" == "update" -o "$1" == "config" ]; then
        for port in $X; do
          enable_port $port tcp
        done
      elif [ "$1" == "remove" ]; then
        for port in $X; do
          disable_port $port tcp
        done
      elif [ "$1" == "whatis" ]; then
        for port in $X; do
          test_msg "- TCP port $port"
        done
      fi
    fi
    local X="$(get_prm_value "0" UDP_$pkgname)"
    if [ -n "$X" ]; then
      if [ "$1" == "install" -o "$1" == "update" -o "$1" == "config" ]; then
        for port in $X; do
          enable_port $port udp
        done
      elif [ "$1" == "remove" ]; then
        for port in $X; do
          disable_port $port tcp
        done
      elif [ "$1" == "whatis" ]; then
        for port in $X; do
          test_msg "- UDP port $port"
        done
      fi
    fi
    local SUBlist="$(get_prm_value "0" SUB_$pkgname)"
    if [ -n "$SUBlist" -a $prdstk_level -lt $opt_depth ]; then
      ((prdstk_level++))
      local ps
      for ps in $SUBlist; do
        do_action_sub $1 $ps "" "$4"
      done
      ((prdstk_level--))
    fi
    if [ $prdstk_level -eq 0 -a "$FH" == "Debian" -a "$1" == "remove" ]; then
      run_traced "apt-get autoremove"
    fi
    # echo "  exit $1 $2">>~/product.his  #debug
    return $STS_SUCCESS
}

product_update_product () {
# product_install_product::pkgname opt_yes xtlcmd, stscmd STD_PKGS
    if [ "$TDIR" != "/usr/bin" ]; then
      product_install_product
    else
      run_traced "cd /tmp"
      if  [ -d /tmp/tools ]; then
        rm -fR /tmp/tools
      fi
      run_traced "git clone https://github.com/zeroincombenze/tools.git" "odoo"
      run_traced "cd /tmp/tools/product"
      run_traced "exec ./product update product"
      run_traced "rm -fR /tmp/tools"
    fi
}

product_remove_product () {
    run_traced "rm /usr/bin/$pkgname"
    run_traced "rm /usr/bin/${pkgname}.*"
}

init_odoo_env () {
    if [ ! -d /opt/odoo ]; then
      run_traced "mkdir -p /opt/odoo"
    fi
    if [ "$opt_oed" == "odoo" ]; then
      gitrep="odoo/odoo"
    elif [ "$opt_oed" == "oca" ]; then
      gitrep="OCA/OCB"
    else
      gitrep="zeroincombenze/OCB"
    fi
    if [ -z "$opt_odoo" ]; then
      opt_odoo="*"
    fi
}

product_install_odoo () {
# product_install_odoo::pkgname opt_yes xtlcmd, stscmd STD_PKGS
    init_odoo_env
    git_opts=""
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
    else
      local ov_iter=$opt_odoo
      git_opts="--single-branch"
    fi
    if [ $opt_dev -eq 0 ]; then
      git_opts="--depth 1 $git_opts"
    fi
    for ov in $ov_iter; do
      local xtl=1
      local v=$(_inq "odoo")
      if [ -n "$v" -a -d /opt/odoo/$ov.0 ]; then
        cd /opt/odoo/$ov.0
        git status &>/dev/null
        if [ $? -ne 128 ]; then xtl=0; fi
      fi
      run_traced "cd /opt/odoo"
      if [ $xtl -gt 0 ]; then
        run_traced "git clone https://github.com/$gitrep.git $ov.0 -b $ov.0 $git_opts" "odoo" #debug
        if [ -n "$opt_osub" ]; then
          install_submodules "$opt_osub" "$ov"
        fi
        if [ -n "$opt_sub" ]; then
          install_submodules "$opt_sub" "$ov"
        fi
        if [ -n "$opt_locale" ]; then
          install_submodules "$opt_locale" "$ov"
        fi
      fi #debug
      run_traced "chown -R odoo:odoo $ov.0/"
      run_traced "cd /opt/odoo/$ov.0"
      run_traced "git checkout $ov.0"
      if [ $test_mode -eq 0 -a -f /opt/odoo/$ov.0/requirements.txt ]; then
        local f=/opt/odoo/7.0/requirements.txt
        local p n v r
        while IFS=\= read p n v; do
          r=$(product -q version $p)
          r=$(echo $r)
          if [ "$r" == "$v" ]; then
            elog "Package $p $r already installed"
          else
            r=$(product -q status $p|grep "could be")
            if [ -z "$r" ]; then
              run_traced "pip install $p --upgrade"
            else
              run_traced "pip install $p"
            fi
            r=$(product -q version $p)
            r=$(echo $r)
            if [ "$r" != "$v" ]; then
              elog "Package $p has invalid version $r: required $v"
            fi
          fi
        done < $f
      fi
    done
}

product_update_odoo () {
# product_install_product::pkgname opt_yes xtlcmd, stscmd STD_PKGS, PIP_PKGS
    init_odoo_env
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
    else
      local ov_iter=$opt_odoo
    fi
    for ov in $ov_iter; do
      local xtl=0
      if [ -d /opt/odoo/$ov.0 ]; then
        run_traced "cd /opt/odoo/$ov.0"
        if [ $test_mode -gt 0 ]; then
          :
        else
          git status &>/dev/null
        fi
        if [ $? -ne 128 ]; then xtl=1; fi
        if [ $xtl -gt 0 ]; then
          run_traced "git pull origin $ov.0" "odoo"
          if [ $test_mode -eq 0 ]; then
             opt_sub=$(grep "\[submodule" .gitmodules|awk '{print $2}'|tr -d "\"]"|tr "\n" " ")
          fi
          if [ -n "$opt_osub" ]; then
            install_submodules "$opt_osub" "$ov"
          fi
          if [ -n "$opt_sub" ]; then
            install_submodules "$opt_sub" "$ov"
          fi
          if [ -n "$opt_locale" ]; then
            install_submodules "$opt_locale" "$ov"
          fi
        fi
        run_traced "git checkout $ov.0"
      fi
    done
}

product_config_odoo () {
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
      local opt_multi="-m"
    else
      local ov_iter=$opt_odoo
      if [ $opt_mult -gt 0 ]; then
        local opt_multi="-m"
      else
        local opt_multi=""
      fi
    fi
    local userhome=$(sudo -u postgres -i eval 'echo "$HOME"')
    if [ -z "$userhome" ]; then
      userhome=$(grep postgres /etc/passwd|awk -F":" '{print $6}')
    fi
    if [ -f $userhome/.pgpass ]; then
      local pwd=$(grep odoo $userhome/.pgpass|awk -F: '{ print $5 }'|head -n1)
    else
      local pwd=
      while [ -z "$pwd" ]; do
        read -rsp"Type password for postgresql user access (no echo)>" pwd
        echo -e "\n"
        read -rsp"Retype password for validation>" pwd1
        echo -e "\n"
        if [ "$pwd" != "$pwd1" ]; then
          local pwd=
        fi
      done
    fi
    echo "*:*:*:odoo:$pwd">$userhome/.pgpass
    chown postgres:postgres $userhome/.pgpass
    chmod u=rw,g=,o= $userhome/.pgpass
    f_hba=$(findpkg "pg_hba.conf" "/var/lib /etc" "postgresql pgsql" "9.4 9.3 9.2 9.1 9.0 8.4" "data main")
    update_hba_conf $f_hba
    if [ -n "$f_hba" ]; then
      vi $f_hba
    fi
    for ov in $ov_iter; do
      if [ -n "$opt_multi" ]; then
        uu="odoo$ov"
        echo "*:*:*:$uu:$pwd">>$userhome/.pgpass
      elif [ "$ov" == "7" ]; then
        uu=openerp
      else
        uu=odoo
      fi
      local x=$(sudo -iupostgres psql -c \\dg|grep " $uu ")
      if [ -z "$x" ]; then
        elog "Create account $uu for postgres access by odoo"
        echo "Warning: store password you type in odoo config file"
        run_traced "sudo -iupostgres createuser --createdb --username postgres --no-createrole --no-superuser --no-password $uu"
      fi
      elog "Running odoo $ov to configure"
      if [ -f /opt/odoo/.openerp_serverrc ]; then
        rm -f /opt/odoo/.openerp_serverrc
      fi
      cmd="sudo -iuodoo /opt/odoo/$ov.0/openerp-server"
      cmd="$cmd --addons-path=/opt/odoo/$ov.0/openerp/addons,/opt/odoo/$ov.0/addons"
      for iso in ${opt_osub//,/ } ${opt_sub//,/ }; do
        pn=$(get_locale_name "$iso")
        if [ -z "$pn" ]; then
          elog  "Invalid submodule name $iso"
        else
          addons=$(get_locale_dir "$pn")
          if [ -d $addons ]; then
            cmd="$cmd,/opt/odoo/$ov.0/$addons"
          fi
        fi
      done
      for iso in ${opt_locale//,/ }; do
        pn=$(get_locale_name "$iso")
        if [ -z "$pn" ]; then
          elog  "Invalid $iso in -l $opt_locale switch"
        else
          addons=$(get_locale_dir "$pn")
          if [ -d $addons ]; then
            cmd="$cmd,/opt/odoo/$ov.0/$addons"
          fi
        fi
      done
      local xtl_pidfile=/var/run/odoo/$uu.pid
      local xtl_logfile=/var/log/odoo/${uu}-server.log
      cmd="$cmd -s --stop-after-init"
      cmd="$cmd --pidfile=$xtl_pidfile"
      cmd="$cmd --logfile=$xtl_logfile"
      cmd="$cmd --db_host=localhost"
      cmd="$cmd --db_user=$uu"
      cmd="$cmd --db_password=$pwd"
      if [ "$opt_multi" == "-m" ]; then
        cmd="$cmd --xmlrpc-port=816$ov"
      fi
      run_traced "$cmd"
      if [ -f /opt/odoo/.openerp_serverrc ]; then
        if [ $opt_dry_run -eq 0 ]; then
          sed -i "s:^data_dir *=.*Odoo:&$ov:" /opt/odoo/.openerp_serverrc
          [ -z "opt_yes" ] || vim /opt/odoo/.openerp_serverrc
        fi
        run_traced "cp /opt/odoo/.openerp_serverrc /etc/odoo/${uu}-server.conf"
        run_traced "chown odoo:odoo /etc/odoo/${uu}-server.conf"
        run_traced "chmod u+rw,g+r,o+r /etc/odoo/${uu}-server.conf"
        run_traced "$TDIR/product_bld_ods -E$FH -L$xtl_logfile -P$xtl_pidfile $opt_multi -O$ov ${uu}-server"
        run_traced "chown odoo:odoo ${uu}-server"
        run_traced "mv ${uu}-server /etc/init.d/"
      else
        elog "!Odoo error: configuration file not created!!"
      fi
    done
}

pre_config_odoo () {
    sysfile=/etc/group
    group=odoo
    if [ "$ODOO_GID" ]; then
      x=$(grep "^[^:]*:[^:]:$ODOO_GID[^0-9]" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        g=$(echo "$x"|awk -F: '{ print $1 }')
        if [ "$g" != "$group" ]; then
          wlog "# Required gid $ODOO_GID already assigned to $g"
        fi
      fi
    fi
    if [ -z $(grep "^$group:" $sysfile 2>/dev/null) ]; then
      if [ "$ODOO_GID" ]; then
        run_traced "groupadd -g $ODOO_GID $group"
      else
        run_traced "groupadd $group"
      fi
    fi
    if [ "$ODOO_GID" ]; then
      x=$(grep "^$group:.*" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        gid=$(echo "$x"|awk -F: '{ print $3 }')
        if [ "$gid" != "$ODOO_GID" ]; then
          run_traced "groupmod -g $ODOO_GID $group"
        fi
      fi
    fi
    sysfile=/etc/passwd
    user=odoo
    if [ "$ODOO_UID" ]; then
      x=$(grep "^[^:]*:[^:]:$ODOO_UID[^0-9]" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        u=$(echo "$x"|awk -F: '{ print $1 }')
        if [ "$u" != "$user" ]; then
          wlog "# Required uid $ODOO_UID already assigned to $u"
        fi
      fi
    fi
    if [ -z $(grep "^$user:" $sysfile 2>/dev/null) ]; then
      if [ ! -d /opt/odoo ]; then cmd="useradd -m"; else cmd="useradd"; fi
      if [ "$ODOO_UID" ]; then
        run_traced "$cmd -u "$ODOO_UID" -g odoo -d /opt/odoo -s /bin/bash $user"
      else
        run_traced "$cmd -r -g odoo -d /opt/odoo -s /bin/bash $user"
      fi
    fi
    if [ "$ODOO_UID" ]; then
      x=$(grep "^$user:.*" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        uid=$(echo "$x"|awk -F: '{ print $3 }')
        if [ "$uid" != "$ODOO_UID" ]; then
          run_traced "usermod -u $ODOO_UID $user"
        fi
      fi
    fi
}

post_config_odoo () {
    local r=$(get_realname postresql) #tny!!
    run_traced "service $r restart"
}

pre_install_odoo () {
    if [ "$FH" == "RHEL" ]; then
      if [ ! -f /etc/yum.repos.d/odoo.repo ]; then
        run_traced "yum-config-manager --add-repo=https://nightly.odoo.com/8.0/nightly/rpm/odoo.repo"
      fi
    elif [ "$FH" == "Debian" ]; then
      if [ -z "$(apt-key list|grep info@odoo.com 2>/dev/null)" ]; then
        run_traced "wget -O - https://nightly.odoo.com/odoo.key | apt-key add -"
      fi
      if [ -z "$(cat /etc/apt/sources.list|grep 'nightly.odoo.com' 2>/dev/null)" ]; then
       run_traced "echo 'deb http://nightly.odoo.com/8.0/nightly/deb/ ./' >> /etc/apt/sources.list"
      fi
    fi
    pre_config_odoo
}

post_install_odoo () {
    local p
    p=etc
    run_traced "mkdir -p /$p/odoo"
    run_traced "chown odoo:odoo /$p/odoo"
    run_traced "chmod -R u+rw,g+r,o+r /$p/odoo"
    for p in log lib run; do
      run_traced "mkdir -p /var/$p/odoo"
      run_traced "chown odoo:odoo /var/$p/odoo"
      run_traced "chmod -R u+rw,g+r,o+r /var/$p/odoo"
    done
}

post_update_odoo () {
    post_install_odoo
}

post_install_service () {
# post_install_service(svcname pkgname OPTS)
    local pkgname=$1
    local svcname=$2
    if [ -n "$svcname" ]; then
      run_traced "service $svcname start"
      run_traced "sleep 3"
      run_traced "chkconfig $svcname on"
      local LocalRoot="$(get_prm_value "0" ${pkgname}_LocalRoot)"
      if [ -n "$LocalRoot" ]; then
        if [ ! -d $LocalRoot ]; then
          run_traced "mkdir -p $LocalRoot"
          run_traced "chmod u+rwx,g=rx,o=rx $LocalRoot"
        fi
      fi
    fi
}

post_install_LAMP () {
    if [ "$FH" == "RHEL" ]; then
      run_traced "yum upgrade python-setuptools"
    fi
}

post_config_postgresql () {
    run_traced "service $2 initdb"
    run_traced "chkconfig $1 on"
}

post_config_postgresql-server () {
    if [ "$DISTO" == "CentOS7" ]; then
      run_traced "postgresql-setup initdb"
    else
      run_traced "service $2 initdb"
    fi
    run_traced "chkconfig $2 on"
}

post_config_mysql-server () {
    if [ "$FH" == "RHEL" ]; then
      run_traced "mysql_secure_installation"
      run_traced "chkconfig mysqld on"
    else
      for cmd in mysql_install_db mysql_secure_installation; do
        run_traced "$cmd"
      done
      run_traced "chkconfig mysql on"
    fi
}

post_config_mariadb-server () {
    if [ "$FH" == "RHEL" ]; then
      run_traced "mysql_secure_installation"
    fi
    run_traced "chkconfig mariadb on"
}


test_install () {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "." ]; then p=; fi
    ((tst_ctr++))
    elog "Test $tst_ctr [$FH]: prod install '$p'"
    if [ "$p" == "odoo" ]; then
      local opt_osub="account-closing account-financial-tools account-invoicing account-payment bank-payment knowledge partner-contact stock-logistics-workflow webkit-tools"
      if [ "$FH" == "RHEL" ]; then
        echo "--> # pre_install_odoo failed">>$ftest
        echo "--> cd /opt/odoo">>$ftest
        echo "--> git clone https://github.com/odoo/odoo.git 7.0 -b 7.0 --depth 1 --single-branch">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          # echo "--> git remote add upstream https://github.com/OCA/${d}.git">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> chown -R odoo:odoo $opt_odoo.0/">>$ftest
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> pip  install Babel">>$ftest
        echo "--> yum -y install dejavu-fonts-common">>$ftest
        echo "--> yum -y install dejavu-sans-fonts">>$ftest
        echo "--> yum -y install fontpackages-filesystem">>$ftest
        # echo "--> yum -y install jbigkit-libs">>$ftest
        echo "--> yum -y install libjpeg-turbo">>$ftest
        echo "--> yum -y install libtiff">>$ftest
        # echo "--> yum -y install libwebp">>$ftest
        # echo "--> yum -y install libxml2-python">>$ftest
        # echo "--> yum -y install libxslt-python">>$ftest
        echo "--> yum -y install libyaml">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> yum -y install pyOpenSSL">>$ftest
        echo "--> yum -y install pychart">>$ftest
        echo "--> yum -y install pyparsing">>$ftest
        echo "--> yum -y update python-babel">>$ftest
        echo "--> yum -y install python-beaker">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> yum -y install python-docutils">>$ftest
        echo "--> yum -y install python-feedparser">>$ftest
        echo "--> yum -y install python-jinja2">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> yum -y update python-lxml">>$ftest
        echo "--> yum -y install python-mako">>$ftest
        echo "--> yum -y install python-markupsafe">>$ftest
        echo "--> pip  install python-openid">>$ftest
        echo "--> yum -y install python-psutil">>$ftest
        echo "--> yum -y update python-psycopg2">>$ftest
        echo "--> yum -y install python-reportlab">>$ftest
        echo "--> yum -y update python-simplejson">>$ftest
        echo "--> yum -y install python-unittest2">>$ftest
        echo "--> pip  install urllib3">>$ftest
        echo "--> yum -y install python-vobject">>$ftest
        echo "--> yum -y install python-werkzeug">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-centos7-amd64.rpm"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> rpm -U $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
        echo "--> pip  install unicodecsv">>$ftest
        echo "--> pip  install pydot">>$ftest
        echo "--> pip  install vatnumber">>$ftest
        echo "--> pip  install BeautifulSoup">>$ftest
      else
        echo "--> # pre_install_odoo failed">>$ftest
        echo "--> cd /opt/odoo">>$ftest
        echo "--> git clone https://github.com/odoo/odoo.git 7.0 -b 7.0 --depth 1 --single-branch">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          # echo "--> git remote add upstream https://github.com/OCA/${d}.git">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> chown -R odoo:odoo $opt_odoo.0/">>$ftest
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> apt-get -y install ghostscript">>$ftest
        echo "--> apt-get -y install libart-2.0-2">>$ftest
        # echo "--> apt-get -y install python-libxml2">>$ftest
        echo "--> apt-get -y install libcupsfilters1">>$ftest
        echo "--> apt-get -y install libcupsimage2">>$ftest
        echo "--> apt-get -y install libgs9">>$ftest
        echo "--> apt-get -y install libgs9-common">>$ftest
        echo "--> apt-get -y install libijs-0.35">>$ftest
        echo "--> apt-get -y install libjbig2dec0">>$ftest
        echo "--> apt-get -y install liblcms2-2">>$ftest
        echo "--> apt-get -y install libpaper-utils">>$ftest
        echo "--> apt-get -y install libpaper1">>$ftest
        echo "--> apt-get -y install libpoppler44">>$ftest
        echo "--> apt-get -y install libtidy-0.99-0">>$ftest
        echo "--> apt-get -y install libwebp5">>$ftest
        echo "--> apt-get -y install libwebpmux1">>$ftest
        echo "--> apt-get -y install poppler-data">>$ftest
        echo "--> apt-get -y install poppler-utils">>$ftest
        echo "--> apt-get -y update python-babel">>$ftest
        echo "--> apt-get -y upgrade python-babel">>$ftest
        echo "--> apt-get -y install python-babel-localedata">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> apt-get -y install python-decorator">>$ftest
        echo "--> apt-get -y install python-docutils">>$ftest
        echo "--> apt-get -y install python-feedparser">>$ftest
        echo "--> apt-get -y install python-gevent">>$ftest
        echo "--> apt-get -y install python-greenlet">>$ftest
        echo "--> apt-get -y install python-imaging">>$ftest
        echo "--> apt-get -y install python-jinja2">>$ftest
        echo "--> apt-get -y install python-mako">>$ftest
        echo "--> apt-get -y install python-markupsafe">>$ftest
        echo "--> pip  install python-openid">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> apt-get -y install python-pil">>$ftest
        echo "--> apt-get -y install python-psutil">>$ftest
        echo "--> apt-get -y install python-pybabel">>$ftest
        echo "--> apt-get -y install python-pychart">>$ftest
        echo "--> apt-get -y install python-pygments">>$ftest
        echo "--> apt-get -y install python-pyinotify">>$ftest
        echo "--> apt-get -y install python-pyparsing">>$ftest
        echo "--> apt-get -y install python-pypdf">>$ftest
        echo "--> apt-get -y install python-renderpm">>$ftest
        echo "--> apt-get -y install python-reportlab">>$ftest
        echo "--> apt-get -y install python-reportlab-accel">>$ftest
        echo "--> apt-get -y install python-roman">>$ftest
        echo "--> apt-get -y install python-suds">>$ftest
        echo "--> apt-get -y install python-unittest2">>$ftest
        echo "--> apt-get -y install python-utidylib">>$ftest
        echo "--> apt-get -y install python-vobject">>$ftest
        echo "--> apt-get -y install python-werkzeug">>$ftest
        echo "--> apt-get -y install docutils-common">>$ftest
        echo "--> apt-get -y install docutils-doc">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-trusty-amd64.deb"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> apt-get update $pn">>$ftest
        echo "--> apt-get upgrade $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
        echo "--> pip  install unicodecsv">>$ftest
        echo "--> pip  install pydot">>$ftest
        echo "--> pip  install vatnumber">>$ftest
        echo "--> pip  install BeautifulSoup">>$ftest
      fi
    fi
    if [ "$p" ]; then
      prod install $p>$fout
      if [ "$(diff -q $fout $ftest)" ]; then
        elog "Test Failed"
        exit $STS_FAILED
      fi
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

test_update () {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "odoo" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git pull origin 7.0">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> pip  install Babel">>$ftest
        echo "--> yum -y install dejavu-fonts-common">>$ftest
        echo "--> yum -y install dejavu-sans-fonts">>$ftest
        echo "--> yum -y install fontpackages-filesystem">>$ftest
        # echo "--> yum -y install jbigkit-libs">>$ftest
        echo "--> yum -y install libjpeg-turbo">>$ftest
        echo "--> yum -y install libtiff">>$ftest
        # echo "--> yum -y install libwebp">>$ftest
        # echo "--> yum -y install libxml2-python">>$ftest
        # echo "--> yum -y install libxslt-python">>$ftest
        echo "--> yum -y install libyaml">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> yum -y install pyOpenSSL">>$ftest
        echo "--> yum -y install pychart">>$ftest
        echo "--> yum -y install pyparsing">>$ftest
        echo "--> yum -y update python-babel">>$ftest
        echo "--> yum -y install python-beaker">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> yum -y install python-docutils">>$ftest
        echo "--> yum -y install python-feedparser">>$ftest
        echo "--> yum -y install python-jinja2">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> yum -y update python-lxml">>$ftest
        echo "--> yum -y install python-mako">>$ftest
        echo "--> yum -y install python-markupsafe">>$ftest
        echo "--> pip  install python-openid">>$ftest
        ## echo "--> pip  install passlib">>$ftest
        # echo "--> yum -y install python-paste">>$ftest
        # echo "--> yum -y install python-pillow">>$ftest
        echo "--> yum -y install python-psutil">>$ftest
        echo "--> yum -y update python-psycopg2">>$ftest
        echo "--> yum -y install python-reportlab">>$ftest
        # echo "--> yum -y install python-requests">>$ftest
        echo "--> yum -y update python-simplejson">>$ftest
        # echo "--> yum -y install python-six">>$ftest
        # echo "--> yum -y install python-tempita">>$ftest
        echo "--> yum -y install python-unittest2">>$ftest
        echo "--> pip  install urllib3">>$ftest
        echo "--> yum -y install python-vobject">>$ftest
        echo "--> yum -y install python-werkzeug">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-centos7-amd64.rpm"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> rpm -U $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
      else
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git pull origin 7.0">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> apt-get -y install ghostscript">>$ftest
        echo "--> apt-get -y install libart-2.0-2">>$ftest
        # echo "--> apt-get -y install python-libxml2">>$ftest
        echo "--> apt-get -y install libcupsfilters1">>$ftest
        echo "--> apt-get -y install libcupsimage2">>$ftest
        echo "--> apt-get -y install libgs9">>$ftest
        echo "--> apt-get -y install libgs9-common">>$ftest
        echo "--> apt-get -y install libijs-0.35">>$ftest
        echo "--> apt-get -y install libjbig2dec0">>$ftest
        echo "--> apt-get -y install liblcms2-2">>$ftest
        echo "--> apt-get -y install libpaper-utils">>$ftest
        echo "--> apt-get -y install libpaper1">>$ftest
        echo "--> apt-get -y install libpoppler44">>$ftest
        echo "--> apt-get -y install libtidy-0.99-0">>$ftest
        echo "--> apt-get -y install libwebp5">>$ftest
        echo "--> apt-get -y install libwebpmux1">>$ftest
        echo "--> apt-get -y install poppler-data">>$ftest
        echo "--> apt-get -y install poppler-utils">>$ftest
        echo "--> apt-get -y update python-babel">>$ftest
        echo "--> apt-get -y upgrade python-babel">>$ftest
        echo "--> apt-get -y install python-babel-localedata">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> apt-get -y install python-decorator">>$ftest
        echo "--> apt-get -y install python-docutils">>$ftest
        echo "--> apt-get -y install python-feedparser">>$ftest
        echo "--> apt-get -y install python-gevent">>$ftest
        echo "--> apt-get -y install python-greenlet">>$ftest
        echo "--> apt-get -y install python-imaging">>$ftest
        echo "--> apt-get -y install python-jinja2">>$ftest
        echo "--> apt-get -y install python-mako">>$ftest
        echo "--> apt-get -y install python-markupsafe">>$ftest
        echo "--> pip  install python-openid">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> apt-get -y install python-pil">>$ftest
        echo "--> apt-get -y install python-psutil">>$ftest
        echo "--> apt-get -y install python-pybabel">>$ftest
        echo "--> apt-get -y install python-pychart">>$ftest
        echo "--> apt-get -y install python-pygments">>$ftest
        echo "--> apt-get -y install python-pyinotify">>$ftest
        echo "--> apt-get -y install python-pyparsing">>$ftest
        echo "--> apt-get -y install python-pypdf">>$ftest
        echo "--> apt-get -y install python-renderpm">>$ftest
        echo "--> apt-get -y install python-reportlab">>$ftest
        echo "--> apt-get -y install python-reportlab-accel">>$ftest
        echo "--> apt-get -y install python-roman">>$ftest
        echo "--> apt-get -y install python-suds">>$ftest
        echo "--> apt-get -y install python-unittest2">>$ftest
        echo "--> apt-get -y install python-utidylib">>$ftest
        echo "--> apt-get -y install python-vobject">>$ftest
        echo "--> apt-get -y install python-werkzeug">>$ftest
        echo "--> apt-get -y install docutils-common">>$ftest
        echo "--> apt-get -y install docutils-doc">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-trusty-amd64.deb"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> apt-get update $pn">>$ftest
        echo "--> apt-get upgrade $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
      fi
    fi
    prod update $p>$fout
    if [ "$(diff -q $fout $ftest)" ]; then
      elog "Test Failed"
      exit $STS_FAILED
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

test_remove () {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "." ]; then p=; fi
    ((tst_ctr++))
    elog "Test $tst_ctr [$FH]: 'prod remove $p'"
    if [ "$p" == "odoo" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y remove odoo">>$ftest
        echo "python-babel should be removed">>$ftest
        echo "python-lxml should be removed">>$ftest
        echo "python-psycopg2 should be removed">>$ftest
        echo "python-simplejson should be removed">>$ftest
        echo "wkhtmltopdf should be removed">>$ftest
      else
        echo "--> apt-get -y remove odoo">>$ftest
        echo "python-babel should be removed">>$ftest
        echo "wkhtmltopdf should be removed">>$ftest
        echo "--> apt-get autoremove">>$ftest
      fi
    fi
    if [ "$p" ]; then
      prod remove $p>$fout
      if [ "$(diff -q $fout $ftest)" ]; then
        elog "Test Failed"
        exit $STS_FAILED
      fi
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

# main
OPTOPTS=(h        c        D       d         E       e       g       H        I        i      J        L         l          m        n           O         P          q         s         t         u       V           v           y       1)
OPTDEST=(opt_help opt_conf opt_dev opt_depth opt_osf opt_oed opt_grf opt_host opt_xtly opt_if opt_xtln opt_log   opt_locale opt_mult opt_dry_run opt_odoo  opt_pwd    opt_quiet opt_sub   test_mode use2xtl opt_version opt_verbose opt_yes opt_1st)
OPTACTI=(1        "="      1       "="       "="     "="     1       "="      "="      "="    "="      "="       "="        1        1           "="       "="        1         "="       1         "="     "*"         1           1       1)
OPTDEFL=(1        ""       0       ""        ""      ""      0       ""       ""       ""     ""       ""        ""         0        0           ""        ""         0         ""        0         ""      ""          0           0       0)
OPTMETA=("help"   "file"   "dev"   "number"  "disto" "disto" "win"   "host"   "pkg(s)" "file" "pkg(s)" "logfile" "iso3166"  "multi"  "noop"      "version" "password" "quiet"   "modules" "teste"   "file"  "version"   "verbose"   "yes"   "first")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "configuration file (def /etc/product.conf)"\
 "add development package(s)"\
 "max depth level"\
 "emulate Linux distribution; may be Ubuntu[12|14],CentOS[6|7]. Use carefully!"\
 "select odoo distribution; may be odoo,oca,zeroincombenze"\
 "add graphical interface package(s)"\
 "[user@]host to export config files"\
 "declare package(s) as installed"\
 "use identity file (private key) for remote authentication"\
 "declare package(s) as uninstalled"\
 "log file name (def /var/log/product.log)"\
 "include localization module for odoo; use ISO3166 country code"\
 "multiple version environment (append version to filenames)"\
 "do nothing (dry-run)"\
 "select odoo version: may be 7, 8 or 9"\
 "default for users, if added by import command"\
 "quiet mode"\
 "install odoo submodules"\
 "test mode (implies dry-run)"\
 "use file to install"\
 "show version end exit"\
 "verbose mode"\
 "assume yes"\
 "1st installation")
OPTARGS=(action pkg sub1 sub2)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Build a Odoo or LAMP server"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ "$DEV_ENVIRONMENT" == "$THIS" ]; then
  test_mode=1
fi
if [ "$opt_log" ]; then
  FLOG=$opt_log
elif [ $EUID -eq 0 ]; then
  FLOG=/var/log/$THIS.log
else
  FLOG=~/$THIS.log
fi
get_arch "$opt_osf"
set_tlog_file "$FLOG"
# if [ -z "$opt_odoo" ]; then
#   if [ "$action" == "version" -o "$action" == "status" ]; then
#     if $(prod status odoo "-q"); then
#       opt_odoo="9"
#     fi
#   fi
# fi
if [ -n "$opt_odoo" ]; then
  if [ "$opt_odoo" != "9" -a "$opt_odoo" != "8" -a "$opt_odoo" != "7" -a "$opt_odoo" != "*" ]; then
    echo "Invalid option value: use -O9 or -O8 or -O7 or -O*"
    exit $STS_FAILED
  fi
  if [ "opt_oed" != "odoo" -a "opt_oed" != "oca" -a "opt_oed" != "zeroincombenze" ]; then
    opt_oed="zeroincombenze"
  fi
fi

$(init_cfg)
$(active_cfg)
$(init_cfg "1")
$(active_cfg "1")
conf_default
FCONFDEF=/etc/product.conf.sample
if [ $test_mode -gt 0 ]; then
  FCONF=$TESTDIR/$THIS.conf
  FCONFDEF=$TESTDIR/$THIS.conf.sample
elif [ -n "$opt_conf" -a -f "$opt_conf" ]; then
  FCONF=$opt_conf
else
  if [ "$TDIR" == "/usr/bin" ]; then
    CDIR="/etc/$THIS"
  else
    CDIR=$TDIR
  fi
  FCONF=$CDIR/$THIS.conf
fi
link_cfg $FCONF $FCONFDEF
opt_osub="account-closing account-financial-tools account-financial-report account-invoicing account-payment bank-payment knowledge partner-contact stock-logistics-workflow web webkit-tools website"
if [ "$opt_oed" == "zeroincombenze" ]; then
  opt_osub="$opt_osub l10n-italy-supplemental"
fi
if [ -n "$opt_xtly" ]; then
  SIMULATE_YES=" ${opt_xtly//,/ } "
fi
if [ -n "$opt_xtln" ]; then
  SIMULATE_NO=" ${opt_xtln//,/ } "
fi
init_cfg_pkg "$pkg"
if [ $test_mode -gt 0 -a "$action" != "update" ]; then
  if [[ " $SIMULATE_YES " =~ [[:space:]]apache2[[:space:]] ]]; then
    SIMULATE_YES="$SIMULATE_YES port_tcp_80 port_tcp_443 port_tcp_21"
  elif [[ " $SIMULATE_YES " =~ [[:space:]]httpd[[:space:]] ]]; then
    SIMULATE_YES="$SIMULATE_YES port_tcp_80 port_tcp_443 port_tcp_21"
  fi
  if [[ " $SIMULATE_NO " =~ [[:space:]]apache2[[:space:]] ]]; then
    SIMULATE_NO="$SIMULATE_NO port_tcp_80 port_tcp_443 port_tcp_21"
  elif [[ " $SIMULATE_NO " =~ [[:space:]]httpd[[:space:]] ]]; then
    SIMULATE_NO="$SIMULATE_NO port_tcp_80 port_tcp_443 port_tcp_21"
  fi
  if [[ " $SIMULATE_YES " =~ [[:space:]]openssh[[:space:]] ]]; then
    SIMULATE_YES="$SIMULATE_YES port_tcp_22"
  elif [[ " $SIMULATE_YES " =~ [[:space:]]openssh-server[[:space:]] ]]; then
    SIMULATE_YES="$SIMULATE_YES port_tcp_22"
  fi
  if [[ " $SIMULATE_NO " =~ [[:space:]]openssh[[:space:]] ]]; then
    SIMULATE_NO="$SIMULATE_NO port_tcp_22"
  elif [[ " $SIMULATE_NO " =~ [[:space:]]openssh-server[[:space:]] ]]; then
    SIMULATE_NO="$SIMULATE_NO port_tcp_22"
  fi
fi
ODOO_UID=$(get_prm_value "0" "ODOO_UID")
ODOO_GID=$(get_prm_value "0" "ODOO_GID")
if [ -z "$opt_depth" ]; then
  opt_depth=999
fi
if [ "$action" == "remove" -a $opt_depth -eq 999 ]; then
  if $(is_virtualname $pkg); then
    opt_depth=0
  else
    opt_depth=1
  fi
fi
if [ $test_mode -gt 0 ]; then
  opt_dry_run=1
  opt_verbose=1
  if [ $opt_depth -eq 999 ]; then
    # if [ "$pkg" == "LAMP" ]; then # Bleah!
    if $(is_virtualname $pkg); then
      opt_depth=0
    else
      opt_depth=1
    fi
  fi
  opt_yes=1
fi
OPTS=
if [ ${opt_yes:-0} -gt 0 ]; then OPTS="${OPTS}y"; fi
if [ ${opt_dev:-0} -gt 0 ]; then OPTS="${OPTS}D"; fi
if [ ${opt_grf:-0} -gt 0 ]; then OPTS="${OPTS}g"; fi
if [ ${opt_1st:-0} -gt 0 ]; then OPTS="${OPTS}1"; fi
if [ -n "$OPTS" ]; then OPTS="-$OPTS"; fi
wlog "# $THIS $__version__ running on $(xuname -a)"
wlog "# Setup for $FH family"

if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "whatis" ]; then
  if [ $test_mode -eq 0 ]; then
    print_title "List managed packages"
  fi
  prod $action $pkg $OPTS
elif [ "$action" == "status" ]; then
  if [ $EUID -ne 0 -a $test_mode -eq 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  set_tlog_file "$FLOG" "" "echo"
  if [ $test_mode -eq 0 ]; then
    print_title "Check for installation status"
  fi
  prod $action $pkg $OPTS
  ending_msg
elif [ "$action" == "version" ]; then
  if [ $EUID -ne 0 -a $test_mode -eq 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  set_tlog_file "$FLOG" "" "echo"
  if [ $test_mode -eq 0 ]; then
    print_title "Show installed package version"
  fi
  if $(prod status $pkg "-q"); then
    prod version $pkg
  fi
elif [ "$action" == "update" ]; then
  if [ $EUID -ne 0 -a $test_mode -eq 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  print_title "Update/upgrade package(s)"
  prod $action $pkg $OPTS
  ending_msg
elif [ "$action" == "config" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  print_title "Config package(s)"
  iter=$(set_iter $pkg)
  if [ "$iter" == "product" ]; then
    for pkgname in $LAMP; do
      realname=$(get_realname $pkgname)
      if [[ " $PIP_PKGS " =~ [[:space:]]$realname[[:space:]] ]]; then
        :
      elif [[ " $STD_PKGS " =~ [[:space:]]$realname[[:space:]] ]]; then
        :
      elif [[ " $YUM_PKGS " =~ [[:space:]]$realname[[:space:]] ]]; then
        :
      elif [[ " $APT_PKGS " =~ [[:space:]]$realname[[:space:]] ]]; then
        :
      else
        installer=$(prod installer $realname)
        if [ "$installer" == "pip" ]; then
          PIP_PKGS="$PIP_PKGS $realname "
        elif [ "$installer" == "git" ]; then
          GIT_PKGS="$GIT_PKGS $realname "
        elif [ "$installer" == "wget" ]; then
          WGET_PKGS="$WGET_PKGS $realname "
        else
          STD_PKGS="$STD_PKGS $realname "
        fi
        # fi
      fi
      SUBlist="SUB_${realname//-/_}"
      if [ "$SUBlist" ]; then
        for pkg in ${!SUBlist}; do
          p=$(get_realname $pkg)
          if [[ " $PIP_PKGS " =~ [[:space:]]$p[[:space:]] ]]; then
            :
          elif [[ " $STD_PKGS " =~ [[:space:]]$p[[:space:]] ]]; then
            :
          elif [[ " $YUM_PKGS " =~ [[:space:]]$p[[:space:]] ]]; then
            :
          elif [[ " $APT_PKGS " =~ [[:space:]]$p[[:space:]] ]]; then
            :
          else
            installer=$(prod installer $p)
            if [ "$installer" == "pip" ]; then
              PIP_PKGS="$PIP_PKGS $p "
            elif [ "$installer" == "git" ]; then
              GIT_PKGS="$GIT_PKGS $p "
            elif [ "$installer" == "wget" ]; then
              WGET_PKGS="$WGET_PKGS $p "
            else
              STD_PKGS="$STD_PKGS $p "
            fi
            # fi
          fi
        done
      fi
    done
  else
    for p in $iter; do
      realname=$(get_realname $p)
      if $(is_virtualname $realname); then
        prod $action $realname "-q"
      elif $(prod status $realname "-q"); then
        wlog "- package $realname"
        prod $action $realname
      else
        wlog "$realname not installed"
      fi
    done
  fi
  ending_msg
elif [ "$action" == "remove" ]; then
  if [ $EUID -ne 0 -a $test_mode -eq 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  if [ -z "$pkg" ]; then
     echo "You must specify package to remove!"
     exit $STS_FAILED
  fi
  print_title "Remove package $pkg"
  prod $action $pkg $OPTS
  ending_msg
elif [ "$action" == "install" ]; then
  if [ $EUID -ne 0 -a $test_mode -eq 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  print_title "Install package(s)"
  if [ $opt_1st -gt 0 ]; then
    wlog "Setup for 1st installation"
    if [ $opt_dry_run -eq 0 ]; then
      prod update "."
    fi
  fi
  prod $action $pkg "$OPTS"
  ending_msg
elif [ "$action" == "prepare" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  wlog "Preparining group list"
  build_groups_list
  wlog "Preparing user list"
  build_user_list
  ending_msg
elif [ "$action" == "export" ]; then
  if [ -z "$opt_host" ]; then
    elog "Missing destination host name: use -H host option"
  else
    prod install $THIS
  fi
  ending_msg
elif [ "$action" == "import" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  wlog "Creating groups"
  add_groups
  wlog "Creating users"
  add_users
  ending_msg
elif [ "$action" == "package" ]; then
  package="product"
  if [ -f $package -a -f $package.man -a -f z0librc ]; then
    if [ -f $package.gz ]; then
      rm -f $package.gz
    fi
    tar -cvf $package.gz $package $package.man z0librc ${package}_bld_ods
    for f in odoo-server_Debian odoo-server_RHEL odoo-server; do
      if [ -f $f ]; then
        tar -rvf $package.gz $f
      fi
    done
    chown apache:apache $package.gz
    mv $package.gz /var/www/html/mw/download/
  else
    cd /tmp
    if [ -f ./$package ]; then
      rm -f ./$package
    elif [ -d ./$package ]; then
      rm -fR ./$package
    fi
    mkdir ./$package
    cd ./$package
    cp /usr/bin/$package ./$package
    cp /usr/bin/$package.man ./$package
    cp /usr/bin/${pkgname}_bld_ods ./$package
    cp /etc/z0librc ./$package
    for f in odoo-server_Debian odoo-server_RHEL odoo-server; do
      if [ -f /usr/bin/$f ]; then
        cp /usr/bin/$f ./$package
      fi
    done
    tar -f $package.gz ./$package
    chown apache:apache $package.gz
    mv $package.gz /var/www/html/mw/download/
    rm -fR ./$package
  fi
elif [ "$action" == "debug" ]; then
   echo "[options]">product.conf.sample
   jy=0
   p=""
   while ((jy<${#DEFPRM[*]})); do
     echo "${DEFPRM[jy]}=${DEFVAL[jy]}"
     echo "${DEFPRM[jy]}=${DEFVAL[jy]}">>product.conf.sample
     ((jy++))
   done
elif [ "$action" == "realname" ]; then
  p=$(prod $action $pkg)
  if [ "$p" == "$pkg" ]; then
    echo $pkg
  elif [[ $p =~ = ]]; then
     echo $p
  else
    echo $pkg=$p
  fi
elif [ "$action" == "info" ]; then
  pkgname=$(get_realname $pkg)
  pkglist=$(prod realname $pkg)
  xtlcmd=$(get_prm_value "0" "${pkgname}_xtlcmd")
  svcname=$(get_prm_value "0" "${pkgname}_svcname")
  cmdname=$(get_prm_value "0" "${pkgname}_cmdname")
  vfycmd=$(get_prm_value "0" "${cmdname}_vfycmd")
  if [[ $pkglist =~ = ]]; then
    if [ "$pkg" == "$pkgname" ]; then
      echo "$pkglist (install by $xtlcmd)"
    else
      echo "$pkg=$pkglist (install by $xtlcmd)"
    fi
  else
    if [ "$pkg" == "$pkgname" ]; then
      echo "$pkg (install by $xtlcmd)"
    else
      echo "$pkg=$pkgname (install by $xtlcmd)"
    fi
  fi
  if [ -n "$svcname" ]; then
    echo " service=$svcname"
  fi
  if [ -n "$cmdname" ]; then
    echo " command=$cmdname"
  fi
  if [ -n "$vfycmd" ]; then
    echo " get ver=$vfycmd"
  fi
else
  echo "No valid action $action!"
  exit $STS_FAILED
fi
exit 0
