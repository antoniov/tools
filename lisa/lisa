#! /bin/bash
# -*- coding: utf-8 -*-
# LAMP setup (installer)
# Tool for internal use
#
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2016 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
# This free software is released under GNU Affero GPL3

# TODO remove: python-paste python-pillow python-tempita
#  remove CentOS6: pyOpenSSL jbigkit-libs libwebp python-six
#  ZSI
# # yum install python-requests python-yaml
# codicefiscale pyxb pypdf for italian localization
# products?
# # oerplib
# flake8, autopep8, pylint, pylint-mccabe, coverage, coveralls, github3.py click
#[RHEL]
# curl --silent --location https://rpm.nodesource.com/setup_5.x | bash -
# yum -y install nodejs
# curl -L https://npmjs.org/install.sh | sh
#[Debian]
# apt-get install nodejs
# apt-get install npm
#[Common]
# npm install -g less
# npm install -g less-plugin-clean-css
#[End]
# per Kaspersky
# yum install kernel-headers
# yum install glibc.i686

__version__="0.2.36.7"

STS_FAILED=1
STS_SUCCESS=0

THIS=$(basename $0)
TDIR=$(readlink -f $(dirname $0))
for x in "$TDIR" "$TDIR/.." "." ".." "~" "/etc"; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)


conf_default() {
    # ALIAS
    local p x
    # set_cfg_def "REAL_OSSERVICE" "service" "0" "Debian"
    # set_cfg_def "REAL_OSSERVICE" "service" "0" "CentOS6"
    # set_cfg_def "REAL_OSSERVICE" "systemctl" "0" "CentOS7"
    # set_cfg_def "REAL_apache2" "httpd" "0" "RHEL"
    # set_cfg_def "REAL_httpd" "apache2" "0" "Debian"
    # set_cfg_def "REAL_python-pip" "pip" "0"
    # set_cfg_def "REAL_python-setuptools" "setuptools" "0"
    # set_cfg_def "REAL_mysql" "mysql-server" "0"
    # set_cfg_def "REAL_mysql" "mariadb" "0" "CentOS7"
    # set_cfg_def "REAL_mysql-server" "mariadb-server" "0" "CentOS7"
    # set_cfg_def "REAL_mariadb" "mysql-server" "0" "CentOS6"
    # set_cfg_def "REAL_mariadb" "mysql-server" "0" "Debian"
    # set_cfg_def "REAL_mariadb-server" "mysql-server" "0" "CentOS6"
    # set_cfg_def "REAL_mariadb-server" "mysql-server" "0" "Debian"
    # set_cfg_def "REAL_postgres" "postgresql-server" "0" "RHEL"
    # set_cfg_def "REAL_postgres" "postgresql" "0" "Debian"
    # set_cfg_def "REAL_postgresql" "postgresql-server" "0" "RHEL"
    # set_cfg_def "REAL_postgresql-server" "postgresql" "0" "Debian"
    # set_cfg_def "REAL_pyopenssl" "pyOpenSSL" "0" "RHEL"
    # set_cfg_def "REAL_php5" "php" "0" "RHEL"
    # set_cfg_def "REAL_php" "php5" "0" "Debian"
    # set_cfg_def "REAL_openssh" "openssh-server" "0"
    # set_cfg_def "REAL_openssh-client" "openssh-clients" "0" "RHEL"
    # set_cfg_def "REAL_openssh-clients" "openssh-client" "0" "Debian"
    # set_cfg_def "REAL_beautifulsoup" "BeautifulSoup" "0"
    # set_cfg_def "REAL_libxml2-python" "python-libxml2" "0" "Debian"
    # set_cfg_def "REAL_python-libxml2" "libxml2-python" "0" "RHEL"
    # set_cfg_def "REAL_libxslt-python" "python-libxslt1" "0" "Debian"
    # set_cfg_def "REAL_python-libxslt1" "libxslt-python" "0" "RHEL"
    # set_cfg_def "REAL_python-devel" "python-dev" "0" "Debian"
    # set_cfg_def "REAL_python-dev" "python-devel" "0" "RHEL"
    # set_cfg_def "REAL_zlib1g-dev" "zlib-devel" "0" "Debian"
    # set_cfg_def "REAL_zlib-devel" "zlib1g-dev" "0" "RHEL"
    # set_cfg_def "REAL_libreadline6-dev" "readline-devel" "0" "Debian"
    # set_cfg_def "REAL_readline-devel" "libreadline6-dev" "0" "RHEL"
    # set_cfg_def "REAL_php5-mysql" "php-mysql" "0" "RHEL"
    # set_cfg_def "REAL_php-mysql" "php5-mysql" "0" "Debian"
    # set_cfg_def "REAL_php5-common" "php-common" "0" "RHEL"
    # set_cfg_def "REAL_php-common" "php5-common" "0" "Debian"
    # set_cfg_def "REAL_php5-xml" "php-xml" "0" "RHEL"
    # set_cfg_def "REAL_php-xml" "php5-xml" "0" "Debian"
    # set_cfg_def "REAL_php5-cli" "php-cli" "0" "RHEL"
    # set_cfg_def "REAL_php-cli" "php5-cli" "0" "Debian"
    # Commands templates
    # set_cfg_def "VFYLOW" "apachectl php5" "0" "Debian"
    # set_cfg_def "VFYLOW" "apachectl php" "0" "RHEL"
    # set_cfg_def "VFYUPP" "ssh lisa" "0"
    # set_cfg_def "VFYPSX" "pip mysql psql python wkhtmltopdf wget gcc" "0"
    # set_cfg_def "VFYE2NL" "" "0"
    # set_cfg_def "VFYERR" "ssh python" "0"
    # set_cfg_def "NOINQ" "vsftpd postgresql-client-common postgresql-contrib ghostscript odoo" "0"
    # set_cfg_def "NAME_VIRTUAL" "LAMP" "0"
    # Packages migrated into pip
    # PIP_PYSTD_PKGS="dateutil Babel pyparsing beaker psycopg2 reportlab decorator"
    # PIP_PYSTD_PKGS="$PIP_PYSTD_PKGS docutils feedparser gevent jinja2"
    # for p in $PIP_PYSTD_PKGS; do
    #   x=${p,}
    #   if [ "$p" == "pyparsing" ]; then
    #     set_cfg_def "REAL_python-$x" "$p" "0" "Debian"
    #   else
    #     set_cfg_def "REAL_python-$x" "$p" "0" "Debian"
    #     set_cfg_def "REAL_python-$x" "$p" "0" "CentOS7"
    #     # set_cfg_def "REAL_$p" "python-$x" "0" "CentOS6"
    #   fi
    #   # if [ "$x" != "$p" ]; then
    #   #   set_cfg_def "REAL_$x" "$p" "0"
    #   # fi
    # done
    # PIP_PYSTD_PKGS="pip setuptools wheel $PIP_PYSTD_PKGS"
    # set_cfg_def "PIP_PYSTD_PKGS" "$PIP_PYSTD_PKGS" "0"
    # p="$PIP_PYSTD_PKGS oerplib virtualenv Babel python-ldap python-openid os0"
    # p="$p pytok pyasn1 ndg-httpsclient pytz gdata PyYAML xlwt unidecode urllib3"
    # p="$p passlib unicodecsv pydot vatnumber BeautifulSoup mock lxml"
    # p="$p simplejson"
    # if [ "$DISTO" != "CentOS6" ]; then
    #   p="$p pyparsing beaker psycopg2 reportlab decorator docutils feedparser gevent"
    #   P="$p jinja2"
    # fi
    # set_cfg_def "PIP_PKGS" "$p" "0"
    # set_cfg_def "GIT_PKGS" "lisa odoo pandoc" "0"
    # p="lisa wkhtmltopdf"
    # if [ "$DISTO" == "CentOS6" ]; then
    #   p="$p python-dateutil"
    #   set_cfg_def "REAL_dateutil" "python-dateutil" "0" "CentOS6"
    # fi
    # set_cfg_def "WGET_PKGS" "$p" "0"
    # local WGET_PKGS=$p
    # p=""
    # for x in $PIP_PYSTD_PKGS;do
    #   if [[ " $WGET_PKGS " =~ [[:space:]]python-$x[[:space:]] ]]; then
    #     :
    #   else
    #     p="$p python-$x"
    #   fi
    # done
    # p="$p gcc iptables epel-release yum-utils openssh-server"
    # p="$p postgresql-server python mysql-server postgresql iptables-services"
    # p="$p php-mysql php-common php-xml bzip2-devel mod_ssl mod_proxy_html"
    # p="$p openssl-devel libssl-dev docutils-doc libart-2.0-2"
    # p="$p libcupsfilters1 libcupsimage2 libgs9 libgs9-common"
    # p="$p ncurses-devel sqlite-devel ghostscript antiword docutils-common"
    # p="$p libijs-0.35 libjbig2dec0 liblcms2-2 libpaper-utils libpaper1"
    # p="$p libpoppler44 libtidy-0.99-0 libwebp5 libwebpmux1 poppler-data"
    # p="$p poppler-utils python-babel python-babel-localedata python-decorator"
    # p="$p python-docutils python-feedparser python-gevent python-greenlet"
    # p="$p python-imaging python-jinja2 python-mako python-markupsafe"
    # p="$p python-pil python-psutil python-pybabel python-pychart"
    # p="$p python-pygments python-pyinotify python-pyparsing"
    # p="$p python-pypdf python-renderpm python-reportlab python-reportlab-accel"
    # p="$p python-roman python-suds python-unittest2"
    # p="$p python-utidylib python-vobject python-werkzeug wget git"
    # p="$p libapache2-mod-auth-mysql pyopenssl"
    # p="$p vsftpd postgresql-client-common postgresql-contrib"
    # p="$p telnet xorg-x11-fonts-Type1 xorg-x11-fonts-75dpi"
    # p="$p python-virtualenv libxml2 libjpeg-turbo libtiff libyaml"
    # p="$p dejavu-fonts-common dejavu-sans-fonts fontpackages-filesystem"
    # set_cfg_def "STD_PKGS" "$p EVERYTHINGS" "0"
    # p="httpd mariadb mariadb-server php libxml2-python pyOpenSSL libffi-devel"
    # p="$p php-cli libxslt-python python-devel readline zlib1g-dev libreadline6-dev"
    # p="$p php-mysql php-common php-xml php-cli openssh-clients"
    # p="$p bind-utils"
    # set_cfg_def "YUM_PKGS" "$p" "0" "RHEL"
    # p="apache2 php5 python-libxml2 libffi-dev python-openssl build-essential"
    # p="$p python-libxslt1 python-dev libreadline6 zlib-devel readline-devel"
    # p="$p php5-mysql php5-common php5-xml php5-cli openssh-client"
    # set_cfg_def "APT_PKGS" "$p" "0" "Debian"
    # Packges requirements
    # set_cfg_def "LAMP_ReqPkgList" "gcc pip iptables" "0" "CentOS7"
    # set_cfg_def "LAMP_ReqPkgList" "gcc pip" "0"
    # set_cfg_def "lisa_ReqPkgList" "wget git" "0"
    # p="git unidecode unicodecsv pydot vatnumber BeautifulSoup"
    # set_cfg_def "odoo_ReqPkgList" "python postgresql $p" "0" "Debian"
    # set_cfg_def "odoo_ReqPkgList" "python postgresql-server $p" "0" "RHEL"
    # set_cfg_def "python_ReqPkgList" "pip wheel" "0" "Debian"
    # set_cfg_def "python_ReqPkgList" "pip wheel" "0" "CentOS7"
    # set_cfg_def "python_ReqPkgList" "pip" "0" "CentOS6"
    set_cfg_def "wkhtmltopdf_ReqPkgList" "xorg-x11-fonts-Type1 xorg-x11-fonts-75dpi" "0"
    # Bill of packages
    # set_cfg_def "LAMP" "epel-release pip wheel yum-utils LAMP_security openssh-server httpd mariadb postgresql-server php python" "0" "CentOS7"
    # set_cfg_def "LAMP" "epel-release pip yum-utils LAMP_security openssh-server httpd mysql-server postgresql-server php python" "0" "CentOS6"
    # set_cfg_def "LAMP" "pip LAMP_security openssh-server apache2 mysql-server postgresql php5 python" "0" "Debian"
    set_cfg_def "LAMP_security" "libffi-devel pyOpenSSL pyasn1 ndg-httpsclient" "0" "CentOS7"
    set_cfg_def "LAMP_security" "openssl-devel libffi-devel pyOpenSSL pyasn1 ndg-httpsclient" "0" "CentOS6"
    set_cfg_def "LAMP_security" "libffi-dev libssl-dev python-openssl build-essential" "0" "Debian"
    set_cfg_def "BOP_apache2" "vsftpd" "0" "Debian"
    set_cfg_def "BOP_httpd" "vsftpd" "0" "CentOS7"
    set_cfg_def "BOP_mariadb" "mariadb-server" "0" "CentOS7"
    set_cfg_def "BOP_mysql-server" "libapache2-mod-auth-mysql" "0"
    if [ $opt_grf -eq 0 ]; then
      set_cfg_def "BOP_postgresql-server" "postgresql-client-common postgresql-contrib" "0" "RHEL"
      set_cfg_def "BOP_postgresql" "postgresql-client-common postgresql-contrib" "0" "Debian"
    else
      set_cfg_def "BOP_postgresql-server" "postgresql-client-common postgresql-contrib pgadmin3" "0" "RHEL"
      set_cfg_def "BOP_postgresql" "postgresql-client-common postgresql-contrib pgadmin3" "0" "Debian"
    fi
    if [ $opt_dev -gt 0 ]; then
      set_cfg_def "BOP_openssh-server" "openssh-clients telnet mod_ssl mod_proxy_html iptables-services bind-utils" "0" "RHEL"
      set_cfg_def "BOP_openssh-server" "openssh-client telnet" "0" "Debian"
    else
      set_cfg_def "BOP_openssh-server" "openssh-clients mod_ssl mod_proxy_html iptables-services bind-utils" "0" "RHEL"
      set_cfg_def "BOP_openssh-server" "openssh-client" "0" "Debian"
    fi
    set_cfg_def "BOP_php5" "php5-mysql php5-common php5-xml php5-cli" "0" "Debian"
    set_cfg_def "BOP_php" "php-mysql php-common php-xml php-cli" "0" "RHEL"
    set_cfg_def "PYTHON_LIB_XML" "python-libxslt1 libxml2 python-libxml2 lxml" "0" "Debian"
    set_cfg_def "PYTHON_LIB_XML" "libxslt-python libxml2 libxml2-python lxml" "0" "RHEL"
    p="setuptools python-virtualenv virtualenv"
    p="$p libreadline6 PYTHON_LIB_XML psycopg2 simplejson xlwt PyYAML"
    p="$p gdata python-ldap pytz"
    if [ $opt_dev -gt 0 ]; then
      p="$p python-dev libsasl2-dev libldap2-dev zlib1g-dev libssl-dev"
      p="$p libreadline6-dev libsqlite3-dev tk-dev libgdbm-dev libpcap-dev"
      p="$p liblzma-dev python-requests python-yaml mock"
    fi
    set_cfg_def "BOP_python" "$p" "0" "Debian"
    p="setuptools python-virtualenv virtualenv readline"
    p="$p PYTHON_LIB_XML simplejson xlwt PyYAML"
    p="$p gdata python-ldap pytz"
    if [ $opt_dev -gt 0 ]; then
      p="$p python-devel openldap-devel zlib-devel bzip2-devel openssl-devel"
      P="$p ncurses-devel readline-devel sqlite-devel tk-devel gdbm-devel"
      p="$p libpcap-devel xz-devel postgresql-devel libxml2-devel"
      p="$p libxslt-devel python-requests python-yaml mock"
    fi
    set_cfg_def "BOP_python" "$p psycopg2" "0" "CentOS7"
    set_cfg_def "BOP_python" "$p python-psycopg2" "0" "CentOS6"
    p="ghostscript libart-2.0-2 libcupsfilters1"
    p="$p libcupsimage2 libgs9 libgs9-common libijs-0.35 libjbig2dec0"
    p="$p liblcms2-2 libpaper-utils libpaper1 libpoppler44 libtidy-0.99-0 libwebp5"
    p="$p libwebpmux1 poppler-data poppler-utils Babel python-babel-localedata"
    p="$p dateutil decorator==3.4.0 docutils==0.12 feedparser==5.1.3"
    P="$p gevent==1.0.2 python-greenlet python-imaging jinja2==2.7.3 python-mako"
    p="$p python-markupsafe python-openid passlib==1.6.2 python-pil"
    P="$p python-psutil python-pybabel python-pychart python-pygments"
    p="$p python-pyinotify pyparsing python-pypdf python-renderpm"
    p="$p reportlab==3.1.44 python-reportlab-accel python-roman python-suds"
    p="$p python-unittest2 python-utidylib python-vobject"
    p="$p python-werkzeug docutils-common docutils-doc wkhtmltopdf"
    if [ $opt_dev -gt 0 ]; then
      p="$p oerplib erppeek os0 pytok"
    fi
    set_cfg_def "BOP_odoo" "$p" "0" "Debian"
    p="Babel==1.3 dejavu-fonts-common dejavu-sans-fonts fontpackages-filesystem"
    p="$p libjpeg-turbo libtiff libyaml passlib==1.6.2"
    p="$p pyOpenSSL python-pychart pyparsing beaker dateutil docutils==0.12 feedparser==5.1.3 jinja2==2.7.3"
    p="$p python-ldap python-mako python-markupsafe python-openid"
    p="$p python-psutil reportlab==3.1.44"
    p="$p python-unittest2 urllib3 python-vobject python-werkzeug wkhtmltopdf"
    if [ $opt_dev -gt 0 ]; then
      p="$p libjpeg-turbo-devel oerplib erppeek os0 pytok"
    fi
    set_cfg_def "BOP_odoo" "$p" "0" "CentOS7"
    p="python-babel dejavu-fonts-common dejavu-sans-fonts fontpackages-filesystem"
    p="$p libjpeg-turbo libtiff libyaml passlib"
    p="$p pyOpenSSL python-pychart pyparsing beaker dateutil python-docutils python-feedparser python-jinja2"
    p="$p python-ldap python-mako python-markupsafe python-openid"
    p="$p python-psutil python-reportlab"
    p="$p python-unittest2 urllib3 python-vobject python-werkzeug wkhtmltopdf"
    if [ $opt_dev -gt 0 ]; then
      p="$p libjpeg-turbo-devel oerplib erppeek os0 pytok"
    fi
    set_cfg_def "BOP_odoo" "$p" "0" "CentOS6"
    if [ "$opt_oed" == "odoo" ]; then
      gitrep="odoo/odoo"
      set_cfg_def "odoo_Branch" "7.0 8.0 9.0 10.0" "0"
    elif [ "$opt_oed" == "oca" ]; then
      gitrep="OCA/OCB"
      set_cfg_def "odoo_Branch" "7.0 8.0 9.0" "0"
      p="account-closing,account-financial-tools,account-financial-reporting,account-invoicing,account-payment,bank-payment,knowledge,partner-contact,stock-logistics-workflow,webkit-tools"
      set_cfg_def "SUBM_odoo" "$p" "0"
    else
      gitrep="zeroincombenze/OCB"
      set_cfg_def "odoo_Branch" "7.0 8.0" "0"
      p="l10n-italy-supplemental,account-closing,account-financial-tools,account-financial-reporting,account-invoicing,account-payment,bank-payment,knowledge,partner-contact,stock-logistics-workflow,webkit-tools"
      set_cfg_def "SUBM_odoo" "$p" "0"
      set_cfg_def "odoo_upstream" "https://github.com/OCA/$addons.git"
    fi
    set_cfg_def "odoo_cmdname" "NULL" "0"
    set_cfg_def "odoo_git_URL" "https://github.com/$gitrep.git" "0"
    set_cfg_def "odoo_git_LocalRoot" "/opt/odoo" "0"
    set_cfg_def "odoo_git_LocalUser" "odoo:odoo" "0"
    set_cfg_def "odoo_confdirs" "/etc/odoo,/var/log/odoo,/var/run/odoo" "0"
    # odoo locale
    p=${gitrep%/*}
    if [ "$p" != "odoo" ]; then
      set_cfg_def "odoo__it_git_URL" "https://github.com/$p/l10n-italy.git" "0"
      set_cfg_def "odoo__be_git_URL" "https://github.com/OCA/l10n-belgium.git" "0"
      set_cfg_def "odoo__ch_git_URL" "https://github.com/OCA/l10n-switzerland.git" "0"
      set_cfg_def "odoo__es_git_URL" "https://github.com/OCA/l10n-spain.git" "0"
      set_cfg_def "odoo__fr_git_URL" "https://github.com/OCA/l10n-france.git" "0"
      set_cfg_def "odoo__nl_git_URL" "https://github.com/OCA/l10n-netherlands.git" "0"
    fi
    # Packages options
    if [ $test_mode -eq 0 ]; then
      set_cfg_def "${THIS}_vfycmd" "/usr/bin/$THIS -V" "0"
    else
      set_cfg_def "${THIS}_cmdname" "$0" "0"
      set_cfg_def "${THIS}_vfycmd" "$0 -V" "0"
    fi
    set_cfg_def "apache2_cmdname" "apachectl" "0" "Debian"
    set_cfg_def "apache2_LocalRoot" "/var/www/html" "0" "Debian"
    set_cfg_def "httpd_cmdname" "apachectl" "0" "RHEL"
    set_cfg_def "httpd_LocalRoot" "/var/www/html" "0" "RHEL"
    set_cfg_def "postgresql-server_cmdname" "psql" "0" "RHEL"
    set_cfg_def "postgresql_cmdname" "psql" "0" "Debian"
    # set_cfg_def "pip_xtlcmd_install" "apt-get" "0" "Debian"
    # set_cfg_def "pip_xtlcmd_install" "yum" "0" "RHEL"
    # set_cfg_def "wheel_xtlcmd_install" "apt-get" "0" "Debian"
    # set_cfg_def "wheel_xtlcmd_install" "yum" "0" "RHEL"
    set_cfg_def "mysql-server_cmdname" "mysql" "0"
    set_cfg_def "mariadb-server_cmdname" "mysql" "0" "CentOS7"
    set_cfg_def "mysql_cmdname" "mysql" "0"
    set_cfg_def "mariadb_cmdname" "mysql" "0" "CentOS7"
    set_cfg_def "openssh-server_cmdname" "NULL" "0"
    set_cfg_def "openssh-client_cmdname" "ssh" "0" "Debian"
    set_cfg_def "openssh-clients_cmdname" "ssh" "0" "RHEL"
    set_cfg_def "lisa_git_URL" "https://github.com/zeroincombenze/tools.git" "0"
    # set_cfg_def "lisa_git_LocalRoot" "/tmp" "0"
    set_cfg_def "lisa_git_LocalUser" "odoo" "0"
    set_cfg_def "wkhtmltopdf_wget_URL" "http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1" "0"
    if [ "$MACHARCH" != "x86_64" ]; then
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-trusty-i386.deb" "0" "Ubuntu14"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-precise-i386.deb" "0" "Ubuntu12"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-centos6-i386.rpm" "0" "CentOS6"
    else
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-trusty-amd64.deb" "0" "Ubuntu14"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-precise-amd64.deb" "0" "Ubuntu12"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-centos7-amd64.rpm" "0" "CentOS7"
      set_cfg_def "wkhtmltopdf_wget_xname" "wkhtmltox-0.12.2.1_linux-centos6-amd64.rpm" "0" "CentOS6"
    fi
    if [ "$DISTO" == "CentOS6" ]; then
      set_cfg_def "python-dateutil_wget_URL" "https://pypi.python.org/packages/source/p/python-dateutil/" "0"
      set_cfg_def "python-dateutil_wget_xname" "python-dateutil-1.5.tar.gz" "0"
      set_cfg_def "python-dateutil_wget_md5" "#md5=0dcb1de5e5cad69490a3b6ab63f0cfa5" "0"
    fi
    set_cfg_def "pandoc_git_URL" "https://github.com/jgm/pandoc.git" "0"
    set_cfg_def "pandoc_git_LocalRoot" "/opt/pandoc" "0"
    set_cfg_def "SUBM_pandoc" "." "0"
    # Service names
    set_cfg_def "vsftpd_svcname" "vsftpd" "0"
    set_cfg_def "iptables_svcname" "iptables" "0"
    set_cfg_def "apache2_svcname" "apache2" "0" "Debian"
    set_cfg_def "httpd_svcname" "httpd" "0" "RHEL"
    set_cfg_def "mysql_svcname" "mysql" "0" "Debian"
    set_cfg_def "mariadb_svcname" "mariadb" "0" "CentOS7"
    set_cfg_def "mariadb-server_svcname" "mariadb" "0" "CentOS7"
    set_cfg_def "mysql_svcname" "mysqld" "0" "CentOS6"
    set_cfg_def "postgresql_svcname" "postgresql" "0"
    set_cfg_def "postgresql-server_svcname" "postgresql" "0"
    set_cfg_def "openssh-server_svcname" "ssh" "0" "Debian"
    set_cfg_def "openssh-server_svcname" "sshd" "0" "RHEL"
    set_cfg_def "odoo_svcname" "odoo-server" "0"
    # TCP & UDP Ports
    set_cfg_def "TCP_httpd" "80 443" "0" "RHEL"
    set_cfg_def "TCP_apache2" "80 443" "0" "Debian"
    set_cfg_def "TCP_vsftpd" "21" "0"
    set_cfg_def "TCP_openssh-server" "22" "0"
    set_cfg_def "TCP_odoo" "8069" "0"
    # Configuration files
    p="/etc/httpd /etc/apache2; conf"
    set_cfg_def "FINDCFN_apache2" "$p" "0" "Debian"
    set_cfg_def "apache2_confn" "apache2.conf" "0" "Debian"
    set_cfg_def "FINDCFN_httpd" "$p" "0" "RHEL"
    set_cfg_def "httpd_confn" "httpd.conf" "0" "RHEL"
    p="/var/lib /etc;postgresql pgsql;9.4 9.3 9.2 9.1 9.0 8.4;data main"
    set_cfg_def "FINDCFN_postgresql" "$p" "0" "Debian"
    set_cfg_def "postgresql_confn" "pg_hba.conf" "0" "Debian"
    set_cfg_def "FINDCFN_postgresql-server" "$p" "0" "RHEL"
    set_cfg_def "postgresql-server_confn" "pg_hba.conf" "0" "RHEL"
    p="/etc/odoo /etc/openerp;"
    set_cfg_def "FINDCFN_odoo" "$p" "0"
    set_cfg_def "odoo_confn" "odoo-server.conf" "0"
}


store_cfg_param_value() {
#store_cfg_param_value(tid key value [section])
    local p
    if [[ " BOP " =~ [[:space:]]$2[[:space:]] ]]; then
      p="${2}_$4"
    elif [[ " ReqPkgList xtlcmd " =~ [[:space:]]$2[[:space:]] ]]; then
      p="${4}_$2"
    else
      p="$2"
    fi
    # echo "a_add $1 $p \"$3\""   #debug
    a_add "$1" "$p" "$3"
}

get_conf_pkg() {
# get_conf_pkg (file pkgname)
    if [ -z "$1" ]; then
      return
    fi
    local tid=1
    while [ $tid -le $conf_level ]; do
      if [ "$1" == "${CONF_FNS[$tid]}" ]; then
        return
      fi
      ((tid++))
    done
    ((conf_level++))
    if  [ $conf_level -gt 3 ]; then
      tid=3
    else
      tid=$conf_level
      # echo "init_cfg $tid"  #debug
      # eval $(init_cfg $tid)
      # eval $(active_cfg $tid)
    fi
    CONF_FNS[$conf_level]=$1
    # echo "_read_cfg_file $1 $tid $2"  #debug
    _read_cfg_file "$1" "$tid" "$2"
    # echo "<<${DEFDICT1[LAMP_ReqPkgList]}>>" #debug
}

clr_conf_pkg() {
    if  [ $conf_level -gt 0 ]; then
      if  [ $conf_level -le 3 ]; then
        eval $(init_cfg $conf_level)
        eval $(active_cfg $conf_level)
      fi
      CONF_FNS[$conf_level]=
      ((conf_level--))
    fi
}

find_conf_pkg() {
# find_conf_pkg (pkgname)
    local x y
    if [ $test_mode -gt 0 ]; then
      y="$TESTDIR $TDIR"
    else
      y=". $TDIR /etc/lisa /etc"
    fi
    for x in $y; do
      if [ -e $x/$1.lish  ]; then
        local PKG_CONF=$(readlink -f $x/$1.lish)
        break
      fi
    done
    if [ -n "$PKG_CONF" ]; then
      get_conf_pkg "$PKG_CONF" "$1"
    fi
}

get_prm_value() {
# get_prm_value(prmname)
# return: prmvalue; -> disco, vist
    local p
    local x
    if [ -z "$1" ]; then
      p=
      echo $p
      return
    else
      for tid in 3 2 1 0; do
        p=$(get_cfg_value $tid $1)
        if [ -n "$p" ]; then break; fi
      done
      if [ "$p" == "None" -o "$p" == "NULL" ]; then
        echo ""
        return
      fi
    fi
    if [ -z "$p" ]; then
      if [ "$1" != "-server_svcname" -a "${1: -15}" == "-server_svcname" ]; then
        if [ "$FH" == "RHEL" ]; then
          p="${1:0: -15}d"
        else
          p="${1:0: -15}"
        fi
      elif [ "$1" != "_cmdname" -a "${1: -8}" == "_cmdname" ]; then
        x="${1:0: -8}"
        if ! $(is_virtualname $x); then
          p="$x"
          x=$(get_prm_value "${x}_xtlcmd")
          if [ "$x" == "pip" -a "$p" != "pip" ]; then
            p=""
          fi
          if [ "${p:0:7}" == "python-" ]; then
            x=${p:7}
            if [[ " $PIP_PYSTD_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
              p=""
            fi
          fi
        else
          p=""
        fi
      elif [ "$1" != "xtlcmd" -a "${1: -7}" == "_xtlcmd" ]; then
        x="${1:0: -7}"
        if $(is_virtualname $x); then
          p="lisa"
        # elif [ "$x" == "pip" ]; then
        #   p=
        elif [[ " $PIP_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="pip"
        elif [[ " $PIP_PYSTD_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="pip"
        elif [[ " $GIT_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="git"
        elif [[ " $WGET_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="wget"
        elif [[ " $YUM_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="yum"
        elif [[ " $APT_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="apt-get"
        elif [[ " $STD_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          if [ "$FH" == "RHEL" ]; then
           p="yum"
          elif [ "$FH" == "Debian" ]; then
            p="apt-get"
          else
            p="#"
          fi
        else
          p=
        fi
      elif [ "$1" != "stscmd" -a "${1: -7}" == "_stscmd" ]; then
        x="${1:0: -7}"
        if $(is_virtualname $x); then
          p="lisa"
        elif [ "$x" == "pip" ]; then
          p=
        elif [[ " $STD_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          if [ "$FH" == "RHEL" ]; then
            p="rpm"
          elif [ "$FH" == "Debian" ]; then
            p="dpkg-query"
          else
            p="#"
          fi
        elif [[ " $PIP_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="pip"
        elif [[ " $PIP_PYSTD_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="pip"
        elif [[ " $GIT_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="git"
        elif [[ " $WGET_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="#"
        elif [[ " $YUM_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="rpm"
        elif [[ " $APT_PKGS " =~ [[:space:]]$x[[:space:]] ]]; then
          p="dpkg-query"
        else
          p=
        fi
      elif [ "$1" != "_vfycmd" -a "${1: -7}" == "_vfycmd" ]; then
        p="${1:0: -7}"
        x=$(basename $p)
        if [ "$x" != "$p" ]; then
          p=$(get_cfg_value $tid ${x}_vfycmd)
        else
          p=
        fi
        if [ -z "$p" ]; then
          if $(is_virtualname $x); then
            p=""
          else
            x=$(get_prm_value "${x}_cmdname")
            if [ -z "$x" ]; then
              p=""
            else
              if [[ " $NOINQ " =~ [[:space:]]$x[[:space:]] ]]; then
                p=
              elif [[ " $VFYLOW " =~ [[:space:]]$x[[:space:]] ]]; then
                p="$x -v"
              elif [[ " $VFYUPP " =~ [[:space:]]$x[[:space:]] ]]; then
                p="$x -V"
              elif [[ " $VFYPSX " =~ [[:space:]]$x[[:space:]] ]]; then
                p="$x --version"
              else
                p=""
              fi
            fi
          fi
        fi
      fi
    fi
    echo $p
    # echo "get_prm_value ('$1')::$DISTO($FH)=$p;;">>~/$THIS.his    #debug
}

init_cfg_pkg() {
# init_cfg_pkg (pkgname)::FCONF,NAME*,VFY*,STD*,PIP*,NOINQ*
# return:
    # echo "init_cfg_pkg  ('$1')::$FCONF($FH)=$p;;">>~/$THIS.his    #debug
    local p x
    LAMP=$(get_prm_value "LAMP")
    LAMP="${LAMP//,/ }"
    NAME_VIRTUAL="$(get_prm_value NAME_VIRTUAL)"
    NAME_VIRTUAL="${NAME_VIRTUAL//,/ }"
    NOINQ="$(get_prm_value NOINQ)"
    NOINQ="${NOINQ//,/ }"
    VFYLOW="$(get_prm_value VFYLOW)"
    VFYLOW="${VFYLOW//,/ }"
    VFYUPP="$(get_prm_value VFYUPP)"
    VFYUPP="${VFYUPP//,/ }"
    VFYPSX="$(get_prm_value VFYPSX)"
    VFYPSX="${VFYPSX//,/ }"
    VFYE2NL="$(get_prm_value VFYE2NL)"
    VFYE2NL="${VFYE2NL//,/ }"
    VFYERR="$(get_prm_value VFYERR)"
    VFYERR="${VFYERR//,/ }"
    PIP_PKGS="$(get_prm_value PIP_PKGS)"
    PIP_PKGS="${PIP_PKGS//,/ }"
    GIT_PKGS="$(get_prm_value GIT_PKGS)"
    GIT_PKGS="${GIT_PKGS//,/ }"
    WGET_PKGS="$(get_prm_value WGET_PKGS)"
    WGET_PKGS="${WGET_PKGS//,/ }"
    STD_PKGS="$(get_prm_value STD_PKGS)"
    STD_PKGS="${STD_PKGS//,/ } EVERYTHINGS"
    YUM_PKGS="$(get_prm_value YUM_PKGS)"
    YUM_PKGS="${YUM_PKGS//,/ }"
    APT_PKGS="$(get_prm_value APT_PKGS)"
    APT_PKGS="${APT_PKGS//,/ }"
    PIP_PYSTD_PKGS="$(get_prm_value PIP_PYSTD_PKGS)"
    PIP_PYSTD_PKGS="${PIP_PYSTD_PKGS//,/ }"
    for p in $PIP_PYSTD_PKGS; do
      x="python-$p"
      set_cfg_def "${p}_ReqPkgList" "$x" "0"
      if [[ " $WGET_PKGS " =~ [[:space:]]python-$x[[:space:]] ]]; then
        :
      elif [[ " $STD_PKGS " =~ [[:space:]]python-$x[[:space:]] ]]; then
        :
      else
        STD_PKGS="$STD_PKGS $x"
      fi
    done
}

print_title() {
    if [ $opt_quiet -eq 0 ]; then
      wlog "$1"
    fi
}

verbose_msg() {
    if [ $opt_verbose -gt 0 -a $test_mode -eq 0 ]; then
      elog "$@"
    fi
}

test_msg() {
    if [ $test_mode -eq 0 ]; then
      echo "$@"
    else
      elog "$@"
    fi
}

ending_msg() {
    if [ $test_mode -eq 0 ]; then
      echo "See $FLOG for traced informations"
    fi
}

get_iter() {
# get_iter(pkgname [OPTS])
# return: <pkg_list>
  if [ -z "$1" ]; then
    local iter="$1"
  else
    local p tid
    for tid in 3 2 1 0; do
      p=$(get_cfg_value $tid $1)
      if [ -n "$p" ]; then break; fi
    done
    if [ -n "$p" ]; then
      local iter="${p//,/ }"
    # elif [[ " $PIP_PYSTD_PKGS " =~ [[:space:]]$1[[:space:]] ]]; then
    #   local iter="python-$1 $1"
    else
      local iter="$1"
    fi
    if $(is_virtualname $1); then
      if [[ " $iter " =~ [[:space:]]$1[[:space:]] ]]; then
        :
      else
        local iter="$1 $iter"
      fi
    fi
  fi
  if [[ $2 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$iter=get_iter($1 $2)">>~/$THIS.his; fi #debug
  echo "$iter"
}

enable_port() {
# enable_port(port prot [OPTS])
    local port=$1
    local prot=$2
    if [ "$prot" != "tcp" -a "$prot" != "upd" ]; then
       prot=tcp
    fi
    cmd="iptables -A INPUT -p $prot -m state --state NEW -m $prot --dport $port -j ACCEPT"
    if [[ $3 =~ I ]]; then
      x="port_$prot_$port"
      cmd="# $cmd"
    elif [[ $3 =~ J ]]; then
      x=""
    elif [[ " $SIMULATE_YES " =~ [[:space:]]port_${prot}_${port}[[:space:]] ]]; then
      x="port_$prot_$port"
      cmd="# $cmd"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]port_${prot}_${port}[[:space:]] ]]; then
      x=""
    else
      x=$(iptables -S 2>/dev/null|grep "\-p *$prot *.*\-dport *$port" 2>/dev/null)
    fi
    if [ -z "$x" ]; then
      run_traced "$cmd"
    fi
}

disable_port() {
    local port=$1
    local prot=$2
    if [ "$prot" != "tcp" -a "$prot" != "upd" ]; then
       prot=tcp
    fi
    cmd="iptables -D INPUT -p $prot -m state --state NEW -m $prot --dport $port -j ACCEPT"
    if [[ $3 =~ I ]]; then
      x="port_$prot_$port"
      cmd="# $cmd"
    elif [[ $3 =~ J ]]; then
      x=""
    elif [[ " $SIMULATE_YES " =~ [[:space:]]port_${prot}_${port}[[:space:]] ]]; then
      x="port_$prot_$port"
      cmd="# $cmd"
    elif [[ " $SIMULATE_NO " =~ [[:space:]]port_${prot}_${port}[[:space:]] ]]; then
      x=""
    else
      x=$(iptables -S 2>/dev/null|grep "\-p *$prot *.*\-dport *$port" 2>/dev/null)
    fi
    if [ "$x" ]; then
      run_traced "$cmd"
    fi
}

get_arch() {
    if [ "$1" == "CentOS7" -o "$1" == "CentOS" -o "$1" == "RHEL" ]; then
      export DISTO="CentOS7"
      export FH="RHEL"
      LXCORE=
      MACHARCH="x86_64"
    elif [ "$1" == "CentOS6" ]; then
      export DISTO="CentOS6"
      export FH="RHEL"
      LXCORE=
      MACHARCH="i686"
    elif [ "$1" == "Ubuntu14" -o "$1" == "Ubuntu"  -o "$1" == "Debian" ]; then
      export DISTO="Ubuntu14"
      export FH="Debian"
      LXCORE="trusty"
      MACHARCH="x86_64"
    elif [ "$1" == "Ubuntu12" ]; then
      export DISTO="Ubuntu12"
      export FH="Debian"
      LXCORE="precise"
      MACHARCH="i686"
    else
      export FH=$(xuname "-f")
      local x=$(xuname "-v")
      local v=$(echo $x|awk -F. '{print $1}')
      export DISTO=$(xuname "-d")$v
      LXCORE=$(xuname "-c")
      MACHARCH=$(xuname "-m")
      if [ -n "$1" ]; then
        echo "!!Invalid $1 architecturre: used $DISTO instead!!"
      fi
    fi
    XU_FH="$FH"
    XU_DISTO="$DISTO"
}

mkdir_traced() {
# mkdir_traced(dir [user])
    if [ ! -d $1  -o $test_mode -gt 0 ]; then
      run_traced "mkdir -p $1"
      if [ -n "$2" ]; then
         run_traced "chown $2 $1/"
      fi
      run_traced "chmod u+rwx,g=rx,o=rx $1/"
    fi
}

is_virtualname() {
    local pkgname=$1
    local sts=$STS_FAILED
    if [ -n "$pkgname" -a "$pkgname" != "." ]; then
      if [[ " $NAME_VIRTUAL " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        sts=$STS_SUCCESS
      fi
    fi
    return $sts
}

get_realaction(){
# get_realaction(action)
    if [ "${1:0:4}" == "pre_" ]; then
      local act=${1:4}
    elif [ "${1:0:3}" == "do_" ]; then
      local act=${1:3}
    elif [ "${1:0:5}" == "post_" ]; then
      local act=${1:5}
    else
      local act=$1
    fi
    echo $act
}

get_pfxaction(){
# get_realaction(action)
    if [ "${1:0:4}" == "pre_" ]; then
      local pfx="pre_"
    elif [ "${1:0:3}" == "do_" ]; then
      local pfx="do_"
    elif [ "${1:0:5}" == "post_" ]; then
      local pfx="post_"
    else
      local pfx=
    fi
    echo $pfx
}

get_realname() {
# get_realname(pkgname [action] [OPTS])
# return: realname
    if [ "$1" == "." ]; then
      local p="EVERYTHINGS"
    else
      local pkgname=$(echo "$1"|grep -Eo '[^!<=>]*'|head -n1)
      local p=$(get_cfg_value "0" REAL_$pkgname)
    fi
    if [ -n "$p" ]; then
      pkgname=$p
    else
      if [ "$FH" == "RHEL" ]; then
        p=$(get_cfg_value "0" REAL_${1}__Debian)
        if [ "${p: -4}" == "-dev" ]; then
          pkgname="${p}el"
        fi
      elif [ "$FH" == "Debian" ]; then
        p=$(get_cfg_value "0" REAL_${1}__RHEL)
        if [ "${p: -6}" == "-devel" ]; then
          pkgname="${p:0: -2}"
        fi
      fi
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "$pkgname=get_realname($1 $2 $3)">>~/$THIS.his; fi   #debug
    echo $pkgname
}

get_specimen() {
# get_specimen(pkgname [action] [OPTS])
# specimen means: original_name left_op left_version right_op right_version best_version xtlcmd
# return: specimen
    if [ "$1" == "." ]; then
      local specimen="~~~~~~"
    else
      local c=$(echo "$1"|grep -Eo '[!<=>]*'|wc -l)
      local i pkg pkgname lop rop lreqver rreqver xtlcmd op p
      pkg=$(echo "$1"|grep -Eo '[^!<=>]*'|head -n1)
      i=1
      while ((i<=c)); do
        op=$(echo "$1"|grep -Eo '[!<=>]*'|head -n$i|tail -n1)
        ((i++))
        p=$(echo "$1"|grep -Eo '[^!<=>]*'|head -n$i|tail -n1)
        if [ "$op" == "!!" ]; then
          xtlcmd=$p
        elif [ -z "$lreqver" ]; then
          lreqver=$p
          lop=$op
        elif [ -z "$rreqver" ]; then
          rreqver=$p
          rop=$op
        fi
      done
      pkgname=$(get_realname $1 "$2" $3 $4 "$5")
      p="$(get_prm_value ${pkgname}_Branch)"
      local branch=
      if [ -n "$p" ]; then
        for i in $p; do
          if $(cmp_ver "$i" "$lop" "$lreqver") && $(cmp_ver "$i" "$rop" "$rreqver"); then
            branch=$i
          fi
        done
      fi
      local specimen="$pkg~$lop~$lreqver~$rop~$rreqver~$branch~$xtlcmd"
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "$specimen=get_specimen($1 $2 $3)">>~/$THIS.his; fi   #debug
    echo "$specimen"
}


get_pkg_ver_inq() {
# get_pkg_ver_inq(pkgname [OPTS])
# return: ->  pkgversion
    local pkgname=$1
    local pkgversion=
    local X="VER__${1//-/_}"
    if [ -n "${!X}" ]; then
      pkgversion="${!X}"
    elif [[ $2 =~ J ]]; then
      :
    else
      local cmdname=$(get_prm_value "${pkgname}_cmdname")
      local vfycmd=$(get_prm_value "${cmdname}_vfycmd")
      if [ -n "$vfycmd" ]; then
        local x="$(echo $vfycmd|head -n1|awk -F\| '{print $1}'|awk -F'2>' '{print $1}'|awk -F'&>' '{print $1}')"
        local p=$($x &>/dev/null)
        if [ $? -eq $STS_SUCCESS ]; then
          if [[ " $VFYERR " =~ [[:space:]]$cmdname[[:space:]] ]]; then
            pkgversion="$($vfycmd 2>&1 |head -n1)"
          elif [[ " $VFYE2NL " =~ [[:space:]]$cmdname[[:space:]] ]]; then
            pkgversion="$($vfycmd|head -n1)"
          else
            pkgversion="$($vfycmd 2>/dev/null|head -n1)"
          fi
        elif [[ $2 =~ I ]]; then
          pkgversion="($pkgname).($vfycmd)"
        fi
      # elif [[ $2 =~ I ]]; then
      #   pkgversion="($pkgname).($vfycmd)"
      fi
      if [ "$pkgversion" ]; then
        declare $X="$pkgversion"
      fi
    fi
    if [[ $2 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "$pkgversion=get_pkg_ver_inq($1 $2)">>~/$THIS.his; fi    #debug
    echo $pkgversion
}

get_pkg_ver_pip() {
# get_pkg_ver_pip(pkgname [OPTS])
# return: pkgversion
    local pkgname="$1"
    local stscmd=$(get_prm_value "${1}_stscmd")
    local pkgversion=
    local x=
    local X="VER__${1//-/_}"
    if [ -n "${!X}" ]; then
      pkgversion="${!X}"
    elif [[ $2 =~ J ]]; then
      :
    else
      x="$($stscmd show $pkgname)"
      if [ $? -eq $STS_SUCCESS ]; then
        pkgversion="$($stscmd show $pkgname|grep ^[Vv]ersion|awk -F: '{print $2}'|tr -d ', \r\n\(\)')"
      fi
      if [[ $2 =~ I ]]; then
        if [ -z "$pkgversion" ]; then
          pkgversion="($pkgname).(pip)"
        fi
      fi
      if [ "$pkgversion" ]; then
        declare $X="$pkgversion"
      fi
    fi
    if [[ $2 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "$pkgversion=get_pkg_ver_pip($1 $2)">>~/$THIS.his; fi    #debug
    echo $pkgversion
}

get_pkg_ver_rpm() {
# get_pkg_ver_rpm(pkgname [OPTS])
# return: pkgversion
    local pkgname="$1"
    local stscmd=$(get_prm_value "${1}_stscmd")
    local pkgversion=
    local x=
    local X="VER__${1//-/_}"
    if [ -n "${!X}" ]; then
      pkgversion="${!X}"
    elif [[ $2 =~ J ]]; then
      :
    else
      x=$($stscmd -q --qf '%{VERSION}' $pkgname 2>/dev/null)
      if [ $? -eq $STS_SUCCESS ]; then
        pkgversion="$x"
      fi
      if [[ $2 =~ I ]]; then
        if [ -z "$pkgversion" ]; then
          pkgversion="($pkgname).(rpm)"
        fi
      fi
      if [ "$pkgversion" ]; then
        declare $X="$pkgversion"
      fi
    fi
    if [[ $2 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "$pkgversion=get_pkg_ver_rpm($1 $2)">>~/$THIS.his; fi    #debug
    echo $pkgversion
}

get_pkg_ver_dpkg() {
# get_pkg_ver_dpkg(pkgname [OPTS])
# return: pkgversion
    local pkgname="$1"
    local stscmd=$(get_prm_value "${1}_stscmd")
    local pkgversion=
    local x=
    local X="VER__${1//-/_}"
    if [ -n "${!X}" ]; then
      pkgversion="${!X}"
    elif [[ $2 =~ J ]]; then
      :
    else
      x="$(${stscmd}-query -f='${Status}' -W $pkgname 2>/dev/null|awk '{print $3}')"
      sts=$?
      if [ $sts -eq $STS_SUCCESS -a "$x" != "installed" ]; then
        sts=$STS_FAILED
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        pkgversion="$(${stscmd}-query -f='${Version}' -W $pkgname 2>/dev/null|awk -F\- '{print $1}')"
      fi
      if [[ $2 =~ I ]]; then
        if [ -z "$pkgversion" ]; then
          pkgversion="($pkgname).(dkpg)"
        fi
      fi
      if [ "$pkgversion" ]; then
        declare $X="$pkgversion"
      fi
    fi
    if [[ $2 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "$pkgversion=get_pkg_ver_dkpg($1 $2)">>~/$THIS.his; fi    #debug
    echo $pkgversion
}


get_pkg_ver_git() {
# get_pkg_ver_git(pkgname [OPTS] [param] [SPECIMEN])
# return: pkgversion
    local pkgname="$1"
    local pkgversion=
    local x=
    local X="VER__${1//-/_}"
    if [ -n "${!X}" ]; then
      pkgversion="${!X}"
    elif [[ $2 =~ J ]]; then
      :
    else
      local xtlcmd=git
      local git_opts=""
      local s sts pkg_subm subpkg pkg_URL git_opts pkg_user pkg_branch pkg lop lreqver rop rreqver branch x p
      IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$4"
      pkg_URL=$(get_full_URL "$1" $2 $3 $4 "$5")
      subpkg=$(get_dir_URL "$1" $2 $3 $4 "$5")
      local pkg_user="$(get_prm_value ${pkgname}_${xtlcmd}_LocalUser)"
      local pkg_branch="$(get_prm_value ${pkgname}_Branch)"
      if [ -n "$pkg_URL" ]; then
        do_git_localroot version $1 $2 $3 $4 "$5"
        if [ $? -eq $STS_SUCCESS ]; then
          if [ -n "$pkg_branch" ]; then
            pkgversion=$(basename $PWD)
          else
            pkgversion="N/A"
          fi
          git status &>/dev/null
          if [ $? -eq 128 ]; then
            pkgversion=
          fi
        fi
      fi
    fi
    if [[ $2 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "$pkgversion=get_pkg_ver_git($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    echo $pkgversion
}

get_pkg_ver() {
# get_pkg_ver(pkgname [OPTS] [param] [SPECIMEN])
# return: pkgversion
    if [[ $2 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "get_pkg_ver($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    local pkgname=$1
    local ij
    if [ "$1" == "EVERYTHINGS" ]; then
      local pkgversion="# $pkgname N/A"
    elif [[ " $DETECTED_NO " =~ [[:space:]]$1[[:space:]] ]]; then
      local pkgversion=
      ij=J
    elif [[ " $DETECTED_YES " =~ [[:space:]]$1[[:space:]] ]]; then
      ij=I
      local pkgversion=$(get_pkg_ver_inq $1 ${2}$ij)
    elif [[ " $SIMULATE_NO " =~ [[:space:]]$1[[:space:]] ]]; then
      local pkgversion=
      ij=J
    elif [[ " $SIMULATE_YES " =~ [[:space:]]$1[[:space:]] ]]; then
      ij=I
      local pkgversion=$(get_pkg_ver_inq $1 ${2}$ij)
    else
      local pkgversion=$(get_pkg_ver_inq $1 $2)
    fi
    if [ -z "$pkgversion" -a "$ij" != "J" ]; then
      if $(is_virtualname $pkgname); then
        pkgversion="# $pkgname N/A"
      else
        local stscmd=$(get_prm_value "${1}_stscmd")
        if [ "$stscmd" == "dpkg-query" ]; then
          local cmd="get_pkg_ver_dpkg"
        else
          local cmd="get_pkg_ver_$stscmd"
        fi
        if [ "$(type -t $cmd)" == "function" ]; then
          pkgversion=$($cmd $1 $2$ij "$3" "$4")
        fi
      fi
    fi
    if [[ $2 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$pkgversion=get_pkg_ver($1 $2)">>~/$THIS.his; fi    #debug
    echo $pkgversion
}

get_act_xtlcmd() {
# get_act_xtlcmd(pkgname [action] [OPTS] [param] [SPECIMEN])
    local pkg lop lreqver rop rreqver branch x xtlcmd
    IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
    if [ -n "$x" ]; then
      xtlcmd=$x
    else
      xtlcmd=$(get_prm_value "${1}_xtlcmd_${2}")
    fi
    if [ -z "$xtlcmd"  -a "$2" == "remove" ]; then
      xtlcmd=$(get_prm_value "${1}_xtlcmd_install")
    fi
    if [ "$xtlcmd" == "$1" ] && [ "$2" == "install" -o "$2" == "remove" ]; then
      xtlcmd=
    fi
    if [ -z "$xtlcmd" ]; then
      xtlcmd=$(get_prm_value "${1}_xtlcmd")
    fi
    if [ "$xtlcmd" == "$1" ] && [ "$2" == "install" -o "$2" == "remove" ]; then
      xtlcmd=
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  $xtlcmd=get_act_xtlcmd($1 $2 $3)">>~/$THIS.his; fi    #debug
    echo "$xtlcmd"
}

get_full_xtlcmd() {
# get_full_xtlcmd(action pkgname OPTS [param] [SPECIMEN])
    local xtlcmd=$(get_act_xtlcmd $2 "$1" $3 $4 $5)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$xtlcmd=get_act_xtlcmd($2 $1 $3)">>~/$THIS.his; fi    #debug
    local pkg lop lreqver rop rreqver branch x pkgURL subpkg
    IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
    local p=" $2"
    if [ "$2" == "EVERYTHINGS" ]; then
      p=""
    # elif [[ " pip setuptools wheel " =~ [[:space:]]$2[[:space:]] ]] && [ "$1" == "install" -o "$1" == "remove" ] && [ "$DISTO" != "CentOS6" ]; then
    #   p=" python-$2"
    # elif [ "$2" == "pip" -a "$1" == "install" -a "$DISTO" != "CentOS6" ]; then
    #     p=" python-$2"
    # elif [ "$2" == "pip" -a "$1" == "remove" -a "$DISTO" != "CentOS6" ]; then
    #     p=" python-$2"
    # elif [[ " $PIP_PYSTD_PKGS " =~ [[:space:]]$2[[:space:]] ]] && [[ $3 =~ p ]]; then
    #   p=" python-$2"
    # elif [[ " $PIP_PYSTD_PKGS " =~ [[:space:]]$2[[:space:]] ]] &&  [[ " $DETECTED_NOPIP " =~ [[:space:]]$2[[:space:]] ]]; then
    #   if [ "$1" == "install" -o "$1" == "remove" ]; then
    #     p=" python-$2"
    #   fi
    fi
    if [ "$xtlcmd" == "yum" -o "$xtlcmd" == "apt-get" ]; then
      if [[ $3 =~ y ]]; then xtlcmd="$xtlcmd -y"; fi
      xtlcmd="$xtlcmd $1$p"
    elif [ "$xtlcmd" == "pip" ]; then
      if [ "$1" == "update" ]; then
        xtlcmd="$xtlcmd install$p$lop$lreqver$rop$rreqver --upgrade"
      else
        xtlcmd="$xtlcmd $1$p$lop$lreqver$rop$rreqver"
      fi
    fi
    if [[ $3 =~ I ]]; then
      if [ "$1" == "install" ]; then
        xtlcmd="# $xtlcmd"
      fi
    elif [[ $3 =~ J ]]; then
      if [ "$1" == "update" -o "$1" == "remove" ]; then
        xtlcmd="# $xtlcmd"
      fi
    elif [ -z "$xtlcmd" ]; then
      xtlcmd="#"
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$xtlcmd=get_full_xtlcmd($1 $2 $3)">>~/$THIS.his; fi    #debug
    echo "$xtlcmd"
}

get_full_svccmd() {
# get_full_svccmd(action svcname OPTS)
    local servicecmd=$(get_realname "OSSERVICE" $3)
    if [ "$servicecmd" == "service" ]; then
      local cmd="$servicecmd $2 $1"
    else
      local cmd="$servicecmd $1 $2"
    fi
    if [[ $3 =~ I ]]; then
      if [ "$1" == "start" ]; then
        cmd="# $cmd"
      fi
    elif [[ $3 =~ J ]]; then
      if [ "$1" == "restart" -o "$1" == "stop" ]; then
        cmd="# $cmd"
      fi
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$cmd=get_full_svccmd($1 $2 $3)">>~/$THIS.his; fi    #debug
    echo "$cmd"
}

get_full_confn() {
# get_full_confn(action pkgname OPTS)
    local x p O
    local confn="$(get_prm_value ${2}_confn)"
    if [ -n "$confn" ]; then
      p=$(dirname $confn)
    else
      p=
    fi
    if [ "$p" == "." -a ! -f "$confn" ]; then
      local confpaths="$(get_prm_value FINDCFN_$2)"
      if [ -n "$confpaths" -a -n "$confn" ]; then
        O="$IFS"
        IFS=; read p1 p2 p3 p4 p5<<<"$confpaths"
        IFS="$O"
        p=$confn
        confn=$(findpkg "$confn" "$p1" "$p2" "$p3" "$p4" "$p5")
        if [ -z "$confn" ]; then
          read x p2 p3 p4 p5<<<"$p1"
          confn=$x/$p
        fi
      fi
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$confn=get_full_confn($1 $2 $3)">>~/$THIS.his; fi    #debug
    echo "$confn"
}

get_dir_URL() {
# get_dir_URL(action pkgname OPTS [param] [SPECIMEN])
    local pkg lop lreqver rop rreqver branch x pkgURL subpkg
    IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
    local xtlcmd=$(get_act_xtlcmd $2 "$1" $3 $4 $5)
    subpkg=$2
    if [[ $3 =~ s ]]; then
      pkg_URL="$(get_prm_value ${pkg}__${2}_${xtlcmd}_URL)"
      if [ -n "$pkg_URL" ]; then
        subpkg=$(basename $pkg_URL)
        if [ "${subpkg: -4}" == ".git" ]; then
          subpkg=${subpkg:0: -4}
        fi
      fi
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$subpkg=get_dir_URL($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    echo "$subpkg"
}

get_full_URL() {
# get_full_URL(action pkgname OPTS [param] [SPECIMEN])
    local pkg lop lreqver rop rreqver branch x pkgURL
    IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
    local xtlcmd=$(get_act_xtlcmd $2 "$1" $3 $4 $5)
    if [[ $3 =~ s ]]; then
      pkg_URL="$(get_prm_value ${pkg}__${2}_${xtlcmd}_URL)"
      if [ -z "$pkg_URL" ]; then
        pkg_URL="$(get_prm_value ${pkg}_${xtlcmd}_URL)"
        pkg_URL=${pkg_URL%/*}/${2}.git
      fi
    else
      pkg_URL="$(get_prm_value ${2}_${xtlcmd}_URL)"
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$pkg_URL=get_full_URL($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    echo "$pkg_URL"
}

get_full_LocalRoot() {
# get_full_LocalRoot(action pkgname OPTS [param] [SPECIMEN])
    local pkg lop lreqver rop rreqver branch x
    IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
    local xtlcmd=$(get_act_xtlcmd $2 "$1" $3 $4 $5)
    if [[ $3 =~ s ]]; then
      LocalRoot="$(get_prm_value ${pkg}_${xtlcmd}_LocalRoot)"
    else
      LocalRoot="$(get_prm_value ${2}_${xtlcmd}_LocalRoot)"
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "$LocalRoot=get_full_LocalRoot($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    echo "$LocalRoot"
}

do_git_localroot() {
# do_git_localroot(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " "  "do_git_localroot($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    local pkgname="$2"
    local xtlcmd=git
    # local LocalRoot="$(get_prm_value ${pkgname}_${xtlcmd}_LocalRoot)"
    local LocalRoot=$(get_full_LocalRoot "$1" $2 $3 $4 "$5")
    local pkg_branch="$(get_prm_value ${pkgname}_Branch)"
    local pkg lop lreqver rop rreqver branch v
    IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
    local sts=$STS_FAILED
    if [ -n "$LocalRoot" ]; then
      local pgkpath=
      if [ "$1" == "install" ]; then
        if [ ! -d $LocalRoot ]; then
          mkdir_traced $LocalRoot
        fi
        if [[ $3 =~ s ]] && [ -n "$branch" ]; then
          pgkpath=$LocalRoot/$branch
        else
          pgkpath=$LocalRoot
        fi
      fi
      if [ -d $LocalRoot -a "$1" != "install" ]; then
        if [ -n "$pkg_branch" ]; then
          if [ -n "$branch" -a "$1" != "version" ]; then
            pgkpath=$LocalRoot/$branch
          else
            for v in $pkg_branch; do
              if [ -d $LocalRoot/$v ]; then
                if $(cmp_ver "$v" "$lop" "$lreqver") && $(cmp_ver "$v" "$rop" "$rreqver"); then
                  pgkpath=$LocalRoot/$v
                fi
              fi
            done
          fi
        else
          pgkpath=$LocalRoot
        fi
      fi
      if [ -n "$pgkpath" ]; then
        if [ "$1" == "install" ]; then
          run_traced "cd $pgkpath"
        else
          cd $pgkpath
        fi
        sts=$?
      fi
    else
      if [ -d /tmp/$pkgname ]; then
        run_traced "rm -fR /tmp/$pkgname"
      elif [ -f /tmp/$pkgname ]; then
        run_traced "rm -f /tmp/$pkgname"
      fi
      if [ "$1" == "install" ]; then
        run_traced "cd /tmp"
      else
        cd /tmp
      fi
      sts=$?
    fi
    return $sts
}

update_hba_conf() {
    local fnd_mrk=0
    local eorem=0
    local patched=0
    local dt=$(date +%Y-%m-%d)
    while IFS=\~ read -r line; do
      if [ "${line:0:11}" == "# [PRODUCT:" ]; then
        fnd_mrk=1
      elif [[ $line =~ ^[a-zA-Z_].*$ ]]; then
        eorem=1
      fi
      if [ $eorem -eq 1 -a $patched -eq 0 -a $fnd_mrk -eq 0 ]; then
         patched=1
         echo "# [PRODUCT: $dt] Added access to Odoo">>$1.tmp
         echo "# Where user were created, no password was issued, so this configuration uses trust method to connect">>$1.tmp
         echo "# Warning! This method is unsecure for no local connection">>$1.tmp
         echo "# In order to set postgresql secure you must:">>$1.tmp
         echo "# 1. drop users automatically created; type >drop user odoo[7|8|9]">>$1.tmp
         echo "# 2. recreate users">>$1.tmp
         echo "#    type >createuser --createdb --username postgres --no-createrole --no-superuser --pwprompt odoo[7|8|9]">>$1.tmp
         echo "#    Rememeber password you type, because you must insert it in odoo conf file">>$1.tmp
         echo "# 3. Correct following lines, subst 'trust' by 'md5' for users odoo[7|8|9]">>$1.tmp
         echo "# 4. Restart service postgresql">>$1.tmp
         echo "# When you connect to psql console do not forget dbname, type:">>$1.tmp
         echo "# psql -Uodoo[7|8|9] postgres">>$1.tmp
         echo "# User openerp is used by old installation schema of Odoo7 (formerly OpenERP)">>$1.tmp
         echo "local   all         openerp                           peer">>$1.tmp
         echo "host    all         openerp     127.0.0.1/32          trust">>$1.tmp
         echo "host    all         openerp     ::1/128               trust">>$1.tmp
         echo "local   all         odoo                              peer">>$1.tmp
         echo "host    all         odoo        127.0.0.1/32          trust">>$1.tmp
         echo "host    all         odoo        ::1/128               trust">>$1.tmp
         for ov in 7 8 9; do
           echo "local   all         odoo$ov                             trust">>$1.tmp
           echo "host    all         odoo$ov       127.0.0.1/32          trust">>$1.tmp
           echo "host    all         odoo$ov       ::1/128               trust">>$1.tmp
         done
         echo "# [PRODUCT: end automatic configuration]">>$1.tmp
      fi
      echo "$line">>$1.tmp
    done < "$1"
    if [ $opt_dry_run -eq 0 ]; then
      [ -z "opt_yes" ] || vim $1.tmp
      run_traced "mv $1 $1.bak"
      run_traced "mv $1.tmp $1"
    else
      vim $1.tmp
    fi

}

build_groups_list() {
    infile=/etc/group
    outfile=~/z0_x_groups.txt
    if [ $opt_dry_run -eq 0 -a -f $outfile ]; then rm -f $outfile; fi
    while IFS=: read -r group enpass gid other; do
      if [ $gid -ge 400 ]; then
        valid=1
      else
        valid=0
      fi
      if [[ "$group" =~ kluser* ]]; then valid=0; fi
      if [[ "$group" =~ saslauth* ]]; then valid=0; fi
      if [[ "$group" =~ dev131* ]]; then valid=0; fi
      if [[ "$group" =~ cgred* ]]; then valid=0; fi
      if [[ "$group" =~ odoo* ]]; then valid=0; fi
      if [[ "$group" =~ openerp* ]]; then valid=0; fi
      if ((valid)); then
        wlog "# Group $group ($gid)"
        if [ $opt_dry_run -eq 0 ]; then
          echo "$group:$enpass:$gid">>$outfile
        fi
      fi
    done < "$infile"
}

build_user_list() {
    infile=/etc/passwd
    outfile=~/z0_x_users.txt
    if [ $opt_dry_run -eq 0 -a -f $outfile ]; then rm -f $outfile; fi
    while IFS=: read -r user enpass uid gid desc home shell; do
      if [ $uid -ge 400 ]; then
        valid=1
      else
        valid=0
      fi
      if [[ "$user" =~ kluser* ]]; then valid=0; fi
      if [[ "$user" =~ saslauth* ]]; then valid=0; fi
      if [[ "$user" =~ dev131* ]]; then valid=0; fi
      if ((valid)); then
        wlog "# User $user ($uid) assigned \"$home\" home directory with $shell shell."
        if [ $opt_dry_run -eq 0 ]; then
          echo "$user:$enpass:$uid:$gid:$desc:$home:$shell">>$outfile
        fi
      fi
    done < "$infile"
}

add_groups() {
    sysfile=/etc/group
    infile=~/z0_x_groups.txt
    if [ -f $infile ]; then
      while IFS=: read -r group enpass gid other; do
        if [ $(grep "^$group:" $sysfile 2>/dev/null) ]; then
          wlog "!! Group $group already exists"
        else
          cmd="groupadd -g $gid $group"
          wlog "$cmd"
          if [ $opt_dry_run -eq 0 ]; then
            $cmd
          fi
        fi
      done < "$infile"
    else
      wlog "!! File $infile not found!"
    fi
}

add_users() {
    sysfile=/etc/passwd
    infile=~/z0_x_users.txt
    if [ -f $infile ]; then
      while IFS=: read -r user enpass uid gid desc home shell; do
        if [ $(grep "^$user:" $sysfile 2>/dev/null) ]; then
          wlog "!! User $user already exists"
        else
          if [ ! -d $home ]; then cmd="useradd -m"; else cmd="useradd"; fi
          cmd="$cmd -u $uid -g $gid -d $home -s $shell $user"
          wlog "$cmd"
          if [ $opt_dry_run -eq 0 ]; then
            $cmd
            if [ "$opt_pwd" ]; then
              echo $opt_pwd|passwd --stdin $user
            fi
          fi
        fi
      done < "$infile"
    else
      wlog "!! File $infile not found!"
    fi
}

create_setup_lisa() {
cat <<EOF >./setup.sh
THIS=\$(basename \$0)
TDIR=\$(readlink -f \$(dirname \$0))
pkgname=\$THIS
if [ -f ./z0librc ]; then
  . ./z0librc
  if [ "\$TDIR" != "/usr/bin" ]; then
    if [ "\${TDIR:0:14}" == "/opt/odoo/dev/" ]; then
      local cmd="cp"
    else
      local cmd="mv"
    fi
    mkdir -p /etc/\$THIS
    eval \$cmd \$TDIR/\$pkgname /usr/bin
    eval \$cmd \$TDIR/\${pkgname}.man /usr/bin
    eval \$cmd \$TDIR/\${pkgname}_bld_ods /usr/bin
    chmod +x /usr/bin/\$pkgname*
    for f in \${pkgname}.conf odoo-server_Debian odoo-server_RHEL odoo-server; do
      if [ -f \$TDIR/\$f ]; then
        eval cp \$TDIR/\$f /etc/\$THIS
      fi
    done
    _install_z0librc
  fi
fi
EOF
chmod +x ./setup.sh
}

do_dry_build_lisa() {
# do_dry_build_lisa(action pkgname OPTS)
if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_build_lisa($1 $2 $3)">>~/$THIS.his; fi    #debug
    local package="$2"
    local f x s
    local PKGLIST="$package $package.man ${package}_bld_ods"
    s=0
    for f in $PKGLIST; do
      if [ ! -f $f ]; then
        s=1
      fi
    done
    if [ $s -eq 0 ]; then
      create_setup_lisa
      if [ -f $package.gz ]; then
        rm -f $package.gz
      fi
      x="-cf"
      run_traced "tar $x $package.gz setup.sh"
      x=${x/c/r}
      for f in $PKGLIST; do
        run_traced "tar $x $package.gz $f"
      done
      for f in odoo-server_Debian odoo-server_RHEL odoo-server; do
        if [ -f $f ]; then
          run_traced "tar $x $package.gz $f"
        fi
      done
      if [ -L z0librc ]; then
        rm -f z0librc
      fi
      run_traced "cp /etc/z0librc ./"
      run_traced "chown odoo:odoo z0librc"
      run_traced "tar $x $package.gz z0librc"
      if [ -f z0librc ]; then
        run_traced "rm -f z0librc"
      fi
      if [ -d /var/www/html/mw/download/ ]; then
        run_traced "chown apache:apache $package.gz"
        run_traced "mv $package.gz /var/www/html/mw/download/"
      fi
    else
      run_traced "cd /tmp"
      if [ -f ./$package ]; then
        rm -f ./$package
      elif [ -d ./$package ]; then
        rm -fR ./$package
      fi
      run_traced "mkdir ./$package"
      run_traced "cd ./$package"
      run_traced "cp /usr/bin/$package ./"
      run_traced "cp /usr/bin/$package.man ./"
      run_traced "cp /usr/bin/${pkgname}_bld_ods ./"
      run_traced "cp /etc/z0librc ./"
      for f in odoo-server_Debian odoo-server_RHEL odoo-server; do
        if [ -f /usr/bin/$f ]; then
          run_traced "cp /usr/bin/$f ./"
        fi
      done
      create_setup_lisa
      run_traced "cd .."
      x="-cf"
      run_traced "tar $x $package.gz ./$package"
      if [ -d /var/www/html/mw/download/ ]; then
        run_traced "chown apache:apache $package.gz"
        run_traced "mv $package.gz /var/www/html/mw/download/"
        run_traced "rm -fR ./$package"
      fi
    fi
    return $STS_SUCCESS
}

do_dry_install_lisa() {
# do_dry_install_lisa(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_install_lisa($1 $2 $3)">>~/$THIS.his; fi    #debug
    local pkgname=$2
    if [ -z "$opt_host" ]; then
      if [ "$TDIR" != "/usr/bin" ]; then
        if [ "${TDIR:0:14}" == "/opt/odoo/dev/" ]; then
          local cmd="cp"
        else
          local cmd="mv"
        fi
        run_traced "mkdir -p /etc/$THIS"
        run_traced "$cmd $TDIR/$pkgname /usr/bin"
        run_traced "$cmd $TDIR/${pkgname}.man /usr/bin"
        run_traced "$cmd $TDIR/${pkgname}_bld_ods /usr/bin"
        run_traced "chmod +x /usr/bin/$pkgname*"
        for f in ${pkgname}.conf odoo-server_Debian odoo-server_RHEL odoo-server; do
          if [ -f $TDIR/$f ]; then
            run_traced "cp $TDIR/$f /etc/$THIS"
          fi
        done
        run_traced "_install_z0librc"
      fi
    else
      if [ "opt_if" ]; then
        SCP="scp -oIdentityFile=$opt_if"
      else
        SCP="scp"
      fi
      wlog "# Copying config files to host $opt_host"
      if [ -f z0_x_*.txt ]; then
        run_traced "$SCP z0_x_*.txt $opt_host:~/"
      fi
      run_traced "$SCP $TDIR/$pkgname $opt_host:~/"
      run_traced "$SCP $TDIR/${pkgname}.* $opt_host:~/"
      run_traced "$SCP /etc/z0librc $opt_host:~/"
    fi
    return $STS_SUCCESS
}

do_dry_install_by_wget() {
# do_dry_install_by_wget(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_install_by_wget($1 $2 $3)">>~/$THIS.his; fi    #debug
    local pkgname=$2
    local xtlcmd=wget
    local LocalRoot="$(get_prm_value ${pkgname}_${xtlcmd}_LocalRoot)"
    local pkg_URL="$(get_prm_value ${pkgname}_${xtlcmd}_URL)"
    local pkg_xname="$(get_prm_value ${pkgname}_${xtlcmd}_xname)"
    local pkg_md5="$(get_prm_value ${pkgname}_${xtlcmd}_md5)"
    if [ -z "$pkg_xname" -o -z "$pkg_URL" ]; then
      elog "*** Package $pkgname not found for this hardware"
      elog "    wget $pkg_xname from URL=$pkg_URL"
      return 2
    fi
    if [ -n "$LocalRoot" ]; then
      if [ ! -d $LocalRoot ]; then
        mkdir_traced $LocalRoot
      fi
      run_traced "cd $LocalRoot"
    else
      if [ -d /tmp/$pkg_xname ]; then
        run_traced "rm -fR /tmp/$pkg_xname"
      elif [ -f /tmp/$pkg_xname ]; then
        run_traced "rm -f /tmp/$pkg_xname"
      fi
      run_traced "cd /tmp"
    fi
    run_traced "wget $pkg_URL/$pkg_xname$pkg_md5"
    if [ -d $pkg_xname ]; then
      cd $pkg_xname
      if [ -f ./setup.sh ]; then
        ./setup.sh
      elif [ -f ./setup.py ]; then
        python ./setup.py
      fi
    elif [ "${pkg_xname: -4}" == ".rpm" ]; then
      run_traced "rpm -i $pkg_xname"
    elif [ "${pkg_xname: -4}"  == ".deb" ]; then
      run_traced "apt-get install $pkg_xname"
    elif [ "${pkg_xname: -7}"  == ".tar.gz" ]; then
      run_traced "pip install $pkg_xname"
    fi
    local sts=$?
    run_traced "rm -f $pkg_xname"
    return $sts
}


lisa_install_submodule_by_git() {
# lisa_install_submodule_by_git(pkgs branch action OPTS param [SPECIMEN])
    local opt_osub="$1"
    local ov="$2"
    CWD=$PWD
    for iso in ${opt_osub//,/ }; do
      run_traced "cd /opt/odoo/$ov.0"
      # pn=$(get_locale_name "$iso")
      if [ -z "$pn" ]; then
        if [ ${#iso} -ne 2 ]; then
          elog  "Invalid submodule name $iso"
        else
          elog  "Invalid $iso in -l $opt_locale switch"
        fi
      else
        # addons=$(get_locale_dir "$pn")
        if [ -f .gitignore -o $test_mode -gt 0 ]; then
          if [ -z "$(grep "$addons/" .gitignore 2>/dev/null)" -o $test_mode -gt 0 ]; then
            run_traced "echo \"$addons/\">>.gitignore"
          fi
        fi
        if [ -d $addons -a $test_mode -eq 0 ]; then
          run_traced "cd $addons"
          run_traced "git pull origin $ov.0" "odoo"
          run_traced "cd /opt/odoo/$ov.0"
        else
          run_traced "git clone -b $ov.0 $pn $addons $git_opts" "odoo"
          run_traced "git submodule add -b $ov.0 -f $pn $addons" "odoo"
          if [ "opt_oed" == "zeroincombenze" ]; then
            run_traced "git remote add upstream https://github.com/OCA/$addons.git" "odoo"
          fi
          run_traced "cd /opt/odoo/$ov.0"
        fi
      fi
    done
    cd $CWD
}

do_dry_install_submodule_by_git() {
# do_dry_install_submodule_by_git(action pks OPTS param [SPECIMEN])
# specimen contains top module name and version
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_install_submodule_by_git($1 \"$2\" $3 $4 \"$5\")">>~/$THIS.his; fi    #debug
    local sts=$STS_SUCCESS
    local s
    if [ "$2" == "." ]; then
      local xtlcmd pkg_user pkg lop lreqver rop rreqver branch x p
      IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
      xtlcmd=git
      pkg_user=$(get_prm_value ${pkg}_${xtlcmd}_LocalUser)
      run_traced "git submodule update --init" "$pkg_user"
    else
      CWD=$PWD
      for pkgname in ${2//,/ }; do
        cd $CWD
        # do_1_status_package $1 $pkgname ${3}s $4 "$5"
        # sts=$?
        do_dry_install_by_git $1 $pkgname ${3}s $4 "$5"
        s=$?
        if [ $s -ne $STS_SUCCESS ]; then
          sts=$s
          break
        fi
      done
      cd $CWD
    fi
    return $sts
}


do_dry_install_by_git() {
# do_dry_install_by_git(action pkgname OPTS param [SPECIMEN])
# if install submodule (OPTS =~ s) specimen contains top module name and version
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_install_by_git($1 $2 $3 $4 \"$5\")">>~/$THIS.his; fi    #debug
    local pkgname=$2
    local xtlcmd=git
    local s sts pkg_subm subpkg pkg_URL git_opts pkg_user pkg_branch pkg lop lreqver rop rreqver branch x p
    IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
    if [[ $3 =~ s ]]; then
      subpkg=$2
      pkgname=${pkg}__$2
      pkg_URL="$(get_prm_value ${pkgname}_${xtlcmd}_URL)"
      if [ -z "$pkg_URL" ]; then
         pkg_URL="$(get_prm_value ${pkg}_${xtlcmd}_URL)"
         pkg_URL=${pkg_URL%/*}/$subpkg.git
      else
        subpkg=$(basename $pkg_URL)
        if [ "${subpkg: -4}" == ".git" ]; then
          subpkg=${subpkg:0: -4}
        fi
      fi
    else
      subpkg=
      pkg_URL="$(get_prm_value ${pkgname}_${xtlcmd}_URL)"
    fi
    if [ -z "$pkg_URL" ]; then
      elog "*** Package $pkgname not found for this platform"
      elog "    git $pkg_name from URL=$pkg_URL"
      return 2
    fi
    do_git_localroot $1 $2 $3 $4 "$5"
    if [ $? -eq $STS_SUCCESS ]; then
      git_opts=""
      if [ $opt_dev -eq 0 ]; then
        git_opts="--single-branch --depth=1 $git_opts"
      fi
      pkg_user=$(get_prm_value ${pkgname}_${xtlcmd}_LocalUser)
      if [ -z "subpkg" ]; then
        pkg_branch="$(get_prm_value ${pkgname}_Branch)"
      else
        pkg_branch="$(get_prm_value ${pkg}_Branch)"
      fi
      if [ -n "$pkg_branch" ]; then
        git_opts="-b $branch $git_opts"
        # target_dir=version
      else
        branch=
      fi
      if [ -z "$subpkg" ]; then
        run_traced "git clone $pkg_URL $pkgname $git_opts" "$pkg_user"
        sts=$?
      else
        if [ -f .gitignore -o $test_mode -gt 0 ]; then
          if [ -z "$(grep "$subpkg/" .gitignore 2>/dev/null)" -o $test_mode -gt 0 ]; then
            run_traced "echo \"$subpkg/\">>.gitignore"
          fi
        fi
        if [ -d $subpkg -a $test_mode -eq 0 ]; then
          run_traced "cd $subpkg"
          run_traced "git pull origin $branch" "$pkg_user"
          sts=$?
        else
          run_traced "git clone $pkg_URL $subpkg/ $git_opts" "$pkg_user"
          sts=$?
          run_traced "git submodule add -f $pkg_URL $subpkg/" "$pkg_user"
          x=$(get_prm_value "$pkgname_upstream")
          if [ -n "$x" ]; then
            run_traced "git remote add upstream $x" "$pkg_user"
          fi
        fi
        run_traced "cd $CWD"
      fi
      if [ -n "$pkg_user" ]; then
        run_traced "chown -R $pkg_user $pkgname/"
      fi
      x=$(get_prm_value "${pkgname}_confdirs")
      if [ -n "$x" ]; then
        for p in ${x//,/ }; do
          if [ ! -d $p -o $test_mode -gt 0 ]; then
            mkdir_traced $p $pkg_user
          fi
        done
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        pkg_subm="$(get_prm_value SUBM_${pkgname})"
        if [ -n "$pkg_subm" ]; then
          if [ -n "$branch" ]; then
            run_traced "git checkout $branch"
          fi
          do_dry_install_submodule_by_git $1 "$pkg_subm" $3 $4 "$5"
          s=$?
          [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
        fi
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        if [ -z "$subpkg" -a -n "$opt_locale" ]; then
          do_dry_install_submodule_by_git $1 "$opt_locale" $3 $4 "$5"
          s=$?
          [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
        fi
      fi
      if [ $sts -eq $STS_SUCCESS ]; then
        if [ -n "$opt_sub" ]; then
          do_dry_install_submodule_by_git $1 "$opt_sub" $3 $4 "$5"
          s=$?
          [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
        fi
      fi
    fi
    return $sts
}

do_dry_update_package() {
# do_dry_update_package(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_update_package($1 $2 $3)">>~/$THIS.his; fi #debug
    # if [[ " $PIP_PYSTD_PKGS " =~ [[:space:]]$2[[:space:]] ]] &&  [[ " $DETECTED_NOPIP " =~ [[:space:]]$2[[:space:]] ]]; then
    #   local cmd=$(get_act_xtlcmd python-$2 install $3 $4 "$5")
    #   if [ -n "$cmd" ]; then
    #     cmd=$(get_full_xtlcmd $1 python-$2 $3 $4 "$5")
    #     run_traced "$cmd"
    #     if [ "${cmd:0:7}" == "apt-get" ]; then
    #       cmd="${cmd/update/upgrade}"
    #       run_traced "$cmd"
    #     fi
    #   fi
    # else
      cmd=$(get_full_xtlcmd $1 $2 $3 $4 "$5")
      run_traced "$cmd"
      local sts=$?
      if [ "${cmd:0:7}" == "apt-get" ]; then
        cmd="${cmd/update/upgrade}"
        run_traced "$cmd"
        sts=$?
      fi
    # fi
    return $sts
}

do_dry_remove_package() {
# do_dry_remove_package(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_remove_package($1 $2 $3)">>~/$THIS.his; fi #debug
    local cmd=$(get_full_xtlcmd $1 $2 $3 $4 "$5")
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  cmd=$cmd;">>~/$THIS.his; fi    #debug
    run_traced "$cmd"
    return $?

}

do_dry_update_lisa() {
# do_dry_update_lisa(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_update_lisa($1 $2 $3)">>~/$THIS.his; fi    #debug
    if [ "$TDIR" != "/usr/bin" ]; then
      do_dry_install_lisa update $2 $3
    else
      run_traced "cd /tmp"
      if  [ -d /tmp/tools ]; then
        rm -fR /tmp/tools
      fi
      run_traced "git clone https://github.com/zeroincombenze/tools.git"
      run_traced "cd /tmp/tools/lisa"
      run_traced "exec ./lisa update lisa"
      run_traced "rm -fR /tmp/tools"
    fi
    return $STS_SUCCESS
}

do_dry_remove_lisa() {
# do_dry_remove_lisa(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_remove_lisa($1 $2 $3)">>~/$THIS; fi    #debug
    run_traced "rm /usr/bin/$2"
    run_traced "rm /usr/bin/${2}.*"
    return $STS_SUCCESS
}

do_dry_update_by_wget() {
# do_update_by_wget(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_update_by_wget($1 $2 $3)">>~/$THIS.his; fi    #debug
    local pkgname=$2
    local xtlcmd=wget
    local LocalRoot="$(get_prm_value ${pkgname}_${xtlcmd}_LocalRoot)"
    local pkg_URL="$(get_prm_value ${pkgname}_${xtlcmd}_URL)"
    local pkg_xname="$(get_prm_value ${pkgname}_${xtlcmd}_xname)"
    if [ -z "$pkg_xname" -o -z "$pkg_URL" ]; then
      elog "*** Package $pkgname not found for this hardware"
      elog "    wget $pkg_xname from URL=$pkg_URL"
      return 2
    fi
    if [ -n "$LocalRoot" ]; then
      if [ ! -d $LocalRoot ]; then
        mkdir_traced $LocalRoot
      fi
      run_traced "cd $LocalRoot"
    else
      if [ -d /tmp/$pkg_xname ]; then
        run_traced "rm -fR /tmp/$pkg_xname"
      elif [ -f /tmp/$pkg_xname ]; then
        run_traced "rm -f /tmp/$pkg_xname"
      fi
      run_traced "cd /tmp"
    fi
    run_traced "wget $pkg_URL/$pkg_xname"
    if [ "${pkg_xname: -4}" == ".rpm" ]; then
      run_traced "rpm -U $pkg_xname"
    elif [ "${pkg_xname: -4}"  == ".deb" ]; then
      run_traced "apt-get update $pkg_xname"
      run_traced "apt-get upgrade $pkg_xname"
    elif [ "${pkg_xname: -7}"  == ".tar.gz" ]; then
      run_traced "pip install $pkg_xname --upgrade"
    fi
    local sts=$?
    run_traced "rm -f $pkg_xname"
    return $sts
}


do_dry_config_package() {
# do_dry_config_package(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_config_package($1 $2 $3)">>~/$THIS.his; fi #debug
    confn=$(get_full_confn $1 $2 $3)
    if [ -n "$confn" ]; then
      vi $confn
    fi
    return $STS_SUCCESS
}

pre_install_LAMP() {
# pre_install_LAMP(action pkgname OPTS)
    if [ $opt_dev -gt 0 ]; then
      if [ "$FH" == "RHEL" ]; then
        run_traced "yum $opt_yes groupinstall \"Development tools\""
      fi
    fi
    return $STS_SUCCESS
}

pre_update_LAMP() {
    pre_install_LAMP
}


do_dry_install_package() {
# do_dry_install_package(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_install_package($1 $2 $3)">>~/$THIS.his; fi    #debug
    local cmd=$(get_full_xtlcmd $1 $2 $3 $4 "$5")
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  cmd=$cmd;">>~/$THIS.his; fi    #debug
    run_traced "$cmd"
    return $?
}

do_whatis_ports() {
# do_whatis_ports(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_whatis_ports($1 $2 $3)">>~/$THIS.his; fi #debug
    local lm x=$((prdstk_level*2+1))
    # local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    [ $x -eq 0 ]||eval printf -v lm '%.s-' {1..$x}
    local X="$(get_prm_value TCP_$2)"
    if [ -n "$X" ]; then
      for port in $X; do
        test_msg "$lm TCP port $port"
      done
    fi
    local X="$(get_prm_value UDP_$pkgname)"
    if [ -n "$X" ]; then
      for port in $X; do
        test_msg "$lm UDP port $port"
      done
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  return(0) #do_whatis_ports">>~/$THIS.his; fi    #debug
    return $STS_SUCCESS
}

post_install_ports() {
# post_install_ports(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "post_install_ports($1 $2 $3)">>~/$THIS.his; fi #debug
    local X="$(get_prm_value TCP_$2)"
    if [ -n "$X" ]; then
      if [ "$1" == "install" -o "$1" == "update" -o "$1" == "config" ]; then
        for port in $X; do
          enable_port $port tcp $3
        done
      elif [ "$1" == "remove" ]; then
        for port in $X; do
          disable_port $port tcp $3
        done
      elif [ "$1" == "whatis" ]; then
        for port in $X; do
          test_msg "- TCP port $port"
        done
      fi
    fi
    local X="$(get_prm_value UDP_$pkgname)"
    if [ -n "$X" ]; then
      if [ "$1" == "install" -o "$1" == "update" -o "$1" == "config" ]; then
        for port in $X; do
          enable_port $port udp
        done
      elif [ "$1" == "remove" ]; then
        for port in $X; do
          disable_port $port tcp
        done
      elif [ "$1" == "whatis" ]; then
        for port in $X; do
          test_msg "- UDP port $port"
        done
      fi
    fi
    return $STS_SUCCESS
}

post_update_ports() {
# post_update_ports(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "post_update_ports($1 $2 $3)">>~/$THIS.his; fi #debug
    local X="$(get_prm_value TCP_$2)"
    if [ -n "$X" ]; then
      for port in $X; do
        enable_port $port tcp $3
      done
    fi
    local X="$(get_prm_value UDP_$pkgname)"
    if [ -n "$X" ]; then
      for port in $X; do
        enable_port $port udp $3
      done
    fi
    return $STS_SUCCESS
}


post_remove_ports() {
# post_remove_ports(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "post_remove_ports($1 $2 $3)">>~/$THIS.his; fi #debug
    local X="$(get_prm_value TCP_$2)"
    if [ -n "$X" ]; then
      for port in $X; do
        disable_port $port tcp $3
      done
    fi
    local X="$(get_prm_value UDP_$pkgname)"
    if [ -n "$X" ]; then
      for port in $X; do
        disable_port $port tcp $3
      done
    fi
    return $STS_SUCCESS
}

post_dry_install_service() {
# post_dry_install_service(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "post_dry_install_service($1 $2 $3)">>~/$THIS.his; fi #debug
    local svcname=$(get_prm_value "${2}_svcname")
    local cmd=$(get_full_svccmd start $svcname $3)
    run_traced "$cmd"
    local sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      run_traced "sleep 3"
      cmd="chkconfig $svcname on"
      run_traced "$cmd"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      local LocalRoot="$(get_prm_value ${2}_LocalRoot)"
      if [ -n "$LocalRoot" ]; then
        if [ ! -d $LocalRoot ]; then
          mkdir_traced $LocalRoot
        fi
      fi
    fi
    return $sts
}

post_dry_config_service() {
# post_dry_config_service(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "post_dry_config_service($1 $2 $3)">>~/$THIS.his; fi #debug
    local svcname=$(get_prm_value "${2}_svcname")
    cmd="chkconfig $svcname on"
    run_traced "$cmd"
    sts=$?
    return $sts
}

post_dry_update_service() {
# post_dry_update_service(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "post_dry_update_service($1 $2 $3)">>~/$THIS.his; fi #debug
    local svcname=$(get_prm_value "${2}_svcname")
    local cmd=$(get_full_svccmd restart $svcname $3)
    run_traced "$cmd"
    local sts=$?
    return $sts
}

pre_dry_remove_service() {
# pre_dry_remove_service(action pkgname OPTS)
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "pre_dry_remove_service($1 $2 $3)">>~/$THIS.his; fi #debug
    local svcname=$(get_prm_value "${2}_svcname")
    local cmd=$(get_full_svccmd stop $svcname $3)
    run_traced "$cmd"
    local sts=$?
    return $sts
}

do_1_tellme_package() {
# do_1_tellme_package(action pkgname OPTS param [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_1_tellme_package($1 $2 $3 $4)">>~/$THIS.his; fi    #debug
    local pkg lop lreqver rop rreqver branch x xtlcmd
    IFS="~" read pkg lop lreqver rop rreqver branch x<<<"$5"
    local pkgname=$(get_realname "$2" $3)
    local sts=$STS_SUCCESS
    if [ "$4" == "realname" ]; then
      local iter=$(get_iter $pkgname $3)
      if [ "$2" == "$iter" ]; then
        echo "$2"
      elif [ "$pkgname" == "$iter" ]; then
        echo "$2=$pkgname"
      else
        echo "$2=($iter)"
      fi
      if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  return(0) #do_1_tellme_package">>~/$THIS.his; fi    #debug
      return $STS_SUCCESS
    elif [ "$4" == "installer" ]; then
      local xtlcmd=$(get_act_xtlcmd $pkgname install $3 $4 "$5")
      echo "$xtlcmd"
    elif [ "$4" == "vfycmd" ]; then
      local vfycmd=$(get_prm_value "${2}_vfycmd")
      echo "$vfycmd"
    elif [ "$4" == "confn" ]; then
      local confn=$(get_full_confn $1 $pkgname $3)
      echo "$confn"
    elif [ "$4" == "cmdname" ]; then
      local cmdname=$(get_prm_value "${2}_cmdname")
      echo "$cmdname"
    elif [ "$4" == "branches" ]; then
      local p=$(get_prm_value "${2}_Branch")
      echo "$p"
    elif [ "$4" == "submodules" ]; then
      local p=$(get_prm_value "SUBM_${2}")
      echo "$p"
    elif [ "$4" == "requirements" ]; then
      local p=$(get_prm_value "${2}_ReqPkgList")
      echo "$p"
    elif [ "$4" == "confdirs" ]; then
      local p=$(get_prm_value "${2}_confdirs")
      echo "$p"
    else
      echo "Invalid param: branches|cmdname|confdirs|confn|installer|realname|requirements|submodules|vfycmd"
      sts=$STS_FAILED
    fi
    return $sts
}

do_1_status_package() {
# do_1_status_package(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_1_status_package($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    local pkgversion=$(get_pkg_ver $2 $3 $4 "$5")
    [ -n "$pkgversion" ]
    return $?
}

do_1_info_package() {
# do_1_info_package(action pkgname OPTS [param] [SPECIMEN])
# - info receives cmdline pkgname, no realname
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_1_info_package($1 $2 $3)">>~/$THIS.his; fi    #debug
    local pkgname=$(get_realname "$2" $3)
    local pkglist=$(please tellme $2 $3 realname)
    local xtlcmd=$(get_act_xtlcmd $pkgname install $3 $4 "$5")
    if [ -z "$xtlcmd" ]; then
      xtlcmd=$(get_act_xtlcmd $pkgname "" $3 $4 "$5")
    fi
    local svcname=$(get_prm_value "${pkgname}_svcname")
    local cmdname=$(get_prm_value "${pkgname}_cmdname")
    local vfycmd=$(get_prm_value "${cmdname}_vfycmd")
    if [[ $pkglist =~ = ]]; then
      echo "$pkglist (install by $xtlcmd)"
    else
      if [ "$2" == "$pkgname" ]; then
        echo "$2 (install by $xtlcmd)"
      else
        echo "$2=$pkgname (install by $xtlcmd)"
      fi
    fi
    if [ -n "$svcname" ]; then
      echo " service=$svcname"
    fi
    if [ -n "$cmdname" ]; then
      echo " command=$cmdname"
    fi
    if [ -n "$vfycmd" ]; then
      echo " get ver=$vfycmd"
    fi
    return $STS_SUCCESS
}

do_dry_status_package() {
# do_dry_status_package(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_status_package($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    local lm x=$((prdstk_level*2))
    # local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    [ $x -eq 0 ]||eval printf -v lm '%.s-' {1..$x}
    do_1_status_package "$@"
    sts=$?
    local xtlcmd=$(get_act_xtlcmd $2 install $3 $4 "$5")
    if [ $sts -eq $STS_SUCCESS ]; then
      local cmd="wlog \"$lm$pkgname: installed by $xtlcmd\""
    else
      local cmd="wlog \"$lm$pkgname could be installed by $xtlcmd\""
    fi
    eval $cmd
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  return(0) #dry_status_package">>~/$THIS.his; fi    #debug
    return $STS_SUCCESS
}

do_dry_version_package() {
# do_dry_version_package(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_version_package($1 $2 $3 $4 $5)">>~/$THIS.his; fi    #debug
    local pkgversion
    local xtlcmd
    local cmd
    local lm x=$((prdstk_level*2))
    # local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    [ $x -eq 0 ]||eval printf -v lm '%.s-' {1..$x}
    do_1_status_package "$@"
    if [ $? -ne $STS_SUCCESS ]; then
      local xtlcmd=$(get_act_xtlcmd $2 install $3 $4 "$5")
      if [ -z "$xtlcmd" ]; then
        xtlcmd=$(get_act_xtlcmd $2 "" $3 $4 "$5")
      fi
      cmd="wlog \"$lm$pkgname should be installed by $xtlcmd\""
    else
      pkgversion=$(get_pkg_ver $2 $3 $4 "$5")
      if [ -z "$pkgversion" ]; then
        pkgversion="$pkgname: unknown version"
      fi
      if [ $opt_quiet -gt 0 ]; then
        cmd="wlog \"$pkgversion\""
      else
        cmd="wlog \"$lm$pkgname: $pkgversion\""
      fi
    fi
    eval $cmd
    return $STS_SUCCESS
}

do_dry_whatis_package() {
# do_dry_whatis_package(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_dry_whatis_package($1 $2 $3)">>~/$THIS.his; fi    #debug
    local lm x=$((prdstk_level*2))
    # local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    [ $x -eq 0 ]||eval printf -v lm '%.s-' {1..$x}
    local xtlcmd=$(get_act_xtlcmd $2 install $3 $4 "$5")
    if [ -z "$xtlcmd" ]; then
      xtlcmd=$(get_act_xtlcmd $2 "" $3 $4 "$5")
    fi
    local svcname=$(get_prm_value "${2}_svcname")
    local cmdname=$(get_prm_value "${2}_cmdname")
    local vfycmd=$(get_prm_value "${cmdname}_vfycmd")
    if [ -n "$vfycmd" ]; then
      local msg="$lm$2 (by $xtlcmd)($vfycmd)"
    else
      local msg="$lm$2 (by $xtlcmd)"
    fi
    test_msg "$msg"
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  return(0) #do_dry_whatis_package">>~/$THIS.his; fi    #debug
    return $STS_SUCCESS
}

end_remove() {
# end_remove(action OPTS)
    local cmd=
    if [ "$FH" == "Debian" ]; then
      cmd="apt-get autoremove"
      if [[ $2 =~ J ]]; then
        cmd="# $cmd"
      fi
    fi
    if [ -n "$cmd" ]; then
      run_traced "$cmd"
    fi
    return $STS_SUCCESS
}

get_ver_num() {
    local xtlver=$(echo "$1"|grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)'|awk -F. '{print $1*10000 + $2*100 + $3}')
    if [ -z "$xtlver" ]; then xtlver="0"; fi
    echo $xtlver
}

cmp_ver() {
# cmp_ver(cur_ver op req_ver)
    local curver=$(get_ver_num $1)
    local reqver=$(get_ver_num $3)
    if [ -z "$curver" ]; then
      curver=$reqver
    fi
    local sts=1
    if [ -z "$2" ]; then
      sts=0
    elif [ "$2" == "==" ]; then
      if [ $curver -eq $reqver ]; then sts=0; fi
    elif [ "$2" == ">=" ]; then
      if [ $curver -ge $reqver ]; then sts=0; fi
    elif [ "$2" == "<" ]; then
      if [ $curver -lt $reqver ]; then sts=0; fi
    elif [ "$2" == "<=" ]; then
      if [ $curver -le $reqver ]; then sts=0; fi
    elif [ "$2" == ">" ]; then
      if [ $curver -gt $reqver ]; then sts=0; fi
    elif [ "$2" == "!=" ]; then
      if [ $curver -ne $reqver ]; then sts=0; fi
    elif [ "$2" == "<>" ]; then
      if [ $curver -ne $reqver ]; then sts=0; fi
    fi
    return $sts
}

satisfy_request() {
# satisfy_request(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "satisfy_request($1 $2 $3)">>~/$THIS.his; fi    #debug
    local sts=127
    local s
    local pkgname=$2
    local ReqPkgList="$(get_prm_value ${pkgname}_ReqPkgList)"
    ReqPkgList="${ReqPkgList//,/ }"
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "    ${pkgname}_ReqPkgList=$ReqPkgList">>~/$THIS.his; fi    #debug
    local xtlcmd=$(get_act_xtlcmd $2 install $3 $4 "")
    if [ "$xtlcmd" == "git" -o "$xtlcmd" == "wget" ]; then
      if [[ "$ReqPkgList" =~ $xtlcmd ]]; then
        :
      else
        local ReqPkgList="$ReqPkgList $xtlcmd"
      fi
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  REQ=$ReqPkgList">>~/$THIS.his; fi    #debug
    if [ "$1" == "install" -a -n "$ReqPkgList" ]; then
      ((prdstk_level++))
      if [[ $3 =~ b ]]; then local x="-qb"; else local x="-q"; fi
      for p in $ReqPkgList; do
        realname=$(get_realname $p $1 $3)
        if $(please status $realname $x "$4" ""); then
          [ $sts -eq 127 ] && sts=$STS_SUCCESS
        else
          please install $realname $3 "$4" ""
          s=$?
          [ $sts -eq 127 ] && sts=$s
          [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
        fi
      done
      ((prdstk_level--))
    fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  return($sts) #satisfy_request">>~/$THIS.his; fi    #debug
    return $sts
}

do_action_subpkg() {
# do_action_subpkg(pfx action pkgname OPTS [param] [SPECIMEN])
    if [[ $4 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_action_subpkg($1 $2 $3 $4)">>~/$THIS.his; fi    #debug
    local p
    local x
    local rs=$(get_realname $3 $2 $4)
    local realname
    local opts=$4
    if [[ $4 =~ [qQ] ]]; then
      :
    else
      local iter=$(get_iter $3)
      local sts=$STS_SUCCESS
      if [ "$3" != "$iter" ]; then
        for p in $iter; do
          if [ "$p" != "$3" -a "$p" != "$rs" ]; then
            # realname=$(get_realname $p $2 $4)
            # do_action_subpkg "$1" $2 $realname ${opts}Q
            do_action_subpkg "$1" $2 $p ${opts}Q
            sts=$?
            if [ $sts -ne $STS_SUCCESS ]; then
              break
            fi
          fi
        done
      else
        do_action_subpkg "$1" $2 $3 ${opts}Q $5 "$6"
        sts=$?
      fi
      if [[ $4 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  return($sts) #do_action_subpkg">>~/$THIS.his; fi    #debug
      return $sts
    fi
    verbose_msg "Analyzing $3"
    opts=${opts//Q/}
    opts=${opts//q/}
    please $1$2 $3 $opts "$4" "$5" "$6"
    sts=$?
    if [[ $4 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  return($sts) #do_action_subpkg">>~/$THIS.his; fi    #debug
    return $sts
}


do_act_all_deppkgs() {
# do_act_all_deppkgs(pfx action pkgname OPTS [param] [SPECIMEN])
    if [[ $4 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_act_all_deppkgs($1 $2 $3 $4)">>~/$THIS.his; fi    #debug
    local sts=$STS_SUCCESS
    local s
    local BOPlist="$(get_prm_value BOP_$3)"
    if [[ $4 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  BOPlist=$BOPlist($prdstk_level<$opt_depth)">>~/$THIS.his; fi    #debug
    if [ -n "$BOPlist" -a $prdstk_level -lt $opt_depth ]; then
      ((prdstk_level++))
      local p
      for p in $BOPlist; do
        do_action_subpkg "$1" $2 $p $4 $5 "$6"
        s=$?
        [ $sts -eq 127 ] && sts=$s
        [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
      done
      ((prdstk_level--))
    fi
    if [[ $4 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "  return($sts) #do_act_all_deppkgs">>~/$THIS.his; fi    #debug
    return $sts
}

do_local_function() {
# do_local_function(prefix svcname action pkgname OPTS [param] [SPECIMEN])
    if [[ $5 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_local_function($1 $2 $3 $4 $5 $6 $7)">>~/$THIS.his; fi    #debug
    local sts=127
    local s
    if [[ $5 =~ I ]]; then
       local ij=I
    elif [[ $5 =~ J ]]; then
       local ij=J
    else
      local ij=
    fi
    local act=$3
    local pkg=$4
    if [ "$1" == "pre_" -a -z "$ij" ] && [[ " install update remove " =~ $3 ]]; then
      do_1_status_package $3 $pkg $5 "$6" "$7"
      sts=$?
      # if [ $sts -ne $STS_SUCCESS ] && [[ " $PIP_PYSTD_PKGS " =~ [[:space:]]$4[[:space:]] ]]; then
      #   pkg=python-$pkg
      #   do_1_status_package $3 $pkg $5 $6 "$7"
      #   sts=$?
      #   if [ $sts -ne $STS_SUCCESS ]; then
      #     pkg=$4
      #   elif [ "$4" != "pip" ]; then
      #     DETECTED_NOPIP="$DETECTED_NOPIP $4"
      #   fi
      # fi
      if [ "$3" == "install" ]; then
        if [ $sts -ne $STS_SUCCESS ]; then
          sts=$STS_SUCCESS
        elif $(is_virtualname $4); then
          if [ $opt_aaeD -lt 2 ]; then
             opt_aaeD=2
          fi
          if [ $opt_aaeR -lt 2 ]; then
            opt_aaeR=2
          fi
        else
          if [ $opt_aaeD -eq 1 -a $prdstk_level -gt 0 ] || [ $opt_aaeR -eq 1 -a $prdstk_level -eq 0 ]; then
            ij=I
            DETECTED_YES="$DETECTED_YES $4"
          elif [ $opt_aaeD -eq 2 -a $prdstk_level -gt 0 ] || [ $opt_aaeR -eq 2 -a $prdstk_level -eq 0 ]; then
            ij=I
            DETECTED_YES="$DETECTED_YES $4"
          elif [ $opt_aaeD -eq 3 -a $prdstk_level -gt 0 ] || [ $opt_aaeR -eq 3 -a $prdstk_level -eq 0 ]; then
            act="update"
            DETECTED_UPD="$DETECTED_UPD $4"
          else
            return $STS_FAILED
          fi
        fi
      elif [ "$3" == "update" -a $sts -ne $STS_SUCCESS ]; then
        sts=$STS_SUCCESS
        if [ $opt_aaeD -eq 1 -a $prdstk_level -gt 0 ] || [ $opt_aaeR -eq 1 -a $prdstk_level -eq 0 ]; then
          ij=J
          DETECTED_NO="$DETECTED_NO $4"
        elif [ $opt_aaeD -ge 2 -a $prdstk_level -gt 0 ] || [ $opt_aaeR -ge 2 -a $prdstk_level -eq 0 ]; then
          act="install"
          DETECTED_INS="$DETECTED_INS $4"
        else
          return $STS_FAILED
        fi
      elif [ "$3" == "remove" -a $sts -ne $STS_SUCCESS ]; then
        sts=$STS_SUCCESS
        if [ $opt_aaeD -ge 1 -a $prdstk_level -gt 0 ] || [ $opt_aaeR -ge 1 -a $prdstk_level -eq 0 ]; then
          ij=J
          DETECTED_NO="$DETECTED_NO $4"
        else
          return $STS_FAILED
        fi
      elif [ "$3" == "remove" -a $prdstk_level -ge $opt_depth ]; then
        ij=J
        DETECTED_NO="$DETECTED_NO $4"
      fi
    fi
    if $(is_virtualname $4); then
      local X="_by_NULL"
    else
      local xtlcmd=$(get_act_xtlcmd $4 $act $5 $6 "$7")
      if [ -n "$2" ]; then
        local X="_$4 _by_$xtlcmd _service _package"
      else
        local X="_$4 _by_$xtlcmd _package"
      fi
    fi
    local cmd x c d
    for c in _${act} _; do
      for x in $X; do
        if [ "$x" == "_service" -o "$x" == "_package" -o $opt_dry_run -eq 0 ]; then
          local D="_dry _"
        else
          local D="_dry"
        fi
        for d in $D; do
          cmd=${1}$d$c$x
          cmd=${cmd//__/_}
          if [ "$(type -t $cmd)" == "function" ]; then
            eval $cmd $act $4 $5$ij $6 "'$7'"
            s=$?
            [ $sts -eq 127 ] && sts=$s
            [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
            if [ $sts -eq $STS_SUCCESS ]; then
              cmd=${1}_${act}_ports
              cmd=${cmd//__/_}
              if [ "$(type -t $cmd)" == "function" ]; then
                eval $cmd $act $4 $5$ij $6 "'$7'"
                s=$?
                [ $sts -eq 127 ] && sts=$s
                [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
              fi
            fi
            return $sts
          fi
        done
      done
    done
    cmd=${1}_${act}_ports
    cmd=${cmd//__/_}
    if [ "$(type -t $cmd)" == "function" ]; then
      eval $cmd $act $4 $5$ij $6 "$7"
      s=$?
      [ $sts -eq 127 ] && sts=$s
      [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
    fi
    return $sts
}

do_local_function_BOP() {
# do_local_function_BOP(prefix svcname action pkgname OPTS [param] [SPECIMEN])
    if [[ $5 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_local_function_BOP($1 $2 $3 $4 $5 $6 $7)">>~/$THIS.his; fi    #debug
    local sts=127
    local s
    if [ "$1" == "pre_" ]; then
      satisfy_request $3 $4 $5 $6 "$7"
      sts=$?
    fi
    do_local_function "$1" "$2" $3 $4 $5 $6 "$7"
    s=$?
    [ $sts -eq 127 ] && sts=$s
    [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$s
    local BOPlist="$(get_prm_value BOP_$4)"
    if [ -n "$BOPlist" ] && [ $sts -eq $STS_SUCCESS -o $sts -eq 127 ]; then
      if [ $prdstk_level -lt $opt_depth ]; then
        local opts=${5//I/}
        opts=${opts//J/}
        do_act_all_deppkgs "$1" $3 $4 $opts $6 "$7"
        sts=$?
      fi
    fi
    return $sts
}

do_iter_prod() {
# do_iter_prod(action pkgname OPTS [param] [SPECIMEN])
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "do_iter_prod($1 $2 $3 $4 $5)">>~/$THIS.his; fi #debug
    local pfx=$(get_pfxaction $1)
    local act=$(get_realaction $1)
    local pkgname=$(get_realname $2 $act $3)
    local p x
    if [[ $3 =~ [qQ] ]]; then
      return 127
    fi
    if [ "$act" == "info" ]; then
      return 127
    fi
    local iter=$(get_iter $pkgname $3)
    if [ "$act" == "tellme" ]; then
      local specimen=$(get_specimen $2 "$act" $3)
      do_1_tellme_package $1 $2 $3 $4 "$specimen"
      return $?
    fi
    if [ "$pkgname" == "$iter" ]; then
      return 127
    fi
    for p in $iter; do
      if [ "$p" == "$2" -o "$p" == "$pkgname" ]; then
         if [[ $3 =~ b ]]; then local x="-Qb"; else local x="-Q"; fi
         please $1 $p $x "$4" "$5"
       else
         please $1 $p $3 "$4" "$5"
       fi
       local sts=$?
       if [ $sts -ne $STS_SUCCESS ]; then
         break
       fi
    done
    return $sts
}

please() {
# please(action pkgname OPTS [param] [SPECIMEN])
# return: sts
# TODO [Debian] aptitude search 'pkgname'
# TODO [RHEL] yum search 'pkgname'
    if [ -z "$prdstk_level" ]; then prdstk_level=0; fi
    if [ -z "$conf_level" ]; then conf_level=0; fi
    if [[ $3 =~ b ]]; then printf "%${prdstk_level}.${prdstk_level}s %s\n" " " "please($1 $2 $3 $4 $5)">>~/$THIS.his; fi #debug
    find_conf_pkg "$2"
    do_iter_prod "$@"
    local sts=$?
    if [ $sts -ne 127 ]; then
      return $sts
    fi
    sts=$STS_SUCCESS
    local lm x=$((prdstk_level*2))
    # local lm=$(printf "%${x}.${x}s" " "|sed y'/ /-/')
    [ $x -eq 0 ]||eval printf -v lm '%.s-' {1..$x}
    local pfx=$(get_pfxaction $1)
    local act=$(get_realaction $1)
    if [ "$act" == "info" ]; then
      local pkgname=$2
    else
      local pkgname=$(get_realname $2 "$act" $3)
      find_conf_pkg "$2"
    fi
    local specimen=$(get_specimen $2 "$act" $3)
    if [ -n "$5" -a -z "$specimen" ]; then
      local specimen="$5"
    fi
    local BOPcmd=do_dry_${act}_package
    local BOPcmd1=do_1_${act}_package
    local BOPcmd2=
    local svcname=$(get_prm_value "${pkgname}_svcname")
    if [ -z "$pfx" ]; then
      if [ "$(type -t $BOPcmd1)" == "function" ] && [[  "$3" =~ q ]]; then
        eval $BOPcmd1 $act $pkgname $3 $4 "$specimen"
        return $?
      elif [ "$(type -t $BOPcmd1)" == "function" -a "$(type -t $BOPcmd)" != "function" ]; then
        eval $BOPcmd1 $act $pkgname $3 $4 "$specimen"
        return $?
      fi
    fi
    local s
    if [ -z "$pfx" -o "$pfx" == "pre_" ]; then
      [ $sts -eq $STS_SUCCESS ] && do_local_function_BOP "pre_" "$svcname" "$act" "$pkgname" "$3" "$4" "$specimen"
      s=$?
      [ $sts -eq $STS_SUCCESS ] && [ $s -ne 127 ] && [ $s -ne $STS_SUCCESS ] && sts=$s
    fi
    local ij=
    if [ "$pfx" != "pre_" ]; then
      if [[ " $DETECTED_YES " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        local ij=I
      elif [[ " $DETECTED_NO " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        local ij=J
      elif [[ " $DETECTED_UPD " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        act="update"
      elif [[ " $DETECTED_INS " =~ [[:space:]]$pkgname[[:space:]] ]]; then
        act="install"
      fi
    fi
    if [ -z "$pfx" -o "$pfx" == "do_" ]; then
      [ $sts -eq $STS_SUCCESS ] && do_local_function_BOP "do_" "$svcname" "$act" "$pkgname" "$3$ij" "$4" "$specimen"
      s=$?
      [ $sts -eq $STS_SUCCESS ] && [ $s -ne $STS_SUCCESS ] && sts=$?
    fi
    if [ -z "$pfx" -o "$pfx" == "post_" ]; then
      [ $sts -eq $STS_SUCCESS ] && do_local_function_BOP "post_" "$svcname" "$act" "$pkgname" "$3$ij" "$4" "$specimen"
      s=$?
      [ $sts -eq $STS_SUCCESS ] && [ $s -ne 127 ] && [ $s -ne $STS_SUCCESS ] && sts=$?
    fi
    if [ $sts -ne $STS_SUCCESS ] || [[  "$3" =~ q ]]; then
      return $sts
    fi
    if [ $prdstk_level -eq 0 ]; then
      BOPcmd=end_${act}
      if [ "$(type -t $BOPcmd)" == "function" ]; then
        eval $BOPcmd $act $3$ij $4 $5
      fi
    fi
    return $sts
}

__lisa_install_odoo() {
# lisa_install_odoo::pkgname opt_yes xtlcmd, stscmd STD_PKGS
    # init_odoo_env
    git_opts=""
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
    else
      local ov_iter=$opt_odoo
      git_opts="--single-branch"
    fi
    if [ $opt_dev -eq 0 ]; then
      git_opts="--depth 1 $git_opts"
    fi
    for ov in $ov_iter; do
      local xtl=1
      local v=$(_inq "odoo")
      if [ -n "$v" -a -d /opt/odoo/$ov.0 ]; then
        cd /opt/odoo/$ov.0
        git status &>/dev/null
        if [ $? -ne 128 ]; then xtl=0; fi
      fi
      run_traced "cd /opt/odoo"
      if [ $xtl -gt 0 ]; then
        run_traced "git clone https://github.com/$gitrep.git $ov.0 -b $ov.0 $git_opts" "odoo" #debug
        if [ -n "$opt_osub" ]; then
          lisa_install_submodule_by_git "$opt_osub" "$ov"
        fi
        if [ -n "$opt_sub" ]; then
          lisa_install_submodule_by_git "$opt_sub" "$ov"
        fi
        if [ -n "$opt_locale" ]; then
          lisa_install_submodule_by_git "$opt_locale" "$ov"
        fi
      fi #debug
      run_traced "chown -R odoo:odoo $ov.0/"
      run_traced "cd /opt/odoo/$ov.0"
      run_traced "git checkout $ov.0"
      if [ $test_mode -eq 0 -a -f /opt/odoo/$ov.0/requirements.txt ]; then
        local f=/opt/odoo/7.0/requirements.txt
        local p n v r
        while IFS=\= read p n v; do
          r=$(lisa -q version $p)
          r=$(echo $r)
          if [ "$r" == "$v" ]; then
            elog "Package $p $r already installed"
          else
            r=$(lisa -q status $p|grep "could be")
            if [ -z "$r" ]; then
              run_traced "pip install $p --upgrade"
            else
              run_traced "pip install $p"
            fi
            r=$(lisa -q version $p)
            r=$(echo $r)
            if [ "$r" != "$v" ]; then
              elog "Package $p has invalid version $r: required $v"
            fi
          fi
        done < $f
      fi
    done
}

lisa_update_odoo() {
# lisa_install_lisa
    # init_odoo_env
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
    else
      local ov_iter=$opt_odoo
    fi
    for ov in $ov_iter; do
      local xtl=0
      if [ -d /opt/odoo/$ov.0 ]; then
        run_traced "cd /opt/odoo/$ov.0"
        if [ $test_mode -gt 0 ]; then
          :
        else
          git status &>/dev/null
        fi
        if [ $? -ne 128 ]; then xtl=1; fi
        if [ $xtl -gt 0 ]; then
          run_traced "git pull origin $ov.0" "odoo"
          if [ $test_mode -eq 0 ]; then
             opt_sub=$(grep "\[submodule" .gitmodules|awk '{print $2}'|tr -d "\"]"|tr "\n" " ")
          fi
          if [ -n "$opt_osub" ]; then
            lisa_install_submodule_by_git "$opt_osub" "$ov"
          fi
          if [ -n "$opt_sub" ]; then
            lisa_install_submodule_by_git "$opt_sub" "$ov"
          fi
          if [ -n "$opt_locale" ]; then
            lisa_install_submodule_by_git "$opt_locale" "$ov"
          fi
        fi
        run_traced "git checkout $ov.0"
      fi
    done
}

lisa_config_odoo() {
    if [ "$opt_odoo" == "*" -o -z "$opt_odoo" ]; then
      local ov_iter="9 8 7"
      local opt_multi="-m"
    else
      local ov_iter=$opt_odoo
      if [ $opt_mult -gt 0 ]; then
        local opt_multi="-m"
      else
        local opt_multi=""
      fi
    fi
    local userhome=$(sudo -u postgres -i eval 'echo "$HOME"')
    if [ -z "$userhome" ]; then
      userhome=$(grep postgres /etc/passwd|awk -F":" '{print $6}')
    fi
    if [ -f $userhome/.pgpass ]; then
      local pwd=$(grep odoo $userhome/.pgpass|awk -F: '{ print $5 }'|head -n1)
    else
      local pwd=
      while [ -z "$pwd" ]; do
        read -rsp"Type password for postgresql user access (no echo)>" pwd
        echo -e "\n"
        read -rsp"Retype password for validation>" pwd1
        echo -e "\n"
        if [ "$pwd" != "$pwd1" ]; then
          local pwd=
        fi
      done
    fi
    echo "*:*:*:odoo:$pwd">$userhome/.pgpass
    chown postgres:postgres $userhome/.pgpass
    chmod u=rw,g=,o= $userhome/.pgpass
    f_hba=$(findpkg "pg_hba.conf" "/var/lib /etc" "postgresql pgsql" "9.4 9.3 9.2 9.1 9.0 8.4" "data main")
    update_hba_conf $f_hba
    if [ -n "$f_hba" ]; then
      vi $f_hba
    fi
    for ov in $ov_iter; do
      if [ -n "$opt_multi" ]; then
        uu="odoo$ov"
        echo "*:*:*:$uu:$pwd">>$userhome/.pgpass
      elif [ "$ov" == "7" ]; then
        uu=openerp
      else
        uu=odoo
      fi
      local x=$(sudo -iupostgres psql -c \\dg|grep " $uu ")
      if [ -z "$x" ]; then
        elog "Create account $uu for postgres access by odoo"
        echo "Warning: store password you type in odoo config file"
        run_traced "sudo -iupostgres createuser --createdb --username postgres --no-createrole --no-superuser --no-password $uu"
      fi
      elog "Running odoo $ov to configure"
      if [ -f /opt/odoo/.openerp_serverrc ]; then
        rm -f /opt/odoo/.openerp_serverrc
      fi
      cmd="sudo -iuodoo /opt/odoo/$ov.0/openerp-server"
      cmd="$cmd --addons-path=/opt/odoo/$ov.0/openerp/addons,/opt/odoo/$ov.0/addons"
      for iso in ${opt_osub//,/ } ${opt_sub//,/ }; do
        # pn=$(get_locale_name "$iso")
        if [ -z "$pn" ]; then
          elog  "Invalid submodule name $iso"
        else
          # addons=$(get_locale_dir "$pn")
          if [ -d $addons ]; then
            cmd="$cmd,/opt/odoo/$ov.0/$addons"
          fi
        fi
      done
      for iso in ${opt_locale//,/ }; do
        # pn=$(get_locale_name "$iso")
        if [ -z "$pn" ]; then
          elog  "Invalid $iso in -l $opt_locale switch"
        else
          # addons=$(get_locale_dir "$pn")
          if [ -d $addons ]; then
            cmd="$cmd,/opt/odoo/$ov.0/$addons"
          fi
        fi
      done
      local xtl_pidfile=/var/run/odoo/$uu.pid
      local xtl_logfile=/var/log/odoo/${uu}-server.log
      cmd="$cmd -s --stop-after-init"
      cmd="$cmd --pidfile=$xtl_pidfile"
      cmd="$cmd --logfile=$xtl_logfile"
      cmd="$cmd --db_host=localhost"
      cmd="$cmd --db_user=$uu"
      cmd="$cmd --db_password=$pwd"
      if [ "$opt_multi" == "-m" ]; then
        cmd="$cmd --xmlrpc-port=816$ov"
      fi
      run_traced "$cmd"
      if [ -f /opt/odoo/.openerp_serverrc ]; then
        if [ $opt_dry_run -eq 0 ]; then
          sed -i "s:^data_dir *=.*Odoo:&$ov:" /opt/odoo/.openerp_serverrc
          [ -z "opt_yes" ] || vim /opt/odoo/.openerp_serverrc
        fi
        run_traced "cp /opt/odoo/.openerp_serverrc /etc/odoo/${uu}-server.conf"
        run_traced "chown odoo:odoo /etc/odoo/${uu}-server.conf"
        run_traced "chmod u+rw,g+r,o+r /etc/odoo/${uu}-server.conf"
        run_traced "$TDIR/lisa_bld_ods -E$FH -L$xtl_logfile -P$xtl_pidfile $opt_multi -O$ov ${uu}-server"
        run_traced "chown odoo:odoo ${uu}-server"
        run_traced "mv ${uu}-server /etc/init.d/"
      else
        elog "!Odoo error: configuration file not created!!"
      fi
    done
}

pre_config_odoo() {
    sysfile=/etc/group
    group=odoo
    if [ "$ODOO_GID" ]; then
      x=$(grep "^[^:]*:[^:]:$ODOO_GID[^0-9]" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        g=$(echo "$x"|awk -F: '{ print $1 }')
        if [ "$g" != "$group" ]; then
          wlog "# Required gid $ODOO_GID already assigned to $g"
        fi
      fi
    fi
    if [ -z $(grep "^$group:" $sysfile 2>/dev/null) ]; then
      if [ "$ODOO_GID" ]; then
        run_traced "groupadd -g $ODOO_GID $group"
      else
        run_traced "groupadd $group"
      fi
    fi
    if [ "$ODOO_GID" ]; then
      x=$(grep "^$group:.*" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        gid=$(echo "$x"|awk -F: '{ print $3 }')
        if [ "$gid" != "$ODOO_GID" ]; then
          run_traced "groupmod -g $ODOO_GID $group"
        fi
      fi
    fi
    sysfile=/etc/passwd
    user=odoo
    if [ "$ODOO_UID" ]; then
      x=$(grep "^[^:]*:[^:]:$ODOO_UID[^0-9]" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        u=$(echo "$x"|awk -F: '{ print $1 }')
        if [ "$u" != "$user" ]; then
          wlog "# Required uid $ODOO_UID already assigned to $u"
        fi
      fi
    fi
    if [ -z $(grep "^$user:" $sysfile 2>/dev/null) ]; then
      if [ ! -d /opt/odoo ]; then cmd="useradd -m"; else cmd="useradd"; fi
      if [ "$ODOO_UID" ]; then
        run_traced "$cmd -u "$ODOO_UID" -g odoo -d /opt/odoo -s /bin/bash $user"
      else
        run_traced "$cmd -r -g odoo -d /opt/odoo -s /bin/bash $user"
      fi
    fi
    if [ "$ODOO_UID" ]; then
      x=$(grep "^$user:.*" $sysfile 2>/dev/null)
      if [ "$x" ]; then
        uid=$(echo "$x"|awk -F: '{ print $3 }')
        if [ "$uid" != "$ODOO_UID" ]; then
          run_traced "usermod -u $ODOO_UID $user"
        fi
      fi
    fi
}

post_config_odoo() {
    local r=$(get_realname postresql) #tny!!
    run_traced "service $r restart"
}

pre_install_odoo() {
    if [ "$FH" == "RHEL" ]; then
      if [ ! -f /etc/yum.repos.d/odoo.repo ]; then
        run_traced "yum-config-manager --add-repo=https://nightly.odoo.com/8.0/nightly/rpm/odoo.repo"
      fi
    elif [ "$FH" == "Debian" ]; then
      if [ -z "$(apt-key list|grep info@odoo.com 2>/dev/null)" ]; then
        run_traced "wget -O - https://nightly.odoo.com/odoo.key | apt-key add -"
      fi
      if [ -z "$(cat /etc/apt/sources.list|grep 'nightly.odoo.com' 2>/dev/null)" ]; then
       run_traced "echo 'deb http://nightly.odoo.com/8.0/nightly/deb/ ./' >> /etc/apt/sources.list"
      fi
    fi
    pre_config_odoo
}

post_install_odoo() {
    local p
    p=etc
    run_traced "mkdir -p /$p/odoo"
    run_traced "chown odoo:odoo /$p/odoo"
    run_traced "chmod -R u+rw,g+r,o+r /$p/odoo"
    for p in log lib run; do
      run_traced "mkdir -p /var/$p/odoo"
      run_traced "chown odoo:odoo /var/$p/odoo"
      run_traced "chmod -R u+rw,g+r,o+r /var/$p/odoo"
    done
}

post_update_odoo() {
    post_install_odoo
}

post_config_postgresql() {
    run_traced "service $2 initdb"
    run_traced "chkconfig $1 on"
}

post_config_postgresql-server() {
    if [ "$DISTO" == "CentOS7" ]; then
      run_traced "postgresql-setup initdb"
    else
      run_traced "service $2 initdb"
    fi
    run_traced "chkconfig $2 on"
}

post_config_mysql-server() {
    if [ "$FH" == "RHEL" ]; then
      run_traced "mysql_secure_installation"
      run_traced "chkconfig mysqld on"
    else
      for cmd in mysql_install_db mysql_secure_installation; do
        run_traced "$cmd"
      done
      run_traced "chkconfig mysql on"
    fi
}

post_config_mariadb-server() {
    if [ "$FH" == "RHEL" ]; then
      run_traced "mysql_secure_installation"
    fi
    run_traced "chkconfig mariadb on"
}


test_install() {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "." ]; then p=; fi
    ((tst_ctr++))
    elog "Test $tst_ctr [$FH]: please install '$p'"
    if [ "$p" == "odoo" ]; then
      local opt_osub="account-closing account-financial-tools account-invoicing account-payment bank-payment knowledge partner-contact stock-logistics-workflow webkit-tools"
      if [ "$FH" == "RHEL" ]; then
        echo "--> # pre_install_odoo failed">>$ftest
        echo "--> cd /opt/odoo">>$ftest
        echo "--> git clone https://github.com/odoo/odoo.git 7.0 -b 7.0 --depth 1 --single-branch">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          # echo "--> git remote add upstream https://github.com/OCA/${d}.git">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> chown -R odoo:odoo $opt_odoo.0/">>$ftest
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> yum -y update python-lxml">>$ftest
        echo "--> yum -y update python-psycopg2">>$ftest
        echo "--> yum -y update python-simplejson">>$ftest
        echo "--> pip  install pytz">>$ftest
      else
        echo "--> # pre_install_odoo failed">>$ftest
        echo "--> cd /opt/odoo">>$ftest
        echo "--> git clone https://github.com/odoo/odoo.git 7.0 -b 7.0 --depth 1 --single-branch">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          # echo "--> git remote add upstream https://github.com/OCA/${d}.git">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> chown -R odoo:odoo $opt_odoo.0/">>$ftest
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> apt-get -y install ghostscript">>$ftest
        echo "--> apt-get -y install libart-2.0-2">>$ftest
        # echo "--> apt-get -y install python-libxml2">>$ftest
        echo "--> apt-get -y install libcupsfilters1">>$ftest
        echo "--> apt-get -y install libcupsimage2">>$ftest
        echo "--> apt-get -y install libgs9">>$ftest
        echo "--> apt-get -y install libgs9-common">>$ftest
        echo "--> apt-get -y install libijs-0.35">>$ftest
        echo "--> apt-get -y install libjbig2dec0">>$ftest
        echo "--> apt-get -y install liblcms2-2">>$ftest
        echo "--> apt-get -y install libpaper-utils">>$ftest
        echo "--> apt-get -y install libpaper1">>$ftest
        echo "--> apt-get -y install libpoppler44">>$ftest
        echo "--> apt-get -y install libtidy-0.99-0">>$ftest
        echo "--> apt-get -y install libwebp5">>$ftest
        echo "--> apt-get -y install libwebpmux1">>$ftest
        echo "--> apt-get -y install poppler-data">>$ftest
        echo "--> apt-get -y install poppler-utils">>$ftest
        echo "--> apt-get -y update python-babel">>$ftest
        echo "--> apt-get -y upgrade python-babel">>$ftest
        echo "--> apt-get -y install python-babel-localedata">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> apt-get -y install python-decorator">>$ftest
        echo "--> apt-get -y install python-docutils">>$ftest
        echo "--> apt-get -y install python-feedparser">>$ftest
        echo "--> apt-get -y install python-gevent">>$ftest
        echo "--> apt-get -y install python-greenlet">>$ftest
        echo "--> apt-get -y install python-imaging">>$ftest
        echo "--> apt-get -y install python-jinja2">>$ftest
        echo "--> apt-get -y install python-mako">>$ftest
        echo "--> apt-get -y install python-markupsafe">>$ftest
        echo "--> pip  install python-openid">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> apt-get -y install python-pil">>$ftest
        echo "--> apt-get -y install python-psutil">>$ftest
        echo "--> apt-get -y install python-pybabel">>$ftest
        echo "--> apt-get -y install python-pychart">>$ftest
        echo "--> apt-get -y install python-pygments">>$ftest
        echo "--> apt-get -y install python-pyinotify">>$ftest
        echo "--> apt-get -y install python-pyparsing">>$ftest
        echo "--> apt-get -y install python-pypdf">>$ftest
        echo "--> apt-get -y install python-renderpm">>$ftest
        echo "--> apt-get -y install python-reportlab">>$ftest
        echo "--> apt-get -y install python-reportlab-accel">>$ftest
        echo "--> apt-get -y install python-roman">>$ftest
        echo "--> apt-get -y install python-suds">>$ftest
        echo "--> apt-get -y install python-unittest2">>$ftest
        echo "--> apt-get -y install python-utidylib">>$ftest
        echo "--> apt-get -y install python-vobject">>$ftest
        echo "--> apt-get -y install python-werkzeug">>$ftest
        echo "--> apt-get -y install docutils-common">>$ftest
        echo "--> apt-get -y install docutils-doc">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-trusty-amd64.deb"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> apt-get update $pn">>$ftest
        echo "--> apt-get upgrade $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
        echo "--> pip  install unicodecsv">>$ftest
        echo "--> pip  install pydot">>$ftest
        echo "--> pip  install vatnumber">>$ftest
        echo "--> pip  install BeautifulSoup">>$ftest
      fi
    fi
    if [ "$p" ]; then
      please install $p>$fout
      if [ "$(diff -q $fout $ftest)" ]; then
        elog "Test Failed"
        exit $STS_FAILED
      fi
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

test_update() {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "odoo" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git pull origin 7.0">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> pip  install Babel">>$ftest
        echo "--> yum -y install dejavu-fonts-common">>$ftest
        echo "--> yum -y install dejavu-sans-fonts">>$ftest
        echo "--> yum -y install fontpackages-filesystem">>$ftest
        # echo "--> yum -y install jbigkit-libs">>$ftest
        echo "--> yum -y install libjpeg-turbo">>$ftest
        echo "--> yum -y install libtiff">>$ftest
        # echo "--> yum -y install libwebp">>$ftest
        # echo "--> yum -y install libxml2-python">>$ftest
        # echo "--> yum -y install libxslt-python">>$ftest
        echo "--> yum -y install libyaml">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> yum -y install pyOpenSSL">>$ftest
        echo "--> yum -y install pychart">>$ftest
        echo "--> yum -y install pyparsing">>$ftest
        echo "--> yum -y update python-babel">>$ftest
        echo "--> yum -y install python-beaker">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> yum -y install python-docutils">>$ftest
        echo "--> yum -y install python-feedparser">>$ftest
        echo "--> yum -y install python-jinja2">>$ftest
        echo "--> pip  install python-ldap">>$ftest
        echo "--> yum -y update python-lxml">>$ftest
        echo "--> yum -y install python-mako">>$ftest
        echo "--> yum -y install python-markupsafe">>$ftest
        echo "--> pip  install python-openid">>$ftest
        ## echo "--> pip  install passlib">>$ftest
        # echo "--> yum -y install python-paste">>$ftest
        # echo "--> yum -y install python-pillow">>$ftest
        echo "--> yum -y install python-psutil">>$ftest
        echo "--> yum -y update python-psycopg2">>$ftest
        echo "--> yum -y install python-reportlab">>$ftest
        # echo "--> yum -y install python-requests">>$ftest
        echo "--> yum -y update python-simplejson">>$ftest
        # echo "--> yum -y install python-six">>$ftest
        # echo "--> yum -y install python-tempita">>$ftest
        echo "--> yum -y install python-unittest2">>$ftest
        echo "--> pip  install urllib3">>$ftest
        echo "--> yum -y install python-vobject">>$ftest
        echo "--> yum -y install python-werkzeug">>$ftest
        echo "--> pip  install pytz">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-centos7-amd64.rpm"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> rpm -U $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
      else
        echo "--> cd /opt/odoo/7.0">>$ftest
        echo "--> git pull origin 7.0">>$ftest
        for d in ${opt_osub//,/ }; do
          echo "--> cd /opt/odoo/7.0">>$ftest
          echo "--> echo \"$d/\">>.gitignore">>$ftest
          echo "--> git clone -b 7.0 https://github.com/OCA/${d}.git ${d} --depth 1 --single-branch">>$ftest
          echo "--> git submodule add -b 7.0 -f https://github.com/OCA/${d}.git ${d}">>$ftest
          echo "--> cd /opt/odoo/7.0">>$ftest
        done
        echo "--> git checkout 7.0">>$ftest
        echo "--> mkdir -p /etc/odoo">>$ftest
        echo "--> chown odoo:odoo /etc/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /etc/odoo">>$ftest
        echo "--> mkdir -p /var/log/odoo">>$ftest
        echo "--> chown odoo:odoo /var/log/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/log/odoo">>$ftest
        echo "--> mkdir -p /var/lib/odoo">>$ftest
        echo "--> chown odoo:odoo /var/lib/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/lib/odoo">>$ftest
        echo "--> mkdir -p /var/run/odoo">>$ftest
        echo "--> chown odoo:odoo /var/run/odoo">>$ftest
        echo "--> chmod -R u+rw,g+r,o+r /var/run/odoo">>$ftest
        echo "--> apt-get -y install ghostscript">>$ftest
        echo "--> apt-get -y install libart-2.0-2">>$ftest
        # echo "--> apt-get -y install python-libxml2">>$ftest
        echo "--> apt-get -y install libcupsfilters1">>$ftest
        echo "--> apt-get -y install libcupsimage2">>$ftest
        echo "--> apt-get -y install libgs9">>$ftest
        echo "--> apt-get -y install libgs9-common">>$ftest
        echo "--> apt-get -y install libijs-0.35">>$ftest
        echo "--> apt-get -y install libjbig2dec0">>$ftest
        echo "--> apt-get -y install liblcms2-2">>$ftest
        echo "--> apt-get -y install libpaper-utils">>$ftest
        echo "--> apt-get -y install libpaper1">>$ftest
        echo "--> apt-get -y install libpoppler44">>$ftest
        echo "--> apt-get -y install libtidy-0.99-0">>$ftest
        echo "--> apt-get -y install libwebp5">>$ftest
        echo "--> apt-get -y install libwebpmux1">>$ftest
        echo "--> apt-get -y install poppler-data">>$ftest
        echo "--> apt-get -y install poppler-utils">>$ftest
        echo "--> apt-get -y update python-babel">>$ftest
        echo "--> apt-get -y upgrade python-babel">>$ftest
        echo "--> apt-get -y install python-babel-localedata">>$ftest
        echo "--> pip install python-dateutil">>$ftest
        echo "--> apt-get -y install python-decorator">>$ftest
        echo "--> apt-get -y install python-docutils">>$ftest
        echo "--> apt-get -y install python-feedparser">>$ftest
        echo "--> apt-get -y install python-gevent">>$ftest
        echo "--> apt-get -y install python-greenlet">>$ftest
        echo "--> apt-get -y install python-imaging">>$ftest
        echo "--> apt-get -y install python-jinja2">>$ftest
        echo "--> apt-get -y install python-mako">>$ftest
        echo "--> apt-get -y install python-markupsafe">>$ftest
        echo "--> pip  install python-openid">>$ftest
        echo "--> pip  install passlib">>$ftest
        echo "--> apt-get -y install python-pil">>$ftest
        echo "--> apt-get -y install python-psutil">>$ftest
        echo "--> apt-get -y install python-pybabel">>$ftest
        echo "--> apt-get -y install python-pychart">>$ftest
        echo "--> apt-get -y install python-pygments">>$ftest
        echo "--> apt-get -y install python-pyinotify">>$ftest
        echo "--> apt-get -y install python-pyparsing">>$ftest
        echo "--> apt-get -y install python-pypdf">>$ftest
        echo "--> apt-get -y install python-renderpm">>$ftest
        echo "--> apt-get -y install python-reportlab">>$ftest
        echo "--> apt-get -y install python-reportlab-accel">>$ftest
        echo "--> apt-get -y install python-roman">>$ftest
        echo "--> apt-get -y install python-suds">>$ftest
        echo "--> apt-get -y install python-unittest2">>$ftest
        echo "--> apt-get -y install python-utidylib">>$ftest
        echo "--> apt-get -y install python-vobject">>$ftest
        echo "--> apt-get -y install python-werkzeug">>$ftest
        echo "--> apt-get -y install docutils-common">>$ftest
        echo "--> apt-get -y install docutils-doc">>$ftest
        echo "--> pip  install unidecode">>$ftest
        local pn="wkhtmltox-0.12.2.1_linux-trusty-amd64.deb"
        local URL="http://download.gna.org/wkhtmltopdf/0.12/0.12.2.1"
        echo "--> cd /tmp">>$ftest
        echo "--> wget $URL/$pn">>$ftest
        echo "--> apt-get update $pn">>$ftest
        echo "--> apt-get upgrade $pn">>$ftest
        echo "--> rm -f $pn">>$ftest
      fi
    fi
    please update $p>$fout
    if [ "$(diff -q $fout $ftest)" ]; then
      elog "Test Failed"
      exit $STS_FAILED
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

test_remove() {
  fout=~/$THIS.out
  ftest=~/$THIS.test
  local jj=0
  while ((jj<${#PNLX[*]})); do
    if [ -f $ftest ]; then rm -f $ftest; fi
    p="${PNLX[jj]}"
    if [ "$p" == "." ]; then p=; fi
    ((tst_ctr++))
    elog "Test $tst_ctr [$FH]: 'please remove $p'"
    if [ "$p" == "odoo" ]; then
      if [ "$FH" == "RHEL" ]; then
        echo "--> yum -y remove odoo">>$ftest
        echo "python-babel should be removed">>$ftest
        echo "python-lxml should be removed">>$ftest
        echo "python-psycopg2 should be removed">>$ftest
        echo "python-simplejson should be removed">>$ftest
        echo "wkhtmltopdf should be removed">>$ftest
      else
        echo "--> apt-get -y remove odoo">>$ftest
        echo "python-babel should be removed">>$ftest
        echo "wkhtmltopdf should be removed">>$ftest
        echo "--> apt-get autoremove">>$ftest
      fi
    fi
    if [ "$p" ]; then
      please remove $p>$fout
      if [ "$(diff -q $fout $ftest)" ]; then
        elog "Test Failed"
        exit $STS_FAILED
      fi
    fi
    ((++jj))
  done
  if [ -f $fout ]; then rm -f $fout; fi
  if [ -f $ftest ]; then rm -f $ftest; fi
}

# main
OPTOPTS=(h        b       c        D       d         E       e       g       H        I        i      J        L         l          m        n           o       p         P          q         s         T         u       V           v           y       1)
OPTDEST=(opt_help opt_dbg opt_conf opt_dev opt_depth opt_osf opt_aae opt_grf opt_host opt_xtly opt_if opt_xtln opt_log   opt_locale opt_mult opt_dry_run opt_oed opt_nopip opt_pwd    opt_quiet opt_sub   test_mode use2xtl opt_version opt_verbose opt_yes opt_1st)
OPTACTI=(1        1       "="      1       "="       "="     "="     1       "="      "="      "="    "="      "="       "="        1        1           "="     1         "="        1         "="       1         "="     "*"         1           1       1)
OPTDEFL=(1        0       ""       0       ""        ""      ""      0       ""       ""       ""     ""       ""        ""         0        0           ""      0         ""         0         ""        0         ""      ""          0           0       0)
OPTMETA=("help"   "dbg"   "file"   "dev"   "number"  "disto" "0-4"   "win"   "host"   "pkg(s)" "file" "pkg(s)" "logfile" "iso3166"  "multi"  "noop"      "disto" "pip"     "password" "quiet"   "modules" "teste"   "file"  "version"   "verbose"   "yes"   "first")
OPTHELP=("this help, type '$THIS help' for furthermore info"\
 "undocumented"\
 "configuration file (def /etc/lisa/lisa.conf)"\
 "add development package(s)"\
 "max depth level"\
 "emulate Linux distribution; may be Ubuntu[12|14],CentOS[6|7]. Use carefully!"\
 "action on error root,dependecies (0=exit, 1=ignore, 2=if upd do install, 3=do upd/install)"\
 "add graphical interface package(s)"\
 "[user@]host to export config files"\
 "declare package(s) as installed"\
 "use identity file (private key) for remote authentication"\
 "declare package(s) as uninstalled"\
 "log file name (def /var/log/lisa.log)"\
 "include localization module for odoo; use ISO3166 country code"\
 "multiple version environment (append version to filenames)"\
 "do nothing (dry-run)"\
 "select odoo family distribution; may be odoo,oca,zeroincombenze"\
 "do not use pip if found std package "\
 "default for users, if added by import command"\
 "quiet mode"\
 "install odoo submodules"\
 "test mode (implies dry-run)"\
 "use file to install"\
 "show version end exit"\
 "verbose mode"\
 "assume yes"\
 "1st installation")
OPTARGS=(action pkg param1 param2 param3)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Build an Odoo or LAMP server"\
  "(C) 2015-2016 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
if [ "$DEV_ENVIRONMENT" == "$THIS" ]; then
  test_mode=1
fi
if [ "$opt_log" ]; then
  FLOG=$opt_log
elif [ $test_mode -gt 0 -o $opt_dry_run -gt 0 ]; then
  FLOG=~/$THIS.log
elif [ $EUID -eq 0 ]; then
  FLOG=/var/log/$THIS.log
else
  FLOG=~/$THIS.log
fi
get_arch "$opt_osf"
set_tlog_file "$FLOG"
if [ -n "$opt_odoo" ]; then
  if [ "$opt_odoo" != "9" -a "$opt_odoo" != "8" -a "$opt_odoo" != "7" -a "$opt_odoo" != "*" ]; then
    echo "Invalid option value: use -O9 or -O8 or -O7 or -O*"
    exit $STS_FAILED
  fi
  if [ "opt_oed" != "odoo" -a "opt_oed" != "oca" -a "opt_oed" != "zeroincombenze" ]; then
    opt_oed="zeroincombenze"
  fi
fi
opt_aaeR=$(echo "0$opt_aae"|awk -F, '{print $1}')
opt_aaeD=$(echo "$opt_aae,2"|awk -F, '{print $2}')

for tid in 0 1 2 3; do
  eval $(init_cfg $tid)
  eval $(active_cfg $tid)
done
prdstk_level=0
conf_level=0
declare -a CONF_FNS
conf_default
FCONFDEF=/etc/lisa/lisa.conf.sample
if [ $test_mode -gt 0 ]; then
  FCONF=$TESTDIR/$THIS.conf
  FCONFDEF=$TESTDIR/$THIS.conf.sample
elif [ -n "$opt_conf" -a -f "$opt_conf" ]; then
  FCONF=$opt_conf
else
  if [ "$TDIR" == "/usr/bin" ]; then
    CDIR="/etc/$THIS"
  else
    CDIR=$TDIR
  fi
  FCONF=$CDIR/$THIS.conf
fi
link_cfg $FCONF $FCONFDEF
opt_osub="account-closing account-financial-tools account-financial-report account-invoicing account-payment bank-payment knowledge partner-contact stock-logistics-workflow web webkit-tools website"
if [ "$opt_oed" == "zeroincombenze" ]; then
  opt_osub="$opt_osub l10n-italy-supplemental"
fi
if [ -n "$opt_xtly" ]; then
  SIMULATE_YES=" ${opt_xtly//,/ } "
fi
if [ -n "$opt_xtln" ]; then
  SIMULATE_NO=" ${opt_xtln//,/ } "
fi
init_cfg_pkg "$pkg"
if [ $test_mode -gt 0 -a "$action" != "update" ]; then
  if [[ " $SIMULATE_YES " =~ [[:space:]]apache2[[:space:]] ]]; then
    SIMULATE_YES="$SIMULATE_YES port_tcp_80 port_tcp_443 port_tcp_21"
  elif [[ " $SIMULATE_YES " =~ [[:space:]]httpd[[:space:]] ]]; then
    SIMULATE_YES="$SIMULATE_YES port_tcp_80 port_tcp_443 port_tcp_21"
  fi
  if [[ " $SIMULATE_NO " =~ [[:space:]]apache2[[:space:]] ]]; then
    SIMULATE_NO="$SIMULATE_NO port_tcp_80 port_tcp_443 port_tcp_21"
  elif [[ " $SIMULATE_NO " =~ [[:space:]]httpd[[:space:]] ]]; then
    SIMULATE_NO="$SIMULATE_NO port_tcp_80 port_tcp_443 port_tcp_21"
  fi
  if [[ " $SIMULATE_YES " =~ [[:space:]]openssh[[:space:]] ]]; then
    SIMULATE_YES="$SIMULATE_YES port_tcp_22"
  elif [[ " $SIMULATE_YES " =~ [[:space:]]openssh-server[[:space:]] ]]; then
    SIMULATE_YES="$SIMULATE_YES port_tcp_22"
  fi
  if [[ " $SIMULATE_NO " =~ [[:space:]]openssh[[:space:]] ]]; then
    SIMULATE_NO="$SIMULATE_NO port_tcp_22"
  elif [[ " $SIMULATE_NO " =~ [[:space:]]openssh-server[[:space:]] ]]; then
    SIMULATE_NO="$SIMULATE_NO port_tcp_22"
  fi
fi
ODOO_UID=$(get_prm_value "ODOO_UID")
ODOO_GID=$(get_prm_value "ODOO_GID")
if [ -z "$opt_depth" ]; then
  opt_depth=999
fi
if [ "$action" == "remove" -a $opt_depth -eq 999 ]; then
  if $(is_virtualname $pkg); then
    opt_depth=0
  else
    opt_depth=1
  fi
fi
if [ $test_mode -gt 0 ]; then
  opt_dry_run=1
  opt_verbose=1
  if [ $opt_depth -eq 999 ]; then
    if $(is_virtualname $pkg); then
      opt_depth=0
    else
      opt_depth=1
    fi
  fi
  opt_yes=1
fi
OPTS="-"
if [ ${opt_yes:-0} -gt 0 ]; then OPTS="${OPTS}y"; fi
if [ ${opt_dev:-0} -gt 0 ]; then OPTS="${OPTS}D"; fi
if [ ${opt_grf:-0} -gt 0 ]; then OPTS="${OPTS}g"; fi
if [ ${opt_dbg:-0} -gt 0 ]; then OPTS="${OPTS}b"; fi
if [ ${opt_nopip:-0} -gt 0 ]; then OPTS="${OPTS}p"; fi
wlog "# $THIS $__version__ running on $(xuname -a)"
wlog "# Setup for $FH family"
if [ ${opt_dbg:-0} -gt 0 ]; then rm -f ~/$THIS.his; fi    #debug

if [ "$action" == "help" ]; then
  man $TDIR/$THIS.man
elif [ "$action" == "prepare" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  wlog "Preparining group list"
  build_groups_list
  wlog "Preparing user list"
  build_user_list
  ending_msg
elif [ "$action" == "export" ]; then
  if [ -z "$opt_host" ]; then
    elog "Missing destination host name: use -H host option"
  else
    please install $THIS
  fi
  ending_msg
elif [ "$action" == "import" ]; then
  if [ $EUID -ne 0 ]; then
    elog "This command must be executed by root"
    exit $STS_FAILED
  fi
  wlog "Creating groups"
  add_groups
  wlog "Creating users"
  add_users
  ending_msg
elif [ "$action" == "debug" ]; then
   echo "[options]">lisa.conf.sample
   jy=0
   p=""
   while ((jy<${#DEFPRM[*]})); do
     echo "${DEFPRM[jy]}=${DEFVAL[jy]}"
     echo "${DEFPRM[jy]}=${DEFVAL[jy]}">>lisa.conf.sample
     ((jy++))
   done
else
  actions=${action//+/ }
  actions=${actions//,/ }
  pkgs=${pkg//+/ }
  pkgs=${pkgs//,/ }
  TITL_whatis="List managed packages"
  TITL_status="Check for installation status"
  TITL_version="Show installed package version"
  TITL_install="Install package(s)"
  TITL_update="Update/upgrade package(s)"
  TITL_remove="Remove package package(s)"
  TITL_config="Configure package(s)"
  SYSPRIV="config install remove status update version"
  OPTS1ST="install update"
  ECHOCMDS="config install remove status update version"
  TAILMSG="install remove status update"
  opt_tail=0
  if [ $opt_1st -gt 0 ]; then
    for act in $actions; do
      if [[ " $OPTS1ST " =~ [[:space:]]$act[[:space:]] ]]; then
        opt_tail=1
        break
      fi
    done
  fi
  if [ $opt_tail -gt 0 ]; then
    wlog "Setup for 1st installation"
    if [ $opt_dry_run -eq 0 ]; then
      please update "." $OPTS
    fi
  fi
  opt_tail=0
  for act in $actions; do
    if [[ " $SYSPRIV " =~ [[:space:]]$act[[:space:]] ]]; then
      if [ $EUID -ne 0 -a $test_mode -eq 0 ]; then
        elog "This command must be executed by root"
        exit $STS_FAILED
      fi
    fi
    if [[ " $ECHOCMDS " =~ [[:space:]]$act[[:space:]] ]]; then
      set_tlog_file "$FLOG" "" "echo"
    fi
    if [ $test_mode -eq 0 ]; then
      X="TITL_$act"
      if [ -n "${!X}" ]; then
        print_title "${!X}"
      fi
    fi
    if [ -z "$param1" ]; then
      param1="base"
    fi
    for package in $pkgs; do
      please $act $package $OPTS "$param1" "$param2" "$param3"
      sts=$?
      if [ $sts -eq 127 ]; then
        echo "Unknow action $act"
        exit $sts
      elif [ $sts -ne $STS_SUCCESS ]; then
        echo "Error in $act $package"
        exit $sts
      fi
    done
    if [[ " $TAILMSG " =~ [[:space:]]$act[[:space:]] ]]; then
      opt_tail=1
    fi
  done
  if [ $opt_tail -gt 0 ]; then
    ending_msg
  fi
fi
exit 0
