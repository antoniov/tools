#! /bin/bash
# -*- coding: utf-8 -*-
# Regression tests on lisa
# Check for remove
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 2.0.0
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
if [[ -z $HOME_DEVEL || ! -d $HOME_DEVEL ]]; then
  [[ -d $HOME/odoo/devel ]] && HOME_DEVEL="$HOME/odoo/devel" || HOME_DEVEL="$HOME/devel"
fi
[[ -x $TDIR/../bin/python3 ]] && PYTHON=$(readlink -f $TDIR/../bin/python3) || [[ -x $TDIR/python3 ]] && PYTHON="$TDIR/python3" || PYTHON="python3"
[[ -z $PYPATH ]] && PYPATH=$(echo -e "import os,sys\no=os.path\na=o.abspath\nj=o.join\nd=o.dirname\nb=o.basename\nf=o.isfile\np=o.isdir\nC=a('"$TDIR"')\nD='"$HOME_DEVEL"'\nif not p(D) and '/devel/' in C:\n D=C\n while b(D)!='devel':  D=d(D)\nN='venv_tools'\nU='setup.py'\nO='tools'\nH=o.expanduser('~')\nT=j(d(D),O)\nR=j(d(D),'pypi') if b(D)==N else j(D,'pypi')\nW=D if b(D)==N else j(D,'venv')\nS='site-packages'\nX='scripts'\ndef pt(P):\n P=a(P)\n if b(P) in (X,'tests','travis','_travis'):\n  P=d(P)\n if b(P)==b(d(P)) and f(j(P,'..',U)):\n  P=d(d(P))\n elif b(d(C))==O and f(j(P,U)):\n  P=d(P)\n return P\ndef ik(P):\n return P.startswith((H,D,K,W)) and p(P) and p(j(P,X)) and f(j(P,'__init__.py')) and f(j(P,'__main__.py'))\ndef ak(L,P):\n if P not in L:\n  L.append(P)\nL=[C]\nK=pt(C)\nfor B in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n for P in [C]+sys.path+os.environ['PATH'].split(':')+[W,R,T]:\n  P=pt(P)\n  if B==b(P) and ik(P):\n   ak(L,P)\n   break\n  elif ik(j(P,B,B)):\n   ak(L,j(P,B,B))\n   break\n  elif ik(j(P,B)):\n   ak(L,j(P,B))\n   break\n  elif ik(j(P,S,B)):\n   ak(L,j(P,S,B))\n   break\nak(L,os.getcwd())\nprint(' '.join(L))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
[[ -z "$Z0LIBDIR" ]] && echo "Library file z0librc not found in <$PYPATH>!" && exit 72
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
[[ -z "$Z0TLIBDIR" ]] && echo "Library file z0testrc not found!" && exit 72
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

# DIST_CONF=$(findpkg ".z0tools.conf" "$PYPATH")
# TCONF="$HOME/.z0tools.conf"
CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"

__version__=2.0.0.2

test_run () {
# test_run(msg,package,disto,cmd)
    # set -x #debug
    TPRODUCT="$RUNDIR/lisa -T"
    local msg="$1"
    local Package="$2"
    local Disto="$3"
    local cmd="$4"
    local FH=
    local opt_e="-E$Disto"
    local opt_ij="-I$Package,wget,gcc,git"
    if [ "$Disto" == "." ]; then
        local FH=$Real_FH
        local Disto=$Real_DISTO
        local opt_e=
    elif [ "$Disto" == "Ubuntu12" -o "$Disto" == "Ubuntu14" ]; then
      local FH="Debian"
    elif [ "$Disto" == "CentOS6" -o "$Disto" == "CentOS7" ]; then
      local FH="RHEL"
    fi
    if [ "$Package" == "httpd" ]; then
      if [ "$FH" == "Debian" ]; then
        local Package="apache2"
      fi
      local opt_ij="-I$Package,vsftpd"
    elif [ "$Package" == "apache2" ]; then
      if [ "$FH" == "RHEL" ]; then
        local Package="httpd"
      fi
      local opt_ij="-I$Package,vsftpd"
    elif [ "$Package" == "pip" -o "$Package" == "python-pip" ]; then
        local opt_ij="-I$Package,python-pip,python-whell,wheel"
    elif [ "$Package" == "postgresql-server" ]; then
      if [ "$FH" == "Debian" ]; then
        local Package="postgresql"
      fi
      local opt_ij="-I$Package,postgresql-client-common,postgresql-contrib"
    elif [ "$Package" == "postgresql" ]; then
      if [ "$FH" == "RHEL" ]; then
        local Package="postgresql-server"
      fi
      local opt_ij="-I$Package,postgresql-client-common,postgresql-contrib"
    elif [ "$Package" == "postgres" ]; then
      if [ "$FH" == "Debian" ]; then
        local Package="postgresql"
      elif [ "$FH" == "RHEL" ]; then
        local Package="postgresql-server"
      fi
      local opt_ij="-I$Package,postgresql-client-common,postgresql-contrib"
    elif [ "$Package" == "openssh" ]; then
      local Package="openssh-server"
      opt_ij="-I$Package,openssh-client,openssh-clients,mod_ssl,mod_proxy_html,iptables-services,bind-utils"
    elif [ "$Package" == "openssh-server" ]; then
      opt_ij="-I$Package,openssh-client,openssh-clients,mod_ssl,mod_proxy_html,iptables-services,bind-utils"
    fi
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $TESTDIR/res/${Package}__${Disto}.07.test ]; then
        TESTOUT=$TESTDIR/res/${Package}__${Disto}.07.test
      elif [ -f $TESTDIR/res/${Package}__${FH}.07.test ]; then
        TESTOUT=$TESTDIR/res/${Package}__${FH}.07.test
      elif [ -f $TESTDIR/res/${Package}.07.test ]; then
        TESTOUT=$TESTDIR/res/${Package}.07.test
      else
        TESTOUT=
        echo "File test comparison ${Package}__${Disto} not found!"
      fi
      rm -f $TESTDIR/lisa.out
      eval $TPRODUCT $opt_e remove $2 $opt_ij>$TESTDIR/lisa.out
    fi
    # set +x #debug
    ci-test "$msg" "$TESTOUT" "$TESTDIR/lisa.out" "$cmd"
    return $s
}

test_01() {
if [ ${opt_dry_run:-0} -eq 0 ]; then
  rm -f $TESTDIR/res/*.07.test
  cat <<EOF >$TESTDIR/res/lisa__Debian.07.test
> rm /usr/bin/lisa
> rm /usr/bin/lisa.*
> rm /usr/bin/lisa_*
> apt-get autoremove
EOF
  cat <<EOF >$TESTDIR/res/lisa__RHEL.07.test
> rm /usr/bin/lisa
> rm /usr/bin/lisa.*
> rm /usr/bin/lisa_*
EOF
  cat <<EOF >$TESTDIR/res/apache2__Debian.07.test
> service apache2 stop
# service vsftpd stop
> apt-get -y remove apache2
# apt-get -y remove vsftpd
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT
> apt-get autoremove
EOF
  cat <<EOF >$TESTDIR/res/httpd__CentOS7.07.test
> systemctl stop httpd
# systemctl stop vsftpd
> yum -y remove httpd
# yum -y remove vsftpd
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT
EOF
  cat <<EOF >$TESTDIR/res/httpd__CentOS6.07.test
> service httpd stop
> yum -y remove httpd
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT
EOF
  cat <<EOF >$TESTDIR/res/postgresql-server__CentOS7.07.test
> systemctl stop postgresql
> yum -y remove postgresql-server
# yum -y remove postgresql-client-common
# yum -y remove postgresql-contrib
EOF
  cat <<EOF >$TESTDIR/res/postgresql-server__CentOS6.07.test
> service postgresql stop
> yum -y remove postgresql-server
# yum -y remove postgresql-client-common
# yum -y remove postgresql-contrib
EOF
  cat <<EOF >$TESTDIR/res/postgresql__Debian.07.test
> service postgresql stop
> apt-get -y remove postgresql
# apt-get -y remove postgresql-client-common
# apt-get -y remove postgresql-contrib
> apt-get autoremove
EOF
  cat <<EOF >$TESTDIR/res/pip__CentOS6.07.test
> yum -y remove python-pip
EOF
  cat <<EOF >$TESTDIR/res/pip__CentOS7.07.test
> yum -y remove python-pip
EOF
  cat <<EOF >$TESTDIR/res/pip__Debian.07.test
> apt-get -y remove python-pip
> apt-get autoremove
EOF
  cat <<EOF >$TESTDIR/res/python-pip__Debian.07.test
> apt-get -y remove python-pip
> apt-get autoremove
EOF
  cat <<EOF >$TESTDIR/res/python-pip__CentOS6.07.test
> yum -y remove python-pip
EOF
  cat <<EOF >$TESTDIR/res/python-pip__CentOS7.07.test
> yum -y remove python-pip
EOF
  cat <<EOF >$TESTDIR/res/openssh-server__Debian.07.test
> service ssh stop
> apt-get -y remove openssh-server
# apt-get -y remove openssh-client
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
> apt-get autoremove
EOF
  cat <<EOF >$TESTDIR/res/openssh-server__CentOS7.07.test
> systemctl stop sshd
> yum -y remove openssh-server
# yum -y remove openssh-clients
# yum -y remove mod_ssl
# yum -y remove mod_proxy_html
# yum -y remove iptables-services
# yum -y remove bind-utils
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
EOF
  cat <<EOF >$TESTDIR/res/openssh-server__CentOS6.07.test
> service sshd stop
> yum -y remove openssh-server
# yum -y remove openssh-clients
# yum -y remove mod_ssl
# yum -y remove mod_proxy_html
# yum -y remove iptables-services
# yum -y remove bind-utils
# iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
EOF
fi
Real_FH=$(xuname "-f")
x=$(xuname "-v")
v=$(echo $x|awk -F. '{print $1}')
Real_DISTO=$(xuname "-d")$v

for Package in lisa apache2 httpd\
  pip python-pip\
  postgres postgresql postgresql-server\
  openssh openssh-server; do
  for Disto in . Ubuntu14 CentOS7 Ubuntu12 CentOS6; do
     if [ "$Disto" == "." ]; then
       opt_e=
     else
       opt_e="-E$Disto"
     fi
     test_run "remove $Package $opt_e" "$Package" "$Disto" "diff"
  done
done
}

Z0BUG_setup() {
    [ -f /tmp/lisa.tar.gz ] && rm -f /tmp/lisa.tar.gz
    [ -d /tmp/lisa ] && rm -fR /tmp/lisa
    [ -f "/tmp/wkhtml*"  ] && rm -f /tmp/wkhtml*
    if [ -f "/tmp/lisa*"  ]; then
      echo "Test not executable!"
      echo "Please, remove lisa file/directory from /tmp"
      exit 1
    fi
    if [ -f "/tmp/wkhtml*"  ]; then
      echo "Test not executable!"
      echo "Please, remove wkhtmltopdf file from /tmp"
      exit 1
    fi
    export PYTHONWARNINGS="ignore"
}


Z0BUG_init
parseoptest -l$TESTDIR/test_lisa.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts
for p in z0librc odoorc travisrc zarrc z0testrc; do
  if [[ -f $RUNDIR/$p ]]; then
    [[ $p == "z0librc" ]] && Z0LIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "odoorc" ]] && ODOOLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "travisrc" ]] && TRAVISLIBDIR="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "zarrc" ]] && ZARLIB="$RUNDIR" && source $RUNDIR/$p
    [[ $p == "z0testrc" ]] && Z0TLIBDIR="$RUNDIR" && source $RUNDIR/$p
  fi
done



UT_LIST=""
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
