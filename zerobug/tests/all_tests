#! /bin/bash
# -*- coding: utf-8 -*-
# Regression tests on zerobug
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)
Z0TLIBDIR=$(findpkg z0testrc "$TDIR $TDIR/.. $HOME/tools/zerobug $HOME/dev ${PYPATH//:/ } . .." "zerobug")
if [ -z "$Z0TLIBDIR" ]; then
  echo "Library file z0testrc not found!"
  exit 2
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)

__version__=0.2.14.1


Z0BUG_setup() {
    # Just for regression tests
    coveragerc_file="$RUNDIR/.coveragerc"
    coveragerc_bak="$RUNDIR/coveragerc.bak"
    if [ ! -f "$coveragerc_bak" ]; then
      if [ -f "$coveragerc_file" ]; then
         mv -f $coveragerc_file $coveragerc_bak
      fi
    fi
    if [ -f "$coveragerc_file" ]; then
      rm -f $coveragerc_file
    fi
    # if [ ! -f "$TESTDIR/z0testlib.py" -a ! -L "$TESTDIR/z0testlib.py" ]; then
    #   cp $RUNDIR/z0testlib.py $TESTDIR/
    # fi
}

Z0BUG_teardown() {
    if [ -f "$coveragerc_file" ]; then
      rm -f $coveragerc_file
    fi
    if [ -f "$coveragerc_bak" ]; then
      mv -f $coveragerc_bak $coveragerc_file
    fi
    if [ -f "$TESTDIR/z0testlib.py" -o -L "$TESTDIR/z0testlib.py" ]; then
      rm -f $TESTDIR/z0testlib.py
    fi

}


Z0BUG_init
parseoptest -l$TESTDIR/test_zerobug.log "$@"
sts=$?
if [ $sts -ne 127 ]; then
  exit $sts
fi





UT1_LIST=
UT_LIST=
if [ "$(type -t Z0BUG_setup)" == "function" ]; then Z0BUG_setup; fi
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
if [ "$(type -t Z0BUG_teardown)" == "function" ]; then Z0BUG_teardown; fi
exit $sts
