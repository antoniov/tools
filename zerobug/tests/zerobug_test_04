#! /bin/bash
# Copyright (C) 2015-2020 SHS-AV s.r.l. (<http://www.zeroincombenze.org>)
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../.. $TDIR/../../z0lib $TDIR/../../z0lib/z0lib $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)
Z0TLIBDIR=$(findpkg z0testrc "$TDIR $TDIR/.. $HOME/tools/zerobug $HOME/dev ${PYPATH//:/ } . .." "zerobug")
if [ -z "$Z0TLIBDIR" ]; then
  echo "Library file z0testrc not found!"
  exit 2
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)

__version__=0.2.15.5


test_01() {
    local sts res res1 res2 res3 res4 res5 res6 res7 res8 res9 res10 res11 x
    [ ${opt_dry_run:-0} -eq 0 ] && dbgmsg ".test_01 - min=$min_test, max=$max_test, ctr=$ctr"
    Z0BUG_run_autotest=1
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      TEST_opts="-n"
      parseoptest $TEST_opts
      ready_opts
      res1=$opt_dry_run
      res2=$LECHO
      res3=$opt_echo
      res4=$opt_new
      res5=$logfn
      res6=$ctr
      res7=$min_test
      res8=$max_test
      res9=$opt_noctr
      res10=$opt_debug
      res11=$run_on_top
      restore_env
    else
      ctr=0
    fi
    test_result "Opt -n" "$res1" "1"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      if [[ -t 0 || -p /dev/stdin ]]; then
        res=echo
      else
        res=
      fi
      test_result "Opt -n (tty)" "$res2" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [[ -t 0 || -p /dev/stdin ]]; then
        res=1
      else
        res=0
      fi
      test_result "Opt -n (-e)" "$res3" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -n (-k)" "$res4" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      x=$TESTDIR/${module_id}_test.log
      res=$(readlink -m $x)
      test_result "Opt -n (-k)" "$res5" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -n (-s)" "$res7" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -n (-z)" "$res8" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      if [ -n "$COVERAGE_PROCESS_START" ]; then
        res=1
      else
        res=0
      fi
      test_result "Opt -n (-0)"x "$res9" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -b" "$res10" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=1
      test_result "Run on top" "$res11" "$res"
      sts=$?
    fi
    return $sts
}

test_03() {
    local sts res res1 res2 res3 res4 res5 res6 res7 res8 res9 res10 res11
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      dbgmsg ".test_03 - min=$min_test, max=$max_test, ctr=$ctr"
    fi
    Z0BUG_run_autotest=1
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      res10=$HOME/dev/z0testlib.log
      TEST_opts="-n -l$res10"
      parseoptest $TEST_opts
      res1=$opt_dry_run
      res4=$opt_new
      res5=$logfn
      restore_env
    else
      ctr=0
    fi
    test_result "Opt -n" "$res1" "1"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Opt -n (-k)" "$res4" "$res"
      sts=$?
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=$res10
      test_result "Opt -n (-k)" "$res5" "$res"
      sts=$?
    fi
    return $sts
}

test_06() {
    local sts res res1 res2 res3 res4 res5 res6 res7 res8 res9 res10 res11
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      dbgmsg ".test_06 - min=$min_test, max=$max_test, ctr=$ctr"
    fi
    Z0BUG_run_autotest=1
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      TEST_opts="-s0"
      parseoptest $TEST_opts
      res7=$min_test
      res11=$run_on_top
      restore_env
    else
      ctr=0
    fi
    res=0
    test_result "Opt -n (-s)" "$res7" "$res"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      res=0
      test_result "Run on top" "$res11" "$res"
      sts=$?
    fi
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      TEST_opts="-s 13"
      parseoptest $TEST_opts
      res7=$min_test
      restore_env
    fi
    if [ $sts -eq $STS_SUCCESS ]; then
      res=13
      test_result "Opt -s 13" "$res7" "$res"
      sts=$?
    fi
    return $sts
}

test_07() {
    local sts res res1 res2 res3 res4 res5 res6 res7 res8 res9 res10
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      dbgmsg ".test_06 - min=$min_test, max=$max_test, ctr=$ctr"
    fi
    Z0BUG_run_autotest=1
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      save_env
      TEST_opts="-s0 -z13"
      parseoptest $TEST_opts
      res7=$min_test
      res8=$max_test
      restore_env
    else
      ctr=0
    fi
    res=0
    test_result "Opt -s0" "$res7" "$res"
    sts=$?
    if [ $sts -eq $STS_SUCCESS ]; then
      res=13
      test_result "Opt -z13" "$res8" "$res"
      sts=$?
    fi
    return $sts
}


Z0BUG_init
parseoptest -l$TESTDIR/test_zerobug.log "$@"
sts=$?
if [ $sts -ne 127 ]; then
  exit $sts
fi

UT1_LIST=""
UT_LIST=""
if [ "$(type -t Z0BUG_setup)" == "function" ]; then Z0BUG_setup; fi
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
if [ "$(type -t Z0BUG_teardown)" == "function" ]; then Z0BUG_teardown; fi
exit $sts
