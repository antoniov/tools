Help on instance of Pytok in module pytok.pytokcore:

class Pytok
 |  Methods defined here:
 |  
 |  __init__(self)
 |  
 |  add_line_range(self, nline_start=None, nline_stop=None, range_id=None)
 |  
 |  add_tok_range(self)
 |  
 |  decl_classes_2_search(self, classes)
 |      Declare class(es) in instance (comma separated)
 |      where tokens have to be searched
 |  
 |  decl_funs_2_search(self, funs)
 |      Declare function(s) in instance (comma separated)
 |      where tokens have to be searched
 |  
 |  decl_model_2_search(self, tokens)
 |      Declare model(s) in which search(comma separated)
 |  
 |  decl_options(self, prm)
 |      Declare options
 |      @prm['output']
 |      @prm['no_num_line']
 |      @prm['in_class']
 |      @prm['infun']
 |      @prm['tokens']
 |      @prm['model']
 |      @prm['no_header']
 |  
 |  decl_tokens_2_search(self, tokens)
 |      Declare token(s) to search in instance (comma separated)
 |  
 |  extr_fun_name(self, f)
 |  
 |  formatted_out(self, output, txt, f)
 |  
 |  found_model(self, line)
 |  
 |  get_range(self)
 |  
 |  hdr_fn(self, name)
 |  
 |  init_parse(self)
 |  
 |  isinclass(self)
 |  
 |  isinfun(self)
 |  
 |  isvalidline(self, type)
 |  
 |  op_comp(self, left, op, right)
 |  
 |  out_line(self, output, *args)
 |      Output results
 |  
 |  parse_line(self, numline)
 |  
 |  parse_line_type(self, line, type)
 |  
 |  parse_src(self)
 |      Parse source to search token(s) in instance
 |  
 |  search_tok(self, line)
 |  
 |  switch_2_parent(self)
 |  
 |  tostring(self, output=None)
 |      Output program as string source
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  decorator_name(line)
 |      Return decorator name(s) if decorator line
 |  
 |  get_name_n_ix(name, deflt=None)
 |      Extract name and subscription from string like 'name[ix]'
 |  
 |  get_name_n_params(name, deflt=None)
 |      Extract name and params from string like 'name(params)'
 |  
 |  line_class_def(line)
 |      Return true if python line is class def
 |  
 |  line_decorator(line)
 |      Return true if python line is decorator
 |  
 |  line_end_class(line, classname)
 |      Return true if python line is end class
 |  
 |  line_fun_def(line)
 |      Return true if python line is function def
 |  
 |  line_remark(line)
 |      Return true if python line is only remark or empty line
 |  
 |  line_wout_key(line, keyword)
 |      Return line without initial keyword and all remarks
 |  
 |  new(text=None)
 |      New instance of Pytok from text string
 |  
 |  open(file)
 |      New instance of Pytok from python source file
 |  
 |  strip_comment(line)
 |      Remove comments from source line
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  version

