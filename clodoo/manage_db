#! /bin/bash
# -*- coding: utf-8 -*-
#
# Set Odoo Version in clodo files
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
for x in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../../z0lib . .. /etc; do
  if [ -e $x/z0librc ]; then
    . $x/z0librc
    Z0LIBDIR=$x
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $TDIR/../clodoo $TDIR/../../clodoo . .. $HOME/dev /etc")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.3.2.1


up_oemod() {
#up_oemod(DB branch)
    local DB=$1
    local oe_version=$2
    local passed_file=./upd_oemod_passed.log
    local exclusion_file=./upd_oemod_exclude.log
    local excl_bak_file=./upd_oemod_exclude.bak
    rm -f $passed_file
    rm -f $exclusion_file
    rm -f $excl_bak_file
    sts=1
    errctr=0
    while [ $sts -ne 0 ]; do
        psql -Upostgres -c "update ir_module_module set state='uninstalled' where state='to install';" $DB
        psql -Upostgres -c "update ir_module_module set state='installed' where state='to upgrade';" $DB
        echo -e "\033[1;32m"; cat $passed_file || true
        echo -e "\033[1;31m"; cat $exclusion_file || true
        echo -e "\033[0m";
        python $TDIR/upd_oemod.py -d $DB -b $oe_version
        sts=$?
        if [ $sts -eq 0 -a -f $exclusion_file ]; then
            if [ -f $excl_bak_file ]; then
                echo "diff -q $excl_bak_file $exclusion_file"
                diff -q $excl_bak_file $exclusion_file
                if [ $? -eq 0 ]; then
                    rm -f $excl_bak_file
                    return 1
                fi
            fi
            mv $exclusion_file  $excl_bak_file
            sts=1
        else
           ((errctr++))
           if [ $errctr -gt 2 ]; then
             return $sts
           fi
        fi
    done
    return $sts
}

db_list() {
    DBlist=
    local db user a b c
    local found=0
    psql -Upostgres -tl > $HOME/tmp.log
    while IFS=\| read db user a b c; do
      ((found++))
      db=$(echo $db)
      user=$(echo $user)
      if [ -n "$db" -a "$user" == "$opt_dbuser" ]; then
        if [[ $db =~ $opt_DB ]]; then
          DBlist=$DBlist,$db
        fi
      fi
    done < $HOME/tmp.log
    rm -f $HOME/tmp.log
    DBlist=${DBlist:1}
    echo "$DBlist"
}


OPTOPTS=(h        b          c        D             E        d      m         n           o       q           r           t         U          V           v)
OPTDEST=(opt_help opt_branch opt_conf opt_with_demo opt_tenv opt_DB opt_multi opt_dry_run opt_del opt_verbose opt_xmlport test_mode opt_dbuser opt_version opt_verbose)
OPTACTI=(1        "="        "="      "*"           "*"      "="    1         1           1       0           "="         1         "="        "*"         "+")
OPTDEFL=(1        "7.0"      ""       ""            ""       ""     -1        0           0       -1          ""          0         ""         ""          -1)
OPTMETA=("help"   "branch"   "file"   ""            ""       "name" ""        "noop"      "del"   "quiet"     "port"      "test"    "user"     "version"   "verbose")
OPTHELP=("this help"\
 "branch: must be 7.0 or 8.0 or 9.0 or 10.0 or 11.0 (def 7.0)"\
 "configuration file (only update)"\
 "new db with demo data"\
 "enable test environment config file"\
 "set database name or regex when update"\
 "multi-version odoo environment"\
 "do nothing (dry-run)"\
 "delete DB if exists"\
 "silent mode"\
 "xmlrpc port"\
 "test mode (implies dry-run)"\
 "db user"\
 "show version end exit"\
 "verbose mode")
OPTARGS=(action cmdlist)
PHASE_LIST="09 00 01 10 11 12 13 14 15 18 19 20 21 22 30 31 32 50 51 52 53 54 55 61 62 90 91 92"
DEMO_PHASE_LIST="50 51 52 53 61 62"

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Manage Cloud DB(s) \n"\
  "Action may be on of: install,update,upgrade,module,translate,rename_phase\ncmdlist of update may be upd_oemod,translation or clodoo action\ncmdlist of module,upgrade is module name\ncmdlist of install is phase list: $PHASE_LIST\ncmdlist of rename_phase (phase) is old=new\n\n(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi
opts=
if [ $opt_dry_run -ne 0 ]; then
  opts="$opts -n"
fi
WCMD=$(which pg_db_active 2>/dev/null)
if [ -n "$WCMD" ]; then
  WCMD="$WCMD -k"
else
  SLEEP_TIME=30
  WCMD="sleep $SLEEP_TIME"
fi
sts=$STS_SUCCESS
odoo_vid=$opt_branch
odoo_fver=$(build_odoo_param FULLVER $odoo_vid)
odoo_ver=$(build_odoo_param FULLVER $odoo_vid)
if [ $opt_multi -lt 0 ]; then
  c=0
  for v in 6.1 7.0 8.0 9.0 10.0 11.0; do
    for p in "" v odoo- ODOO-; do
      odoo_bin=$(build_odoo_param BIN $p$v search)
      if [ -n "$odoo_bin" ] && [ -f "$odoo_bin" ]; then
        ((c++))
      fi
    done
  done
  if [ $c -gt 2 ]; then
    opt_multi=1
  else
    opt_multi=0
  fi
fi
if [ -z "$opt_dbuser" ]; then
  opt_dbuser=$(build_odoo_param USER $odoo_vid)
fi
if [ -z "$opt_xmlport" ]; then
  opt_xmlport=$(build_odoo_param RPCPORT $odoo_vid)
fi
if [ "$action" == "install" ]; then
  if [ ! -d data ]; then
    echo "Directory data/ not found!"
    exit 1
  fi
  if [ ! -d code ]; then
    echo "Directory code/ not found!"
    exit 1
  fi
  if [ "$opt_conf" == "code/z0_install_00.conf" ]; then
    if [ $opt_del -ne 0 ]; then
      CFLOOP="09 00"
    else
      CFLOOP="00"
    fi
  elif [ -n "$cmdlist" ]; then
    CFLOOP="${cmdlist//,/ }"
  else
    CFLOOP="$PHASE_LIST"
  fi
  for cf in $CFLOOP; do
    if [ ! -f code/z0_install_$cf.conf ]; then
      echo "Configuration file z0_install_$cf.conf not found!"
      exit 1
    fi
  done
  run_traced "$TDIR/set_odoover_confn $odoo_fver $opt_DB -r$opt_xmlport -q $opt_tenv"
  for cf in $CFLOOP; do
    if [ "$cf" == "00" ]; then
      if [ -n "$opt_DB" ]; then
        optdb="-d $opt_DB -lit_IT"
      else
        optdb=
      fi
      run_traced "$TDIR/clodoo.py $opts -b$odoo_fver -c code/z0_install_$cf.conf $optdb -r$opt_xmlport $opt_with_demo"
    elif [ "$cf" == "09" -a $opt_del -eq 0 ]; then
      :
    elif [ -z "$opt_with_demo" ] && [[ " $DEMO_PHASE_LIST " =~ [[:space:]]$cf[[:space:]] ]]; then
      [ $opt_verbose -gt 0 ] && echo "Warning: phase $cf is just for demo (use -D switch to enable)"
    else
      if [ -n "$opt_DB" ]; then
        db=$opt_DB
      else
        db=$(cat clodoo_last.conf|awk -F= '{print $2}')
      fi
      run_traced "$TDIR/clodoo.py $opts -b$odoo_fver -c code/z0_install_$cf.conf -d $db -r$opt_xmlport $opt_with_demo"
      sts=$?
    fi
  done
elif [ "$action" == "update" -o "$action" == "module" -o "$action" == "translate" -o "$action" == "upgrade" ]; then
  if [ -f "$opt_conf" ]; then
    cf=$opt_conf
  elif [ -f "$opt_conf.conf" ]; then
    cf=$opt_conf.conf
  elif [ -f "code/$opt_conf" ]; then
    cf=code/$opt_conf
  elif [ -f "code/$opt_conf.conf" ]; then
    cf=code/$opt_conf.conf
  else
    cf=
  fi
  if [ -n "$cf" ]; then
    x=$(parse_URI "$cf" "" "+NAMEID+LOCAL")
    x=${x: -2}
    if [ -z "$opt_with_demo" ] && [[ " $DEMO_PHASE_LIST " =~ [[:space:]]$x[[:space:]] ]]; then
      echo "This file require -D switch to be codeuted!"
      exit 1
    fi
  fi
  if [ -z "$opt_DB" ]; then
    opt_DB=".*"
  fi
  if [ "$cf" == "code/z0_install_00.conf" ]; then
    DBlist="$opt_DB -lit_IT"
    found=1
  else
    DBlist=$(db_list)
  fi
  if [ -z "$DBlist" ]; then
    if [ $found -eq 0 ]; then
      [ $opt_verbose -gt 0 ] && echo "No DB found!"
    else
      [ $opt_verbose -gt 0 ] && echo "No DB found, owned by $opt_dbuser!"
    fi
    exit 1
  fi
  $TDIR/set_odoover_confn $odoo_fver "$opt_DB" -r $opt_xmlport -q $opt_tenv
  DBlist=${DBlist//,/ }
  W4T=0
  for db in $DBlist; do
    if [ $W4T -eq 0 -o $opt_dry_run -ne 0 ]; then
      W4T=1
    else
      eval $WCMD
    fi
    if [ "$action" == "module" ]; then
      echo "$TDIR/run_odoo_debug.sh $opt_branch -um $cmdlist -d $db -sk"
      [ $opt_dry_run -ne 0 ] || $TDIR/run_odoo_debug.sh $opt_branch -um $cmdlist -d $db -s
    elif [ "$action" == "upgrade" ]; then
      echo "$TDIR/run_odoo_debug.sh $opt_branch -um $cmdlist -d $db -sk"
      [ $opt_dry_run -ne 0 ] || $TDIR/run_odoo_debug.sh $opt_branch -um $cmdlist -d $db -s
      echo "$TDIR/clodoo.py $opts -A upgrade_modules -b$odoo_fver -u $cmdlist -d $db -r$opt_xmlport $opt_with_demo"
      $TDIR/clodoo.py $opts -A upgrade_modules -b$odoo_fver -u $cmdlist -d $db -r$opt_xmlport $opt_with_demo
      sts=$?
      if [ $sts -ne $STS_SUCCESS ]; then
        break
      fi
    elif [ "$action" == "translate" ]; then
      echo "$TDIR/run_odoo_debug.sh $opt_branch -l -d $db"
      [ $opt_dry_run -ne 0 ] || $TDIR/run_odoo_debug.sh $opt_branch -l -d $db
    elif [ -n "$cmdlist" -a "$cmdlist" == "upd_oemod" ]; then
      echo "$TDIR/clodoo.py $opts -b$odoo_fver -c=code/z0_install_10.conf -d $db -r$opt_xmlport $opt_with_demo"
      $TDIR/clodoo.py $opts -b$odoo_fver -c=code/z0_install_10.conf -d $db -r$opt_xmlport $opt_with_demo
      [ $opt_dry_run -ne 0 ] || up_oemod $db $opt_branch
    elif [ -n "$cmdlist" -a "$cmdlist" == "translation" ]; then
      echo "$TDIR/run_odoo_debug.sh $opt_branch -l -d $db"
      [ $opt_dry_run -ne 0 ] || $TDIR/run_odoo_debug.sh $opt_branch -l -d $db
    elif [ -n "$cmdlist" ]; then
      echo "$TDIR/clodoo.py $opts -A $cmdlist  -b$odoo_fver -d $db -r$opt_xmlport $opt_with_demo"
      $TDIR/clodoo.py $opts -A $cmdlist -b$odoo_fver -d $db -r$opt_xmlport $opt_with_demo
      sts=$?
      if [ $sts -ne $STS_SUCCESS ]; then
        break
      fi
    else
      if [ -z "$cf" ]; then
        echo "Configuration file $opt_conf not found!"
        exit 1
      fi
      echo "$TDIR/clodoo.py $opts -b$odoo_fver -c $cf -d $db -r$opt_xmlport $opt_with_demo"
      $TDIR/clodoo.py $opts -b$odoo_fver -c $cf -d $db -r$opt_xmlport $opt_with_demo
      sts=$?
      if [ $sts -ne $STS_SUCCESS ]; then
        break
      fi
    fi
  done
elif [ "$action" == "rename_phase" ]; then
  if [  -z "$cmdlist" ]; then
    echo "Missed phase rename!"
    echo "$THIS rename_phase old=new"
    sts=1
  else
    IFS== read old new <<< "$cmdlist"
    confn=$(ls code/*${old}.conf 2>/dev/null|head -n1)
    if [ -z "$confn" ]; then
      echo "phase $old not found!"
      sts=1
    else
      new_confn=${confn/$old/$new}
      echo "mv $confn $new_confn"
      mv $confn $new_confn
      for datafn in $(ls data/*${old}.csv 2>/dev/null); do
        new_datafn=${datafn/$old/$new}
        echo "mv $datafn $new_datafn"
        mv $datafn $new_datafn
        f=$(basename $datafn)
        n=$(basename $new_datafn)
        echo "sed -e \"s|$f|$n|g\" -i $new_confn"
        sed -e "s|$f|$n|g" -i $new_confn
      done
    fi
  fi
elif [ "$action" == "rename" ]; then
  if [ -z "$opt_dbuser" ]; then
    opt_dbuser=$(build_odoo_param USER $odoo_vid)
  fi
  DBlist=$(db_list)
  DBlist=${DBlist//,/ }
  for db in $DBlist; do
    while IFS== read src tgt; do
      if [ -n "$src" -a -n "$tgt" -a "$src" != "$tgt" ]; then
        run_traced "psql -U$opt_dbuser -c \"update ir_module_module set name='$tgt' where name='$src';\" $db"
      fi
    done < ./moduli_alias.csv
  done
else
  echo "Invalid action!"
  sts=1
fi
exit $sts
