#! /bin/bash
#
# Check for all odoo repositories
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/clodoo $HOME/dev" "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR

__version__=0.1.30.4


explore() {
# explore(odoo_vid)
    local res=OCB
    for fn in $1/*; do
      if [ -d $fn ]; then
        nm=$(basename $fn)
        if [[ ! " $excl_list " =~ [[:space:]]$nm[[:space:]] ]] ; then
          res="$res $nm"
        fi
      fi
    done
    echo $res
}

build_pkgurl() {
# build_pkgurl(pkgname rpt)
    local MODNAME=$1
    local RPT=$2
    if [ "$RPT" == "oca" ]; then
      ODOO_RPT="https://github.com/OCA"
    elif [ "$RPT" == "zero" -o "$RPT" == "zeroincombenze" -o "$RPT" == "zero-git" ]; then
      ODOO_RPT="git@github.com:zeroincombenze"
    elif [ "$RPT" == "zero-http" ]; then
      ODOO_RPT="https://github.com/zeroincombenze"
    else
      echo "Odoo repository is one of oca|zero|zero-http|zero-git"
      sts=1
      exit $sts
    fi
    pkg_URL="$ODOO_RPT/$MODNAME.git"
    echo "$pkg_URL"
}

do_action() {
#do_action(action, oem, odoo_vid)
    local act=$1
    local oem=$2
    local odoo_vid=$3
    local odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
    local odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
    local f
    if [ "$oem" == "OCB" ]; then
      local pkgdir=~/$odoo_vid
      local pardir=~/
    else
      local pkgdir=~/$odoo_vid/$oem
      local pardir=~/$odoo_vid
    fi
    if [ $opt_dry_run -ne 0 ]; then
      local opts=-n
    else
      local opts=
    fi
    if [ $opt_verbose -gt 0 ]; then
      local opts="${opts} -v"
    else
      local opts="${opts} -q"
    fi
    local sts=0
    if [ "$oem" != "$LAST_OEM" -o "$odoo_vid" != "$LAST_VID" ]; then
      echo "=====[$oem/$odoo_vid]====="
      LAST_OEM=$oem
      LAST_VID=$odoo_vid
    else
       echo "--------------------"
    fi
    local excl="${opt_excl//,/ }"
    local x
    for x in $excl; do
      if [ "$x" == "$oem" -o "$x" == "$oem/$odoo_vid"  -o "$x" == "$odoo_vid/$oem"  -o "$x" == "$oem/$odoo_fver"  -o "$x" == "$odoo_fver/$oem" ]; then
        return $sts
      fi
    done
    if [ "$act" == "build" -o "$act" == "rebuild" -o "$act" == "add_new_modules" ]; then
      ODOO_RPT=$(build_odoo_param GIT_ORG $odoo_vid $oem $opt_rpt)
      ODOO_URL=$(build_odoo_param GIT_URL $odoo_vid $oem $opt_rpt)
      OPTS_GIT=$(build_odoo_param OPTS_GIT $odoo_vid $oem $opt_rpt)
      OPTS_ASM=$(build_odoo_param OPTS_ASM $odoo_vid $oem $opt_rpt)
    fi
    if [ "$act" == "requirements" ]; then
      for f in restructuredtext_lint==0.12.2 pygments==2.0.2 pylint-plugin-utils==0.2.4 pylint==1.6.4 \
            astroid==1.4.8 Pillow==3.4.2 pyxb==1.2.4
        pip install $f --upgrade --no-deps
      done
      for f in passlib pyPdf; do
        lisa install $f
      done
      return $sts
    elif [ "$act" == "rebuild" -a -d $pkgdir ]; then
      if [ $opt_yes -eq 0 ]; then
        read -p "BRANCH $odoo_vid OF $oem already exist! confirm action (yes,no)?" a
        if [ "$a" != "yes" ]; then
          sts=1
          return $sts
        fi
      fi
      run_traced "rm -fR $pkgdir"
    fi
    if [ "$act" == "add_new_modules" -a -d $pkgdir ]; then
      return $sts
    elif [ "$act" == "build" -a -d $pkgdir ]; then
      echo "BRANCH $odoo_vid OF $oem ALREADY EXISTS!"
      sts=1
    elif [ "$act" != "build" -a "$act" != "rebuild" -a ! -d $pkgdir ]; then
      echo "BRANCH $odoo_vid OF $oem NOT FOUND!"
      sts=1
    fi
    if [ $sts -ne 0 ]; then
      return $sts
    fi
    if [ "$act" == "build" -o "$act" == "rebuild" -o "$act" == "add_new_modules" ]; then
      run_traced "cd $pardir"
      if [ "$oem" == "OCB" ]; then
        run_traced "git clone $ODOO_RPT/OCB.git $odoo_vid -b $odoo_vid $OPTS_GIT"
      else
        $TDIR/addsubm.sh $ODOO_URL $odoo_vid $opts $OPTS_ASM
      fi
    else
      run_traced "cd $pkgdir"
      if [ "$act" == "check" ]; then
        if [ ! -L $pkgdir ]; then
          travis . check $opts
          sts=$?
        fi
      elif [ "$act" == "clean" ]; then
        if [ -L $pkgdir ]; then
          :
        else
          please wep $opts
          if [ "$oem" != "OCB" ]; then
            $TDIR/addsubm.sh $oem $odoo_vid -r $opts
          fi
        fi
      elif [ "$act" == "oca" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . oca $opts
        fi
      elif [ "$act" == "oia" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . oia $opts
        fi
      elif [ "$act" == "remote" ]; then
        git remote -v
      elif [ "$act" == "status" ]; then
        if [ ! -L $pkgdir ]; then
          git status
          sts=$?
          if [ $sts -eq 0 ]; then
            local v=$(git branch|grep -Eo [0-9.]+)
            if [ "$v" != "$odoo_fver" ]; then
              echo "INVALID BRANCH VERSION! Expected $odoo_fver, found $v"
              sts=1
            fi
          fi
        fi
      elif [ "$act" == "pull" ]; then
        if [ ! -L $pkgdir ]; then
          run_traced "git pull origin $odoo_fver"
        fi
      elif [ "$act" == "zeroincombenze" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . zeroincombenze $opts
        fi
      fi
    fi
    return $sts
}

OPTOPTS=(h        b          c        D       n            q           R            s          V           v           x         y)
OPTDEST=(opt_help opt_branch opt_conf opt_def opt_dry_run  opt_verbose opt_rpt      opt_nostop opt_version opt_verbose opt_excl  opt_yes)
OPTACTI=(1        "="        "="      1       1            0           "="          1          "*>"        "+"         "="       1)
OPTDEFL=(0        ""         ""       0       0            -1          ""           0          ""          -1          ""        0)
OPTMETA=("help"   "branch"   "file"   ""      "do nothing" "verbose"   "repository" ""         "version"   "verbose"   "modules" "")
OPTHELP=("this help"\
 "branchs to do action; one or more of v7 7.0 8.0 9.0 10.0 (comma separated)"\
 "configuration file (def .travis.conf)"\
 "default module list"\
 "do nothing (dry-run)"\
 "silent mode"\
 "if [re]build[_new], repository name, one of oca oia oia-git oia-http zero zero-git zero-http"\
 "no stop after every module/version"\
 "show version"\
 "verbose mode"\
 "module list to exclude (comma separated)"\
 "assume yes")
OPTARGS=(actions)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ -z "$actions" ]; then
  opt_help=1
fi
if [ $opt_verbose -eq -1 ]; then
  opt_verbose=1
fi
if [ $opt_help -gt 0 ]; then
  print_help "Check for all odoo repositories\nactions may be: add_new_modules build check clean list oca oia pull rebuild remote status zeroincombenze"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

discover_multi
if [ -z "$opt_branch" ]; then
  opt_branch="v7 7.0 8.0 9.0 10.0"
else
  opt_branch="${opt_branch//,/ }"
fi
sub_list=
excl_list="$INVALID_MODNAMES"
if [ -z $opt_excl ]; then
  if [ "$actions" == "build" -o "$actions" == "rebuild" -o "$act" == "add_new_modules" ]; then
    opt_excl="OCB/v7,cscs_addons,l10n-italy/7.0,website/7.0,account_banking_cscs/v7,account_banking_cscs/8.0,account_banking_cscs/9.0,account_banking_cscs/10.0,account_invoice_create_payment,account_payment_approve_invoice,zeroincombenze,openerp_gantt_chart_modification,connector,social,bank-statement-import,pylint-odoo,operating-unit,event,account-invoice-reporting,manufacture,survey,margin-analysis,vertical-association,runbot-addons,intrastat,connector-odoo2odoo,webhook,interface-github,product-kitting,vertical-isp,vertical-education,website-cms,hr,hr-timesheet,management-system,rma,queue,e-commerce,delivery-carrier,bank-statement-reconcile,geospatial,account-fiscal-rule,pos,contract,sale-reporting,purchase-reporting,manufacture-reporting,sale-financial,edi,stock-logistics-reporting,project-reporting,product-variant"
  else
    opt_excl="OCB/v7,cscs_addons,l10n-italy/7.0,l10n-italy-supplemental,website/7.0,account_banking_cscs,account_invoice_create_payment,account_payment_approve_invoice,zeroincombenze,openerp_gantt_chart_modification,connector,social,bank-statement-import,pylint-odoo,operating-unit,event,survey,account-invoice-reporting,manufacture,survey,margin-analysis,vertical-association,runbot-addons,intrastat,webhook,interface-github,connector-odoo2odoo,product-kitting,vertical-isp,vertical-education,website-cms,hr,hr-timesheet,management-system,rma,queue,e-commerce,delivery-carrier,bank-statement-reconcile,geospatial,account-fiscal-rule,pos,contract,sale-reporting,purchase-reporting,manufacture-reporting,sale-financial,edi,stock-logistics-reporting,project-reporting,product-variant"
  fi
fi
opt_excl="${opt_excl//,/ }"
if [[ " $opt_excl " =~ [[:space:]]themes[[:space:]] ]]; then
  :
else
  opt_excl="$opt_excl themes"
fi
if [[ " $opt_excl " =~ [[:space:]]website/7.0[[:space:]] ]]; then
  :
elif [[ " $opt_excl " =~ [[:space:]]7.0/website[[:space:]] ]]; then
  :
else
  opt_excl="$opt_excl website/7.0"
fi
for oem in $opt_excl; do
  if [[ ! "$oem" =~ / ]]; then
    excl_list="$excl_list $oem"
  fi
done
cd
if [ "$actions" == "build" -o "$actions" == "rebuild" -o "$actions" == "add_new_modules" ]; then
  opt_def=1
fi
for odoo_vid in $opt_branch; do
  if [ $opt_def -gt 0 ]; then
    mlist=$(module_list "$odoo_vid" "$excl_list")
  else
    mlist=$(explore $odoo_vid)
  fi
  for oem in $mlist; do
    if [[ ! " $sub_list " =~ [[:space:]]$oem[[:space:]] ]] ; then
      sub_list="$sub_list $oem"
    fi
  done
done
if [ "$actions" == "list" -o $opt_verbose -gt 0 ]; then
  echo "$sub_list"
  if [ "$actions" == "list" ]; then
    echo "-x $opt_excl"
    exit 0
  fi
fi
actions="${actions//+/ }"
actions="${actions//,/ }"
sts=0
for oem in $sub_list; do
  for odoo_vid in $opt_branch; do
    for act in $actions; do
      if [ "$act" != "requirements" -o "$oem" != "OCB" ]; then
        do_action $act $oem $odoo_vid
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
    done
    if [ $sts -ne 0 ]; then
      exit $sts
    elif [ $opt_nostop -eq 0 ]; then
      read -p "Press RET to continue" a
      if [ "$a" == "q" ]; then
        exit $sts
      fi
    fi
  done
done
exit $sts
