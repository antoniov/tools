#! /bin/bash
#
# Check for all odoo repositories
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2021 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
THIS=$(basename "$0")
TDIR=$($READLINK -f $(dirname $0))
[[ -d "$HOME/dev" ]] && HOME_DEV="$HOME/dev" || HOME_DEV="$HOME/devel"
PYPATH=$(echo -e "import os,sys\np=[x for x in (os.environ['PATH']+':$TDIR:..:$HOME_DEV').split(':') if x not in sys.path];p.extend(sys.path);print(' '.join(p))"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$($READLINK -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 2
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
ODOOLIBDIR=$(findpkg odoorc "$PYPATH" "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "ODOOLIBDIR=$ODOOLIBDIR"

__version__=0.3.31.9


explore() {
# explore(odoo_vid excl_list)
    local res=OCB
    local pkgdir=$(build_odoo_param HOME $1 '' $opt_org)
    for fn in $pkgdir/*; do
      if [[ -d $fn ]]; then
        nm=$(basename $fn)
        [[ ! $nm =~ $2 ]] && res="$res $nm"
      fi
    done
    echo $res
}

do_action() {
#do_action(action, repo, odoo_vid)
    local act=$1
    local repo=$2
    local odoo_vid=$3
    local odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
    local odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
    local pyver
    local f s
    [[ $odoo_ver -ge 11 ]] && pyver="3" || pyver="2"
    [[ $opt_pyver =~ ^[23]$ ]] && pyver=$opt_pyver
    if [[ -n "$opt_odir" ]]; then
      local pkgdir=$opt_odir
      local odoo_root=$(build_odoo_param ROOT $opt_odir search $opt_org)
    else
      local pkgdir=$(build_odoo_param HOME $odoo_vid "$repo" $opt_org)
      local odoo_root=$(build_odoo_param ROOT $odoo_vid search $opt_org)
    fi
    local VENV=$(build_odoo_param VENV $odoo_vid '' $opt_org)
    local VDIR=$(build_odoo_param VDIR $odoo_vid '' $opt_org)
    if [[ $VENV -ne 0 ]]; then
      [[ $opt_verbose -gt 0 ]] && echo "\$ cd $VDIR; source ./bin/activate"
      cd $VDIR
      source ./bin/activate
    fi
    local opts=
    local opts1=
    if [ $opt_verbose -gt 0 ]; then
      opts="-v"
    else
      opts="-q"
    fi
    [ $opt_dry_run -ne 0 ] && opts="${opts}n"
    opts1=$opts
    [ $opt_multi -ne 0 ] && opts="${opts}m"
    [[ $opt_yes -ne 0 ]] && opts="${opts}y"
    local sts=0
    local excl="${opt_excl//,/ }"
    local x
    if [[ ! "$act" == "requirements" && ! "$act" == "check-config" ]]; then
      if [ "$repo" != "$LAST_REPO" -o "$odoo_vid" != "$LAST_VID" ]; then
        echo -e "${TRAVIS_HDR1_COLOR}=====[$opt_org$odoo_vid/$repo]=====${TRAVIS_TEXT_COLOR}"
        LAST_REPO=$repo
        LAST_VID=$odoo_vid
      else
        echo -e "${TRAVIS_TEXT_COLOR}--------------------${TRAVIS_HDR3_COLOR}"
      fi
      for x in $excl; do
        if [ "$x" == "$repo" -o "$x" == "$repo/$odoo_vid"  -o "$x" == "$odoo_vid/$repo"  -o "$x" == "$repo/$odoo_fver"  -o "$x" == "$odoo_fver/$repo" ]; then
          return $sts
        fi
      done
    fi
    if [[ $act =~ ^(build|rebuild|add_repository|upgrade)$ ]]; then
      GIT_ORG=$(build_odoo_param GIT_ORG $odoo_vid $repo $opt_org)
      GIT_URL=$(build_odoo_param GIT_URL $odoo_vid $repo $opt_org)
      GIT_OPTS=$(build_odoo_param GIT_OPTS $odoo_vid $repo $opt_org)
      if [[ $act == "build" ]]; then
        for p in FLOG FPID CONFN; do
          d=$(dirname $(build_odoo_param $p "$odoo_vid" '' $opt_org))
          if [[ ! -d $d ]]; then
            run_traced "mkdir -p $d"
            run_traced "chown $own_user $d"
          fi
        done
      fi
    fi
    if [ "$act" == "requirements" ]; then
      [ -n "$opt_deps" ] && dopts="-d $opt_deps" || dopts=
      PIP=pip
      if [ "$pyver" == "3" -o "${TRAVIS_PYTHON_VERSION:0:1}" == "3" ]; then
        PIP=$(which pip3 2>/dev/null)
        if [ -z "$PIP" ]; then
          for v in 3.6 3.5 3.4; do
            for p in /usr/local/bin /usr/bin; do
              [ -x $p/pip$v ] && PIP=$p/pip$v
              if [ -n "$PIP" ]; then
                break
              fi
            done
          done
        fi
      fi
      curv=$($PIP --version|grep -Eo "[0-9]+\.[0-9]+"|tail -n1|grep -Eo "[0-9]"|head -n1)
      if [ $curv != "$pyver" ]; then
        echo "Invalid PIP version!"
        return 1
      fi
      LISTREQ=list_requirements.py
      [ -f $HOME/tools/clodoo/list_requirements.py ] && LISTREQ=$HOME/tools/clodoo/list_requirements.py
      [ -f $TDIR/list_requirements.py ] && LISTREQ=$TDIR/list_requirements.py
      [ -f $HOME/tools/lisa/lisa ] && LISA=$HOME/tools/lisa/lisa || LISA=lisa
      [ -f $TDIR/../../lisa/lisa/lisa ] && LISA=$(readlink -e $TDIR/../../lisa/lisa/lisa)
      [ -f $TDIR/../lisa/lisa ] && LISA=$(readlink -e $TDIR/../lisa/lisa)
      [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_TEXT_COLOR}\$ alias pip=$PIP.$($PIP --version)${TRAVIS_HDR3_COLOR}"
      [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_TEXT_COLOR}\$ alias lisa=$LISA.$($LISA -V)${TRAVIS_HDR3_COLOR}"
      [ ${TRAVIS_DEBUG_MODE:-0} -ge 8 ] && PYPI_CACHED=$HOME/.local
      [ $multi_version_pkgs -eq 0 ] && OPT_BRANCH=-b$odoo_fver || OPT_BRANCH=
      if [ -z "$PYPI_CACHED" ]; then
        echo -e "${TRAVIS_HDR3_COLOR}### Build Base Environment${TRAVIS_TEXT_COLOR}"
        eval $PIP install pip -U
        for p in os0 z0lib; do
          eval $LISA status -q $p
          if [ $? -ne 0 ]; then
            eval $PIP install --disable-pip-version-check $p
          fi
        done
        [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_HDR3_COLOR}### Analyzing binary requirements${TRAVIS_TEXT_COLOR}"
        [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_TEXT_COLOR}\$ $LISTREQ $OPT_BRANCH -p $pkgdir $dopts -t bin -s ' ' -qBTR${TRAVIS_HDR3_COLOR}"
        breqs=$($LISTREQ $OPT_BRANCH -p $pkgdir $dopts -t bin -s ' ' -qBTR)
        [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_TEXT_COLOR}\$ breqs=$breqs${TRAVIS_HDR3_COLOR}"
        for f in $breqs npm; do
          pkg=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|head -n1)
          if [[ $HOSTNAME =~ shs[a-z0-9]+ && "$USER" == "odoo" ]]; then
            echo -e "${TRAVIS_TEXT_COLOR}Check for $f${TRAVIS_HDR3_COLOR}"
          elif [ "$f" == "$pkg" ]; then
            eval $LISA status -q $pkg -d0 &>/dev/null
            if [ $? -ne 0 ]; then
              if [ $opt_nobin -ne 0 ]; then
                echo "***Warning: package $f may be installed by $LISA install -q $f -d0"
              else
                run_traced "$LISA install -q $f -d0"
              fi
            fi
          fi
        done
        [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_HDR3_COLOR}### Analyzing python requirements${TRAVIS_TEXT_COLOR}"
        [ -f $pkgdir/requirements.txt ] && run_traced "$PIP install -r $pkgdir/requirements.txt --upgrade --no-warn-conflicts --disable-pip-version-check"
        [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_TEXT_COLOR}\$ $LISTREQ $OPT_BRANCH -p $pkgdir $dopts -t python -s ' ' -qBPTR${TRAVIS_HDR3_COLOR}"
        preqs="$($LISTREQ $OPT_BRANCH -p $pkgdir $dopts -t python -s ' ' -qBPTR)"
        [ -n "$opt_deps" -a -f $opt_deps/requirements.txt ] && run_traced "$PIP install -r $opt_deps/requirements.txt --upgrade --no-warn-conflicts --disable-pip-version-check"
        [ $opt_verbose -gt 0 ] && echo -e "${TRAVIS_TEXT_COLOR}\$ preqs=$preqs${TRAVIS_HDR3_COLOR}"
        retsts=0
        if [ $opt_nopy -eq 0 ]; then
            for pass in 1 2 3; do
              [ $pass -eq 1 ] && echo -e "${TRAVIS_HDR3_COLOR}### Check for package status${TRAVIS_TEXT_COLOR}"
              [ $pass -eq 2 ] && echo -e "${TRAVIS_HDR3_COLOR}### Upgrade versioned package${TRAVIS_TEXT_COLOR}"
              [ $pass -eq 3 ] && echo -e "${TRAVIS_HDR3_COLOR}### Check for package version${TRAVIS_TEXT_COLOR}"
              for f in $preqs; do
                # if $(grep -q ^$f $pkgdir/requirements.txt); then
                #   [ ${TRAVIS_DEBUG_MODE:-0} -ge 2 -a $pass -eq 1 ] && echo "Package $f included in $pkgdir/requirements.txt"
                #   continue
                # fi
                op=$(echo "$f"|grep -Eo '[!<=>]*'|head -n1)
                pkg=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|tr -d "'"|head -n1)
                reqver=$(echo "$f"|grep -Eo '[^!<=>]*'|tr -d "'"|sed -n '2 p')
                [ -n "$reqver" ] && xreqver=$(echo $reqver|grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)'|awk -F. '{print $1*10000 + $2*100 + $3}') || xreqver=0
                sts=0
                if [ $pass -eq 1 -a "$pkg" == "coverage" ]; then
                  sts=1
                elif [ $pass -eq 1 ]; then
                  eval $LISA status -q $pkg -d0 &>/dev/null
                  sts=$?
                fi
                if [ $sts -eq 1 ] || [ $pass -gt 1 -a -n "$reqver" ]; then
                  [ $sts -eq 0 ] && curver=$($PIP show $pkg|grep ^[Vv]ersion|awk -F: '{print $2}'|tr -d ', \r\n\(\)') || curver=
                  [ -n "$curver" ] && xcurver=$(echo $curver|grep -Eo '[0-9]+\.[0-9]+(\.[0-9]+|)'|awk -F. '{print $1*10000 + $2*100 + $3}') || xcurver=0
                  # echo "DUMPLOG($pkg <$xreqver>$op<$xcurver> <<$reqver>>$op<<$curver>> sts=$sts)"       #debug
                  if [ $sts -ne 0 -a $pass -lt 3 -a -z "$op" ] || [ $xcurver -ne $xreqver -a "$op" == '==' ] || [ $xcurver -ge $xreqver -a "$op" == '<' ] || [ $xcurver -le $xreqver -a "$op" == '>' ] || [ $xcurver -lt $xreqver -a "$op" == '>=' ] || [ $xcurver -gt $xreqver -a "$op" == '<=' ]; then
                    if [ $pass -eq 3 ]; then
                      x=$(eval $LISA version -q $f -d0)
                      echo -e "${TRAVIS_TEXT_COLOR}$x but expected $op$reqver${TRAVIS_HDR3_COLOR}"
                    else
                      cmd="$PIP install -q $f --upgrade --no-warn-conflicts --disable-pip-version-check"
                      [ $pass -eq 2 ] && cmd="$cmd --no-deps --ignore-requires-python"
                      [ $opt_noloc -eq 0 -a $EUID -ne 0 -a $pass -eq 1 -a -d $HOME/.local ] && cmd="$cmd --user"
                      echo -e "${TRAVIS_TEXT_COLOR}Update '$pkg' version '$curver' with version '$reqver'${TRAVIS_HDR3_COLOR}"
                      if [ ${TRAVIS_DEBUG_MODE:-0} -ge 9 ]; then
                        echo "> $cmd"
                      else
                        run_traced "$cmd"
                        s=$?; [ ${s-0} -ne 0 ] && retsts=$s
                      fi
                    fi
                  fi
                elif [ ${TRAVIS_DEBUG_MODE:-0} -ge 2 -a $pass -eq 1 ]; then
                  echo "Package $f installed ..."
                fi
              done
            done
        fi
        if [ ${TRAVIS_DEBUG_MODE:-0} -gt 2 ]; then
          echo -e "${TRAVIS_HDR3_COLOR}### Test import python packages${TRAVIS_TEXT_COLOR}"
          rm -fR $HOME/tmp_test.py
          echo -e "from passlib.context import CryptContext\n">>$HOME/tmp_test.py
          echo -e "exit\n">>$HOME/tmp_test.py
          run_traced "python $HOME/tmp_test.py"
        fi
        [ $retsts != 0 ] && echo -e "${TRAVIS_TEXT_COLOR}Enviroment installation does not match requirements!!${TRAVIS_HDR3_COLOR}"
        echo -e "${TRAVIS_HDR3_COLOR}### Analyzing npm packages${TRAVIS_TEXT_COLOR}"
        x=$(npm list|grep " less@")
        [ -z "$x" ] && x=$(npm list -g|grep " less@")
        if [ -z "$x" ]; then
          if [ $EUID -eq 0 ]; then
            run_traced "npm install -g less@3.0.4 less-plugin-clean-css"
          else
            run_traced "npm install less@3.0.4 less-plugin-clean-css"
          fi
        fi
      fi
      return $sts
    elif [[ "$act" == "check-config" ]]; then
      cfgfn=$(build_odoo_param CONFN "$odoo_vid" '' $opt_org)
      echo "Parsing $cfgfn ..."
      p=$(build_odoo_param USER "$odoo_vid" '' $opt_org)
      [[ ! $(grep "^db_user *= *$p$" $cfgfn) ]] && run_traced "sed -i \"s|^db_user *= *.*|db_user = $p|\" $cfgfn"
      p=$(build_odoo_param FLOG "$odoo_vid" '' $opt_org)
      [[ ! $(grep "^logfile *= $p$" $cfgfn) ]] && run_traced "sed -i \"s|^logfile *= *.*|logfile = $p|\" $cfgfn"
      p=$(build_odoo_param FPID "$odoo_vid" '' $opt_org)
      [[ ! $(grep "^pidfile *= *$p$" $cfgfn) ]] && run_traced "sed -i \"s|^pidfile *= *.*|pidfile = $p|\" $cfgfn"
      p=$(build_odoo_param RPCPORT "$odoo_vid" '' $opt_org)
      [[ ! $(grep "^xmlrpc_port *=.*$p$" $cfgfn) ]] && run_traced "sed -i \"s|^xmlrpc_port *= *.*|xmlrpc_port = $p|\" $cfgfn"
      if [ $odoo_ver -ge 7 ]; then
        p=$(build_odoo_param DDIR "$odoo_vid" '' $opt_org)
        [[ ! $(grep "^data_dir *= *$p$" $cfgfn 2>/dev/null) ]] && run_traced "sed -i \"s|^data_dir *= *.*|data_dir = $p|\" $cfgfn"
      fi
      return $sts
#    elif [[ "$act" == "rebuild" && -d $pkgdir ]]; then
#      if [[ $opt_yes -eq 0 ]]; then
#        read -p "BRANCH $odoo_vid OF $repo already exist! confirm action (yes,no)?" a
#        if [[ "$a" != "yes" ]]; then
#          sts=1
#          return $sts
#        fi
#      fi
#      run_traced "rm -fR $pkgdir"
    fi
    if [ "$act" == "add_repository" -a -d $pkgdir ]; then
      return $sts
    elif [[ $act == "build" && -d $pkgdir && $opt_yes -eq 0 ]]; then
      echo "BRANCH $odoo_vid OF $repo ALREADY EXISTS!"
      sts=1
    elif [[ ! $act =~ ^(rebuild|add_repository|upgrade)$ && ! -d $pkgdir ]]; then
      echo "BRANCH $odoo_vid OF $repo NOT FOUND!"
      sts=1
    fi
    [[ $sts -ne 0 ]] && return $sts
    if [[ $act =~ ^(build|rebuild|add_repository)$ ]]; then
      run_traced "$TDIR/odoo_install_repository $repo -b$odoo_vid $opts -O $opt_org $opts_user"
    elif [[ "$act" == "upgrade" ]]; then
      run_traced "$TDIR/odoo_install_repository $repo -b$odoo_vid $opts -U -O $opt_org $opts_user"
    else
      run_traced "cd $pkgdir"
      if [ "$act" == "lint" ]; then
        if [ ! -L $pkgdir ]; then
          travis lint $opts1
          sts=$?
        fi
      elif [ "$act" == "clean" ]; then
        if [ -L $pkgdir ]; then
          :
        else
          if [ "$USER" == "odoo" ]; then
            if [ "$repo" != "OCB" ]; then
              please wep $opts1 || true
            fi
            $TDIR/list_requirements.py -vPp $pkgdir -o
          fi
          run_traced "$TDIR/odoo_install_repository $repo -b$odoo_vid $opts -O $opt_org -r $opts_user"
        fi
      elif [ "$act" == "oca" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . oca $opts1
        fi
      elif [ "$act" == "remote" ]; then
        if $(git status -s &>/dev/null); then
          git remote -v
        else
          echo "No git repository!"
        fi
      elif [ "$act" == "status" ]; then
        if [ ! -L $pkgdir ]; then
          if [ "$(build_odoo_param VCS $odoo_vid '' $opt_org)" == "git" ]; then
            local v=$(git branch|grep -Eo [0-9.]+)
            if [ "$v" != "$odoo_fver" ]; then
              echo "INVALID BRANCH VERSION! Expected '$odoo_fver', found '$v'"
              sts=1
            fi
          fi
        fi
      elif [ "$act" == "zeroincombenze" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . zeroincombenze $opts1
        fi
      else
        echo "Invalid action!"
      fi
    fi
    return $sts
}

OPTOPTS=(h        B         b          c        D       d        H           L         m         n            O         o        P        p         q           s          u          V           v           x         y)
OPTDEST=(opt_help opt_nobin opt_branch opt_conf opt_def opt_deps opt_humdrum opt_noloc opt_multi opt_dry_run  opt_org   opt_odir opt_nopy opt_pyver opt_verbose opt_nostop opt_user   opt_version opt_verbose opt_excl  opt_yes)
OPTACTI=(1        1         "="        "="      1       "="      1           1         1         1            "="       "="      1        "="       1           1          "="        "*>"        "+"         "="       1)
OPTDEFL=(0        0         ""         ""       0       ""       0           0         0         0            "zero"    ""       0        ""        -1          0          ""         ""          -1          ""        0)
OPTMETA=("help"   ""        "branch"   "file"   ""      "dir"    ""          ""        ""        "do nothing" "git-org" "path"   ""       ""        "verbose"   ""         "username" "version"   "verbose"   "modules" "")
OPTHELP=("this help"\
 "do not install binary packages in requirements action"\
 "branchs to do action; one or more of 6.1 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 (comma separated)"\
 "configuration file (def .travis.conf)"\
 "default module list"\
 "dependencies directory"\
 "humdrum, display w/o colors"\
 "avoid install pip packages in local"\
 "multi-version odoo environment"\
 "do nothing (dry-run)"\
 "if add_module|[re]build, git organization, one of oca zero[-git|-http] (def zero)"\
 "odoo directory"\
 "do not install python packages in requirements action"\
 "when installer is pip choice python version: may be 2 or 3 (def auto)"
 "silent mode"\
 "no stop after every module/version"\
 "show version"\
 "verbose mode"\
 "module list to exclude (comma separated)"\
 "assume yes")
OPTARGS=(actions)

parseoptargs "$@"
if [[ "$opt_version" ]]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ -z "$actions" ]; then
  opt_help=1
fi
if [[ $opt_verbose -eq -1 ]]; then
  opt_verbose=1
fi
if [[ $opt_help -gt 0 ]]; then
  print_help "Check for all odoo repositories\nactions may be: add_repository build check-config clean lint list oca rebuild requirements status upgrade zeroincombenze"\
  "(C) 2015-2021 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi
if [[ "$actions" == "help" ]]; then
  man $TDIR/$THIS.man
  exit 0
fi

discover_multi
if [ ${opt_humdrum:-0} -eq 0 ]; then
  TRAVIS_TEXT_COLOR="\e[0;97;40m"
  TRAVIS_HDR1_COLOR="\e[30;42m"
  TRAVIS_HDR2_COLOR="\e[30;46m"
  TRAVIS_HDR3_COLOR="\e[30;106m"
  TRAVIS_NOP_COLOR="\e[35;40m"
else
  TRAVIS_TEXT_COLOR=
  TRAVIS_HDR1_COLOR=
  TRAVIS_HDR2_COLOR=
  TRAVIS_HDR3_COLOR=
  TRAVIS_NOP_COLOR=
fi
if [[ -n "$opt_user" && "$opt_user" != "$USER" && $EUID -eq 0 ]]; then
  run_user="$opt_user"
elif [[ -z "$opt_user" && ! $USER =~ (odoo|travis) && $EUID -eq 0 ]]; then
  run_user="odoo"
else
  run_user=
fi
[[ -n "$opt_user" ]] && own_user="$opt_user:$opt_user" || own_user="odoo:odoo"
[[ -n "$run_user" ]] && opts_user="-u$run_user" || opts_user=
if [[ -z "$opt_branch" ]]; then
  opt_branch="14.0 13.0 12.0 11.0 10.0 9.0 8.0 7.0 6.1"
  multi_version_pkgs=1
else
  opt_branch="${opt_branch//,/ }"
  multi_version_pkgs=0
fi
sub_list=
excl_list=$(build_odoo_param INVALID_MODNAMES_RE ".")
if [[ -z $opt_excl ]]; then
  [[ $actions =~ ^(build|rebuild|add_repository|upgrade)$ ]] && opt_excl="v7/OCB"
fi
opt_excl="${opt_excl//,/|}"
excl_list="${excl_list:0: -1}|$opt_excl)"
[[ $actions =~ ^(build|rebuild|add_repository)$ ]] && opt_def=1 || opt_def=0
for odoo_vid in $opt_branch; do
  odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
  if [[ $opt_def -gt 0 ]]; then
    mlist=$(module_list "$odoo_fver" "$excl_list" "$opt_org")
  else
    mlist=$(explore $odoo_vid "$excl_list")
  fi
  for repo in $mlist; do
    if [[ ! " $sub_list " =~ [[:space:]]$repo[[:space:]] ]] ; then
      sub_list="$sub_list $repo"
    fi
  done
done
if [[ $opt_verbose -gt 0 ]]; then
  if [[ $opt_multi -ne 0 ]]; then
    echo -e "${TRAVIS_HDR3_COLOR}Manage Odoo multi-version environment${TRAVIS_TEXT_COLOR}"
  else
    echo -e "${TRAVIS_HDR3_COLOR}Manage single Odoo version environment${TRAVIS_TEXT_COLOR}"
    multi_version_pkgs=0
  fi
fi
if [[ "$actions" == "list" ]]; then
  echo "Repository list:"
  echo "$sub_list"
  [[ "$actions" == "list" && -n "$opt_excl" ]] && echo "-x $opt_excl"
  exit 0
fi
actions="${actions//+/ }"
actions="${actions//,/ }"
sts=0
for repo in $sub_list; do
  for odoo_vid in $opt_branch; do
    for act in $actions; do
      if [[ ! $act =~ ^(requirements|check-config)$ || "$repo" == "OCB" ]]; then
        do_action $act $repo $odoo_vid
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
    done
    if [[ $sts -ne 0 ]]; then
      exit $sts
    elif [[ $opt_nostop -eq 0 ]]; then
      if [[ ! $act =~ ^(requirements|check-config)$ || "$repo" == "OCB" ]]; then
        read -p "Press RET to continue" a
        if [[ "$a" == "q" ]]; then
          exit $sts
        fi
      fi
    fi
  done
done
exit $sts
