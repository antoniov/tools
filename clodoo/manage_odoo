#! /bin/bash
#
# Check for all odoo repositories
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $HOME/tools/clodoo $HOME/dev ${PYPATH//:/ } . .." "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR

__version__=0.3.7.4


explore() {
# explore(odoo_vid)
    local res=OCB
    local pkgdir=$(build_odoo_param HOME $1)
    for fn in $pkgdir/*; do
      if [ -d $fn ]; then
        nm=$(basename $fn)
        if [[ "$nm" == "__unported__" || ( ! "$nm" == "." && "${nm:0:1}" == ".") ]]; then
          continue
        fi
        if [[ ! " $excl_list " =~ [[:space:]]$nm[[:space:]] ]] ; then
          res="$res $nm"
        fi
      fi
    done
    echo $res
}

do_action() {
#do_action(action, repo, odoo_vid)
    local act=$1
    local repo=$2
    local odoo_vid=$3
    local odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
    local odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
    local f s
    local pkgdir=$(build_odoo_param HOME $odoo_vid "$repo")
    local pardir=$(readlink -e $pkgdir)
    local opts=
    if [ $opt_verbose -gt 0 ]; then
      local opts="-v"
    else
      local opts="-q"
    fi
    if [ $opt_multi -ne 0 ]; then
      local opts="${opts}m"
    fi
    if [ $opt_dry_run -ne 0 ]; then
      local opts="${opts}n"
    fi
    local sts=0
    local excl="${opt_excl//,/ }"
    local x
    if [[ ! "$act" == "requirements" && ! "$act" == "check-config" ]]; then
      if [ "$repo" != "$LAST_REPO" -o "$odoo_vid" != "$LAST_VID" ]; then
        echo "=====[$odoo_vid/$repo]====="
        LAST_REPO=$repo
        LAST_VID=$odoo_vid
      else
        echo "--------------------"
      fi
      for x in $excl; do
        if [ "$x" == "$repo" -o "$x" == "$repo/$odoo_vid"  -o "$x" == "$odoo_vid/$repo"  -o "$x" == "$repo/$odoo_fver"  -o "$x" == "$odoo_fver/$repo" ]; then
          return $sts
        fi
      done
    fi
    if [ "$act" == "build" -o "$act" == "rebuild" -o "$act" == "add_modules" ]; then
      ODOO_RPT=$(build_odoo_param GIT_ORG $odoo_vid $repo $opt_org)
      ODOO_URL=$(build_odoo_param GIT_URL $odoo_vid $repo $opt_org)
      GIT_OPTS=$(build_odoo_param GIT_OPTS $odoo_vid $repo $opt_org)
      OPTS_ASM=$(build_odoo_param OPTS_ASM $odoo_vid $repo $opt_org)
    fi
    if [ "$act" == "requirements" ]; then
      [ -n "$opt_deps" ] && dopts="-d $opt_deps" || dopts=
      PIP=pip
      if [ "${TRAVIS_PYTHON_VERSION:0:1}" == "3" ]; then
        [ -f /usr/bin/pip3.6 ] && PIP=/usr/bin/pip3.6
        [ -f /usr/bin/pip3.5 ] && PIP=/usr/bin/pip3.5
        [ -f /usr/bin/pip3.4 ] && PIP=/usr/bin/pip3.4
      fi
      LISTREQ=list_requirements.py
      [ -f $HOME/tools/clodoo/list_requirements.py ] && LISTREQ=$HOME/tools/clodoo/list_requirements.py
      [ -f $TDIR/list_requirements.py ] && LISTREQ=$TDIR/list_requirements.py
      [ -f $HOME/tools/lisa/lisa ] && LISA=$HOME/tools/lisa/lisa || LISA=lisa
      [ -f $TDIR/../../lisa/lisa/lisa ] && LISA=$(readlink -e $TDIR/../../lisa/lisa/lisa)
      [ -f $TDIR/../lisa/lisa ] && LISA=$(readlink -e $TDIR/../lisa/lisa)
      [ $opt_verbose -gt 0 ] && echo "\$ alias pip=$PIP.$($PIP --version)"
      [ $opt_verbose -gt 0 ] && echo "\$ alias lisa=$LISA.$($LISA -V)"
      [ ${TRAVIS_DEBUG_MODE:-0} -gt 2 ] && PYPI_CACHED=$HOME/.local
      [ $multi_version_pkgs -eq 0 ] && OPT_BRANCH=-b$odoo_fver || OPT_BRANCH
      if [ -z "$PYPI_CACHED" ]; then
        eval $PIP install pip -U
        [ $opt_verbose -gt 0 ] && echo "## Analyzing binary requirements"
        breqs=$($LISTREQ $OPT_BRANCH -p $pkgdir $dopts -t bin -s ' ' -qBTR)
        [ $opt_verbose -gt 0 ] && echo "\$ $LISTREQ $OPT_BRANCH -p $pkgdir $dopts -t bin -s ' ' -qBTR"
        [ $opt_verbose -gt 0 ] && echo "\$ breqs=$breqs"
        opts=
        [ $opt_yes -ne 0 ] && opts="${opts}y"
        for f in $breqs; do
          pkg=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|head -n1)
          if [[ $HOSTNAME =~ shs[a-z0-9]+ && "$USER" == "odoo" && "$opt_pyver" != "3"  ]]; then
            echo "Check for $f"
          elif [ "$f" == "$pkg" ]; then
            eval $LISA status -q $pkg -d0
            [ $? -ne 0 ] && run_traced "$LISA install -q $f -d0"
          fi
        done
        [ $opt_verbose -gt 0 ] && echo "## Analyzing python requirements"
        preqs="$($LISTREQ $OPT_BRANCH -p $pkgdir $dopts -t python -s ' ' -qBPTR)"
        [ $opt_verbose -gt 0 ] && echo "\$ $LISTREQ $OPT_BRANCH -p $pkgdir $dopts -t python -s ' ' -qBPTR"
        [ $opt_verbose -gt 0 ] && echo "\$ preqs=$preqs"
        for pass in 1 2 3; do
          [ $pass -eq 1 ] && echo "## Check for package status"
          [ $pass -eq 2 ] && echo "## Upgrade versioned package"
          [ $pass -eq 3 ] && echo "## Check for package version"
          for f in $preqs; do
            op=$(echo "$f"|grep -Eo '[<=>]*'|head -n1)
            pkg=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|head -n1|tr -d "'")
            reqver=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|tr "\n" " "|tr -d "'"|awk '{print $2}')
            sts=0
            if [ $pass -eq 1 -a "$pkg" == "coverage" ]; then
              sts=1
            elif [ $pass -eq 1 ]; then
              eval $LISA status -q $pkg -d0
              sts=$?
            fi
            if [ $sts -eq 1 ] || [ $pass -gt 1 -a -n "$reqver" ]; then
              [ $sts -eq 0 ] && curver=$($PIP show $pkg|grep ^[Vv]ersion|awk -F: '{print $2}'|tr -d ', \r\n\(\)') || curver=
              if [[ (-z "$op" && $sts > 0 && $pass -lt 3) || ($op == "==" && ! $curver == $reqver) || ($op == "<" && ! $curver < $reqver) || ($op == ">" && ! $curver > $reqver) || ($op == ">=" && $curver < $reqver) || ($op == "<=" && $curver > $reqver) ]]; then
                if [ $pass -eq 3 ]; then
                  x=$(eval $LISA version -q $f -d0)
                  echo "$x but expected $op$reqver"
                else
                  cmd="$PIP install -q $f --upgrade --no-warn-conflicts"
                  [ $pass -eq 2 ] && cmd="$cmd --no-deps"
                  [ $EUID -ne 0 ] && cmd="$cmd --user"
                  echo "Update '$pkg' version '$curver' with version '$reqver'"
                  if [ ${TRAVIS_DEBUG_MODE:-0} -gt 1 ]; then
                    echo "> $cmd"
                  else
                    run_traced "$cmd"
                  fi
                fi
              fi
            fi
          done
        done
        x=$(npm list|grep " less@")
        [ -z "$x" ] && x=$(npm list -g|grep " less@")
        if [ "$TRAVIS" == "true" -o -z "$x" ]; then
          if [ $EUID -eq 0 ]; then
            run_traced "npm install -g less less-plugin-clean-css"
          else
            run_traced "npm install less less-plugin-clean-css"
          fi
        fi
      fi
      return $sts
    elif [[ "$act" == "check-config" ]]; then
      cfgfn=$(build_odoo_param CONFN "$odoo_vid")
      echo "Parsing $cfgfn ..."
      p=$(build_odoo_param USER "$odoo_vid")
      [[ ! $(grep "^db_user *= *$p$" $cfgfn) ]] && run_traced "sed -i \"s|^db_user *= *.*|db_user = $p|\" $cfgfn"
      p=$(build_odoo_param FLOG "$odoo_vid")
      [[ ! $(grep "^logfile *= $p$" $cfgfn) ]] && run_traced "sed -i \"s|^logfile *= *.*|logfile = $p|\" $cfgfn"
      p=$(build_odoo_param FPID "$odoo_vid")
      [[ ! $(grep "^pidfile *= *$p$" $cfgfn) ]] && run_traced "sed -i \"s|^pidfile *= *.*|pidfile = $p|\" $cfgfn"
      p=$(build_odoo_param RPCPORT "$odoo_vid")
      [[ ! $(grep "^xmlrpc_port *=.*$p$" $cfgfn) ]] && run_traced "sed -i \"s|^xmlrpc_port *= *.*|xmlrpc_port = $p|\" $cfgfn"
      if [ $odoo_ver -ge 7 ]; then
        p=$(build_odoo_param DDIR "$odoo_vid")
        [[ ! $(grep "^data_dir *= *$p$" $cfgfn 2>/dev/null) ]] && run_traced "sed -i \"s|^data_dir *= *.*|data_dir = $p|\" $cfgfn"
      fi
      return $sts
    elif [ "$act" == "rebuild" -a -d $pkgdir ]; then
      if [ $opt_yes -eq 0 ]; then
        read -p "BRANCH $odoo_vid OF $repo already exist! confirm action (yes,no)?" a
        if [ "$a" != "yes" ]; then
          sts=1
          return $sts
        fi
      fi
      run_traced "rm -fR $pkgdir"
    fi
    if [ "$act" == "add_modules" -a -d $pkgdir ]; then
      return $sts
    elif [ "$act" == "build" -a -d $pkgdir ]; then
      echo "BRANCH $odoo_vid OF $repo ALREADY EXISTS!"
      sts=1
    elif [ "$act" != "build" -a "$act" != "rebuild" -a "$act" != "add_modules" -a ! -d $pkgdir ]; then
      echo "BRANCH $odoo_vid OF $repo NOT FOUND!"
      sts=1
    fi
    if [ $sts -ne 0 ]; then
      return $sts
    fi
    if [ "$act" == "build" -o "$act" == "rebuild" -o "$act" == "add_modules" ]; then
      $TDIR/addsubm.sh $ODOO_URL $odoo_vid $opts -O $opt_org $OPTS_ASM
    else
      run_traced "cd $pkgdir"
      if [ "$act" == "check" ]; then
        if [ ! -L $pkgdir ]; then
          travis . check $opts
          sts=$?
        fi
      elif [ "$act" == "clean" ]; then
        if [ -L $pkgdir ]; then
          :
        else
          if [ "$USER" == "odoo" ]; then
            if [ "$repo" != "OCB" ]; then
              please wep $opts || true
            fi
            $TDIR/list_requirements.py -vPp $pkgdir -o
          fi
          $TDIR/addsubm.sh $repo $odoo_vid $opts -O $opt_org -r
        fi
      elif [ "$act" == "oca" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . oca $opts
        fi
      elif [ "$act" == "oia" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . oia $opts
        fi
      elif [ "$act" == "remote" ]; then
        if $(git status -s &>/dev/null); then
          git remote -v
        else
          echo "No git repository!"
        fi
      elif [ "$act" == "status" ]; then
        if [ ! -L $pkgdir ]; then
          if [ "$(build_odoo_param VCS $odoo_vid)" == "git" ]; then
            local v=$(git branch|grep -Eo [0-9.]+)
            if [ "$v" != "$odoo_fver" ]; then
              echo "INVALID BRANCH VERSION! Expected '$odoo_fver', found '$v'"
              sts=1
            fi
          fi
        fi
      elif [ "$act" == "upgrade" ]; then
        if [ ! -L $pkgdir ]; then
          if $(git status -s &>/dev/null); then
            run_traced "git pull origin $odoo_fver"
          else
            echo "No git repository!"
          fi
        fi
      elif [ "$act" == "zeroincombenze" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . zeroincombenze $opts
        fi
      else
        echo "Invalid action!"
      fi
    fi
    return $sts
}

OPTOPTS=(h        b          c        D       d        m         n            O         p         q           s          V           v           x         y)
OPTDEST=(opt_help opt_branch opt_conf opt_def opt_deps opt_multi opt_dry_run  opt_org   opt_pyver opt_verbose opt_nostop opt_version opt_verbose opt_excl  opt_yes)
OPTACTI=(1        "="        "="      1       "="      1         1            "="       "="       1           1          "*>"        "+"         "="        1)
OPTDEFL=(0        ""         ""       0       ""       0         0            "zero"    "2"       -1          0          ""          -1          ""        0)
OPTMETA=("help"   "branch"   "file"   ""      "dir"    ""        "do nothing" "git-org" ""        "verbose"   ""         "version"   "verbose"   "modules" "")
OPTHELP=("this help"\
 "branchs to do action; one or more of [v]6.1 [v]7.0 [v]8.0 [v]9.0 [v]10.0 [v]11.0 (comma separated)"\
 "configuration file (def .travis.conf)"\
 "default module list"\
 "dependencies directory"\
 "multi-version odoo environment"\
 "do nothing (dry-run)"\
 "if add_module|[re]build, git organization, one of oca oia[-git|-http] zero[-git|-http] (def zero)"\
 "when installer is pip choice python version: may be 2 or 3"
 "silent mode"\
 "no stop after every module/version"\
 "show version"\
 "verbose mode"\
 "module list to exclude (comma separated)"\
 "assume yes")
OPTARGS=(actions)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ -z "$actions" ]; then
  opt_help=1
fi
if [ $opt_verbose -eq -1 ]; then
  opt_verbose=1
fi
if [ $opt_help -gt 0 ]; then
  print_help "Check for all odoo repositories\nactions may be: add_modules build check check-config clean list oca oia rebuild requirements status upgrade zeroincombenze"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

discover_multi
if [ -z "$opt_branch" ]; then
  opt_branch="6.1 7.0 8.0 9.0 10.0 11.0"
  multi_version_pkgs=1
else
  opt_branch="${opt_branch//,/ }"
  multi_version_pkgs=0
fi
sub_list=
excl_list="$INVALID_MODNAMES"
if [ -z $opt_excl ]; then
  if [ "$actions" == "build" -o "$actions" == "rebuild" -o "$act" == "add_modules" ]; then
    opt_excl="v7/OCB"
  else
    opt_excl=""
  fi
fi
opt_excl="${opt_excl//,/ }"
for repo in $opt_excl; do
  if [[ ! "$repo" =~ / ]]; then
    excl_list="$excl_list $repo"
  fi
done
if [ "$actions" == "build" -o "$actions" == "rebuild" -o "$actions" == "add_modules" ]; then
  opt_def=1
fi
for odoo_vid in $opt_branch; do
  odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
  if [ $opt_def -gt 0 ]; then
    mlist=$(module_list "$odoo_fver" "$excl_list" "$opt_org")
  else
    mlist=$(explore $odoo_vid)
  fi
  for repo in $mlist; do
    if [[ ! " $sub_list " =~ [[:space:]]$repo[[:space:]] ]] ; then
      sub_list="$sub_list $repo"
    fi
  done
done
if [ $opt_verbose -gt 0 ]; then
  if [ $opt_multi -ne 0 ]; then
    echo "Manage Odoo multi-version environment"
  else
    echo "Manage single Odoo version environment"
    multi_version_pkgs=0
  fi
fi
if [ "$actions" == "list" ]; then
  echo "Repository list:"
  echo "$sub_list"
  if [ "$actions" == "list" ]; then
    echo "-x $opt_excl"
    exit 0
  fi
fi
actions="${actions//+/ }"
actions="${actions//,/ }"
sts=0
for repo in $sub_list; do
  for odoo_vid in $opt_branch; do
    for act in $actions; do
      if [[ (! "$act" == "requirements" && ! "$act" == "check-config") || "$repo" == "OCB" ]]; then
        do_action $act $repo $odoo_vid
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
    done
    if [ $sts -ne 0 ]; then
      exit $sts
    elif [ $opt_nostop -eq 0 ]; then
      if [[ (! "$act" == "requirements" && ! "$act" == "check-config") || "$repo" == "OCB" ]]; then
        read -p "Press RET to continue" a
        if [ "$a" == "q" ]; then
          exit $sts
        fi
      fi
    fi
  done
done
exit $sts
