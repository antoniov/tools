#! /bin/bash
#
# Check for all odoo repositories
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2015-2018 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYTHONPATH=$(echo -e "import sys\nprint str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1]"|python)
for d in $TDIR $TDIR/.. ${PYTHONPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. ${PYTHONPATH//:/ } . .. $HOME/tools/clodoo $HOME/dev" "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR

__version__=0.3.6.12


explore() {
# explore(odoo_vid)
    local res=OCB
    local pkgdir=$(build_odoo_param HOME $1)
    for fn in $pkgdir/*; do
      if [ -d $fn ]; then
        nm=$(basename $fn)
        if [[ ! " $excl_list " =~ [[:space:]]$nm[[:space:]] ]] ; then
          res="$res $nm"
        fi
      fi
    done
    echo $res
}

do_action() {
#do_action(action, repo, odoo_vid)
    local act=$1
    local repo=$2
    local odoo_vid=$3
    local odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
    local odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
    local f s
    local pkgdir=$(build_odoo_param HOME $odoo_vid "$repo")
    local pardir=$(readlink -e $pkgdir)
    local opts=
    if [ $opt_verbose -gt 0 ]; then
      local opts="-v"
    else
      local opts="-q"
    fi
    if [ $opt_multi -ne 0 ]; then
      local opts="${opts}m"
    fi
    if [ $opt_dry_run -ne 0 ]; then
      local opts="${opts}n"
    fi
    local sts=0
    local excl="${opt_excl//,/ }"
    local x
    if [[ ! "$act" == "requirements" && ! "$act" == "check-config" ]]; then
      if [ "$repo" != "$LAST_REPO" -o "$odoo_vid" != "$LAST_VID" ]; then
        echo "=====[$odoo_vid/$repo]====="
        LAST_REPO=$repo
        LAST_VID=$odoo_vid
      else
        echo "--------------------"
      fi
      for x in $excl; do
        if [ "$x" == "$repo" -o "$x" == "$repo/$odoo_vid"  -o "$x" == "$odoo_vid/$repo"  -o "$x" == "$repo/$odoo_fver"  -o "$x" == "$odoo_fver/$repo" ]; then
          return $sts
        fi
      done
    fi
    if [ "$act" == "build" -o "$act" == "rebuild" -o "$act" == "add_modules" ]; then
      ODOO_RPT=$(build_odoo_param GIT_ORG $odoo_vid $repo $opt_org)
      ODOO_URL=$(build_odoo_param GIT_URL $odoo_vid $repo $opt_org)
      GIT_OPTS=$(build_odoo_param GIT_OPTS $odoo_vid $repo $opt_org)
      OPTS_ASM=$(build_odoo_param OPTS_ASM $odoo_vid $repo $opt_org)
    fi
    if [ "$act" == "requirements" ]; then
      [ -n "$opt_deps" ] && dopts="-d $opt_deps" || dopts=
      [ -f $TDIR/../lisa/lisa ] && LISA=$(readlink -e $TDIR/../lisa/lisa) || LISA=lisa
      [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ LISA=$LISA"
      [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ \$breqs=\$($TDIR/list_requirements.py -b$odoo_fver -p $pkgdir $dopts -t bin -s ' ' -qBTR)"
      breqs=$($TDIR/list_requirements.py -b$odoo_fver -p $pkgdir $dopts -t bin -s ' ' -qBTR)
      [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ breqs=$breqs"
      [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ preqs=\$($TDIR/list_requirements.py -b$odoo_fver -p $pkgdir $dopts -t python -s ' ' -qBPTR)"
      preqs="$reqs $($TDIR/list_requirements.py -b$odoo_fver -p $pkgdir $dopts -t python -s ' ' -qBPTR)"
      [ "${TRAVIS_DEBUG_MODE:-0}" -ne 0 ] && echo "\$ preqs=$preqs"
      reqs="$breqs $preqs"
      opts=
      [ $opt_yes -ne 0 ] && opts="${opts}y"
      [ -n "$opts" ] && opts="-$opts"
      for f in $reqs; do
        pkg=$(echo "$f"|grep -Eo '[^!<=>\\[]*'|head -n1)
        if [[ $HOSTNAME =~ shs[a-z0-9]+ && "$USER" == "odoo" ]]; then
          echo "Check for $f"
        elif [ "$f" == "$pkg" ]; then
          eval $LISA status -q $opts $f
          if [ $? -eq 0 ]; then
            :
            # run_traced "lisa update -q $f"
          else
            run_traced "$LISA install -q $opts $f"
          fi
        else
          run_traced "pip install -q $f --upgrade --no-deps"
        fi
      done
      return $sts
    elif [[ "$act" == "check-config" ]]; then
      cfgfn=$(build_odoo_param CONFN "$odoo_vid")
      echo "Parsing $cfgfn ..."
      p=$(build_odoo_param USER "$odoo_vid")
      [[ ! $(grep "^db_user *= *$p$" $cfgfn) ]] && run_traced "sed -i \"s|^db_user *= *.*|db_user = $p|\" $cfgfn"
      p=$(build_odoo_param FLOG "$odoo_vid")
      [[ ! $(grep "^logfile *= $p$" $cfgfn) ]] && run_traced "sed -i \"s|^logfile *= *.*|logfile = $p|\" $cfgfn"
      p=$(build_odoo_param FPID "$odoo_vid")
      [[ ! $(grep "^pidfile *= *$p$" $cfgfn) ]] && run_traced "sed -i \"s|^pidfile *= *.*|pidfile = $p|\" $cfgfn"
      p=$(build_odoo_param RPCPORT "$odoo_vid")
      [[ ! $(grep "^xmlrpc_port *=.*$p$" $cfgfn) ]] && run_traced "sed -i \"s|^xmlrpc_port *= *.*|xmlrpc_port = $p|\" $cfgfn"
      if [ $odoo_ver -ge 7 ]; then
        p=$(build_odoo_param DDIR "$odoo_vid")
        [[ ! $(grep "^data_dir *= *$p$" $cfgfn 2>/dev/null) ]] && run_traced "sed -i \"s|^data_dir *= *.*|data_dir = $p|\" $cfgfn"
      fi
      return $sts
    elif [ "$act" == "rebuild" -a -d $pkgdir ]; then
      if [ $opt_yes -eq 0 ]; then
        read -p "BRANCH $odoo_vid OF $repo already exist! confirm action (yes,no)?" a
        if [ "$a" != "yes" ]; then
          sts=1
          return $sts
        fi
      fi
      run_traced "rm -fR $pkgdir"
    fi
    if [ "$act" == "add_modules" -a -d $pkgdir ]; then
      return $sts
    elif [ "$act" == "build" -a -d $pkgdir ]; then
      echo "BRANCH $odoo_vid OF $repo ALREADY EXISTS!"
      sts=1
    elif [ "$act" != "build" -a "$act" != "rebuild" -a "$act" != "add_modules" -a ! -d $pkgdir ]; then
      echo "BRANCH $odoo_vid OF $repo NOT FOUND!"
      sts=1
    fi
    if [ $sts -ne 0 ]; then
      return $sts
    fi
    if [ "$act" == "build" -o "$act" == "rebuild" -o "$act" == "add_modules" ]; then
      $TDIR/addsubm.sh $ODOO_URL $odoo_vid $opts -O $opt_org $OPTS_ASM
    else
      run_traced "cd $pkgdir"
      if [ "$act" == "check" ]; then
        if [ ! -L $pkgdir ]; then
          travis . check $opts
          sts=$?
        fi
      elif [ "$act" == "clean" ]; then
        if [ -L $pkgdir ]; then
          :
        else
          if [ "$USER" == "odoo" ]; then
            if [ "$repo" != "OCB" ]; then
              please wep $opts || true
            fi
            list_requirements.py -vPp $pkgdir -o
          fi
          $TDIR/addsubm.sh $repo $odoo_vid $opts -O $opt_org -r
        fi
      elif [ "$act" == "oca" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . oca $opts
        fi
      elif [ "$act" == "oia" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . oia $opts
        fi
      elif [ "$act" == "remote" ]; then
        if $(git status -s &>/dev/null); then
          git remote -v
        else
          echo "No git repository!"
        fi
      elif [ "$act" == "status" ]; then
        if [ ! -L $pkgdir ]; then
          if [ "$(build_odoo_param VCS $odoo_vid)" == "git" ]; then
            local v=$(git branch|grep -Eo [0-9.]+)
            if [ "$v" != "$odoo_fver" ]; then
              echo "INVALID BRANCH VERSION! Expected '$odoo_fver', found '$v'"
              sts=1
            fi
          fi
        fi
      elif [ "$act" == "upgrade" ]; then
        if [ ! -L $pkgdir ]; then
          if $(git status -s &>/dev/null); then
            run_traced "git pull origin $odoo_fver"
          else
            echo "No git repository!"
          fi
        fi
      elif [ "$act" == "zeroincombenze" ]; then
        if [ ! -L $pkgdir ]; then
          please synchro . zeroincombenze $opts
        fi
      else
        echo "Invalid action!"
      fi
    fi
    return $sts
}

OPTOPTS=(h        b          c        D       d        m         n            O         q           s          V           v           x         y)
OPTDEST=(opt_help opt_branch opt_conf opt_def opt_deps opt_multi opt_dry_run  opt_org   opt_verbose opt_nostop opt_version opt_verbose opt_excl  opt_yes)
OPTACTI=(1        "="        "="      1       "="      1         1            "="   0   1           "*>"        "+"         "="       1)
OPTDEFL=(0        ""         ""       0       ""       0         0            "zero"    -1          0          ""          -1          ""        0)
OPTMETA=("help"   "branch"   "file"   ""      "dir"    ""        "do nothing" "git-org" "verbose"   ""         "version"   "verbose"   "modules" "")
OPTHELP=("this help"\
 "branchs to do action; one or more of [v]6.1 [v]7.0 [v]8.0 [v]9.0 [v]10.0 [v]11.0 (comma separated)"\
 "configuration file (def .travis.conf)"\
 "default module list"\
 "dependencies directory"\
 "multi-version odoo environment"\
 "do nothing (dry-run)"\
 "if add_module|[re]build, git organization, one of oca oia[-git|-http] zero[-git|-http] (def zero)"\
 "silent mode"\
 "no stop after every module/version"\
 "show version"\
 "verbose mode"\
 "module list to exclude (comma separated)"\
 "assume yes")
OPTARGS=(actions)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ -z "$actions" ]; then
  opt_help=1
fi
if [ $opt_verbose -eq -1 ]; then
  opt_verbose=1
fi
if [ $opt_help -gt 0 ]; then
  print_help "Check for all odoo repositories\nactions may be: add_modules build check check-config clean list oca oia rebuild requirements status upgrade zeroincombenze"\
  "(C) 2015-2018 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

discover_multi
if [ -z "$opt_branch" ]; then
  opt_branch="6.1 7.0 8.0 9.0 10.0 11.0"
else
  opt_branch="${opt_branch//,/ }"
fi
sub_list=
excl_list="$INVALID_MODNAMES"
if [ -z $opt_excl ]; then
  if [ "$actions" == "build" -o "$actions" == "rebuild" -o "$act" == "add_modules" ]; then
    opt_excl="OCB/v7,cscs_addons,l10n-italy/7.0,website/7.0,account_banking_cscs/v7,account_banking_cscs/8.0,account_banking_cscs/9.0,account_banking_cscs/10.0,account_invoice_create_payment,account_payment_approve_invoice,zeroincombenze,openerp_gantt_chart_modification,connector,social,bank-statement-import,pylint-odoo,operating-unit,event,account-invoice-reporting,manufacture,survey,margin-analysis,vertical-association,runbot-addons,intrastat,connector-odoo2odoo,webhook,interface-github,product-kitting,vertical-isp,vertical-education,website-cms,hr,hr-timesheet,management-system,rma,queue,e-commerce,delivery-carrier,bank-statement-reconcile,geospatial,account-fiscal-rule,pos,contract,sale-reporting,purchase-reporting,manufacture-reporting,sale-financial,edi,stock-logistics-reporting,project-reporting,product-variant"
  else
    opt_excl="OCB/v7,cscs_addons,l10n-italy/7.0,l10n-italy-supplemental,website/7.0,account_banking_cscs,account_invoice_create_payment,account_payment_approve_invoice,zeroincombenze,openerp_gantt_chart_modification,connector,social,bank-statement-import,pylint-odoo,operating-unit,event,survey,account-invoice-reporting,manufacture,survey,margin-analysis,vertical-association,runbot-addons,intrastat,webhook,interface-github,connector-odoo2odoo,product-kitting,vertical-isp,vertical-education,website-cms,hr,hr-timesheet,management-system,rma,queue,e-commerce,delivery-carrier,bank-statement-reconcile,geospatial,account-fiscal-rule,pos,contract,sale-reporting,purchase-reporting,manufacture-reporting,sale-financial,edi,stock-logistics-reporting,project-reporting,product-variant"
  fi
fi
opt_excl="${opt_excl//,/ }"
if [[ " $opt_excl " =~ [[:space:]]themes[[:space:]] ]]; then
  :
else
  opt_excl="$opt_excl themes"
fi
if [[ " $opt_excl " =~ [[:space:]]website/7.0[[:space:]] ]]; then
  :
elif [[ " $opt_excl " =~ [[:space:]]7.0/website[[:space:]] ]]; then
  :
else
  opt_excl="$opt_excl website/7.0"
fi
for repo in $opt_excl; do
  if [[ ! "$repo" =~ / ]]; then
    excl_list="$excl_list $repo"
  fi
done
if [ "$actions" == "build" -o "$actions" == "rebuild" -o "$actions" == "add_modules" ]; then
  opt_def=1
fi
for odoo_vid in $opt_branch; do
  odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
  if [ $opt_def -gt 0 ]; then
    mlist=$(module_list "$odoo_fver" "$excl_list")
  else
    mlist=$(explore $odoo_vid)
  fi
  for repo in $mlist; do
    if [[ ! " $sub_list " =~ [[:space:]]$repo[[:space:]] ]] ; then
      sub_list="$sub_list $repo"
    fi
  done
done
if [ $opt_verbose -gt 0 ]; then
  if [ $opt_multi -ne 0 ]; then
    echo "Manage Odoo multi-version environment"
  else
    echo "Manage single Odoo version environment"
  fi
fi
if [ "$actions" == "list" -o $opt_verbose -gt 0 ]; then
  echo "Repository list:"
  echo "$sub_list"
  if [ "$actions" == "list" ]; then
    echo "-x $opt_excl"
    exit 0
  fi
fi
actions="${actions//+/ }"
actions="${actions//,/ }"
sts=0
for repo in $sub_list; do
  for odoo_vid in $opt_branch; do
    for act in $actions; do
      if [[ (! "$act" == "requirements" && ! "$act" == "check-config") || "$repo" == "OCB" ]]; then
        do_action $act $repo $odoo_vid
        s=$?; [ ${s-0} -ne 0 ] && sts=$s
      fi
    done
    if [ $sts -ne 0 ]; then
      exit $sts
    elif [ $opt_nostop -eq 0 ]; then
      if [[ (! "$act" == "requirements" && ! "$act" == "check-config") || "$repo" == "OCB" ]]; then
        read -p "Press RET to continue" a
        if [ "$a" == "q" ]; then
          exit $sts
        fi
      fi
    fi
  done
done
exit $sts
