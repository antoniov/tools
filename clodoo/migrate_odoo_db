#! /bin/bash
# -*- coding: utf-8 -*-
#
# Upgrae Odoo DB - Recall OCA openupgrade with right parameters
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $HOME/tools/clodoo $HOME/dev ${PYPATH//:/ } . .." "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.3.8.17


set_priv() {
    if [ -z "$1" -o -z "$2" ]; then
      echo $0 DB OWNER
      exit 1
    fi
    local DB=$1
    local OWNER=$2
    run_traced "psql -Upostgres -qc 'COMMENT ON EXTENSION plpgsql IS null;' $DB"
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON DATABASE $DB TO $OWNER;' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DEFAULT PRIVILEGES GRANT ALL ON TABLES TO $OWNER' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DEFAULT PRIVILEGES GRANT ALL ON SEQUENCES TO $OWNER' $DB"
}

reassign_owner() {
    if [ -z "$1" -o -z "$3" ]; then
      echo $0 DB OLD_OWNER NEW_OWNER
      exit 1
    fi
    local DB=$1
    local OLD_OWNER=$2
    local NEW_OWNER=$3
    local tbl
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON DATABASE $DB TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DATABASE $DB OWNER TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DEFAULT PRIVILEGES GRANT ALL ON TABLES TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DEFAULT PRIVILEGES GRANT ALL ON SEQUENCES TO $NEW_OWNER' $DB"
    if [ $opt_dry_run -eq 0 ]; then
      [ $opt_verbose -gt 0 ] && echo "Reassigning all tables ..."
      for tbl in $(psql -Upostgres -qAtc "select tablename from pg_tables where schemaname = 'public'" $DB); do
        psql -Upostgres -qc "ALTER TABLE \"$tbl\" OWNER TO $NEW_OWNER" $DB
        psql -Upostgres -qc "GRANT ALL PRIVILEGES ON TABLE \"$tbl\" TO $NEW_OWNER" $DB
      done
      for tbl in $(psql -Upostgres -qAtc "select sequence_name from information_schema.sequences where sequence_schema = 'public'" $DB); do
        psql -Upostgres -qc "ALTER SEQUENCE \"$tbl\" OWNER TO $NEW_OWNER" $DB
        psql -Upostgres -qc "GRANT ALL PRIVILEGES ON SEQUENCE \"$tbl\" TO $NEW_OWNER" $DB
      done
      for tbl in $(psql -qAtc "select table_name from information_schema.views where table_schema = 'public'" $DB); do
        psql -Upostgres -qc "ALTER VIEW \"$tbl\" OWNER TO $NEW_OWNER" $DB
        psql -Upostgres -qc "GRANT ALL PRIVILEGES ON TABLE \"$tbl\" TO $NEW_OWNER" $DB
      done
    fi
    [ -n "$OLD_OWNER" ] && run_traced "psql -Upostgres -qc 'GRANT $OLD_OWNER TO $NEW_OWNER;' $DB"
}

# main
OPTOPTS=(h        B         b          c        D       d        F        n            O          r       q           S        V           v)
OPTDEST=(opt_help opt_debug opt_branch opt_conf opt_del opt_db   opt_from opt_dry_run  opt_oupath opt_red opt_verbose opt_safe opt_version opt_verbose)
OPTACTI=(1        1         "="        "="      1       "=>"     "="      1            "="        1       0           1        "*>"        "+")
OPTDEFL=(1        0         ""         ""       0       ""       ""       0            ""         0       -1          0        ""          -1)
OPTMETA=("help"   ""        "version"  "file"   ""      "dbname" "ver"    "do nothing" "path"     ""      "silent"    ""       "version"    "verbose")
OPTHELP=("this help"\
 "activate debug statements"\
 "to odoo branch; may be 6.1 7.0 8.0 9.0 10.0 11.0 or 12.0"\
 "source odoo configuration file (def in /etc/odoo)"
 "delete DB if exists"\
 "DB name to upgrade"\
 "from odoo branch, value like -b switch"\
 "do nothing (dry-run)"\
 "openupgrade path (def ~/openupgrade)"\
 "reduct repository only to addons and l10n_italy"
 "silent mode"\
 "safe mode (do upgrade all before upgrade)"\
 "show version"\
 "verbose mode")
OPTARGS=()

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Upgrade Odoo DB from a version to another"\
  "(C) 2019 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

[ -z $opt_oupath ] && opt_oupath=$HOME/openupgrade
if [ ! -x $opt_oupath/scripts/migrate.py ]; then
  echo "Package openupgrade not found in $opt_oupath"
  echo "Please type following lines to install:"
  echo "cd $HOME"
  echo "git clone https://github.com/OCA/openupgrade.git openupgrade/ --depth 1"
  exit 1
fi
OPENUPGRADE=opt_oupath=$HOME/openupgrade
if [ -z $opt_db ]; then
  echo "Missed dayabase to upgrade! Please use -d switch"
  exit 1
fi
if [ -z $opt_from ]; then
  echo "Missed original odoo version! Please use -F switch"
  exit 1
fi
if [ -z $opt_branch ]; then
  echo "Missed final odoo version! Please use -b switch"
  exit 1
fi
from_ver=$(build_odoo_param MAJVER $opt_from)
final_ver=$(build_odoo_param MAJVER $opt_branch)
if [ $final_ver -le $from_ver ]; then
  echo "Invalid original or final version:"
  echo "final version must be greater than original version" 
fi
discover_multi
# Pass 1: test for environment
echo "Pass 1: test environment migration from $from_ver to $final_ver .."
SAVE_DRY_RUN=$opt_dry_run
opt_dry_run=1
running=1
src_vid=$opt_from
src_db=$opt_db
while [ $running ]; do
  src_ver=$(build_odoo_param MAJVER $src_vid)
  tgt_ver=$src_ver
  ((tgt_ver++))
  tgt_vid=${src_vid/$src_ver/$tgt_ver}
  src_user=$(build_odoo_param USER $src_vid)
  tgt_user=$(build_odoo_param USER $tgt_vid)
  [ -n "$opt_conf" ] && confn=$opt_conf || confn=$(build_odoo_param CONFN $src_vid)
  lconf=$(build_odoo_param LCONFN $src_vid search)
  odoo_bin=$(basename $(build_odoo_param BIN $src_vid))
  echo "Pass 1: test migration from $src_vid to $tgt_vid .."
  if [ ! -f $confn ]; then
    echo "Configuration file $confn not found!"
    exit 1
  fi
  if [ "$src_user" != "$tgt_user" ]; then
    reassign_owner ${src_db}_migrated $src_user $tgt_user
  fi
  run_traced "run_odoo_debug -b $tgt_vid -d ${src_db}_migrated -umall -s"
  src_vid=$tgt_vid
  src_ver=$tgt_ver
  src_db=${src_db}_migrated
  [ $tgt_ver -ge $final_ver ] && break
done
opt_dry_run=$SAVE_DRY_RUN
echo "Pass 2: test environment migration from $from_ver to $final_ver .."
#
# opt_dry_run=1         #DEBUG
if [ $opt_del -ne 0 ]; then
  run_traced "pg_db_active -wa ${opt_db}_migrated"
  run_traced "dropdb -Upostgres ${opt_db}_migrated"
fi
src_user=$(build_odoo_param USER $opt_from)
if [ $opt_safe -ne 0 ]; then
  set_priv $opt_db $src_user
  run_traced "run_odoo_debug -b $opt_from -d $opt_db -umall -s"
fi
[ $opt_dry_run -ne 0 ] && exit 0
# pass 2: execute commands
running=1
src_vid=$opt_from
src_db=$opt_db
while [ $running ]; do
  src_ver=$(build_odoo_param MAJVER $src_vid)
  tgt_ver=$src_ver
  ((tgt_ver++))
  tgt_vid=${src_vid/$src_ver/$tgt_ver}
  src_user=$(build_odoo_param USER $src_vid)
  tgt_user=$(build_odoo_param USER $tgt_vid)
  [ -n "$opt_conf" ] && confn=$opt_conf || confn=$(build_odoo_param CONFN $src_vid)
  lconf=$(build_odoo_param LCONFN $src_vid search)
  odoo_bin=$(basename $(build_odoo_param BIN $src_vid))
  echo "Pass 2: migrating from $src_vid to $tgt_vid .."
  if [ ! -f $confn ]; then
    echo "Configuration file $confn not found!"
    exit 1
  fi
  [ -f $HOME/.openerp_serverrc ] && rm -f $HOME/.openerp_serverrc
  [ -f $HOME/.odoorc ] && rm -f $HOME/.odoorc
  echo "\$ cp $confn $HOME/$lconf"
  cp $confn $HOME/$lconf
  apath=$(grep "^addons_path *=" $HOME/$lconf|awk -F= '{print $2}'|tr ',' ' ')
  addons_path=
  for path in $apath; do
    if [[ $path =~ (/addons/?|/openerp/addons/?|/odoo/addons/?|/l10n-italy/?)$ ]]; then
      addons_path=$addons_path,$path
    fi
  done
  addons_path=${addons_path:1}
  run_traced "sed -i -e 's:^db_port *=.*:db_port = 5432:' $HOME/$lconf"
  [ $opt_red -ne 0 ] && run_traced "sed -i -e 's:^addons_path *=.*:addons_path = '$addons_path':' $HOME/$lconf"
  run_traced "sed -i -e 's:^db_user *=.*:db_user = '$src_user':' $HOME/$lconf"
  run_traced "$opt_oupath/scripts/migrate.py -C $HOME/$lconf -D $src_db -R $tgt_vid"
  if [ -d /var/tmp/openupgrade/$tgt_vid/server/ ]; then
    confn=/var/tmp/openupgrade/$tgt_vid/server.cfg
    run_traced "python /var/tmp/openupgrade/$tgt_vid/server/$odoo_bin --update=all --database=${src_db}_migrated --config=$confn --stop-after-init --no-xmlrpc"
  else
    echo "Something is wrong .. cannot find directory /var/tmp/openupgrade/$tgt_vid/server/"
    [ $opt_dry_run -eq 0 ] && exit 1
  fi
  if [ "$src_user" != "$tgt_user" ]; then
    run_traced "reassign_owner ${src_db}_migrated $src_user $tgt_user"
    run_traced "sed -i -e 's:^db_user *=.*:db_user = '$tgt_user':' $confn"
  fi
  run_traced "run_odoo_debug -b $tgt_vid -d ${src_db}_migrated -umall -s"
  src_vid=$tgt_vid
  src_ver=$tgt_ver
  src_db=${src_db}_migrated
  [ $tgt_ver -ge $final_ver ] && break
done
