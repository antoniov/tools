#! /bin/bash
# -*- coding: utf-8 -*-
#
# Upgrae Odoo DB - Recall OCA openupgrade with right parameters
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $HOME/tools/clodoo $HOME/dev ${PYPATH//:/ } . .." "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)

__version__=0.3.8.48


set_priv() {
    if [ -z "$1" -o -z "$2" ]; then
      echo $0 DB OWNER
      exit 1
    fi
    local DB=$1
    local OWNER=$2
    run_traced "psql -Upostgres -qc 'COMMENT ON EXTENSION plpgsql IS null;' $DB"
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON DATABASE $DB TO $OWNER;' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DEFAULT PRIVILEGES GRANT ALL ON TABLES TO $OWNER' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DEFAULT PRIVILEGES GRANT ALL ON SEQUENCES TO $OWNER' $DB"
}

reassign_owner() {
    if [ -z "$1" -o -z "$3" ]; then
      echo $0 DB OLD_OWNER NEW_OWNER
      exit 1
    fi
    local DB=$1
    local OLD_OWNER=$2
    local NEW_OWNER=$3
    local tbl
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON DATABASE $DB TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DATABASE $DB OWNER TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DEFAULT PRIVILEGES GRANT ALL ON TABLES TO $NEW_OWNER' $DB"
    run_traced "psql -Upostgres -qc 'ALTER DEFAULT PRIVILEGES GRANT ALL ON SEQUENCES TO $NEW_OWNER' $DB"
    if [ $opt_dry_run -eq 0 ]; then
      [ $opt_verbose -gt 0 ] && echo "Reassigning all tables ..."
      for tbl in $(psql -Upostgres -qAtc "select tablename from pg_tables where schemaname = 'public'" $DB); do
        psql -Upostgres -qc "ALTER TABLE \"$tbl\" OWNER TO $NEW_OWNER" $DB
        psql -Upostgres -qc "GRANT ALL PRIVILEGES ON TABLE \"$tbl\" TO $NEW_OWNER" $DB
      done
      for tbl in $(psql -Upostgres -qAtc "select sequence_name from information_schema.sequences where sequence_schema = 'public'" $DB); do
        psql -Upostgres -qc "ALTER SEQUENCE \"$tbl\" OWNER TO $NEW_OWNER" $DB
        psql -Upostgres -qc "GRANT ALL PRIVILEGES ON SEQUENCE \"$tbl\" TO $NEW_OWNER" $DB
      done
      for tbl in $(psql -qAtc "select table_name from information_schema.views where table_schema = 'public'" $DB); do
        psql -Upostgres -qc "ALTER VIEW \"$tbl\" OWNER TO $NEW_OWNER" $DB
        psql -Upostgres -qc "GRANT ALL PRIVILEGES ON TABLE \"$tbl\" TO $NEW_OWNER" $DB
      done
    fi
    [ -n "$OLD_OWNER" ] && run_traced "psql -Upostgres -qc 'GRANT $OLD_OWNER TO $NEW_OWNER;' $DB"
}

load_openupgrade() {
# load_openupgrade(ver)
    local odoo_fver=$1 x ver
    if [[ -d $opt_oupath && -d $opt_oupath/scripts ]]; then
      if [[ -d $opt_oupath/odoo && -f $opt_oupath/odoo/release.py ]]; then
        pushd $opt_oupath/odoo > /dev/null
      elif [[ -d $opt_oupath/openerp && -f $opt_oupath/openerp/release.py ]]; then
        pushd $opt_oupath/openerp > /dev/null
      fi
      x=$(echo -e "from __future__ import print_function\nimport release\nprint(release.version)\n"|python)
      ver=$(get_odoo_full_ver "$x")
      popd &>/dev/null
    fi
    if [[ ! -d $opt_oupath || ! -x $opt_oupath/scripts/migrate.py || ! "$ver" == "$odoo_fver" ]]; then
      pushd $(dirname $opt_oupath) > /dev/null
      [[ -d $opt_oupath ]] && rm -fR $opt_oupath
      run_traced "git clone https://github.com/OCA/openupgrade.git $opt_oupath --depth 1 -b $odoo_fver"
      popd > /dev/null
    fi
    if [ ! -x $opt_oupath/scripts/migrate.py ]; then
      echo "Package openupgrade not found in $opt_oupath"
      echo "Please type following lines to install:"
      echo "cd $HOME"
      echo "git clone https://github.com/OCA/openupgrade.git openupgrade/ --depth 1 -b $odoo_fver"
      exit 1
    fi
}

add_versioned_tnl() {
    local tgt_fver=$(build_odoo_param FULLVER $tgt_vid)
    cd $opt_oupath
    cat << EOF > $TDIR/migrate_odoo_db_add_tnl.py
import sys
sys.path.append('')
sys.path.append('$TDIR')
import transodoo
import openerp.addons.openupgrade_records.lib.apriori as apriori
VERSIONS = ('6.1', '7.0', '8.0', '9.0', '10.0', '11.0', '12.0')
ctx = {}
transodoo.read_stored_dict(ctx)


def add_tnl_item(ctx, model, module, new_module, type=False):
    tnl = transodoo.translate_from_to(ctx, model, module, '$src_fver','$tgt_fver', type=type)
    if tnl != new_module:
        ver_names = {}
        name = module
        for ver in VERSIONS:
            if ver == '$tgt_fver':
                name = new_module
            ver_names[ver] = name
        uname = transodoo.set_uname(typ, name, [ver_names[x] for x in VERSIONS])
        for ver in VERSIONS:
            ctx['mindroot']  = transodoo.link_versioned_name(
                ctx['mindroot'],
                model,
                uname,
                typ,
                ver_names[ver],
                ver)
    return ctx

model = 'ir.module.module'
if hasattr(apriori, 'renamed_modules'):
    typ = 'module'
    for module in apriori.renamed_modules:
        new_module = apriori.renamed_modules[module]
        ctx = add_tnl_item(ctx, model, module, new_module, type=typ)
if hasattr(apriori, 'merged_modules'):
    typ = 'merge'
    for item in apriori.merged_modules:
        module = item[0]
        new_module = item[1]
        ctx = add_tnl_item(ctx, model, module, new_module, type=typ)
if hasattr(apriori, 'renamed_models'):
    model = 'ir.model'
    typ = 'model'
    for item in apriori.renamed_models:
        module = item[0]
        new_module = item[1]
        ctx = add_tnl_item(ctx, model, module, new_module, type=typ)

transodoo.write_stored_dict(ctx)
EOF
    python $TDIR/migrate_odoo_db_add_tnl.py
}
translate_ml() {
#translate_ml(ML)
    local tgt_fver=$(build_odoo_param FULLVER $tgt_vid)
    cd $opt_oupath
    cat << EOF > $TDIR/migrate_odoo_db_tnl_ml.py
import sys
sys.path.append('$TDIR')
import transodoo

ctx = {}
transodoo.read_stored_dict(ctx)

ML = '$1'.split(',')
NEW_ML = []
model = 'ir.module.module'
for item in ML:
    tnl = transodoo.translate_from_to(ctx, model, item, '$src_fver','$tgt_fver', type='module')
    if tnl == item:
        tnl = transodoo.translate_from_to(ctx, model, item, '$src_fver','$tgt_fver', type='merge')
    NEW_ML.append(tnl)

print ','.join(NEW_ML)
EOF
    python $TDIR/migrate_odoo_db_tnl_ml.py
}

# main
OPTOPTS=(h        B         b          c        D       d        F        n            O          P         r       q           S        U        V           v)
OPTDEST=(opt_help opt_debug opt_branch opt_conf opt_del opt_db   opt_from opt_dry_run  opt_oupath opt_dpath opt_red opt_verbose opt_safe opt_user opt_version opt_verbose)
OPTACTI=(1        1         "="        "="      1       "=>"     "="      1            "="        "="       1       0           1        "="      "*>"        "+")
OPTDEFL=(1        0         ""         ""       0       ""       ""       0            ""         ""        0       -1          0        "admin"  ""          -1)
OPTMETA=("help"   ""        "version"  "file"   ""      "dbname" "ver"    "do nothing" "path"     "path"    ""      "silent"    ""       "user"   "version"    "verbose")
OPTHELP=("this help"\
 "activate debug statements"\
 "to odoo branch; may be 6.1 7.0 8.0 9.0 10.0 11.0 or 12.0"\
 "source odoo configuration file (def in /etc/odoo)"
 "delete DB if exists"\
 "DB name to upgrade"\
 "from odoo branch, value like -b switch"\
 "do nothing (dry-run)"\
 "openupgrade initial path (def ~/openupgrade)"\
 "downloaded openupgrade path (def ~/tmp)"\
 "reduct repository only to addons and l10n_italy"
 "silent mode"\
 "safe mode (do upgrade all before upgrade)"\
 "login username"\
 "show version"\
 "verbose mode")
OPTARGS=()

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit 0
fi
if [ $opt_help -gt 0 ]; then
  print_help "Upgrade Odoo DB from a version to another"\
  "(C) 2019 by zeroincombenze(R)\nhttp://www.zeroincombenze.it\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit 0
fi

[ -z $opt_oupath ] && opt_oupath=$HOME/openupgrade
[ -z $opt_dpath ] && opt_dpath=$HOME/tmp
[ ! -d "$opt_dpath" ] && mkdir -p $opt_dpath
if [ -z $opt_db ]; then
  echo "Missed database to upgrade! Please use -d switch"
  exit 1
fi
if [ -z $opt_from ]; then
  echo "Missed original odoo version! Please use -F switch"
  exit 1
fi
if [ -z $opt_branch ]; then
  echo "Missed final odoo version! Please use -b switch"
  exit 1
fi
from_ver=$(build_odoo_param MAJVER $opt_from)
final_ver=$(build_odoo_param MAJVER $opt_branch)
if [ $final_ver -le $from_ver ]; then
  echo "Invalid original or final version:"
  echo "final version must be greater than original version" 
fi
discover_multi


# Pass 1: test for environment
echo "Pass 1: test environment migration from $from_ver to $final_ver .."
SAVE_DRY_RUN=$opt_dry_run
opt_dry_run=1
running=1
src_vid=$opt_from
src_db=$opt_db
while [ $running ]; do
  src_ver=$(build_odoo_param MAJVER $src_vid)
  tgt_ver=$src_ver
  ((tgt_ver++))
  tgt_vid=${src_vid/$src_ver/$tgt_ver}
  [[ $tgt_vid =~ ^[Vv] ]] && tgt_vid=$(build_odoo_param FULLVER ${tgt_vid:1})
  src_user=$(build_odoo_param USER $src_vid)
  tgt_user=$(build_odoo_param USER $tgt_vid)
  [ -n "$opt_conf" -a "$src_vid" == "$opt_from" ] && confn=$opt_conf || confn=$(build_odoo_param CONFN $src_vid)
  lconf=$(build_odoo_param LCONFN $src_vid search)
  odoo_bin=$(basename $(build_odoo_param BIN $src_vid))
  echo "Pass 1: test migration from $src_vid to $tgt_vid .."
  if [ ! -f $confn ]; then
    echo "Configuration file $confn not found!"
    exit 1
  fi
  if [ "$src_user" != "$tgt_user" ]; then
    reassign_owner ${src_db}_migrated $src_user $tgt_user
  fi
  run_traced "$TDIR/run_odoo_debug -b $tgt_vid -d ${src_db}_migrated -umall -s"
  src_vid=$tgt_vid
  src_ver=$tgt_ver
  src_db=${src_db}_migrated
  [ $tgt_ver -ge $final_ver ] && break
done
opt_dry_run=$SAVE_DRY_RUN

echo "Pass 2: test environment migration from $from_ver to $final_ver .."
if [ $opt_del -ne 0 ]; then
  run_traced "pg_db_active -wa ${opt_db}_migrated"
  run_traced "dropdb -Upostgres ${opt_db}_migrated"
fi
src_user=$(build_odoo_param USER $opt_from)
if [ $opt_safe -ne 0 ]; then
  set_priv $opt_db $src_user
  run_traced "$TDIR/run_odoo_debug -b $opt_from -d $opt_db -umall -s"
fi
[ $opt_dry_run -ne 0 ] && exit 0
# pass 2: execute commands
[[ -z "$pwd" ]] && read -sp "Login password for login user $opt_user: "  pwd
echo ""
[ -z "$pwd" ] && pwd=admin
running=1
src_vid=$opt_from
src_db=$opt_db
PROTECTED_MODULES="account,base,board,document,knowledge,l10n_it_base,l10n_it_fiscal,sale,product,purchase,sale,stock"

while [ $running ]; do
  src_ver=$(build_odoo_param MAJVER $src_vid)
  tgt_ver=$src_ver
  ((tgt_ver++))
  tgt_vid=${src_vid/$src_ver/$tgt_ver}
  [[ $tgt_vid =~ ^[Vv] ]] && tgt_vid=$(build_odoo_param FULLVER ${tgt_vid:1})
  src_fver=$(build_odoo_param FULLVER $src_vid)
  load_openupgrade $tgt_vid
  add_versioned_tnl
  src_user=$(build_odoo_param USER $src_vid)
  tgt_user=$(build_odoo_param USER $tgt_vid)
  [ -n "$opt_conf" -a "$src_vid" == "$opt_from" ] && confn=$opt_conf || confn=$(build_odoo_param CONFN $src_vid)
  lconf=$(build_odoo_param LCONFN $src_vid search)
  odoo_bin=$(basename $(build_odoo_param BIN $src_vid))
  echo "Pass 2: migrating from $src_vid to $tgt_vid .."
  if [ ! -f $confn ]; then
    echo "Configuration file $confn not found!"
    exit 1
  fi
  [ -f $HOME/.openerp_serverrc ] && rm -f $HOME/.openerp_serverrc
  [ -f $HOME/.odoorc ] && rm -f $HOME/.odoorc
  echo "\$ cp $confn $HOME/$lconf"
  cp $confn $HOME/$lconf
  run_traced "sed -i -e 's:^db_user *=.*:db_user = '$src_user':' $HOME/$lconf"
  run_traced "sed -i -e 's:^db_port *=.*:db_port = 5432:' $HOME/$lconf"
  echo "psycopg2=True">>$HOME/$lconf
  echo "login_user=$opt_user">>$HOME/$lconf
  echo "login_password=$pwd">>$HOME/$lconf
  echo "oe_version=$src_fver">>$HOME/$lconf
  apath=$(grep "^addons_path *=" $HOME/$lconf|awk -F= '{print $2}'|tr ',' ' ')
  ML=$(odoo_dependencies.py $apath -c $HOME/$lconf -D $src_db -A dep)
  echo "Modules found in DB: $ML"
  echo "Protected modules: $PROTECTED_MODULES"
  PML=$(odoo_dependencies.py $apath -A dep -M $PROTECTED_MODULES)
  tgt_confn=$(build_odoo_param CONFN $tgt_vid)
  apath=$(grep "^addons_path *=" $tgt_confn|awk -F= '{print $2}'|tr ',' ' ')
  # Module list not avaiable in new version
  ML=$(translate_ml "$ML")
  echo "New module names: $ML"
  M2D=$(odoo_dependencies.py $apath -A mod -M $ML -E)
  if [ -n "$M2D" ]; then
    echo "**** Warning! Uninstall modules $M2D"
    read -p "Press RET to start uninstall module no avaiable on new version"
    run_traced "$TDIR/clodoo.py -c $HOME/$lconf -d $src_db -A uninstall_modules -m $M2D"
    sts=$?
    if [ $sts -ne 0 ]; then
      echo "Something is wrong .. cannot cannot uninstall some modules"
      exit 1
    fi
  fi
  [ -d $opt_dpath/$tgt_vid ] && run_traced "rm -fR $opt_dpath/$tgt_vid"
  run_traced "$opt_oupath/scripts/migrate.py -B $opt_dpath -C $HOME/$lconf -D $src_db -R $tgt_vid"
  if [ -d $opt_dpath/$tgt_vid/server/ ]; then
    confn=$opt_dpath/$tgt_vid/server.cfg
    run_traced "python $opt_dpath/$tgt_vid/server/$odoo_bin --update=all --database=${src_db}_migrated --config=$confn --stop-after-init --no-xmlrpc"
  else
    echo "Something is wrong .. cannot find directory $opt_dpath/$tgt_vid/server/"
    [ $opt_dry_run -eq 0 ] && exit 1
  fi
  if [ "$src_user" != "$tgt_user" ]; then
    run_traced "reassign_owner ${src_db}_migrated $src_user $tgt_user"
    run_traced "sed -i -e 's:^db_user *=.*:db_user = '$tgt_user':' $confn"
  fi
  run_traced "$TDIR/run_odoo_debug -b $tgt_vid -d ${src_db}_migrated -umall -s"
  src_vid=$tgt_vid
  src_ver=$tgt_ver
  src_db=${src_db}_migrated
  [ $tgt_ver -ge $final_ver ] && break
done
