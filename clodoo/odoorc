#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# Odoo Library
# Common function to manage Odoo
# Most of directory examples refer to /opt/odoo/11.0/l10n-italy/l10n_it
# Item to process (+ means can be searched):
# ALL          |FULLVER|REPOS|PKGPATH|PKGNAME|
# BIN          Pathname + name of file to execute Odoo (+)
# CONFN        Configuration filename (+)
# DB_USER      Postgres username in multi-version environment
# DDIR         Data directory
# FLOG         Log full filename (+)
# FPID         PID full filename (+)
# FULLVER      Odoo version, format like 11.0
# FULL_SVCNAME Pathname + filename to start/stop Odoo service (+)
# GIT_BRANCH   Git branch
# GIT_OPTS     Git switches to clone Odoo project
# GIT_ORG      URL of git organization of specific Odoo version
# GIT_ORGID    Identification of git organization
# GIT_ORGNM    Name of git organization of specific Odoo version
# GIT_PROT     Git protocol (git or https)
# GIT_URL      URL to download git project (ends with .git)
# HOME         Specific Odoo repository directory (i.e /opt/odoo/11.0/l10n-italy)
# INVALID_MODNAMES
# INVALID_MODNAMES_RE
# LICENSE      License (AGPL or LGPL)
# LCONFN       Local Configuration filename (+)
# LPPORT       Long polling port
# MAJVER       Major Odoo version
# MANIFEST     Manifest filename (__openerp__.py or __manifest__.py)
# OCB_SUBDIRS
# OCB_SUBDIRS_RE
# OPTS_ASM     Undocumented (deprecated)
# PARENTDIR    Parent directory of specific Odoo module (i.e. /opt/odoo/11.0/l10n-italy)
# PKGNAME      Package (module) name
# PKGPATH      Home directory of Odoo module (i.e. /opt/odoo/11.0/l10n-italy/l10n_it)
# REPOS        Repository name
# ROOT         Odoo home directory of specific vid/version (i.e. /opt/odoo/11.0)
# RORIGIN      Remote git origin of Odoo repository (actual value|default)
# RPCPORT      Xmlrpc port in multi-version environment
# RUPSTREAM    Remote git upstream of Odoo repository (actual value|default)
# SVCNAME      Service name to start/stop Odoo service
# URL          URL to source git project (default value, deprecated: use GIT_URL)
# URL_BRANCH   URL tp specific version of source git project (default value)
# USER         Deprecated: use DB_USER
# VCS          If GIT repository return "git" otherwise return ""
# VDIR         Virtual directory
# VENV         Return 1 if path is in virtualenv

#__version__=0.3.28.11

if [ "${BASH_SOURCE-}" == "$0" ]; then
    echo "You must source this script: \$ source $0" >&2
    exit 33
fi

ODOO_FVERS="14\.0|13\.0|12\.0|11\.0|10\.0|9\.0|8\.0|7\.0|6\.1"
ODOO_VERS="14|13|12|11|10|9|8|7|6"
DEFMLIST="OCB account-analytic account-budgeting account-closing account-consolidation\
 account-financial-reporting account-financial-tools account-fiscal-rule account-invoice-reporting\
 account-invoicing account-payment account-reconcile account_banking_cscs ansible-odoo\
 apps-store bank-payment bank-statement-import brand business-requirement calendar commission\
 community-data-files connector connector-accountedge connector-cmis connector-ecommerce connector-infor\
 connector-interfaces connector-jira connector-lengow connector-lims connector-magento\
 connector-magento-php-extension connector-odoo2odoo connector-prestashop connector-redmine connector-sage\
 connector-salesforce connector-spscommerce connector-telephony connector-woocommerce contract credit-control\
 crm cscs_addons currency data-protection ddmrp delivery-carrier department didotech_80 donation dotnet\
 e-commerce edi event field-service geospatial helpdesk hr infrastructure-dns interface-github\
 intrastat-extrastat iot knowledge l10n-italy l10n-italy-supplemental maintenance management-system\
 manufacture manufacture-reporting margin-analysis mis-builder mis-builder-contrib multi-company\
 oca-custom oca-decorators odoo-community.org odoo-sentinel operating-unit partner-contact payroll\
 pos product-attribute product-kitting product-pack product-variant profiles program project\
 project-agile project-reporting purchase-reporting purchase-workflow queue report-print-send\
 reporting-engine rest-framework rma sale-financial sale-reporting sale-workflow search-engine\
 server-auth server-backend server-brand server-env server-tools server-ux social stock-logistics-barcode\
 stock-logistics-reporting stock-logistics-tracking stock-logistics-transport stock-logistics-warehouse\
 stock-logistics-workflow storage survey timesheet tools uncovered vertical-abbey vertical-agriculture\
 vertical-association vertical-community vertical-construction vertical-edition vertical-education\
 vertical-hotel vertical-isp vertical-medical vertical-ngo vertical-realestate vertical-travel web\
 webhook webkit-tools website website-cms website-themes wms zerobug-test zeroincombenze"
OCB_SUBDIRS="addons build debian dist doc docs egg-info _extensions filestore history howtos images odoo openerp redhat reference scripts server _static website-themes win32"
OCB_SUBDIRS_RE="^(${OCB_SUBDIRS// /|})$"
INVALID_MODNAMES="$OCB_SUBDIRS conf cover .cover .coverage egg-info .git html .idea latex node_modules openupgrade setup _static tests themes __to_remove __unported__"
INVALID_MODNAMES_RE="^(${INVALID_MODNAMES// /|})$"
REPT_ORG_MATRIX="acespritech/openerp_gantt_chart_modification,odoomrp/odoomrp-wip,"\
"OCA/project-service,OCA/multi-company,"\
"local/didotech_80,zeroincombenze/profiles,local/uncovered,local/mymodules,local/themes,local/woven_fabric,"\
"local/zeroincombenze,local/cscs_addons,local/account_banking_cscs,"\
"zeroincombenze/l10n-italy-supplemental,zeroincombenze/connector,OCA/social,OCA/event,"\
"OCA/pylint-odoo,OCA/operating-unit,OCA/manufacture,OCA/survey,OCA/rma,OCA/queue,"\
"OCA/e-commerce,OCA/delivery-carrier,OCA/vertical-education,"\
"OCA/bank-statement-reconcile,OCA/vertical-isp,OCA/geospatial,"\
"OCA/account-fiscal-rule,OCA/vertical-association,OCA/runbot-addons,"\
"OCA/stock-logistics-reporting,OCA/project-reporting,OCA/edi,OCA/product-variant,"\
"OCA/manufacture-reporting,OCA/purchase-reporting,OCA/intrastat,OCA/sale-financial,"\
"OCA/interface-github,OCA/connector-odoo2odoo,OCA/webhook,OCA/product-kitting,"\
"OCA/account-reconcile,OCA/OpenUpgrade,OCA/account-analytic,OCA/server-brand,"\
"OCA/server-auth,OCA/maintainer-quality-tools,OCA/odoo-sentinel,OCA/openupgradelib,"\
"OCA/donation,OCA/server-ux,OCA/stock-logistics-transport,OCA/connector-interfaces,"\
"OCA/connector-infor,OCA/maintainer-tools,OCA/currency,OCA/connector-telephony,"\
"OCA/server-env,OCA/connector-prestashop,OCA/ddmrp,OCA/website-themes,"\
"OCA/ansible-odoo,OCA/mis-builder,OCA/connector-lengow,OCA/business-requirement,"\
"OCA/margin-analysis,OCA/connector-magento,OCA/connector-cmis,OCA/account-consolidation,"\
"OCA/connector-ecommerce,OCA/server-backend,OCA/vertical-medical,OCA/vertical-hotel,"\
"OCA/community-data-files,OCA/apps-store,OCA/project-agile,OCA/connector-woocommerce,"\
"OCA/account-budgeting,OCA/odoorpc,OCA/oca-custom,OCA/calendar,OCA/oca-decorators,"\
"OCA/vertical-ngo,OCA/connector-redmine,OCA/vertical-abbey,OCA/maintenance,"\
"OCA/odoo-sphinx-autodoc,OCA/vertical-travel,OCA/vertical-edition,"\
"OCA/vertical-construction,OCA/vertical-community,OCA/vertical-agriculture,"\
"OCA/infrastructure-dns,OCA/dotnet,OCA/connector-salesforce,OCA/connector-sage,"\
"OCA/connector-lims,OCA/connector-accountedge,OCA/vertical-realestate,"\
"OCA/connector-magento-php-extension,zeroincombenze/zerobug-test"
REPT_EXCL_MATRIX="zeroincombenze/account_invoice_create_payment,zeroincombenze/account_payment_approve_invoice,"\
"zeroincombenze/website-cms,zeroincombenze/sale-reporting,zeroincombenze/bank-statement-import,"\
"zeroincombenze/account-invoice-reporting,zeroincombenze/hr,zeroincombenze/hr-timesheet,"\
"zeroincombenze/margin-analysis,zeroincombenze/pos,7.0/didotech_80,"\
"9.0/didotech_80,10.0/didotech_80,11.0/didotech_80,12.0/didotech_80,13.0/didotech_80,"
REPT_NO_OCA_RE="(didotech_80|l10n-italy-supplemental|profiles|uncovered|zerobug-test)"

get_odoo_major_ver() {
    local v=$(echo "$1" | grep -Eo '[0-9]+(\.[0-9])?' | awk -F. '{print $1}')
    if [[ -n $v && $v =~ ($ODOO_VERS) ]]; then
        echo "$v"
    elif [[ $1 =~ librerp[6]? ]]; then
        echo "6"
    else
        echo "12"
    fi
}

get_odoo_full_ver() {
    local v=$(echo "$1" | grep -Eo '[0-9]+(\.[0-9])?' | tail -n1)
    if [[ $v == "6" ]]; then
        echo "6.1"
    elif [[ -n $v && $v =~ ($ODOO_FVERS) ]]; then
        echo "$v"
    elif [[ -n $v && $v =~ ($ODOO_VERS) ]]; then
        echo "$v.0"
    elif [[ $1 =~ librerp[6]? ]]; then
        echo "6.1"
    else
        echo "12.0"
    fi
}

find_odoo_ver() {
    #find_odoo_ver(odoo_root_dir)
    local ldir odoo_fver x
    [[ -n "$1" ]] && pushd $1 &>/dev/null
    while [[ -z "$odoo_fver" ]]; do
        for ldir in $PWD/odoo $PWD/openerp $PWD/server/openerp; do
            if [[ -d $ldir && -f $ldir/release.py ]]; then
                pushd $ldir &>/dev/null
                x=$(echo -e "from __future__ import print_function\nimport release\nprint(release.version)\n" | python)
                odoo_fver=$(get_odoo_full_ver "$x")
                popd &>/dev/null
                break
            fi
        done
        [[ $PWD == $HOME ]] && break
        [[ ! $PWD == "/" ]] && PWD=$(readlink -f "$PWD/..") || break
    done
    [[ -n "$1" ]] && popd &>/dev/null
    echo "$odoo_fver"
}

is_ocb_dir() {
    local x
    [[ -z $1 ]] && return 1
    for x in $1/odoo-bin $1/odoo/odoo-bin $1/openerp-server $1/odoo/openerp-server $1/server/openerp-server; do
        [[ -x $x ]] && return 0
    done
    return 1
}

is_repos() {
    local x
    [[ -z $1 ]] && return 1
    [[ (-f $1/.travis.yml || -f $1/.gitlab-ci.yml) && (-d $1/.git || -f $1/requirements.txt || -f $1/oca_dependencies.txt || -f $1/README.rst || -f $1/README.md) ]] && return 0
    return 1
}

is_module() {
    local x
    [[ -z $1 ]] && return 1
    [[ (-f $1/__manifest__.py || -f $1/__openerp__.py) && -f $1/__init__.py ]] && return 0
    return 1
}

traverse() {
    local d p=0 r
    local PKGNAME=$2 PKGPATH=$3 PARENTDIR=$4 REPOS=$5 PRJPATH=$6
    if [[ -n $1 ]]; then
        for d in $(find $1 -maxdepth 2); do
            [[ -d "$d" ]] && $(is_module "$d") && PKGPATH=$d && PKGNAME=$(basename $d) && PARENTDIR=$(readlink -e $d/..) && p=1 && break
        done
        if [ $p -ne 0 ]; then
            r="$(basename $1)"
            [[ ! $r =~ $rex && ! $r =~ $INVALID_MODNAMES_RE ]] && REPOS=$r && PRJPATH=$1
        fi
    fi
    echo "$PKGNAME|$PKGPATH|$PARENTDIR|$REPOS|$PRJPATH"
}

build_odoo_param() {
    # build_odoo_param(ALL|BIN|CONFN|DB_USER|DDIR|FLOG|FPID|FULLVER|FULL_SVCNAME|GIT_BRANCH|GIT_OPTS|GIT_ORG|GIT_ORGNM|GIT_PROT|GIT_URL|HOME|INVALID_MODNAMES|INVALID_MODNAMES_RE|LICENSE|LCONFN|LPPORT|MAJVER|MANIFEST|OCB_SUBDIRS|OCB_SUBDIRS_RE|OPTS_ASM|PARENTDIR|PKGNAME|PKGPATH|REPOS|ROOT|RORIGIN|RPCPORT|RUPSTREAM|SVCNAME|UPSTREAM|URL|URL_BRANCH|USER|VCS|VDIR|VENV
    #                  vid [(search|DEBUG|default|tree|SERVER|<rptname>|<modname>)] [oca|zero|zero-http|zero-git|librerp|flectra] [(search|DEBUG|default|tree|SERVER)])
    if [[ $1 =~ (INVALID_MODNAMES|INVALID_MODNAMES_RE|OCB_SUBDIRS|OCB_SUBDIRS_RE) ]]; then
        echo "${!1}"
        return
    fi
    local VENV=0 main exorg spec
    local ITEM=$1 ROOT PARENTDIR PRJPATH
    local FULLVER MAJVER odoo_vid noenv_vid MULTIVER REPOS
    local GIT_URL GIT_ORG GIT_ORGID GIT_ORGNM GIT_PROT GIT_OPTS ORGSFX OPTS_ASM
    local RUPSTREAM RORIGIN DB_USER
    local PKGPATH PKGNAME ORGNM VDIR
    local cdir d ldir p p1 p11 p2 p3 p4 pd r x
    p1="v|V|ODOO|ocb|OCB"
    p2="odoo|oca|powerp|librerp|flectra|zero|zeroincombenze"
    # p4="14|13|12|11|10|9|8|7|6"
    local rex="^(VENV[_-]([0-9]{3,10})?)?($p1|$p2)?[_-]?($ODOO_FVERS|$ODOO_VERS)[_-]?($p2)?"
    local reo="^($p1)"
    local reg="($p2)"
    local ref="($ODOO_FVERS)"
    [[ -n "$ODOO_GIT_SHORT" ]] && SHORT="$ODOO_GIT_SHORT" || SHORT="(oca)"
    [[ -z "$ODOO_GIT_HOSTNAME" ]] && ODOO_GIT_HOSTNAME="(github.com)"
    [[ -z "$ODOO_DB_USER" ]] && ODOO_DB_USER="odoo%(MAJVER)s"
    [[ $3 =~ ^((DEBUG|default|search|SERVER|tree|odoo|short),?)+$ ]] && spec=$3 || REPOS=$3
    [[ $5 =~ ^((DEBUG|default|search|SERVER|tree|odoo|short),?)+$ ]] && spec=$5
    exorg=0
    GIT_ORGNM=""
    GIT_PROT=""
    RUPSTREAM=""
    RORIGIN=""
    if [[ "$2" =~ (^\.$|^\.\.$|(\./|\.\./|~/|/)) ]]; then
        [[ -n "$2" ]] && cdir=$(readlink -f $2) || cdir=$(readlink -f $PWD)
        [[ -f $cdir ]] && cdir=$(dirname $cdir)
        while [[ (-z "$odoo_vid" || -z "$ROOT") && -n "$cdir" ]]; do
            if $(is_module "$cdir"); then
                PKGPATH=$cdir
                PKGNAME=$(basename $cdir)
                PARENTDIR=$(dirname $cdir)
            elif $(is_ocb_dir "$cdir"); then
                [[ -z "$REPOS" ]] && REPOS=OCB
                [[ -z "$ROOT" ]] && ROOT=$cdir
                [[ -z "$PKGPATH" ]] && PKGPATH=$cdir
                [[ -z "$PRJPATH" ]] && PRJPATH=$cdir
                [[ -z "$PARENTDIR" ]] && PARENTDIR=$(readlink -e $cdir/..)
                odoo_vid=$(basename $cdir)
                [ $VENV -eq 0 ] && [[ -f $cdir/../VENV-${odoo_vid}/bin/activate ]] && VENV=1 && VDIR=$(readlink -e $cdir/../VENV-${odoo_vid})
                [[ $odoo  == "odoo" ]] && cdir=$(readlink -e $cdir/..) && odoo_vid=$(basename $cdir)
                FULLVER=$(find_odoo_ver $cdir)
                [[ -f $cdir/venv_odoo/bin/activate ]] && VENV=1 && VDIR=$cdir/venv_odoo
            elif $(is_repos "$cdir"); then
                r=$(basename $cdir)
                [[ ! $r =~ $rex ]] && REPOS=$r && PRJPATH=$cdir
                [[ -z "$PARENTDIR" ]] && PARENTDIR=$(readlink -e $cdir/..)
                [[ -z "$PARENTDIR" ]] && PARENTDIR=$(readlink -e $cdir/..)
                if [[ -z "$PKGNAME" ]]; then
                    IFS="|" read PKGNAME PKGPATH PARENTIDR REPOS PRJPATH <<< $(traverse "$cdir" "$PKGNAME" "$PKGPATH" "$PARENTIDR" "$REPOS" "$PRJPATH")
                fi
            elif [[ (-n "$PKGNAME" && -d $cdir/$PKGNAME) ]]; then
                r=$(basename $cdir)
                [[ ! $r =~ $rex ]] && REPOS=$r && PRJPATH=$cdir
                [[ -z "$PARENTDIR" ]] && PARENTDIR=$(readlink -e $cdir/..)
                if [[ -z "$PKGNAME" ]]; then
                    IFS="|" read PKGNAME PKGPATH PARENTIDR REPOS PRJPATH <<< $(traverse "$cdir" "$PKGNAME" "$PKGPATH" "$PARENTIDR" "$REPOS" "$PRJPATH")
                fi
            elif [[ -z "$PKGNAME" ]]; then
                IFS="|" read PKGNAME PKGPATH PARENTIDR REPOS PRJPATH <<< $(traverse "$cdir" "$PKGNAME" "$PKGPATH" "$PARENTIDR" "$REPOS" "$PRJPATH")
            fi
            if [[ -z "$GIT_ORGNM" && -d $cdir/.git ]] && $(git status -s &>/dev/null); then
                x=$(git rev-parse --show-toplevel 2>/dev/null)
                if [[ -z $x || $x == $cdir ]]; then
                    GIT_URL=$(git remote get-url --push origin 2>/dev/null)
                    RUPSTREAM=$(git remote get-url --push upstream 2>/dev/null)
                    RORIGIN=$(git remote get-url --push origin 2>/dev/null)
                    if [[ -n "$GIT_URL" ]]; then
                        GIT_ORGNM=$(basename $(dirname $(git remote -v|echo $GIT_URL|awk -F: '{print $2}')))
                        GIT_PROT=$(echo $GIT_URL|awk -F: '{print $1}')
                        VCS="git"
                    fi
                    GIT_BRANCH=$(git branch --show-current)
                fi
            fi
            [[ $cdir == $HOME ]] && break
            [[ ! $cdir == "/" ]] && cdir=$(readlink -e $cdir/..) || cdir=
        done
    else
        IFS=/ read odoo_vid x <<<$2
        [[ -n $x ]] && REPOS=$x
        [[ $odoo_vid =~ ^VENV ]] && VENV=1 && VDIR="$HOME/$odoo_vid"
    fi
    [[ -z $REPOS ]] && REPOS=OCB
    x=$(echo $odoo_vid | grep -Eo "VENV[_-]([0-9]{3,10})?/?" | tail -n1)
    [[ -n $x ]] && x=$(echo $odoo_vid | grep -Eo "^.*$x")
    [[ -n $x ]] && noenv_vid=${odoo_vid/$x/} || noenv_vid=$odoo_vid
    [[ $noenv_vid =~ ^(v|V)($ODOO_VERS)[^0-9]* ]] && main=1 || main=0
    if [[ -n "$noenv_vid" && -z "$FULLVER" && ($noenv_vid =~ $rex || $noenv_vid =~ librerp[6]?) ]]; then
        FULLVER=$(get_odoo_full_ver "$noenv_vid")
    fi
    [[ -z "$FULLVER" && $ODOO_BRANCH =~ $ref ]] && FULLVER=$ODOO_BRANCH
    [[ -z "$FULLVER"  ]] && FULLVER=12.0
    [[ -z "$GIT_BRANCH" ]] && GIT_BRANCH="$FULLVER"
    MAJVER=$(get_odoo_major_ver "$FULLVER")
    if [ "$ITEM" == "LICENSE" ]; then
        [ $MAJVER -lt 9 ] && echo "AGPL" || echo "LGPL"
        return
    elif [ "$ITEM" == "MANIFEST" ]; then
        [ $MAJVER -ge 10 ] && echo "__manifest__.py" || echo "__openerp__.py"
        return
    fi
    [ ${opt_multi:-0} -ne 0 ] && MULTIVER=1 || MULTIVER=0
    ORGSFX=$(echo $noenv_vid | grep -Eo "[-_][a-z][a-z0-9]+$" | grep -Eo "[a-z0-9]+")
    if [[ -n $ORGSFX ]]; then
        [[ $ORGSFX =~ -git$ ]] && GIT_PROT="git" && ORGSFX=${ORGSFX:0: -4}
        [[ $ORGSFX =~ -http$ ]] && GIT_PROT="https" && ORGSFX=${ORGSFX:0: -5}
    fi
    if [[ -n $ORGSFX && $ORGSFX =~ ^$reg ]]; then
        exorg=1
        GIT_ORGID=$(echo $ORGSFX | grep -Eo "^$reg" | head -n1)
        ORGSFX=${ORGSFX/$GIT_ORGID/}
    fi
    if [[ -z "$GIT_ORGNM" ]]; then
        if [[ $REPOS =~ $INVALID_MODNAMES_RE ]]; then
            GIT_ORGID=""
            GIT_PROT=""
            RUPSTREAM=""
        else
            [[ -n "$4" ]] && GIT_ORGID=$4 && exorg=1
            [[ -z $GIT_ORGID && $noenv_vid =~ ^(OCB|ocb) ]] && GIT_ORGID="oca" && exorg=1
            [[ -z $GIT_ORGID && $noenv_vid =~ ^(ODOO|odoo) ]] && GIT_ORGID="odoo" && exorg=0    ## TODO
            [[ -z $GIT_ORGID && $noenv_vid =~ ^$reg ]] && GIT_ORGID=$(echo $noenv_vid | grep -Eo $reg | head -n1) && [[ ! $noenv_vid =~ ^odoo ]] && exorg=1
            [[ -z $GIT_ORGID && ! $noenv_vid =~ ^$reg && -n "$ODOO_GIT_ORGID" ]] && GIT_ORGID=$ODOO_GIT_ORGID && GIT_PROT="git"
            [[ -z "$GIT_ORGID" ]] && GIT_ORGID="odoo"
        fi
        GIT_ORGNM="$GIT_ORGID"
        [[ $GIT_ORGID == "oca" ]] && GIT_ORGNM="OCA"
        [[ $GIT_ORGID =~ (zero|zeroincombenze) ]] && GIT_ORGID="zero" && GIT_ORGNM="zeroincombenze" && RUPSTREAM="https://github.com/OCA/$REPOS.git"
        [[ $GIT_ORGID == "powerp" ]] && GIT_ORGID="powerp" && GIT_ORGNM="powerp1" && RUPSTREAM="https://github.com/OCA/$REPOS.git"
        [[ $GIT_ORGID =~ librerp[6]? && "$FULLVER" == "6.1" ]] && GIT_ORGNM="iw3hxn" && GIT_BRANCH="master"
        [[ $GIT_ORGID == "librerp" && "$FULLVER" == "12.0" ]] && GIT_ORGID="librerp" && GIT_ORGNM="librerp" && RUPSTREAM="https://github.com/OCA/$REPOS.git"
        if [[ $GIT_ORGID =~ (odoo|oca) && "$REPT_ORG_MATRIX," =~ "/$REPOS," ]]; then
            r=$(echo "$REPT_ORG_MATRIX," | grep -Eo "[A-Za-z0-9_.-]+/$REPOS,")
            IFS=/ read GIT_ORGNM x <<<$r
        fi
    fi
    [[ $GIT_ORGNM == "OCA" ]] && GIT_ORGID="oca"
    [[ $GIT_ORGNM == "zeroincombenze" ]] && GIT_ORGID="zero"
    [[ $GIT_ORGNM == "powerp1" ]] && GIT_ORGID="powerp"
    [[ $GIT_ORGID == $ODOO_GIT_ORGID ]] && GIT_PROT="git"

    if [[ -z $ROOT ]]; then
        if [ $MULTIVER -eq 0 -o $exorg -eq 0 -o $main -ne 0 ] || [[ -z $GIT_ORGID || $GIT_ORGID == "odoo" || $odo_vid =~ $ref || $odoo_vid =~ $reo ]]; then
            [ $VENV -ne 0 ] && ROOT=$HOME/$odoo_vid/odoo || ROOT=$HOME/$odoo_vid
        elif [[ $GIT_ORGID =~ $SHORT ]]; then
            [ $VENV -ne 0 ] && ROOT=$HOME/${GIT_ORGID}${MAJVER}/odoo || ROOT=$HOME/${GIT_ORGID}${MAJVER}
        else
            [ $VENV -ne 0 ] && ROOT=$HOME/odoo$MAJVER-$GIT_ORGID/odoo || ROOT=$HOME/odoo$MAJVER-$GIT_ORGID
        fi
    fi
    if [[ -z $PKGPATH ]]; then
        if [[ $REPOS == "OCB" ]]; then
            PKGPATH=$ROOT
            PARENTDIR=$(dirname $ROOT)
        else
            PKGPATH="$ROOT/$REPOS"
            PARENTDIR=$(dirname $PKGPATH)
        fi
    fi
    if [[ -z $PRJPATH ]]; then
        [[ $REPOS == "OCB" ]] && PRJPATH=$ROOT || PRJPATH="$ROOT/$REPOS"
    fi

    [[ -z $RUPSTREAM && $GIT_ORGID =~ (zero|powerp) ]] && RUPSTREAM="https://github.com/OCA/$REPOS.git"
    [[ -z "$GIT_PROT" ]] && GIT_PROT="https"
    [[ "$FULLVER" == "6.1" ]] && RUPSTREAM=""
    if [[ $REPOS =~ $REPT_NO_OCA_RE ]]; then
        GIT_ORGID=""
        GIT_ORGNM=""
        GIT_PROT=""
        RUPSTREAM=""
    fi
    [[ $GIT_ORGID == "librerp" && $MAJVER == "6" && "$REPOS" == "OCB" ]] && REPOS="server"
    [[ $GIT_ORGID == "odoo" && ! "$REPOS" == "OCB" ]] && GIT_ORGID="oca" && GIT_ORGNM="OCA"
    if [[ -n "$GIT_PROT" ]]; then
        if [[ "$GIT_PROT" == "git" ]]; then
            GIT_ORG="git@github.com:$GIT_ORGNM"
            GIT_OPTS=""
            OPTS_ASM=
        else
            GIT_ORG="https://github.com/$GIT_ORGNM"
            GIT_OPTS="--depth 1 --single-branch"
            OPTS_ASM="-1"
        fi
    else
        GIT_ORG=""
        GIT_OPTS=""
        OPTS_ASM=
    fi
    [[ -n "$GIT_ORG" && -n "$REPOS" ]] && URL=$GIT_ORG/$REPOS
    [[ -n "$GIT_ORG" && "$REPOS" == "OCB" && $GIT_ORGID == "odoo" ]] && URL=$GIT_ORG/odoo
    [[ -n "$GIT_ORG" && "$REPOS" == "OCB" && $GIT_ORGID == "oca" && $spec =~ odoo ]] && URL="https://github.com/odoo/odoo"
    [[ -n "$URL" ]] && URL_BRANCH="$URL/tree/$FULLVER"
    [[ -z "$GIT_URL" && -n "$URL" ]] && GIT_URL="${URL}.git"
    [[ -z "$RORIGN" ]] && RORIGIN=$GIT_URL
    [[ -z "$RUPSTREAM" ]] && RUPSTREAM=$GIT_URL
    if [ $main -ne 0 ]; then
        DB_USER="odoo"
    elif [ $MAJVER -lt 8 -a $USER == "openerp" ]; then
        DB_USER="openerp"
    elif [ $MULTIVER -ne 0 ]; then
        DB_USER=${ODOO_DB_USER/\%(MAJVER)s/$MAJVER}
        DB_USER=${DB_USER/\%(ORGSFX)s/$ORGSFX}
    else
        DB_USER="odoo"
    fi
    if [[ "$ITEM" =~ ^(DB_USER|FULLVER|GIT_BRANCH|GIT_OPTS|GIT_ORG|GIT_ORGID|GIT_ORGNM|GIT_URL|MAJVER|OPTS_ASM|PARENTDIR|PKGNAME|PKGPATH|REPOS|ROOT|RORIGIN|RUPSTREAM|URL|URL_BRANCH|VCS|VDIR|VENV)$ ]]; then
        echo "${!ITEM}"
        return
    fi
    if [[ $ITEM == "ALL" ]]; then
        echo "|$FULLVER|$REPOS|$PKGPATH|$PKGNAME|"
        return
    elif [[ $ITEM == "USER" ]]; then
        echo "$DB_USER"
        return
    elif [[ $ITEM == "HOME" ]]; then
        echo "$PRJPATH"
        return
    elif [[ $ITEM == "RPCPORT" ]]; then
        if [[ $spec =~ (debug|DEBUG) ]]; then
            ((p = 18060 + $MAJVER))
        elif [ $main -ne 0 -o $MULTIVER -eq 0 ]; then
            p=8069
        elif [ $MULTIVER -ne 0 ]; then
            if [ $exorg -eq 0 ]; then
                ((p = 8160 + $MAJVER))
            elif [[ $GIT_ORGID == "oca" ]]; then
                ((p = 8260 + $MAJVER))
            elif [[ $GIT_ORGID =~ (powerp|librerp) ]]; then
                ((p = 8360 + $MAJVER))
            elif [[ $GIT_ORGID =~ (zero|flectra) ]]; then
                ((p = 8460 + $MAJVER))
            else
                ((p = 8160 + $MAJVER))
            fi
        else
            p=8069
        fi
        echo $p
        return
    elif [[ $ITEM == "LPPORT" ]]; then
        if [[ $spec =~ (debug|DEBUG) ]]; then
            ((p = 18160 + $MAJVER))
        elif [ $main -ne 0 -o $MULTIVER -eq 0 ]; then
            p=8072
        elif [ $MULTIVER -ne 0 ]; then
            if [ $exorg -eq 0 ]; then
                ((p = 8130 + $MAJVER))
            elif [[ $GIT_ORGID == "oca" ]]; then
                ((p = 8230 + $MAJVER))
            elif [[ $GIT_ORGID =~ (powerp|librerp) ]]; then
                ((p = 8330 + $MAJVER))
            elif [[ $GIT_ORGID =~ (zero|flectra) ]]; then
                ((p = 8430 + $MAJVER))
            else
                ((p = 8130 + $MAJVER))
            fi
        else
            p=8072
        fi
        echo $p
        return
    elif [ "$ITEM" == "LCONFN" ]; then
        [ $MAJVER -ge 10 ] && echo ".odoorc" || echo ".openerp_serverrc"
        return
    elif [ "$ITEM" == "DDIR" ]; then
        [ $VENV -ne 0 ] && p="$(dirname $ROOT)/$odoo_vid/.local/share" || p="$(dirname $ROOT)/.local/share"
        if [ $MAJVER -lt 8 ]; then
            p="$ROOT/openerp/filestore"
        elif [[ $odoo_vid =~ ^($HOME/)?VENV ]]; then
            p="$HOME/VENV-$FULLVER/.local/share/Odoo"
        elif [[ $noenv_vid =~ ^(v|V) ]]; then
            p="$p/Odoo"
        elif [ $MULTIVER -ne 0 -a $VENV -eq 0 ]; then
            p="$p/Odoo$MAJVER"
        else
            p="$p/Odoo"
        fi
        if [[ $spec =~ search ]]; then
            pd=$p
            p1=/etc/odoo/
            p11=/etc/
            p4=.conf
        else
            echo $p
            return
        fi
    elif [ "$ITEM" == "CONFN" ]; then
        p1=/etc/odoo/
        p11=/etc/
        p4=.conf
    elif [ "$ITEM" == "FULL_SVCNAME" -o "$ITEM" == "SVCNAME" ]; then
        p1=/etc/init.d/
        p11=
        p4=
    elif [ "$ITEM" == "FLOG" ]; then
        p1=/var/log/odoo/
        p11=/var/log/
        p4=.log
    elif [ "$ITEM" == "FPID" ]; then
        p1=/var/run/odoo/
        p11=/var/run/
        p4=.pid
    elif [ "$ITEM" == "BIN" ]; then
        if [ $MAJVER -le 7 ]; then
            p1=$PKGPATH/
            p11=$PKGPATH/server/
        else
            p1=$PKGPATH/
            p11=$PKGPATH/odoo/
        fi
        p4=
    else
        echo "Invalid parameter <$ITEM>!"
        exit 1
    fi
    if [ $MULTIVER -ne 0 -a "$ITEM" != "BIN" ]; then
        if [ $main -ne 0 ]; then
            [ $MAJVER -ge 8 ] && p2=odoo || p2=openerp
        elif [ "$ITEM" == "DDIR" -a $VENV -ne 0 ]; then
            p2=odoo
        elif [[ ! $ITEM =~ (CONFN|FULL_SVCNAME|SVCNAME|FLOG|FPID|DDIR) && $GIT_ORGID =~ $SHORT ]]; then
            p2="${GIT_ORGID}${MAJVER}"
        else
            p2="odoo${MAJVER}"
        fi
    elif [ "$ITEM" == "BIN" ]; then
        [ $MAJVER -ge 10 ] && p2=odoo || p2=openerp
    elif [ $MAJVER -lt 7 ] || [[ $odoo_vid =~ (v7|V7) ]]; then
        p2=openerp
    else
        p2="odoo"
    fi
    if [[ $ITEM =~ (CONFN|FULL_SVCNAME|SVCNAME|FLOG|FPID|DDIR) ]]; then
        p3=
        if [ $MULTIVER -ne 0 ]; then
            if [ $exorg -ne 0 ]; then
                [[ -z $ORGSFX ]] && p3="-${GIT_ORGID}"
                [[ -n $ORGSFX ]] && p3="-${GIT_ORGID}${ORGSFX}"
            elif [ $exorg -eq 0 ]; then
                [[ -n $ORGSFX ]] && p3="-${ORGSFX}"
            fi
        fi
        if [[ -z $p3 || $p3 == "-odoo" ]]; then
            [ $MAJVER -ge 10 ] && p3="" || p3="-server"
        fi
    elif [ $MAJVER -ge 10 ]; then
        [[ $ITEM == "BIN" ]] && p3=-bin || p3=
    else
        p3="-server"
    fi
    [[ $ITEM == "BIN" && ($spec =~ (SERVER|tree) || $MAJVER == 6 || $noenv_vid =~ ^(v7|V7)) ]] && p="$p11$p2$p3$p4" || p="$p1$p2$p3$p4"
    if [[ $spec =~ search ]]; then
        p=$(findpkg "$p2$p3$p4" "$p1 $p11")
        if [ -z "$p" ]; then
            p=$(findpkg "odoo$p3$p4" "$p1 $p11")
        fi
        if [ -z "$p" -a $MAJVER -lt 7 ]; then
            p=$(findpkg "openerp$p4" "$p1 $p11")
            if [ -z "$p" ]; then
                p=$(findpkg "odoo$p3$p4" "$p1 $p11")
            fi
        elif [ -z "$p" -a $MAJVER -ge 7 ]; then
            p=$(findpkg "odoo$p4" "$p1 $p11")
            if [ -z "$p" ]; then
                p=$(findpkg "openerp$p3$p4" "$p1 $p11")
            fi
        fi
    fi
    if [ "$ITEM" == "DDIR" ]; then
        p=$(grep "data_dir *=" $p | awk -F= '{print $2}' | tr -d " ")
        [ -z "$p" ] && p=$pd
    elif [ "$ITEM" == "SVCNAME" ]; then
        p=$(basename $p)
    fi
    echo "$p"
}

discover_multi() {
    local v c=${opt_multi:-0}
    local ov=${ODOO_FVERS//|/ }
    opt_multi=${opt_multi:-0}
    [ $opt_multi -gt 0 ] && return
    local c=0
    for v in ${ov//\\/}; do
        odoo_bin=$(build_odoo_param BIN $v search)
        [[ -n "$odoo_bin" ]] && ((c++))
        [ $c -gt 1 ] && break
        odoo_bin=$(build_odoo_param BIN "V$v" search)
        [[ -n "$odoo_bin" ]] && ((c++))
        [ $c -gt 1 ] && break
        odoo_bin=$(build_odoo_param BIN $v search oca)
        [[ -n "$odoo_bin" ]] && ((c++))
        [ $c -gt 1 ] && break
    done
    [ $c -gt 1 ] && opt_multi=1
}

module_list() {
    #module_list(odoo_fver excl_list [oca|zero|zero-http|zero-git|oia|oia-git|oia-http|librerp|flectra])
    local res=
    local fn nm v
    local odoo_fver=$1
    local excl_list="${2//,/ }"
    local org=$3
    local GIT_ORGNM
    if [ -n "$3" ]; then
        if [[ " zeroincombenze zero zero-git zero-http " =~ " $3 " ]]; then
            org="zeroincombenze"
        elif [[ " librerp " =~ " $3 " ]]; then
            org="iw3hxn"
        elif [[ " flectra " =~ " $3 " ]]; then
            org="flectra"
        else
            org="OCA"
        fi
    else
        org=
    fi
    for fn in $DEFMLIST; do
        v=$(dirname $fn)
        if [[ $v =~ ^\. || $v == "$odoo_fver" ]]; then
            nm=$(basename $fn)
            if [[ ! " $excl_list " =~ [[:space:]]$nm[[:space:]] && ! " $excl_list " =~ [[:space:]]$odoo_fver/$nm[[:space:]] ]]; then
                if [ -n "$org" -o -n "$odoo_fver" ]; then
                    # Match exclusion matrix
                    if [[ "$REPT_EXCL_MATRIX," =~ "/$nm," ]]; then
                        for r in $(echo "$REPT_EXCL_MATRIX," | grep -Eo "[A-Za-z0-9_.-]+/$nm,"); do
                            r=${r:0: -1}
                            IFS=/ read GIT_ORGNM x <<<$r
                            if [ "$GIT_ORGNM" == "$org" -o "$GIT_ORGNM" == "$odoo_fver" ]; then
                                break
                            fi
                        done
                        if [ "$GIT_ORGNM" == "$org" -o "$GIT_ORGNM" == "$odoo_fver" ]; then
                            continue
                        fi
                    fi
                    # Match organization matrix
                    if [ -z "$org" ]; then
                        res="$res $nm"
                        continue
                    elif [[ "$REPT_ORG_MATRIX," =~ "/$nm," ]]; then
                        for r in $(echo "$REPT_ORG_MATRIX," | grep -Eo "[A-Za-z0-9_.-]+/$nm,"); do
                            r=${r:0: -1}
                            IFS=/ read GIT_ORGNM x <<<$r
                            if [ "$GIT_ORGNM" == "$org" ]; then
                                break
                            fi
                        done
                    else
                        GIT_ORGNM=$org
                    fi
                    if [ "$GIT_ORGNM" == "$org" ]; then
                        res="$res $nm"
                    fi
                else
                    res="$res $nm"
                fi
            fi
        fi
    done
    echo $res
}
