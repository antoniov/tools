#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 1.0.2.7
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
HOME_DEV="$HOME/devel"
[[ -x $TDIR/../bin/python ]] && PYTHON=$(readlink -f $TDIR/../bin/python) || [[ -x $TDIR/python ]] && PYTHON="$TDIR/python" || PYTHON="python"
PYPATH=$(echo -e "import os,sys;\nTDIR='"$TDIR"';HOME_DEV='"$HOME_DEV"'\no=os.path\nHOME=os.environ.get('HOME');t=o.join(HOME,'tools')\nn=o.join(HOME,'pypi') if o.basename(HOME_DEV)=='venv_tools' else o.join(HOME,HOME_DEV, 'pypi')\nd=HOME_DEV if o.basename(HOME_DEV)=='venv_tools' else o.join(HOME_DEV,'venv')\ndef apl(l,p,b):\n if p:\n  p2=o.join(p,b,b)\n  p1=o.join(p,b)\n  if o.isdir(p2):\n   l.append(p2)\n  elif o.isdir(p1):\n   l.append(p1)\nl=[TDIR]\nv=''\nfor x in sys.path:\n if not o.isdir(t) and o.isdir(o.join(x,'tools')):\n  t=o.join(x,'tools')\n if not v and o.basename(x)=='site-packages':\n  v=x\nfor x in os.environ['PATH'].split(':'):\n if x.startswith(d):\n  d=x\n  break\nfor b in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if TDIR.startswith(d):\n  apl(l,d,b)\n elif TDIR.startswith(n):\n  apl(l,n,b)\n apl(l,v,b)\n apl(l,t,b)\nl=l+os.environ['PATH'].split(':')\ntdir=o.dirname(TDIR)\np=set()\npa=p.add\np=[x for x in l if x and (x.startswith(HOME) or x.startswith(HOME_DEV) or x.startswith(tdir)) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found in <$PYPATH>!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

DIST_CONF=$(findpkg ".z0tools.conf" "$PYPATH")
TCONF="$HOME/.z0tools.conf"
CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"


__version__=1.0.4.1


base_test () {
    local keys vals i
    keys=(k01    k02    k03    k04    K-X    ^K.*)
    vals=("aaaa" "bbbb" "cccc" "dddd" "eeee" "any")
    for i in {0..5}; do
      CFG_set "${keys[i]}" "${vals[i]}" "0"
    done
    for i in {0..4}; do
      TRES=$(CFG_find "0" ${keys[i]})
      test_result "CFG_find 0 ${keys[i]}" "${vals[i]}" "$TRES"
    done
    keys=(k11    k12    k13    k14    K-X    ^K.*)
    vals=("AAAA" "BBBB" "CCCC" "DDDD" "EEEE" "ANY")
    for i in {0..5}; do
      CFG_set "${keys[i]}" "${vals[i]}" "1"
    done
    for i in {0..4}; do
      TRES=$(CFG_find "1" ${keys[i]})
      test_result "CFG_find 1 ${keys[i]}" "${vals[i]}" "$TRES"
    done
    keys=(k01 k02 k03 k04)
    for i in {0..3}; do
      TRES=$(CFG_find "1" ${keys[i]})
      test_result "CFG_find 1 ${keys[i]}" "" "$TRES"
    done
    keys=(k21 k22 k23 k24 ^K.*)
    vals=("Aaaa" "Bbbb" "Cccc" "Dddd" "Any")
    for i in {0..4}; do
      CFG_set "${keys[i]}" "${vals[i]}" "2"
    done
    for i in {0..3}; do
      TRES=$(CFG_find "2" ${keys[i]})
      test_result "CFG_find 2 ${keys[i]}" "${vals[i]}" "$TRES"
    done
    keys=(k01 k02 k03 k04)
    for i in {0..3}; do
      TRES=$(CFG_find "2" ${keys[i]})
      test_result "CFG_find 2 ${keys[i]}" "" "$TRES"
    done
    keys=(k11 k12 k13 k14)
    for i in {0..3}; do
      TRES=$(CFG_find "2" ${keys[i]})
      test_result "CFG_find 2 ${keys[i]}" "" "$TRES"
    done
    keys=(k31 k32 k33 k34 ^K.*)
    vals=("AAaa" "BBbb" "CCcc" "DDdd" "ANy")
    for i in {0..4}; do
      CFG_set "${keys[i]}" "${vals[i]}" "3"
    done
    for i in {0..3}; do
      TRES=$(CFG_find "3" ${keys[i]})
      test_result "CFG_find 3 ${keys[i]}" "${vals[i]}" "$TRES"
    done
}

test_01() {
    DEFDICT0="Dirty"
    DEFRULE0="Dirty!"
    DEFDICT1="Dirty"
    DEFRULE1="Dirty!"
    DEFDICT2="Dirty"
    DEFRULE2="Dirty!"
    DEFDICT3="Dirty"
    DEFRULE4="Dirty!"
    fh=$(xuname "-f")
    x=$(xuname "-v")
    local v=$(echo $x|awk -F. '{print $1}')
    disto=$(xuname "-d")$v
    for i in {0..3}; do
      CFG_init $i
      test_result "FH=$XU_FH  #$i" "$fh" "$XU_FH"
      test_result "DISTO=$XU_DISTO  #$i" "$disto" "$XU_DISTO"
    done
    base_test

    keys=(k01 k02 k03 k04)
    for i in {0..3}; do
      TRES=$(CFG_find "3" ${keys[i]})
      test_result "CFG_find 3 ${keys[i]}" "" "$TRES"
    done
    keys=(k11 k12 k13 k14)
    for i in {0..3}; do
      TRES=$(CFG_find "3" ${keys[i]})
      test_result "CFG_find 3 ${keys[i]}" "" "$TRES"
    done
    keys=(k21 k22 k23 k24)
    for i in {0..3}; do
      TRES=$(CFG_find "3" ${keys[i]})
      test_result "CFG_find 3 ${keys[i]}" "" "$TRES"
    done

    TRES=$(CFG_find "0" "K9")
    test_result "CFG_find 0 K9" "any" "$TRES"
    TRES=$(CFG_find "1" K9)
    test_result "CFG_find 1 K9" "ANY" "$TRES"

    fh=$(xuname "-f")
    x=$(xuname "-v")
    local v=$(echo $x|awk -F. '{print $1}')
    disto=$(xuname "-d")$v
    CFG_set "k01" "global_a" "0" "-f"
    TRES=$(CFG_find "0" "k01")
    test_result "CFG_find 0 k01" "global_a" "$TRES"
    CFG_set "k01" "local_a" "0" "-d"
    TRES=$(CFG_find "0" "k01")
    test_result "CFG_find 0 k01" "local_a" "$TRES"

    CFG_set "k01" "global_A" "1" "-f"
    TRES=$(CFG_find "1" "k01")
    test_result "CFG_find 1 k01" "global_A" "$TRES"
    CFG_set "k01" "local_A" "1" "-d"
    TRES=$(CFG_find "1" "k01")
    test_result "CFG_find 1 k01" "local_A" "$TRES"

    CFG_set "k01" "Global_A" "2" "-f"
    TRES=$(CFG_find "2" "k01")
    test_result "CFG_find 2 k01" "Global_A" "$TRES"
    CFG_set "k01" "Local_A" "2" "-d"
    TRES=$(CFG_find "2" "k01")
    test_result "CFG_find 2 k01" "Local_A" "$TRES"

    CFG_set "k01" "GLobal_A" "3" "-f"
    TRES=$(CFG_find "3" "k01")
    test_result "CFG_find 3 k01" "GLobal_A" "$TRES"
    CFG_set "k01" "LOcal_A" "3" "-d"
    TRES=$(CFG_find "3" "k01")
    test_result "CFG_find 3 k01" "LOcal_A" "$TRES"

    CFG_set "^K.*" "global_any" "0" "-f"
    TRES=$(CFG_find "0" "K9")
    test_result "CFG_find 0 K9" "global_any" "$TRES"
    CFG_set "^K.*" "local_any" "0" "-d"
    TRES=$(CFG_find "0" "K9")
    test_result "CFG_find 0 K9" "local_any" "$TRES"

    CFG_set "^K.*" "global_ANY" "1" "-f"
    TRES=$(CFG_find "1" "K9")
    test_result "CFG_find 1 K9" "global_ANY" "$TRES"
    CFG_set "^K.*" "local_ANY" "1" "-d"
    TRES=$(CFG_find "1" "K9")
    test_result "CFG_find 1 K9" "local_ANY" "$TRES"

    CFG_set "^K.*" "Global_ANY" "2" "-f"
    TRES=$(CFG_find "2" "K9")
    test_result "CFG_find 2 K9" "Global_ANY" "$TRES"
    CFG_set "^K.*" "Local_ANY" "2" "-d"
    TRES=$(CFG_find "2" "K9")
    test_result "CFG_find 2 K9" "Local_ANY" "$TRES"

    CFG_set "^K.*" "GLobal_ANY" "3" "-f"
    TRES=$(CFG_find "3" "K9")
    test_result "CFG_find 3 K9" "GLobal_ANY" "$TRES"
    CFG_set "^K.*" "LOcal_ANY" "3" "-d"
    TRES=$(CFG_find "3" "K9")
    test_result "CFG_find 3 K9" "LOcal_ANY" "$TRES"

    fh=$(xuname "-f")
    x=$(xuname "-v")
    local v=$(echo $x|awk -F. '{print $1}')
    disto=$(xuname "-d")$v
    CFG_set "kx01" "local_ax" "0" "$fh"
    TRES=$(CFG_find "0" "kx01")
    test_result "CFG_find 0 kx01" "local_ax" "$TRES"
    CFG_set "kx01" "global_ax" "0" "$disto"
    TRES=$(CFG_find "0" "kx01")
    test_result "CFG_find 0 kx01" "global_ax" "$TRES"
    CFG_set "kx11" "local_ax" "1" "$fh"
    TRES=$(CFG_find "1" "kx11")
    test_result "CFG_find 1 kx11" "local_ax" "$TRES"
    CFG_set "kx11" "global_ax" "1" "$disto"
    TRES=$(CFG_find "1" "kx11")
    test_result "CFG_find 1 kx11" "global_ax" "$TRES"
    CFG_set "kx21" "local_ax" "2" "$fh"
    TRES=$(CFG_find "2" "kx21")
    test_result "CFG_find 2 kx21" "local_ax" "$TRES"
    CFG_set "kx21" "global_ax" "2" "$disto"
    TRES=$(CFG_find "2" "kx21")
    test_result "CFG_find 2 kx21" "global_ax" "$TRES"
    CFG_set "kx31" "local_ax" "3" "$fh"
    TRES=$(CFG_find "3" "kx31")
    test_result "CFG_find 3 kx31" "local_ax" "$TRES"
    CFG_set "kx31" "global_ax" "3" "$disto"
    TRES=$(CFG_find "3" "kx31")
    test_result "CFG_find 3 kx31" "global_ax" "$TRES"

    for i in {0..3}; do
      CFG_init $i
    done

    base_test
}


Z0BUG_init
parseoptest -l$TESTDIR/test_..log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts

UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
