#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 1.0.2.7
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
HOME_DEV="$HOME/devel"
[[ -x $TDIR/../bin/python ]] && PYTHON=$(readlink -f $TDIR/../bin/python) || [[ -x $TDIR/python ]] && PYTHON="$TDIR/python" || PYTHON="python"
PYPATH=$(echo -e "import os,sys;\nTDIR='"$TDIR"';HOME_DEV='"$HOME_DEV"'\no=os.path\nHOME=os.environ.get('HOME');t=o.join(HOME,'tools')\nn=o.join(HOME,'pypi') if o.basename(HOME_DEV)=='venv_tools' else o.join(HOME,HOME_DEV, 'pypi')\nd=HOME_DEV if o.basename(HOME_DEV)=='venv_tools' else o.join(HOME_DEV,'venv')\ndef apl(l,p,b):\n if p:\n  p2=o.join(p,b,b)\n  p1=o.join(p,b)\n  if o.isdir(p2):\n   l.append(p2)\n  elif o.isdir(p1):\n   l.append(p1)\nl=[TDIR]\nv=''\nfor x in sys.path:\n if not o.isdir(t) and o.isdir(o.join(x,'tools')):\n  t=o.join(x,'tools')\n if not v and o.basename(x)=='site-packages':\n  v=x\nfor x in os.environ['PATH'].split(':'):\n if x.startswith(d):\n  d=x\n  break\nfor b in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if TDIR.startswith(d):\n  apl(l,d,b)\n elif TDIR.startswith(n):\n  apl(l,n,b)\n apl(l,v,b)\n apl(l,t,b)\nl=l+os.environ['PATH'].split(':')\ntdir=o.dirname(TDIR)\np=set()\npa=p.add\np=[x for x in l if x and (x.startswith(HOME) or x.startswith(HOME_DEV) or x.startswith(tdir)) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found in <$PYPATH>!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

DIST_CONF=$(findpkg ".z0tools.conf" "$PYPATH")
TCONF="$HOME/.z0tools.conf"
CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"


__version__=1.0.7.1


test_01() {
    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      if [ -f $FCONF.sample ]; then rm -f $FCONF.sample; fi
      link_cfg $FCONF
      set_cfg_def "param1" "Value1"
      set_cfg_def "param2" "Value2"
      set_cfg_def "param3" "Value3"
      set_cfg_def "param4" "Value4"
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      test_result "get_cfg_value '' param$i" "Value$i" "$TRES"
    done

    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param1= VALUE1 ">$FCONF
      echo "param3=VALUE3">>$FCONF
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      if [ $i -eq 1 ]; then
        test_result "get_cfg_value '' param$i" "VALUE$i" "$TRES"
      elif [ $i -eq 3 ]; then
        test_result "get_cfg_value '' param$i" "VALUE$i" "$TRES"
      else
        test_result "get_cfg_value '' param$i" "Value$i" "$TRES"
      fi
    done
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param4=\" VALUE4 \"">>$FCONF
      link_cfg $FCONF
    fi
    TRES=$(get_cfg_value "" "param4")
    test_result "get_cfg_value '' param4" " VALUE4 " "$TRES"

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      echo "#param1=NOVALUE ">$FCONF.sample
      echo "param1= value1 ">>$FCONF.sample
      echo "param2=\"value2\"">>$FCONF.sample
      echo "param3=value3">>$FCONF.sample
      echo "param4= \"value4\" ">>$FCONF.sample
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      test_result "get_cfg_value '' param$i" "value$i" "$TRES"
    done
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      echo "param1= VALUE1 ">$FCONF
      echo "param3=VALUE3">>$FCONF
      link_cfg $FCONF
    fi
    for i in 1 2 3 4; do
      TRES=$(get_cfg_value "" "param$i")
      if [ $i -eq 1 ]; then
        test_result "get_cfg_value '' param$i" "VALUE$i" "$TRES"
      elif [ $i -eq 3 ]; then
        test_result "get_cfg_value '' param$i" "VALUE$i" "$TRES"
      else
        test_result "get_cfg_value '' param$i" "value$i" "$TRES"
      fi
    done

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      set_cfg_def "param1" "defval1"
      set_cfg_def "param2" "defval2"
      set_cfg_def "param3" "defval3"
      set_cfg_def "param4" "defval4"
      echo "#param1=NOVALUE ">$FCONF.sample
      echo "param2=\"value2\"">>$FCONF.sample
      echo "param3=value3">>$FCONF.sample
      echo "param3= VALUE3 ">$FCONF
      echo "param4=None ">>$FCONF
      echo "param9=Long long \\">>$FCONF
      echo "       value \\">>$FCONF
      echo "       parameter">>$FCONF
      link_cfg $FCONF $FCONF.sample
    fi
    TRES=$(get_cfg_value "" "param1")
    test_result "get_cfg_value '' param1" "defval1" "$TRES"
    TRES=$(get_cfg_value "" "param2")
    test_result "get_cfg_value '' param2" "value2" "$TRES"
    TRES=$(get_cfg_value "" "param3")
    test_result "get_cfg_value '' param3" "VALUE3" "$TRES"
    TRES=$(get_cfg_value "" "param4")
    test_result "get_cfg_value '' param4" "" "$TRES"
    TRES=$(get_cfg_value "" "param9")
    test_result "get_cfg_value '' param9" "Long long value parameter" "$TRES"

    CFG_init
    FCONF="$TESTDIR/test.conf"
    if [ ${opt_dry_run:-0} -eq 0 ]; then
      if [ -f $FCONF ]; then rm -f $FCONF; fi
      echo "#">$FCONF.sample
      echo "param1=Invalid">$FCONF
      local FH=$(xuname "-f")
      echo "[_${FH}_]">>$FCONF
      echo "param1=Right">>$FCONF
      if [ "$FH" == "RHEL" ]; then
        echo "[_Debian_]">>$FCONF
      else
        echo "[_RHEL_]">>$FCONF
      fi
      echo "param1=Wrong">>$FCONF
      link_cfg $FCONF
    fi
    TRES=$(get_cfg_value "" "param1")
    test_result "get_cfg_value '' param1 OS" "Right" "$TRES"
}


Z0BUG_init
parseoptest -l$TESTDIR/test_..log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts



UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
