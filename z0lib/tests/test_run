#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
THIS=$(basename "$0")
TDIR=$($READLINK -f $(dirname $0))
[[ -d "$HOME/dev" ]] && HOME_DEV="$HOME/dev" || HOME_DEV="$HOME/devel"
PYPATH=$(echo -e "import os,sys\np=[x for x in (os.environ['PATH']+':$TDIR:..:$HOME_DEV').split(':') if x not in sys.path];p.extend(sys.path);print(' '.join(p))"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$($READLINK -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$($READLINK -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

__version__=1.0.2


test_run() {
   local SAVE_FLOG_ECHO=$FLOG_ECHO
   local SAVE_FLOG=$FLOG
   local SAVE_opt_verbose=$opt_verbose
   local SAVE_opt_dry_run=$opt_dry_run
   local SAVE_opt_humdrum=${opt_humdrum:-0}
   local s=-1 x
   FLOG_ECHO=
   FLOG=
   opt_verbose=
   opt_humdrum=1
   if [[ $1 == "ls" ]]; then
     opt_verbose=1
     x=$(run_traced "$1" "-q")
     [[ -n "$x" ]] && false || true
     s=$?
   else
     if [[ ${1:0:3} == "cd " || $1 == "cd" ]]; then
       opt_dry_run=1
     fi
     run_traced "$1"
     s=$?
   fi
   opt_humdrum=$SAVE_opt_humdrum
   opt_dry_run=$SAVE_opt_dry_run
   opt_verbose=$SAVE_opt_verbose
   FLOG=$SAVE_FLOG
   FLOG_ECHO=$SAVE_FLOG_ECHO
   return $s
}

test_01() {
    local s
    test_run "true"
    s=$?
    test_result "run true" "$s" "$STS_SUCCESS"
}

test_02() {
    local s
    test_run "false"
    s=$?
    test_result "run false" "$s" "$STS_FAILED"
}

test_03() {
    local f s
    f="NOT_EXISTS"
    [[ -f $f ]] && rm -f $f
    test_run "touch $f"
    s=$?
    if [[ -f $f ]]; then
      test_result "run touch $f" "$s" "$STS_SUCCESS"
    else
      test_result "run touch $f" "$s" "$STS_FAILED"
    fi

    test_run "rm -f $f"
    s=$?
    if [[ -f $f ]]; then
      test_result "rm -f $f" "$s" "$STS_FAILED"
    else
      test_result "rm -f $f" "$s" "$STS_SUCCESS"
    fi
}

test_04() {
    local f s
    f="NOT_EXISTS"
    test_run "cd /not/exists/directory"
    s=$?
    test_result "cd $f" "$s" "$STS_SUCCESS"
}

test_05() {
    local f s
    test_run "ls"
    s=$?
    test_result "ls" "$s" "$STS_SUCCESS"
}


Z0BUG_init
parseoptest -l$TESTDIR/test_UNKNOWN.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts


UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
