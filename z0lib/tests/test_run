#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../.. $TDIR/../../z0lib $TDIR/../../z0lib/z0lib $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
RUNDIR=$(readlink -e $TESTDIR/..)
Z0TLIBDIR=$(findpkg z0testrc "$TDIR $TDIR/.. $HOME/tools/zerobug $HOME/dev ${PYPATH//:/ } . .." "zerobug")
if [ -z "$Z0TLIBDIR" ]; then
  echo "Library file z0testrc not found!"
  exit 2
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)

__version__=1.0.0.3


test_run() {
   local SAVE_FLOG_ECHO=$FLOG_ECHO
   local SAVE_FLOG=$FLOG
   local SAVE_opt_verbose=$opt_verbose
   local SAVE_opt_dry_run=$opt_dry_run
   local SAVE_opt_humdrum=${opt_humdrum:-0}
   local s=-1 x
   FLOG_ECHO=
   FLOG=
   opt_verbose=
   opt_humdrum=1
   if [[ $1 == "ls" ]]; then
     opt_verbose=1
     x=$(run_traced "$1" "-q")
     [[ -n "$x" ]] && false || true
     s=$?
   else
     if [[ ${1:0:3} == "cd " || $1 == "cd" ]]; then
       opt_dry_run=1
     fi
     run_traced "$1"
     s=$?
   fi
   opt_humdrum=$SAVE_opt_humdrum
   opt_dry_run=$SAVE_opt_dry_run
   opt_verbose=$SAVE_opt_verbose
   FLOG=$SAVE_FLOG
   FLOG_ECHO=$SAVE_FLOG_ECHO
   return $s
}

test_01() {
    local s
    test_run "true"
    s=$?
    test_result "run true" "$s" "$STS_SUCCESS"
}

test_02() {
    local s
    test_run "false"
    s=$?
    test_result "run false" "$s" "$STS_FAILED"
}

test_03() {
    local f s
    f="NOT_EXISTS"
    [[ -f $f ]] && rm -f $f
    test_run "touch $f"
    s=$?
    if [[ -f $f ]]; then
      test_result "run touch $f" "$s" "$STS_SUCCESS"
    else
      test_result "run touch $f" "$s" "$STS_FAILED"
    fi

    test_run "rm -f $f"
    s=$?
    if [[ -f $f ]]; then
      test_result "rm -f $f" "$s" "$STS_FAILED"
    else
      test_result "rm -f $f" "$s" "$STS_SUCCESS"
    fi
}

test_04() {
    local f s
    f="NOT_EXISTS"
    test_run "cd /not/exists/directory"
    s=$?
    test_result "cd $f" "$s" "$STS_SUCCESS"
}

test_05() {
    local f s
    test_run "ls"
    s=$?
    test_result "ls" "$s" "$STS_SUCCESS"
}


Z0BUG_init
parseoptest -l$TESTDIR/test_z0lib.log "$@"
sts=$?
if [ $sts -ne 127 ]; then
  exit $sts
fi



UT1_LIST=
UT_LIST=
if [ "$(type -t Z0BUG_setup)" == "function" ]; then Z0BUG_setup; fi
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
if [ "$(type -t Z0BUG_teardown)" == "function" ]; then Z0BUG_teardown; fi
exit $sts
