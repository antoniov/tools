#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
THIS=$(basename "$0")
TDIR=$($READLINK -f $(dirname $0))
[[ -d "$HOME/dev" ]] && HOME_DEV="$HOME/dev" || HOME_DEV="$HOME/devel"
PYPATH=$(echo -e "import os,sys\np=[x for x in (os.environ['PATH']+':$TDIR:..:$HOME_DEV').split(':') if x not in sys.path];p.extend(sys.path);print(' '.join(p))"|python)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$($READLINK -e $Z0LIBDIR)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$($READLINK -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

__version__=1.0.1.2


base_test () {
    local keys vals i
    keys=(k01    k02    k03    k04    K-X    ^K.*)
    vals=("aaaa" "bbbb" "cccc" "dddd" "eeee" "any")
    for i in {0..5}; do
      a_add "0" "${keys[i]}" "${vals[i]}"
    done
    for i in {0..4}; do
      TRES=$(a_find "0" ${keys[i]})
      test_result "find ${keys[i]}" "${vals[i]}" "$TRES"
    done
    keys=(k11    k12    k13    k14    K-X    ^K.*)
    vals=("AAAA" "BBBB" "CCCC" "DDDD" "EEEE" "ANY")
    for i in {0..5}; do
      a_add "1" "${keys[i]}" "${vals[i]}"
    done
    for i in {0..4}; do
      TRES=$(a_find "1" ${keys[i]})
      test_result "find ${keys[i]}" "${vals[i]}" "$TRES"
    done
    keys=(k01 k02 k03 k04)
    for i in {0..3}; do
      TRES=$(a_find "1" ${keys[i]})
      test_result "find ${keys[i]}" "" "$TRES"
    done
    keys=(k21 k22 k23 k24 ^K.*)
    vals=("Aaaa" "Bbbb" "Cccc" "Dddd" "Any")
    for i in {0..4}; do
      a_add "2" "${keys[i]}" "${vals[i]}"
    done
    for i in {0..3}; do
      TRES=$(a_find "2" ${keys[i]})
      test_result "find ${keys[i]}" "${vals[i]}" "$TRES"
    done
    keys=(k01 k02 k03 k04)
    for i in {0..3}; do
      TRES=$(a_find "2" ${keys[i]})
      test_result "find ${keys[i]}" "" "$TRES"
    done
    keys=(k11 k12 k13 k14)
    for i in {0..3}; do
      TRES=$(a_find "2" ${keys[i]})
      test_result "find ${keys[i]}" "" "$TRES"
    done
    keys=(k31 k32 k33 k34 ^K.*)
    vals=("AAaa" "BBbb" "CCcc" "DDdd" "ANy")
    for i in {0..4}; do
      a_add "3" "${keys[i]}" "${vals[i]}"
    done
    for i in {0..3}; do
      TRES=$(a_find "3" ${keys[i]})
      test_result "find ${keys[i]}" "${vals[i]}" "$TRES"
    done
}

test_01() {
    DEFDICT0="Dirty"
    DEFRULE0="Dirty!"
    DEFDICT1="Dirty"
    DEFRULE1="Dirty!"
    DEFDICT2="Dirty"
    DEFRULE2="Dirty!"
    DEFDICT3="Dirty"
    DEFRULE4="Dirty!"
    fh=$(xuname "-f")
    x=$(xuname "-v")
    local v=$(echo $x|awk -F. '{print $1}')
    disto=$(xuname "-d")$v
    for i in {0..3}; do
      eval $(a_new "$i")
      eval $(a_active "$i")
      test_result "FH" "$fh" "$XU_FH"
      test_result "DISTO" "$disto" "$XU_DISTO"
    done
    base_test

    keys=(k01 k02 k03 k04)
    for i in {0..3}; do
      TRES=$(a_find "3" ${keys[i]})
      test_result "find ${keys[i]}" "" "$TRES"
    done
    keys=(k11 k12 k13 k14)
    for i in {0..3}; do
      TRES=$(a_find "3" ${keys[i]})
      test_result "find ${keys[i]}" "" "$TRES"
    done
    keys=(k21 k22 k23 k24)
    for i in {0..3}; do
      TRES=$(a_find "3" ${keys[i]})
      test_result "find ${keys[i]}" "" "$TRES"
    done

    TRES=$(a_find "0" "K9")
    test_result "find K9" "any" "$TRES"
    TRES=$(a_find "1" K9)
    test_result "find K9" "ANY" "$TRES"

    fh=$(xuname "-f")
    x=$(xuname "-v")
    local v=$(echo $x|awk -F. '{print $1}')
    disto=$(xuname "-d")$v
    a_add "0" "k01" "global_a" "-f"
    TRES=$(a_find "0" "k01")
    test_result "find k01" "global_a" "$TRES"
    a_add "0" "k01" "local_a" "-d"
    TRES=$(a_find "0" "k01")
    test_result "find k01" "local_a" "$TRES"

    a_add "1" "k01" "global_A" "-f"
    TRES=$(a_find "1" "k01")
    test_result "find k01" "global_A" "$TRES"
    a_add "1" "k01" "local_A" "-d"
    TRES=$(a_find "1" "k01")
    test_result "find k01" "local_A" "$TRES"

    a_add "2" "k01" "Global_A" "-f"
    TRES=$(a_find "2" "k01")
    test_result "find k01" "Global_A" "$TRES"
    a_add "2" "k01" "Local_A" "-d"
    TRES=$(a_find "2" "k01")
    test_result "find k01" "Local_A" "$TRES"

    a_add "3" "k01" "GLobal_A" "-f"
    TRES=$(a_find "3" "k01")
    test_result "find k01" "GLobal_A" "$TRES"
    a_add "3" "k01" "LOcal_A" "-d"
    TRES=$(a_find "3" "k01")
    test_result "find k01" "LOcal_A" "$TRES"

    a_add "0" "^K.*" "global_any" "-f"
    TRES=$(a_find "0" "K9")
    test_result "find K9" "global_any" "$TRES"
    a_add "0" "^K.*" "local_any" "-d"
    TRES=$(a_find "0" "K9")
    test_result "find K9" "local_any" "$TRES"

    a_add "1" "^K.*" "global_ANY" "-f"
    TRES=$(a_find "1" "K9")
    test_result "find K9" "global_ANY" "$TRES"
    a_add "1" "^K.*" "local_ANY" "-d"
    TRES=$(a_find "1" "K9")
    test_result "find K9" "local_ANY" "$TRES"

    a_add "2" "^K.*" "Global_ANY" "-f"
    TRES=$(a_find "2" "K9")
    test_result "find K9" "Global_ANY" "$TRES"
    a_add "2" "^K.*" "Local_ANY" "-d"
    TRES=$(a_find "2" "K9")
    test_result "find K9" "Local_ANY" "$TRES"

    a_add "3" "^K.*" "GLobal_ANY" "-f"
    TRES=$(a_find "3" "K9")
    test_result "find K9" "GLobal_ANY" "$TRES"
    a_add "3" "^K.*" "LOcal_ANY" "-d"
    TRES=$(a_find "3" "K9")
    test_result "find K9" "LOcal_ANY" "$TRES"

    fh=$(xuname "-f")
    x=$(xuname "-v")
    local v=$(echo $x|awk -F. '{print $1}')
    disto=$(xuname "-d")$v
    a_add "0" "kx01" "local_ax" "$fh"
    TRES=$(a_find "0" "kx01")
    test_result "find kx01" "local_ax" "$TRES"
    a_add "0" "kx01" "global_ax" "$disto"
    TRES=$(a_find "0" "kx01")
    test_result "find kx01" "global_ax" "$TRES"
    a_add "1" "kx11" "local_ax" "$fh"
    TRES=$(a_find "1" "kx11")
    test_result "find kx11" "local_ax" "$TRES"
    a_add "1" "kx11" "global_ax" "$disto"
    TRES=$(a_find "1" "kx11")
    test_result "find kx11" "global_ax" "$TRES"
    a_add "2" "kx21" "local_ax" "$fh"
    TRES=$(a_find "2" "kx21")
    test_result "find kx21" "local_ax" "$TRES"
    a_add "2" "kx21" "global_ax" "$disto"
    TRES=$(a_find "2" "kx21")
    test_result "find kx21" "global_ax" "$TRES"
    a_add "3" "kx31" "local_ax" "$fh"
    TRES=$(a_find "3" "kx31")
    test_result "find kx31" "local_ax" "$TRES"
    a_add "3" "kx31" "global_ax" "$disto"
    TRES=$(a_find "3" "kx31")
    test_result "find kx31" "global_ax" "$TRES"

    for i in {0..3}; do
      eval $(a_new "$i")
      eval $(a_active "$i")
    done

    base_test
}


Z0BUG_init
parseoptest -l$TESTDIR/test_UNKNOWN.log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts







UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
# Follow code must be executed at main level sue bash limitations
for i in {0..3}; do
  eval $(a_new $i)
  eval $(a_active $i)
done
# /End Included Block/
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
