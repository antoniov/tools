#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 1.0.2.7
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
HOME_DEV="$HOME/devel"
[[ -x $TDIR/../bin/python ]] && PYTHON=$(readlink -f $TDIR/../bin/python) || [[ -x $TDIR/python ]] && PYTHON="$TDIR/python" || PYTHON="python"
PYPATH=$(echo -e "import os,sys;\nTDIR='"$TDIR"';HOME_DEV='"$HOME_DEV"'\no=os.path\nHOME=os.environ.get('HOME');t=o.join(HOME,'tools')\nn=o.join(HOME,'pypi') if o.basename(HOME_DEV)=='venv_tools' else o.join(HOME,HOME_DEV, 'pypi')\nd=HOME_DEV if o.basename(HOME_DEV)=='venv_tools' else o.join(HOME_DEV,'venv')\ndef apl(l,p,b):\n if p:\n  p2=o.join(p,b,b)\n  p1=o.join(p,b)\n  if o.isdir(p2):\n   l.append(p2)\n  elif o.isdir(p1):\n   l.append(p1)\nl=[TDIR]\nv=''\nfor x in sys.path:\n if not o.isdir(t) and o.isdir(o.join(x,'tools')):\n  t=o.join(x,'tools')\n if not v and o.basename(x)=='site-packages':\n  v=x\nfor x in os.environ['PATH'].split(':'):\n if x.startswith(d):\n  d=x\n  break\nfor b in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if TDIR.startswith(d):\n  apl(l,d,b)\n elif TDIR.startswith(n):\n  apl(l,n,b)\n apl(l,v,b)\n apl(l,t,b)\nl=l+os.environ['PATH'].split(':')\ntdir=o.dirname(TDIR)\np=set()\npa=p.add\np=[x for x in l if x and (x.startswith(HOME) or x.startswith(HOME_DEV) or x.startswith(tdir)) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found in <$PYPATH>!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"
TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"
Z0TLIBDIR=$(findpkg z0testrc "$PYPATH" "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

DIST_CONF=$(findpkg ".z0tools.conf" "$PYPATH")
TCONF="$HOME/.z0tools.conf"
CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"


__version__=1.0.7.1


test_01() {
    local f p result TRES
    local f=$(basename $0)
    local p=$(dirname $0)
    local result=$(findpkg "$f" "$p")
    local TRES=$($READLINK -e $0)
    test_result "findpkg myself" "$TRES" "$result"
}

test_02() {
    local p p1 p2 Y1 Y2 result TRES
    p=$(dirname $0)
    p=$($READLINK -e $p)
    Y1=pgsql
    Y2=postgresql
    mkdir -p $p/$Y1
    mkdir -p $p/$Y2
    mkdir -p $p/$Y2/9.1
    touch $p/$Y2/psql
    touch $p/$Y2/9.1/psql9

    result=$(findpkg "" "$p" "$Y1")
    TRES=$($READLINK -e $p/$Y1)
    test_result "findpkg '' $p $Y1" "$TRES" "$result"

    result=$(findpkg "" "$p" "$Y2")
    TRES=$($READLINK -e $p/$Y2)
    test_result "findpkg '' $p $Y2" "$TRES" "$result"

    result=$(findpkg "" "$p" "$Y2 $Y1" "9.1")
    TRES=$($READLINK -e $p/$Y2/9.1)
    test_result "findpkg '' $p '$Y2 $Y1' 9.1" "$TRES" "$result"

    result=$(findpkg "psql" "$p" "$Y1 $Y2" "9.1")
    TRES=$($READLINK -e $p/$Y2/psql)
    test_result "findpkg psql $p '$Y2 $Y1' 9.1" "$TRES" "$result"

    result=$(findpkg "psql9" "$p" "$Y1 $Y2" "9.1")
    TRES=$($READLINK -e $p/$Y2/9.1/psql9)
    test_result "findpkg psql9 $p '$Y2 $Y1' 9.1" "$TRES" "$result"

    p1=$(basename $p)
    p=$(dirname $p)
    result=$(findpkg "psql9" "$p" "$p1" "$Y1 $Y2" "9.1")
    test_result "findpkg psql9 $p $p1 '$Y2 $Y1' 9.1" "$TRES" "$result"

    p2=$(basename $p)
    p=$(dirname $p)
    result=$(findpkg "psql9" "$p" "$p2" "$p1" "$Y1 $Y2" "9.1")
    test_result "findpkg psql9 $p $p2 $p1 '$Y2 $Y1' 9.1" "$TRES" "$result"

    result=$(findpkg "" "$p" "$p2" "$p1" "$Y1 $Y2" "9.2")
    # TRES=$($READLINK -e $p/$p2/$p1/$Y1)
    test_result "findpkg '' $p $p2 $p1 '$Y2 $Y1' 9.2" "" "$result"
}

test_03() {
    local f p result TRES
    f=""
    p="/etc /usr"
    result=$(findpkg "$f" "$p")
    TRES="/etc"
    test_result "findpkg $f $p" "$TRES" "$result"
}

test_04() {
    local f p result TRES
    f=""
    p="./Non_Exists /etc /usr"
    result=$(findpkg "$f" "$p")
    TRES="/etc"
    test_result "findpkg $f $p" "$TRES" "$result"
}

test_05() {
    local f p result TRES
    f="bash"
    p="./Non_Exists /etc /bin"
    result=$(findpkg "$f" "$p")
    if [ -s /bin ]; then
      TRES=$($READLINK -e /bin)/bash
    else
      TRES="/bin/bash"
    fi
    test_result "findpkg $f $p" "$TRES" "$result"
}

test_06() {
    local f p s result TRES
    p="/usr /etc /bin"
    s="init hosts init.d"
    if [ -h /etc/init.d ]; then
      TRES=$($READLINK -e /etc/init.d)
    else
      TRES=/etc/init.d
    fi
    if [ -f $TRES/network ]; then
      TRES=$TRES/network
      f="network"
      result=$(findpkg "$f" "$p" "$s")
    elif [ -f $TRES/networking ]; then
      TRES=$TRES/networking
      f="networking"
      result=$(findpkg "$f" "$p" "$s")
    else
      f=failed
      result=$(findpkg "$f" "$p" "$s")
    fi
    [ "$f" == "failed" ] || test_result "findpkg $f $p $s" "$TRES" "$result"
}

test_07() {
    local f p s result TRES
    f="mail/"
    p="/var  /usr /etc /bin"
    s="spool mail log lib"
    result=$(findpkg "$f" "$p" "$s")
    if [ -h  /var/spool/mail ]; then
      TRES=$($READLINK -e /var/spool/mail)
    else
      TRES=/var/spool/mail
    fi
    test_result "findpkg $f $p $s" "$TRES" "$result"
}

test_09() {
    local p p1 p2 Y1 Y2 result TRES
    p=$(dirname $0)
    p=$($READLINK -e $p)
    Y1=pgsql
    Y2=postgresql
    rm -fR $p/$Y1
    rm -fR $p/$Y2
}

Z0BUG_init
parseoptest -l$TESTDIR/test_..log "$@"
sts=$?
[[ $sts -ne 127 ]] && exit $sts



UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts
