#!/bin/bash
# -*- coding: utf-8 -*-
# Regression tests on z0lib
#
READLINK=$(which greadlink 2>/dev/null) || READLINK=$(which readlink 2>/dev/null)
export READLINK
# Based on template 1.0.4.1
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
[ $BASH_VERSINFO -lt 4 ] && echo "This script $0 requires bash 4.0+!" && exit 4
HOME_DEV="$HOME/devel"
[[ -x $TDIR/../bin/python ]] && PYTHON=$(readlink -f $TDIR/../bin/python) || [[ -x $TDIR/python ]] && PYTHON="$TDIR/python" || PYTHON="python"
[[ -z $PYPATH ]] && PYPATH=$(echo -e "C='"$TDIR"'\nD='"$HOME_DEV"'\nimport os,sys\no=os.path\na=o.abspath\nj=os.path.join\nd=os.path.dirname\nb=os.path.basename\nf=os.path.isfile\np=os.path.isdir\nH=o.expanduser('~')\nT=j(H,'tools')\nR=j(H,'pypi') if o.basename(D)=='venv_tools' else j(H,D,'pypi')\nW=D if o.basename(D)=='venv_tools' else j(D,'venv')\ndef apl(L,P,B):\n if P:\n  if p(j(P,B,B)) and p(j(P,B,B,'script')) and f(j(P,B,B,'__init__')):\n   L.append(j(P,B,B))\n   return 1\n  elif j(P,B):\n   L.append(j(P,B))\n   return 1\n return 0\nL=[C]\nif b(C)=='tests':\n C=a(j(C,'..'))\n L.append(C)\nif b(C)==d(C) and f(j(C,'..','setup.py')):\n C=a(j(C,'..'))\nP=os.environ['PATH'].split(':')\nV= ''\nfor X in sys.path:\n if not p(T) and p(j(X,'tools')):\n  T=j(X,'tools')\n if not V and b(X)=='site-packages':\n  V=X\nfor B in ('z0lib','zerobug','odoo_score','clodoo','travis_emulator'):\n if p(j(C,B)):\n  F=apl(L,C,B)\n else:\n  F=0\n  for X in P:\n   if p(j(X,B)):\n    F=apl(L,X,B)\n    break\n  if not F:\n   F=apl(L,V,B)\n  if not F:\n   apl(L,T,B)\nL=L+P\np=set()\npa=p.add\np=[x for x in L if x and (x.startswith(H) or x.startswith(D) or x.startswith(C)) and not (x in p or pa(x))]\nprint(' '.join(p))\n"|$PYTHON)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "PYPATH=$PYPATH"
for d in $PYPATH /etc; do
  if [[ -e $d/z0librc ]]; then
    . $d/z0librc
    Z0LIBDIR=$(readlink -e $d)
    break
  fi
done
if [[ -z "$Z0LIBDIR" ]]; then
  echo "Library file z0librc not found in <$PYPATH>!"
  exit 72
fi
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0LIBDIR=$Z0LIBDIR"

TRAVISLIBDIR=$(findpkg travisrc "$PYPATH" "travis_emulator")
if [[ -z "$TRAVISLIBDIR" ]]; then
  echo "Library file travisrc not found!"
  exit 72
fi
. $TRAVISLIBDIR
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TRAVISLIBDIR=$TRAVISLIBDIR"

TESTDIR=$(findpkg "" "$TDIR . .." "tests")
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TESTDIR=$TESTDIR"
RUNDIR=$(readlink -e $TESTDIR/..)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "RUNDIR=$RUNDIR"

Z0TLIBDIR=$(findpkg z0testrc "$PYPATH ." "zerobug")
if [[ -z "$Z0TLIBDIR" ]]; then
  echo "Library file z0testrc not found!"
  exit 72
fi
. $Z0TLIBDIR
Z0TLIBDIR=$(dirname $Z0TLIBDIR)
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "Z0TLIBDIR=$Z0TLIBDIR"

DIST_CONF=$(findpkg ".z0tools.conf" "$PYPATH")
TCONF="$HOME/.z0tools.conf"
CFG_init "ALL"
link_cfg_def
link_cfg $DIST_CONF $TCONF
[[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "DIST_CONF=$DIST_CONF" && echo "TCONF=$TCONF"
get_pypi_param ALL
RED="\e[1;31m"
GREEN="\e[1;32m"
CLR="\e[0m"

__version__=1.0.5.1

test_common() {
    local res pypath
    [[ -f ./travisrc ]] && rm -f ./travisrc
    res=$($1 PYPATH|cut -f1 -d" ")
    test_result "$PWD/simulate_cmd PYPATH" "$res" "$(dirname $1)"
    res=$($1 Z0LIBDIR)
    test_result "$PWD/simulate_cmd Z0LIBDIR" "$res" "$RUNDIR"
    # travisrc is found in python site packages
    pypath=$(echo "import sys;print([x for x in sys.path if 'site-packages' in x][0])"|python)
    res=$($1 PYPATH|grep -Eo $pypath/travis_emulator)
    test_result "$PWD/simulate_cmd PYPATH/travis_emulator" "$res" "$pypath/travis_emulator"
    res=$($1 TRAVISLIBDIR)
    test_result "$PWD/simulate_cmd TRAVISLIBDIR" "$res" "$pypath/travis_emulator/travisrc"
    # Now travisrc should be found in current directory
    cp $HOME/tools/travis_emulator/travisrc ./
    res=$($1 TRAVISLIBDIR)
    if [[ $2 != "N" ]]; then
      test_result "$PWD/simulate_cmd TRAVISLIBDIR (2)" "$res" "$PWD/travisrc"
    else
      test_result "$PWD/simulate_cmd TRAVISLIBDIR (2)" "$res" "$pypath/travis_emulator/travisrc"
    fi
    rm -f ./travisrc
    res=$($1 PKGNAME)
    test_result "$PWD/simulate_cmd PKGNAME" "$res" "z0lib"
    res=$($1 PKGPATH)
    test_result "$PWD/simulate_cmd PKGPATH" "$res" "$TRAVIS_BUILD_DIR"
    res=$($1 PRJNAME)
    test_result "$PWD/simulate_cmd PRJNAME" "$res" "z0lib"
    res=$($1 PRJPATH)
    test_result "$PWD/simulate_cmd PRJPATH" "$res" "$TRAVIS_BUILD_DIR"
}

test_01() {
    local res pypath
    cd $TESTDIR
    res=$($TESTDIR/simulate_cmd THIS)
    test_result "$PWD/simulate_cmd THIS" "$res" "simulate_cmd"
    res=$($TESTDIR/simulate_cmd TDIR)
    test_result "$PWD/simulate_cmd TDIR" "$res" "$TESTDIR"
    res=$($TESTDIR/simulate_cmd HOME_DEV)
    test_result "$PWD/simulate_cmd HOME_DEV" "$res" "$HOME/devel"
    test_common $TESTDIR/simulate_cmd
    cd $RUNDIR
    test_common $TESTDIR/simulate_cmd
    mv $TESTDIR/simulate_cmd $RUNDIR/simulate_cmd
    cd $TESTDIR
    test_common $RUNDIR/simulate_cmd "N"
    cd $RUNDIR
    test_common $RUNDIR/simulate_cmd
    # mv $RUNDIR/simulate_cmd $HOME/tools/z0lib
    # res=$($HOME/tools/z0lib/simulate_cmd TDIR)
    # test_result "$HOME/tools/z0lib/simulate_cmd TDIR" "$res" "$HOME/tools/z0lib"
    # mv $HOME/tools/z0lib $TESTDIR/simulate_cmd
}

Z0BUG_setup() {
    rm -f $TESTDIR/simulate_cmd
    # echo "set -x" >>$TESTDIR/simulate_cmd
    while IFS= read -r line || [[ -n "$line" ]]; do
      echo "$line" >>$TESTDIR/simulate_cmd
      [[ $line =~ ^__version__= ]] && break
    done <$0
    echo "" >>$TESTDIR/simulate_cmd
    echo "echo \${!1}" >>$TESTDIR/simulate_cmd
    chmod +x $TESTDIR/simulate_cmd
}

Z0BUG_teardown() {
    rm -f $TESTDIR/simulate_cmd
}

Z0BUG_init
parseoptest -l$TESTDIR/test_z0lib.log "$@" "-J"
sts=$?
[[ $sts -ne 127 ]] && exit $sts
if [ ${opt_tjLib:-0} -ne 0 ]; then
  TRAVISLIBDIR=$(findpkg travisrc "$PYPATH ." "travis_emulator")
  if [[ -z "$TRAVISLIBDIR" ]]; then
    echo "Library file travisrc not found!"
    exit 72
  fi
  . $TRAVISLIBDIR
  [[ $TRAVIS_DEBUG_MODE -ge 8 ]] && echo "TRAVISLIBDIR=$TRAVISLIBDIR"
fi


UT1_LIST=
UT_LIST=
[[ "$(type -t Z0BUG_setup)" == "function" ]] && Z0BUG_setup
Z0BUG_main_file "$UT1_LIST" "$UT_LIST"
sts=$?
[[ "$(type -t Z0BUG_teardown)" == "function" ]] && Z0BUG_teardown
exit $sts