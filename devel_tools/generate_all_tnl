#! /bin/bash
#
# (Re)generate all translation, readin po files form OCA installation
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2018-2019 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../.. $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  elif [ -d $d/z0lib ] && [ -e $d/z0lib/z0librc ]; then
    . $d/z0lib/z0librc
    Z0LIBDIR=$d/z0lib
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $HOME/tools/clodoo $HOME/dev ${PYPATH//:/ } . .." "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR

__version__=0.2.2.3


upgrade_oca_repo() {
# upgrade_oca_repo(odoo_vid)
    local odoo_fver=$(build_odoo_param FULLVER "$1")
    local odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
    local reps=$(ls -1 $HOME/$1/|tr "\n" " ")
    local r opts
    [ $opt_dry_run -eq 0 ] && opts= || opts=n
    for r in $reps; do
      if [[ ! $r =~ $INVALID_MODNAMES_RE && ! "${r:0:1}" == "_" && -d "$HOME/$odoo_fver/$r" ]]; then
        [ $opt_verbose -ne 0 ] && echo "- Upgrading from repository OCA $r -b $odoo_fver ..."
        if [ -d $HOME/oca$odoo_ver/$r ]; then
          odoo_install_repository -b$odoo_vid $r -Ooca -o $HOME/oca$odoo_ver/$r -UCq$opts
        else
          odoo_install_repository -b$odoo_vid $r -Ooca -o $HOME/oca$odoo_ver/$r -Cq$opts
        fi
      fi
    done
}

copy_po_from_oca_path() {
# copy_po_from_oca_path(odoo_vid)
    local b d f fn frepos p repos
    local r opts
    [ $opt_dry_run -eq 0 ] && opts= || opts=-n
    local odoo_fver=$(build_odoo_param FULLVER "$1")
    local odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
    cd $HOME/oca$odoo_ver
    for repos in ./*; do
      if [ -d $repos ]; then
        frepos=$(readlink -f $repos)
        b=$(basename $repos)
        [ ! -d $HOME/$odoo_vid/$b/i18n ] && run_traced "mkdir $HOME/$odoo_vid/$b/i18n"
        [ $opt_verbose -ne 0 ] && echo "- examing $frepos ..."
        for f in $(find $frepos -name it.po -o -name README.md  -o -name README.rst); do
          p=$(dirname $f)
          b=$(basename $f)
          d=${p/oca$odoo_ver/$odoo_vid}
          run_traced "cp $p/$b $d"
        done
        if [ ! -f $HOME/$odoo_vid/$b/i18n/it.po ]; then
          run_traced "touch $HOME/$odoo_vid/$b/i18n/it.po"
        fi
        repos=${frepos/oca$odoo_ver/$odoo_vid}
        for d in $(find $repos -name egg-info); do
          p=$(dirname $d)
          pushd $p >/dev/null
          run_traced "gen_readme.py -b$odoo_fver -lmodule $opts"
          [ -d $p/static/description ] && run_traced "gen_readme.py -H -b$odoo_fver -lmodule $opts"
          popd >/dev/null
        done
      fi
      if [ -d $repos ]; then
        b=$(basename $repos)
        pushd  $HOME/$odoo_fver/$b >/dev/null
        if [ -d egg-info ]; then
          run_traced "gen_readme.py -b$odoo_fver -lrepository $opts"
        fi
        popd >/dev/null
      fi
    done
    cd $HOME/$odoo_fver
    if [ -d egg-info ]; then
      run_traced "gen_readme.py -b$odoo_fver -lOCB $opts"
    fi
}

update_translation() {
# copy_po_from_oca_path(odoo_vid)
    local b d f fn frepos m p repos
    local r opts
    [ $opt_dry_run -eq 0 ] && opts= || opts=-n
    local odoo_fver=$(build_odoo_param FULLVER "$1")
    local odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
    cd $HOME/$odoo_fver
    for repos in ./*; do
      if [ -d $repos ]; then
        frepos=$(readlink -f $repos)
        [ $opt_verbose -ne 0 ] && echo "- examing $frepos ..."
        r=$(basename $frepos)
        for f in $(find $frepos -name __openerp__.py -o -name __manifest__.py); do
          p=$(dirname $f)
          m=$(basename $p)
          if [ "${m:0:5}" != "l10n_" -o $m == "l10n_it" ]; then
            # echo "-- Module $r/$m -b $odoo_fver"
            run_traced "odoo_translation.py -m $m -b $odoo_fver $opts"
          fi
        done
      fi
    done
}


OPTOPTS=(h        b          d        n           O         P        T         V           v)
OPTDEST=(opt_help opt_branch opt_db   opt_dry_run opt_nooca opt_nopo opt_notnl opt_version opt_verbose)
OPTACTI=(1        "=>"       "="      1           1         1        1         "*>"        "+")
OPTDEFL=(0        ""         ""       0           0         0        0         ""          -1)
OPTMETA=("help"   "branch"   "dbname" ""          ""        ""       ""        ""         "")
OPTHELP=("this help"\
 "branches: may be one or more of 6.1 7.0 8.0 9.0 10.0 11.0 12.0 or all"\
 "dbname to upgrade"\
 "do nothing (dry-run)"\
 "do not upgrade from OCA repository"\
 "do not copy po files form OCA path"\
 "do not translate from odoo_default_tnl.csv"
 "show version"\
 "verbose mode")
 
OPTARGS=()

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_verbose -eq -1 ]; then
  opt_verbose=1
fi
if [ -z "$opt_branch" ]; then
  opt_help=1
fi
if [ $opt_help -gt 0 ]; then
  print_help "(Re)generate translations"\
  "(C) 2018-2019 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi
if [ "$opt_branch" == "all" ]; then
  opt_branch="12.0 11.0 10.0 9.0 8.0 7.0"
fi
opt_branch="${opt_branch//,/ }"
echo "Load translation for Odoo $opt_branch"
INVALID_MODNAMES_RE=$(build_odoo_param INVALID_MODNAMES_RE)
INVALID_MODNAMES_RE="${INVALID_MODNAMES_RE:0: -2}|profiles|uncovered)\$"
for odoo_vid in $opt_branch; do
  odoo_fver=$(build_odoo_param FULLVER "$odoo_vid")
  odoo_ver=$(build_odoo_param MAJVER $odoo_fver)
  [ $opt_nooca -eq 0 ] && upgrade_oca_repo $odoo_vid
  [ $opt_nopo -eq 0 ] && copy_po_from_oca_path $odoo_vid
  [ $opt_notnl -eq 0 ] && update_translation $odoo_vid
  if [ -n "$opt_db" ]; then
    [ $opt_dry_run -eq 0 ] && opts= || opts=-n
    run_traced "odoo_translation.py -mbase -b $odoo_fver -d $opt_db $opts"
  fi
done
