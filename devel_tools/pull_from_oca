#! /bin/bash
#
# Upgrade from OCA repositoty like 'git pull'
# OCA path must be locally present with name ~/OCA<majver>/<repository>/...
# Repository to upgrade must be present with name ~/<versio>/<repository>/...
#
# This free software is released under GNU Affero GPL3
# author: Antonio M. Vigliotti - antoniomaria.vigliotti@gmail.com
# (C) 2018-2020 by SHS-AV s.r.l. - http://www.shs-av.com - info@shs-av.com
#
THIS=$(basename "$0")
TDIR=$(readlink -f $(dirname $0))
PYPATH=$(echo -e "import sys\nprint(str(sys.path).replace(' ','').replace('\"','').replace(\"'\",\"\").replace(',',':')[1:-1])"|python)
for d in $TDIR $TDIR/.. $TDIR/../z0lib $TDIR/../.. $TDIR/../../z0lib $TDIR/../../z0lib/z0lib $HOME/dev $HOME/tools ${PYPATH//:/ } /etc; do
  if [ -e $d/z0librc ]; then
    . $d/z0librc
    Z0LIBDIR=$d
    Z0LIBDIR=$(readlink -e $Z0LIBDIR)
    break
  fi
done
if [ -z "$Z0LIBDIR" ]; then
  echo "Library file z0librc not found!"
  exit 2
fi
ODOOLIBDIR=$(findpkg odoorc "$TDIR $TDIR/.. $HOME/tools/clodoo $HOME/dev ${PYPATH//:/ } . .." "clodoo")
if [ -z "$ODOOLIBDIR" ]; then
  echo "Library file odoorc not found!"
  exit 2
fi
. $ODOOLIBDIR

__version__=1.0.0.3


do_edit_module() {
# do_edit_module(tgtpath)
    local tgtpath=$1
    local fn lm ln x
    if [ -f $tgtpath/odoo/addons/base/module/module.py ]; then
      fn=$tgtpath/odoo/addons/base/module/module.py
    elif [ -f $tgtpath/openerp/addons/base/module/module.py ]; then
      fn=$tgtpath/openerp/addons/base/module/module.py
    else
      echo "File module.py not found!"
      return
    fi
    grep -q "antoniov.*Avoid translation error" $fn
    [ $? -eq 0 ] && return
    ln=$(grep "output = publish_string" $fn)
    lm=$(echo "$ln"|grep -Eo "^[ ]+")
    lm=${lm// /\\ }
    x="${lm}# [antoniov 2018-09-04] Avoid translation error"
    run_traced "sed \"/output = publish_string/i$x\" -i $fn"
    x="${lm}try:"
    run_traced "sed \"/output = publish_string/i$x\" -i $fn"
    run_traced "sed -e \"s/output = publish_string/    output = publish_string/\" -i $fn"
    x="${lm}\ \ \ \ output = 'Error in Description'"
    run_traced "sed \"/output = publish_string/a$x\" -i $fn"
    x="${lm}except:"
    run_traced "sed \"/output = publish_string/a$x\" -i $fn"
}


copy_git() {
# copy_git(fn tmpdir)
    local fn=$1
    local tmpdir=$2
    local b=.git
    [ -d $tmpdir/$b ] && run_traced "rm -fR $tmpdir/$b"
    [ -d $fn ] && run_traced "cp -R $fn $tmpdir/"
    [ -f $fn ] && run_traced "cp $fn $tmpdir/"
}

rsync_file() {
# rsync_file(fn tmpdir strategy)
    local fn=$1
    local tmpdir=$2
    local b=$(basename $fn)
    local xtgy=$3
    [[ $b =~ .*\.bak$ || "$b" == "__to_remove" ]] && return
    if [ "$xtgy" == "zero" ]; then
      run_traced "cp $fn $tmpdir/$b"
    elif [ "$xtgy" == "oca" ]; then
      [ ! -f $tmpdir/$b ] && run_traced "cp $fn $tmpdir/$b"
    fi
}

rsync_module() {
# rsync_module(srcdir tgtdir repo zero|oca|req oca|zero [sub])
    local srcdir=$1
    local tgtdir=$2
    local b=$(basename $srcdir)
    local repo=$3
    local xtgy=$4
    local src=$5
    local sub=$6
    local module x
    x=$(shopt -p dotglob)
    [ $opt_dry_run -ne 0 ] && OPTS=${OPTS}n
    [ -n "$OPTS" ] && OPTS="-$OPTS"
    OCB_SUBDIRS_RE=$(build_odoo_param OCB_SUBDIRS_RE)
    OCB_SUBDIRS_RE="${OCB_SUBDIRS_RE:0: -2}|.git|.github)\$"
    [ "$src" != "oca" ] && [ "$x" != "shopt -s dotglob" ] && run_traced "shopt -s dotglob"
    [ "$src" == "oca" ] && [ "$x" != "shopt -u dotglob" ] && run_traced "shopt -u dotglob"
    if [[ $b =~ .*\.bak$ || "$b" == "__to_remove" || "$b" == "setup" ]]; then
      return
    elif [[ $b =~ ^\.git.*$ ]]; then
      [ "$src" != "oca" ] && run_traced "rsync -a --ignore-existing $srcdir/ $tgtdir/$b/"
      [ "$src" == "oca" ] && return
    elif [[ $b =~ (README.md|.travis.yml|egg-info) ]]; then
      [ "$src" == "$xtgy" ] && run_traced "rsync -a --ignore-existing $srcdir/ $tgtdir/$b/"
      [ "$src" != "$xtgy" ] && run_traced "rsync -au $srcdir/ $tgtdir/$b/"
    elif [[ "$repo" == "OCB" ]]; then
      if [ -z $sub ]; then
        for module in $srcdir/*; do
          b=$(basename $module)
          rsync_module "$module" "$2/$b" "$3" "$4" "$5" "sub"
        done
        return
      elif [ -f "$srcdir" ]; then
        [ "$src" == "$xtgy" ] && rsync_file $srcdir $tgtdir $xtgy
        [ "$src" != "$xtgy" ] && run_traced "rsync -au $srcdir $tgtdir"
      elif [[ $b =~ $OCB_SUBDIRS_RE ]]; then
        if [ "$src" == "$xtgy" ]; then
          run_traced "rsync -a --ignore-existing $srcdir/ $tgtdir/$b/"
        elif [[ "$src" != "oca" && "$xtgy" == "req" ]]; then
          run_traced "vfdiff -bme $srcdir $tgtdir/$b"
          sts=$?
          if [ $sts -eq 0 ]; then
            echo "Module $b of $srcdir is the same of $tgtdir/$b"
          else
            read -p "Select zeroincombenze distribution for module $b (y,n)" dummy
            if [ "$dummy" == "y" ]; then
              run_traced "rsync -a --ignore-existing $module/ $tgtdir/$b/"
            fi
          fi
        else
          run_traced "rsync -au $srcdir/ $tgtdir/"
        fi
      fi
    fi
}

sync_tmp_2_tgt() {
# sync_tmp_2_tgt(tgtpath tmpdir repo strategy)
    local b d dlist f flist l module t1 OPTS
    local tgtpath=$1
    local tmpdir=$2
    local repo=$3
    local xtgy=$4
    [ $opt_dry_run -ne 0 ] && OPTS=${OPTS}n
    [ -n "$OPTS" ] && OPTS="-$OPTS"
    OCB_SUBDIRS_RE=$(build_odoo_param OCB_SUBDIRS_RE)
    OCB_SUBDIRS_RE="${OCB_SUBDIRS_RE:0: -2}|.git|.github)\$"
    run_traced "shopt -s dotglob"
    if [ "$repo" == "OCB" ]; then
      for module in $tgtpath/*; do
        if [ -f "$module" ]; then
          rsync_file $module $tmpdir $xtgy
        else
          b=$(basename $module)
          if [[ $b =~ ^\.git.*$ ]]; then
            copy_git $module $tmpdir
          elif [[ $b =~ $OCB_SUBDIRS_RE ]]; then
            rsync_module $module $tmpdir $repo $xtgy
          fi
        fi
      done
    else
      rsync_module $tgtpath $tmpdir $repo $xtgy
    fi
    l=${#tgtpath}
    ((l++))
    dlist=$(find $tmpdir -maxdepth 2 -type d -name readme|tr "\n" " ")
    for d in $dlist; do
      t1=$(dirname $d)
      if [ ! -d $t1/egg-info ]; then
        run_traced "mv $d $t1/egg-info"
        for f in $t1/egg-info/*; do
          b=$(basename $f)
          if [ "${b,,}" == "contributors.rst" ]; then
            run_traced "mv $f $t1/egg-info/contributors.txt"
          else
            run_traced "mv $f $t1/egg-info/${b,,}"
          fi
        done
        if [ -f $t1/egg-info/description.rst -a ! -f $t1/egg-info/descrizione.rst ]; then
          echo "Descrizione in italiano non (ancora) disponibile" >$t1/egg-info/descrizione.rst
        fi
        if [ -f $t1/egg-info/authors.txt ]; then
          echo "* Odoo Community Association (OCA) <https://odoo-community.org>" >$t1/egg-info/authors.txt
        fi
      else
        run_traced "rm -fR $d"
      fi
    done
    flist=$(find $tgtpath -maxdepth 2 -type f -exec grep -l "antoniov" '{}' \;)
    for f in $flist; do
      t=${f:l}
      t=${tmpdir}/$t
      t1=($dirname $t)
      [ -f $t1 ] && run_traced "mv $t1 $t1.bak"
      run_traced "cp -f $f $t1  # Modificed file by Antoniov"
    done
    [ -d $tmpdir/setup ] && run_traced "rm -fR $tmpdir/setup"
    [ -d $tgtpath.bak ] && run_traced "rm -fR $tgtpath.bak"
    [ -d $tmpdir/doc/cla ] && run_traced "rm -fR $tmpdir/doc/cla"
    if [ "$repo" == "OCB" ]; then
      d=$tmpdir
      [ -d $d/__to_remove ] && run_traced "rm -fR $d/__to_remove"
      run_traced "mv $tgtpath $d/__to_remove"
    else
      d=$(dirname $tgtpath)
      [ ! -d $d/__to_remove ] && run_traced "mkdir $d/__to_remove"
      [ -d $d/__to_remove/$repo ] && run_traced "rm -fR $d/__to_remove/$repo"
      run_traced "mv $tgtpath $d/__to_remove/$repo"
    fi
    run_traced "mv $tmpdir $tgtpath"
    if [ "$repo" == "OCB" -a $test_mode -eq 0 ]; then
      run_traced "odoo_skin.sh $tgtpath zeroincombenze $OPTS"
      do_edit_module $tgtpath
    fi
    $TDIR/regen_all_docs $tgtpath zero $OPTS
}

OPTOPTS=(h        b          D        G       H           n           q           s        V           v           y)
OPTDEST=(opt_help opt_branch opt_drop opt_git opt_humdrum opt_dry_run opt_verbose opt_xtgy opt_version opt_verbose opt_yes)
OPTACTI=(1        "="        1        1       1           1           0           "="      "*>"        "+"         1)
OPTDEFL=(0        ""         0        0       0           0           -1          "zero"   ""          -1          0)
OPTMETA=("help"   "branch"   ""       ""      ""          ""          ""          "name"   ""          ""          "")
OPTHELP=("this help"\
 "branches: may be one or more of 6.1 7.0 8.0 9.0 10.0 11.0 or 12.0"\
 "drop oca repository before upgrade"\
 "Download module from git"
 "humdrum, display w/o colors"\
 "do nothing (dry-run)"\
 "silent mode"\
 "strategy: may be (zero,oca,req)"\
 "show version"\
 "verbose mode"\
 "assume yes")
OPTARGS=(tgtpath)

parseoptargs "$@"
if [ "$opt_version" ]; then
  echo "$__version__"
  exit $STS_SUCCESS
fi
if [ $opt_verbose -eq -1 ]; then
  opt_verbose=1
fi
if [ -z "$opt_branch" ]; then
  opt_help=1
fi
if [[ ! $opt_xtgy =~ (zero|oca|req) ]]; then
  opt_help=1
fi
if [ $opt_help -gt 0 ]; then
  print_help "Upgrade from OCA like git pull"\
  "(C) 2018-2020 by zeroincombenze(R)\nhttp://wiki.zeroincombenze.org/en/Linux/dev\nAuthor: antoniomaria.vigliotti@gmail.com"
  exit $STS_SUCCESS
fi

if [ ${opt_humdrum:-0} -eq 0 ]; then
  TRAVIS_TEXT_COLOR="\e[0;97;40m"
  TRAVIS_HDR1_COLOR="\e[30;42m"
  TRAVIS_HDR2_COLOR="\e[30;46m"
  TRAVIS_HDR3_COLOR="\e[30;106m"
  TRAVIS_NOP_COLOR="\e[35;40m"
else
  TRAVIS_TEXT_COLOR=
  TRAVIS_HDR1_COLOR=
  TRAVIS_HDR2_COLOR=
  TRAVIS_HDR3_COLOR=
  TRAVIS_NOP_COLOR=
fi


[ "${tgtpath: -1}" == "/" ] && tgtpath=${tgtpath:0: -1}
if [ ! -d $tgtpath ]; then
  echo "Directory $tgtpath not found!"
  exit 1
fi
if [[ $tgtpath =~ ^/.*/tests/res/ ]]; then
  test_mode=1
  SAVED_HOME=$HOME
  HOME=$(echo $tgtpath|grep -Eo "^/.*/tests/res/")
  HOME=${HOME:0: -1}
else
  test_mode=0
fi
[ "$PWD" == "$tgtpath" ] && cd $HOME
tgt_odoo_dir=$(dirname $tgtpath)

odoo_fver=$(build_odoo_param FULLVER "$tgtpath")
if [ "$odoo_fver" != "$opt_branch" ]; then
  echo "Directory $tgtpath is $odoo_fver: not for Odoo $opt_branch!"
  exit 1
fi
odoo_ver=$(build_odoo_param MAJVER "$odoo_fver")
repo=$(build_odoo_param REPOS "$tgtpath")
[ "$repo" != "OCB" ] && src_oca=$HOME/oca$odoo_ver/$repo || src_oca=$HOME/oca$odoo_ver
if [ ! -d $src_oca ]; then
  echo "Odoo source repository $src_oca not found!"
  exit 1
fi
[ $opt_verbose -ne 0 ] && echo "Upgrade repository $repo from $src_oca to $tgtpath ..."
if [ $opt_yes -eq 0 ]; then
  read -p "Proceed (yes/no)? " dummy
  if [[ -z "$dummy" || ! "$dummy" == "yes" ]]; then
    echo "Command aborted."
    exit 0
  fi
fi
tmpdir=$HOME/tmp
[ ! -d $tmpdir ] && run_traced "mkdir -p $tmpdir"
[ "$repo" != "OCB" ] && tmp_odoo=$tmpdir/$odoo_fver/$repo || tmp_odoo=$tmpdir/$odoo_fver
[ "$PWD" == "$tmp_odoo" ] && cd $HOME
OPTS=
[ $opt_dry_run -ne 0 ] && OPTS=${OPTS}n
[ -n "$OPTS" ] && OPTS="-$OPTS"
[ -d $tmp_odoo ] && run_traced "rm -fR $tmp_odoo"
[ $opt_git -ne 0 ] && run_traced "odoo_install_repository -b$odoo_fver $repo -Cy $OPTS"
if [ $opt_drop -ne 0 ]; then
  run_traced "odoo_install_repository -boca$odoo_ver $repo -Ooca -o $tmp_odoo -Cqy $OPTS"
else
  [ $test_mode -eq 0 ] && run_traced "odoo_install_repository -boca$odoo_ver $repo -Ooca -UCq $OPTS"
  run_traced "mkdir $tmp_odoo"
  # set -x  #debug
  rsync_module $src_oca $tmp_odoo $repo $opt_xtgy oca
  # set +x  #debug
fi
[ $opt_dry_run -ne 0 -a ! -d $tmp_odoo ] && mkdir -p $tmp_odoo
# sync_tmp_2_tgt $tgtpath $tmp_odoo $repo $opt_xtgy
run_traced "shopt -u dotglob"
